// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: orchestration.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")

package com.buccancs.control

@kotlin.jvm.JvmName("-initializetimeSyncReport")
public inline fun timeSyncReport(block: com.buccancs.control.TimeSyncReportKt.Dsl.() -> kotlin.Unit): com.buccancs.control.TimeSyncReport =
    com.buccancs.control.TimeSyncReportKt.Dsl._create(com.buccancs.control.TimeSyncReport.newBuilder())
        .apply { block() }._build()

/**
 * Protobuf type `com.buccancs.control.TimeSyncReport`
 */
public object TimeSyncReportKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
        private val _builder: com.buccancs.control.TimeSyncReport.Builder
    ) {
        public companion object {
            @kotlin.jvm.JvmSynthetic
            @kotlin.PublishedApi
            internal fun _create(builder: com.buccancs.control.TimeSyncReport.Builder): Dsl =
                Dsl(builder)
        }

        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _build(): com.buccancs.control.TimeSyncReport = _builder.build()

        /**
         * `string device_id = 1;`
         */
        public var deviceId: kotlin.String
            get() = _builder.getDeviceId()
            set(value) {
                _builder.setDeviceId(value)
            }

        /**
         * `string device_id = 1;`
         */
        public fun clearDeviceId() {
            _builder.clearDeviceId()
        }

        /**
         * `double offset_ms = 2;`
         */
        public var offsetMs: kotlin.Double
            get() = _builder.getOffsetMs()
            set(value) {
                _builder.setOffsetMs(value)
            }

        /**
         * `double offset_ms = 2;`
         */
        public fun clearOffsetMs() {
            _builder.clearOffsetMs()
        }

        /**
         * `double round_trip_ms = 3;`
         */
        public var roundTripMs: kotlin.Double
            get() = _builder.getRoundTripMs()
            set(value) {
                _builder.setRoundTripMs(value)
            }

        /**
         * `double round_trip_ms = 3;`
         */
        public fun clearRoundTripMs() {
            _builder.clearRoundTripMs()
        }

        /**
         * `int64 sample_epoch_ms = 4;`
         */
        public var sampleEpochMs: kotlin.Long
            get() = _builder.getSampleEpochMs()
            set(value) {
                _builder.setSampleEpochMs(value)
            }

        /**
         * `int64 sample_epoch_ms = 4;`
         */
        public fun clearSampleEpochMs() {
            _builder.clearSampleEpochMs()
        }
    }
}

@kotlin.jvm.JvmSynthetic
public inline fun com.buccancs.control.TimeSyncReport.copy(block: `com.buccancs.control`.TimeSyncReportKt.Dsl.() -> kotlin.Unit): com.buccancs.control.TimeSyncReport =
    `com.buccancs.control`.TimeSyncReportKt.Dsl._create(this.toBuilder()).apply { block() }._build()

