// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: orchestration.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.buccancs.control

@kotlin.jvm.JvmName("-initializesensorSampleBatch")
public inline fun sensorSampleBatch(block: com.buccancs.control.SensorSampleBatchKt.Dsl.() -> kotlin.Unit): com.buccancs.control.SensorSampleBatch =
  com.buccancs.control.SensorSampleBatchKt.Dsl._create(com.buccancs.control.SensorSampleBatch.newBuilder()).apply { block() }._build()
public object SensorSampleBatchKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.buccancs.control.SensorSampleBatch.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.buccancs.control.SensorSampleBatch.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.buccancs.control.SensorSampleBatch = _builder.build()

        public var session: com.buccancs.control.SessionIdentifier
      get() = _builder.getSession()
      set(value) {
        _builder.setSession(value)
      }
        public fun clearSession() {
      _builder.clearSession()
    }
        public fun hasSession(): kotlin.Boolean {
      return _builder.hasSession()
    }

        public var deviceId: kotlin.String
      get() = _builder.getDeviceId()
      set(value) {
        _builder.setDeviceId(value)
      }
        public fun clearDeviceId() {
      _builder.clearDeviceId()
    }

        public var streamId: kotlin.String
      get() = _builder.getStreamId()
      set(value) {
        _builder.setStreamId(value)
      }
        public fun clearStreamId() {
      _builder.clearStreamId()
    }

        public var sampleRateHz: kotlin.Double
      get() = _builder.getSampleRateHz()
      set(value) {
        _builder.setSampleRateHz(value)
      }
        public fun clearSampleRateHz() {
      _builder.clearSampleRateHz()
    }

        @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class SamplesProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
         public val samples: com.google.protobuf.kotlin.DslList<com.buccancs.control.SensorSample, SamplesProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getSamplesList()
      )
        @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addSamples")
    public fun com.google.protobuf.kotlin.DslList<com.buccancs.control.SensorSample, SamplesProxy>.add(value: com.buccancs.control.SensorSample) {
      _builder.addSamples(value)
    }
        @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignSamples")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<com.buccancs.control.SensorSample, SamplesProxy>.plusAssign(value: com.buccancs.control.SensorSample) {
      add(value)
    }
        @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllSamples")
    public fun com.google.protobuf.kotlin.DslList<com.buccancs.control.SensorSample, SamplesProxy>.addAll(values: kotlin.collections.Iterable<com.buccancs.control.SensorSample>) {
      _builder.addAllSamples(values)
    }
        @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllSamples")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<com.buccancs.control.SensorSample, SamplesProxy>.plusAssign(values: kotlin.collections.Iterable<com.buccancs.control.SensorSample>) {
      addAll(values)
    }
        @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setSamples")
    public operator fun com.google.protobuf.kotlin.DslList<com.buccancs.control.SensorSample, SamplesProxy>.set(index: kotlin.Int, value: com.buccancs.control.SensorSample) {
      _builder.setSamples(index, value)
    }
        @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearSamples")
    public fun com.google.protobuf.kotlin.DslList<com.buccancs.control.SensorSample, SamplesProxy>.clear() {
      _builder.clearSamples()
    }


        public var endOfStream: kotlin.Boolean
      get() = _builder.getEndOfStream()
      set(value) {
        _builder.setEndOfStream(value)
      }
        public fun clearEndOfStream() {
      _builder.clearEndOfStream()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.buccancs.control.SensorSampleBatch.copy(block: `com.buccancs.control`.SensorSampleBatchKt.Dsl.() -> kotlin.Unit): com.buccancs.control.SensorSampleBatch =
  `com.buccancs.control`.SensorSampleBatchKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.buccancs.control.SensorSampleBatchOrBuilder.sessionOrNull: com.buccancs.control.SessionIdentifier?
  get() = if (hasSession()) getSession() else null

