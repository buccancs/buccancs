// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: orchestration.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.buccancs.control

@kotlin.jvm.JvmName("-initializestartSessionRequest")
public inline fun startSessionRequest(block: com.buccancs.control.StartSessionRequestKt.Dsl.() -> kotlin.Unit): com.buccancs.control.StartSessionRequest =
  com.buccancs.control.StartSessionRequestKt.Dsl._create(com.buccancs.control.StartSessionRequest.newBuilder()).apply { block() }._build()
public object StartSessionRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.buccancs.control.StartSessionRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.buccancs.control.StartSessionRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.buccancs.control.StartSessionRequest = _builder.build()

        public var session: com.buccancs.control.SessionIdentifier
      get() = _builder.getSession()
      set(value) {
        _builder.setSession(value)
      }
        public fun clearSession() {
      _builder.clearSession()
    }
        public fun hasSession(): kotlin.Boolean {
      return _builder.hasSession()
    }

        public var scheduledEpochMs: kotlin.Long
      get() = _builder.getScheduledEpochMs()
      set(value) {
        _builder.setScheduledEpochMs(value)
      }
        public fun clearScheduledEpochMs() {
      _builder.clearScheduledEpochMs()
    }

        public var operatorId: kotlin.String
      get() = _builder.getOperatorId()
      set(value) {
        _builder.setOperatorId(value)
      }
        public fun clearOperatorId() {
      _builder.clearOperatorId()
    }

        @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class SubjectIdsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
        public val subjectIds: com.google.protobuf.kotlin.DslList<kotlin.String, SubjectIdsProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getSubjectIdsList()
      )
        @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addSubjectIds")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, SubjectIdsProxy>.add(value: kotlin.String) {
      _builder.addSubjectIds(value)
    }
        @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignSubjectIds")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, SubjectIdsProxy>.plusAssign(value: kotlin.String) {
      add(value)
    }
        @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllSubjectIds")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, SubjectIdsProxy>.addAll(values: kotlin.collections.Iterable<kotlin.String>) {
      _builder.addAllSubjectIds(values)
    }
        @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllSubjectIds")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, SubjectIdsProxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.String>) {
      addAll(values)
    }
        @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setSubjectIds")
    public operator fun com.google.protobuf.kotlin.DslList<kotlin.String, SubjectIdsProxy>.set(index: kotlin.Int, value: kotlin.String) {
      _builder.setSubjectIds(index, value)
    }    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearSubjectIds")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, SubjectIdsProxy>.clear() {
      _builder.clearSubjectIds()
    }}
}
@kotlin.jvm.JvmSynthetic
public inline fun com.buccancs.control.StartSessionRequest.copy(block: `com.buccancs.control`.StartSessionRequestKt.Dsl.() -> kotlin.Unit): com.buccancs.control.StartSessionRequest =
  `com.buccancs.control`.StartSessionRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.buccancs.control.StartSessionRequestOrBuilder.sessionOrNull: com.buccancs.control.SessionIdentifier?
  get() = if (hasSession()) getSession() else null

