// Summary for: /mnt/c/dev/buccancs/external/ShimmerCapturePure/sources/javax/vecmath/Vector2f.java
// Size: 1784 bytes
// Modified: 2025-10-21 16:32:04.493543100 +0100

package javax.vecmath;

import java.io.Serializable;

/* loaded from: classes4.dex */
public class Vector2f extends Tuple2f implements Serializable {
    static final long serialVersionUID = -2168194326883512320L;

    public Vector2f(float f, float f2) {
        super(f, f2);
    }

    public Vector2f(float[] fArr) {
        super(fArr);
    }

    public Vector2f(Vector2f vector2f) {
        super(vector2f);
    }

    public Vector2f(Vector2d vector2d) {
        super(vector2d);
    }

    public Vector2f(Tuple2f tuple2f) {
        super(tuple2f);
    }

    public Vector2f(Tuple2d tuple2d) {
        super(tuple2d);
    }

    public Vector2f() {
    }

    public final float dot(Vector2f vector2f) {
        return (this.x * vector2f.x) + (this.y * vector2f.y);
    }

    public final float length() {
        return (float) Math.sqrt((this.x * this.x) + (this.y * this.y));
    }

    public final float lengthSquared() {
        return (this.x * this.x) + (this.y * this.y);
    }

    public final void normalize(Vector2f vector2f) {
        float fSqrt = (float) (1.0d / Math.sqrt((vector2f.x * vector2f.x) + (vector2f.y * vector2f.y)));
        this.x = vector2f.x * fSqrt;
        this.y = vector2f.y * fSqrt;
    }

    public final void normalize() {
        float fSqrt = (float) (1.0d / Math.sqrt((this.x * this.x) + (this.y * this.y)));
        this.x *= fSqrt;
        this.y *= fSqrt;
    }

    public final float angle(Vector2f vector2f) {
        double dDot = dot(vector2f) / (length() * vector2f.length());
        if (dDot < -1.0d) {
            dDot = -1.0d;
        }
        if (dDot > 1.0d) {
            dDot = 1.0d;
        }
        return (float) Math.acos(dDot);
    }
}
