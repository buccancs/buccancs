// Summary for: /mnt/c/dev/buccancs/external/ShimmerCapturePure/sources/org/jtransforms/fft/FloatFFT_1D.java
// Size: 358639 bytes
// Modified: 2025-10-21 16:32:09.212645400 +0100

package org.jtransforms.fft;

import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.commons.math3.util.FastMath;
import org.jtransforms.utils.CommonUtils;
import pl.edu.icm.jlargearrays.ConcurrencyUtils;
import pl.edu.icm.jlargearrays.FloatLargeArray;
import pl.edu.icm.jlargearrays.LargeArray;
import pl.edu.icm.jlargearrays.LargeArrayUtils;
import pl.edu.icm.jlargearrays.LongLargeArray;

/* loaded from: classes2.dex */
public final class FloatFFT_1D {
    private static final float PI = 3.1415927f;
    private static final float TWO_PI = 6.2831855f;
    private static final int[] factors = {4, 2, 3, 5};
    private float[] bk1;
    private FloatLargeArray bk1l;
    private float[] bk2;
    private FloatLargeArray bk2l;
    private int[] ip;
    private LongLargeArray ipl;
    private int n;
    private int nBluestein;
    private long nBluesteinl;
    private int nc;
    private long ncl;
    private long nl;
    private int nw;
    private long nwl;
    private Plans plan;
    private boolean useLargeArrays;
    private float[] w;
    private FloatLargeArray wl;
    private float[] wtable;
    private float[] wtable_r;
    private FloatLargeArray wtable_rl;
    private FloatLargeArray wtablel;

    private enum Plans {
        SPLIT_RADIX,
        MIXED_RADIX,
        BLUESTEIN
    }

    public FloatFFT_1D(long j) {
        if (j < 1) {
            throw new IllegalArgumentException("n must be greater than 0");
        }
        boolean z = CommonUtils.isUseLargeArrays() || j * 2 > ((long) LargeArray.getMaxSizeOf32bitArray());
        this.useLargeArrays = z;
        this.n = (int) j;
        this.nl = j;
        if (!z) {
            if (CommonUtils.isPowerOf2(j)) {
                this.plan = Plans.SPLIT_RADIX;
                int[] iArr = new int[((int) FastMath.ceil((1 << (((int) (FastMath.log(j + 0.5f) / FastMath.log(2.0d))) / 2)) + 2)) + 2];
                this.ip = iArr;
                int i = this.n;
                float[] fArr = new float[i];
                this.w = fArr;
                int i2 = (i * 2) >> 2;
                this.nw = i2;
                CommonUtils.makewt(i2, iArr, fArr);
                int i3 = this.n >> 2;
                this.nc = i3;
                CommonUtils.makect(i3, this.w, this.nw, this.ip);
                return;
            }
            if (CommonUtils.getReminder(j, factors) >= 211) {
                this.plan = Plans.BLUESTEIN;
                int iNextPow2 = CommonUtils.nextPow2((this.n * 2) - 1);
                this.nBluestein = iNextPow2;
                this.bk1 = new float[iNextPow2 * 2];
                this.bk2 = new float[iNextPow2 * 2];
                int[] iArr2 = new int[((int) FastMath.ceil((1 << (((int) (FastMath.log(iNextPow2 + 0.5f) / FastMath.log(2.0d))) / 2)) + 2)) + 2];
                this.ip = iArr2;
                int i4 = this.nBluestein;
                float[] fArr2 = new float[i4];
                this.w = fArr2;
                int i5 = (i4 * 2) >> 2;
                this.nw = i5;
                CommonUtils.makewt(i5, iArr2, fArr2);
                int i6 = this.nBluestein >> 2;
                this.nc = i6;
                CommonUtils.makect(i6, this.w, this.nw, this.ip);
                bluesteini();
                return;
            }
            this.plan = Plans.MIXED_RADIX;
            int i7 = this.n;
            this.wtable = new float[(i7 * 4) + 15];
            this.wtable_r = new float[(i7 * 2) + 15];
            cffti();
            rffti();
            return;
        }
        if (CommonUtils.isPowerOf2(j)) {
            this.plan = Plans.SPLIT_RADIX;
            this.ipl = new LongLargeArray(((long) FastMath.ceil((1 << ((int) (((long) (FastMath.log(this.nl + 0.5f) / FastMath.log(2.0d))) / 2))) + 2)) + 2);
            FloatLargeArray floatLargeArray = new FloatLargeArray(this.nl);
            this.wl = floatLargeArray;
            long j2 = (this.nl * 2) >> 2;
            this.nwl = j2;
            CommonUtils.makewt(j2, this.ipl, floatLargeArray);
            long j3 = this.nl >> 2;
            this.ncl = j3;
            CommonUtils.makect(j3, this.wl, this.nwl, this.ipl);
            return;
        }
        if (CommonUtils.getReminder(this.nl, factors) >= 211) {
            this.plan = Plans.BLUESTEIN;
            this.nBluesteinl = CommonUtils.nextPow2((this.nl * 2) - 1);
            this.bk1l = new FloatLargeArray(this.nBluesteinl * 2);
            this.bk2l = new FloatLargeArray(this.nBluesteinl * 2);
            this.ipl = new LongLargeArray(((long) FastMath.ceil((1 << ((int) (((long) (FastMath.log(this.nBluesteinl + 0.5f) / FastMath.log(2.0d))) / 2))) + 2)) + 2);
            FloatLargeArray floatLargeArray2 = new FloatLargeArray(this.nBluesteinl);
            this.wl = floatLargeArray2;
            long j4 = (this.nBluesteinl * 2) >> 2;
            this.nwl = j4;
            CommonUtils.makewt(j4, this.ipl, floatLargeArray2);
            long j5 = this.nBluesteinl >> 2;
            this.ncl = j5;
            CommonUtils.makect(j5, this.wl, this.nwl, this.ipl);
            bluesteinil();
            return;
        }
        this.plan = Plans.MIXED_RADIX;
        this.wtablel = new FloatLargeArray((this.nl * 4) + 15);
        this.wtable_rl = new FloatLargeArray((this.nl * 2) + 15);
        cfftil();
        rfftil();
    }

    public void complexForward(float[] fArr) {
        complexForward(fArr, 0);
    }

    public void complexForward(FloatLargeArray floatLargeArray) {
        complexForward(floatLargeArray, 0L);
    }

    public void complexForward(float[] fArr, int i) {
        if (this.useLargeArrays) {
            complexForward(new FloatLargeArray(fArr), i);
            return;
        }
        if (this.n == 1) {
            return;
        }
        int i2 = AnonymousClass29.$SwitchMap$org$jtransforms$fft$FloatFFT_1D$Plans[this.plan.ordinal()];
        if (i2 == 1) {
            CommonUtils.cftbsub(this.n * 2, fArr, i, this.ip, this.nw, this.w);
        } else if (i2 == 2) {
            cfftf(fArr, i, -1);
        } else {
            if (i2 != 3) {
                return;
            }
            bluestein_complex(fArr, i, -1);
        }
    }

    /* renamed from: org.jtransforms.fft.FloatFFT_1D$29, reason: invalid class name */
    static /* synthetic */ class AnonymousClass29 {
        static final /* synthetic */ int[] $SwitchMap$org$jtransforms$fft$FloatFFT_1D$Plans;

        static {
            int[] iArr = new int[Plans.values().length];
            $SwitchMap$org$jtransforms$fft$FloatFFT_1D$Plans = iArr;
            try {
                iArr[Plans.SPLIT_RADIX.ordinal()] = 1;
            } catch (NoSuchFieldError unused) {
            }
            try {
                $SwitchMap$org$jtransforms$fft$FloatFFT_1D$Plans[Plans.MIXED_RADIX.ordinal()] = 2;
            } catch (NoSuchFieldError unused2) {
            }
            try {
                $SwitchMap$org$jtransforms$fft$FloatFFT_1D$Plans[Plans.BLUESTEIN.ordinal()] = 3;
            } catch (NoSuchFieldError unused3) {
            }
        }
    }

    public void complexForward(FloatLargeArray floatLargeArray, long j) {
        if (!this.useLargeArrays) {
            if (!floatLargeArray.isLarge() && !floatLargeArray.isConstant() && j < 2147483647L) {
                complexForward(floatLargeArray.getData(), (int) j);
                return;
            }
            throw new IllegalArgumentException("The data array is too big.");
        }
        if (this.nl == 1) {
            return;
        }
        int i = AnonymousClass29.$SwitchMap$org$jtransforms$fft$FloatFFT_1D$Plans[this.plan.ordinal()];
        if (i == 1) {
            CommonUtils.cftbsub(2 * this.nl, floatLargeArray, j, this.ipl, this.nwl, this.wl);
        } else if (i == 2) {
            cfftf(floatLargeArray, j, -1);
        } else {
            if (i != 3) {
                return;
            }
            bluestein_complex(floatLargeArray, j, -1);
        }
    }

    public void complexInverse(float[] fArr, boolean z) {
        complexInverse(fArr, 0, z);
    }

    public void complexInverse(FloatLargeArray floatLargeArray, boolean z) {
        complexInverse(floatLargeArray, 0L, z);
    }

    public void complexInverse(float[] fArr, int i, boolean z) {
        if (this.useLargeArrays) {
            complexInverse(new FloatLargeArray(fArr), i, z);
            return;
        }
        if (this.n == 1) {
            return;
        }
        int i2 = AnonymousClass29.$SwitchMap$org$jtransforms$fft$FloatFFT_1D$Plans[this.plan.ordinal()];
        if (i2 == 1) {
            CommonUtils.cftfsub(this.n * 2, fArr, i, this.ip, this.nw, this.w);
        } else if (i2 == 2) {
            cfftf(fArr, i, 1);
        } else if (i2 == 3) {
            bluestein_complex(fArr, i, 1);
        }
        if (z) {
            int i3 = this.n;
            CommonUtils.scale(i3, 1.0f / i3, fArr, i, true);
        }
    }

    public void complexInverse(FloatLargeArray floatLargeArray, long j, boolean z) {
        if (!this.useLargeArrays) {
            if (!floatLargeArray.isLarge() && !floatLargeArray.isConstant() && j < 2147483647L) {
                complexInverse(floatLargeArray.getData(), (int) j, z);
                return;
            }
            throw new IllegalArgumentException("The data array is too big.");
        }
        if (this.nl == 1) {
            return;
        }
        int i = AnonymousClass29.$SwitchMap$org$jtransforms$fft$FloatFFT_1D$Plans[this.plan.ordinal()];
        if (i == 1) {
            CommonUtils.cftfsub(2 * this.nl, floatLargeArray, j, this.ipl, this.nwl, this.wl);
        } else if (i == 2) {
            cfftf(floatLargeArray, j, 1);
        } else if (i == 3) {
            bluestein_complex(floatLargeArray, j, 1);
        }
        if (z) {
            long j2 = this.nl;
            CommonUtils.scale(j2, 1.0f / j2, floatLargeArray, j, true);
        }
    }

    public void realForward(float[] fArr) {
        realForward(fArr, 0);
    }

    public void realForward(FloatLargeArray floatLargeArray) {
        realForward(floatLargeArray, 0L);
    }

    public void realForward(float[] fArr, int i) {
        if (this.useLargeArrays) {
            realForward(new FloatLargeArray(fArr), i);
            return;
        }
        if (this.n == 1) {
            return;
        }
        int i2 = AnonymousClass29.$SwitchMap$org$jtransforms$fft$FloatFFT_1D$Plans[this.plan.ordinal()];
        if (i2 == 1) {
            int i3 = this.n;
            if (i3 > 4) {
                CommonUtils.cftfsub(i3, fArr, i, this.ip, this.nw, this.w);
                CommonUtils.rftfsub(this.n, fArr, i, this.nc, this.w, this.nw);
            } else if (i3 == 4) {
                CommonUtils.cftx020(fArr, i);
            }
            float f = fArr[i];
            int i4 = i + 1;
            float f2 = fArr[i4];
            fArr[i] = f + f2;
            fArr[i4] = f - f2;
            return;
        }
        if (i2 != 2) {
            if (i2 != 3) {
                return;
            }
            bluestein_real_forward(fArr, i);
            return;
        }
        rfftf(fArr, i);
        for (int i5 = this.n - 1; i5 >= 2; i5--) {
            int i6 = i + i5;
            float f3 = fArr[i6];
            int i7 = i6 - 1;
            fArr[i6] = fArr[i7];
            fArr[i7] = f3;
        }
    }

    public void realForward(FloatLargeArray floatLargeArray, long j) {
        if (!this.useLargeArrays) {
            if (!floatLargeArray.isLarge() && !floatLargeArray.isConstant() && j < 2147483647L) {
                realForward(floatLargeArray.getData(), (int) j);
                return;
            }
            throw new IllegalArgumentException("The data array is too big.");
        }
        if (this.nl == 1) {
            return;
        }
        int i = AnonymousClass29.$SwitchMap$org$jtransforms$fft$FloatFFT_1D$Plans[this.plan.ordinal()];
        if (i == 1) {
            long j2 = this.nl;
            if (j2 > 4) {
                CommonUtils.cftfsub(j2, floatLargeArray, j, this.ipl, this.nwl, this.wl);
                CommonUtils.rftfsub(this.nl, floatLargeArray, j, this.ncl, this.wl, this.nwl);
            } else if (j2 == 4) {
                CommonUtils.cftx020(floatLargeArray, j);
            }
            long j3 = j + 1;
            float f = floatLargeArray.getFloat(j) - floatLargeArray.getFloat(j3);
            floatLargeArray.setFloat(j, floatLargeArray.getFloat(j) + floatLargeArray.getFloat(j3));
            floatLargeArray.setFloat(j3, f);
            return;
        }
        if (i != 2) {
            if (i != 3) {
                return;
            }
            bluestein_real_forward(floatLargeArray, j);
            return;
        }
        rfftf(floatLargeArray, j);
        long j4 = this.nl;
        while (true) {
            j4--;
            if (j4 < 2) {
                return;
            }
            long j5 = j + j4;
            float f2 = floatLargeArray.getFloat(j5);
            long j6 = j5 - 1;
            floatLargeArray.setFloat(j5, floatLargeArray.getFloat(j6));
            floatLargeArray.setFloat(j6, f2);
        }
    }

    public void realForwardFull(float[] fArr) {
        realForwardFull(fArr, 0);
    }

    public void realForwardFull(FloatLargeArray floatLargeArray) {
        realForwardFull(floatLargeArray, 0L);
    }

    public void realForwardFull(final float[] fArr, final int i) {
        int i2;
        if (this.useLargeArrays) {
            realForwardFull(new FloatLargeArray(fArr), i);
            return;
        }
        final int i3 = this.n * 2;
        int i4 = AnonymousClass29.$SwitchMap$org$jtransforms$fft$FloatFFT_1D$Plans[this.plan.ordinal()];
        if (i4 == 1) {
            realForward(fArr, i);
            int numberOfThreads = ConcurrencyUtils.getNumberOfThreads();
            if (numberOfThreads > 1 && this.n / 2 > CommonUtils.getThreadsBeginN_1D_FFT_2Threads()) {
                Future[] futureArr = new Future[numberOfThreads];
                int i5 = (this.n / 2) / numberOfThreads;
                int i6 = 0;
                while (i6 < numberOfThreads) {
                    final int i7 = i6 * i5;
                    final int i8 = i6 == numberOfThreads + (-1) ? this.n / 2 : i7 + i5;
                    int i9 = i6;
                    Future[] futureArr2 = futureArr;
                    futureArr2[i9] = ConcurrencyUtils.submit(new Runnable() { // from class: org.jtransforms.fft.FloatFFT_1D.1
                        @Override // java.lang.Runnable
                        public void run() {
                            for (int i10 = i7; i10 < i8; i10++) {
                                int i11 = i10 * 2;
                                int i12 = i;
                                int i13 = i3;
                                int i14 = ((i13 - i11) % i13) + i12;
                                float[] fArr2 = fArr;
                                fArr2[i14] = fArr2[i12 + i11];
                                fArr2[i14 + 1] = -fArr2[i12 + i11 + 1];
                            }
                        }
                    });
                    i6 = i9 + 1;
                    futureArr = futureArr2;
                }
                try {
                    ConcurrencyUtils.waitForCompletion(futureArr);
                } catch (InterruptedException e) {
                    Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e);
                } catch (ExecutionException e2) {
                    Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e2);
                }
            } else {
                for (int i10 = 0; i10 < this.n / 2; i10++) {
                    int i11 = i10 * 2;
                    int i12 = ((i3 - i11) % i3) + i;
                    int i13 = i11 + i;
                    fArr[i12] = fArr[i13];
                    fArr[i12 + 1] = -fArr[i13 + 1];
                }
            }
            int i14 = i + 1;
            fArr[this.n + i] = -fArr[i14];
            fArr[i14] = 0.0f;
            return;
        }
        if (i4 != 2) {
            if (i4 != 3) {
                return;
            }
            bluestein_real_full(fArr, i, -1);
            return;
        }
        rfftf(fArr, i);
        int i15 = this.n;
        if (i15 % 2 == 0) {
            i2 = i15 / 2;
        } else {
            i2 = (i15 + 1) / 2;
        }
        for (int i16 = 1; i16 < i2; i16++) {
            int i17 = i16 * 2;
            int i18 = (i + i3) - i17;
            int i19 = i17 + i;
            fArr[i18 + 1] = -fArr[i19];
            fArr[i18] = fArr[i19 - 1];
        }
        int i20 = 1;
        while (true) {
            int i21 = this.n;
            if (i20 < i21) {
                int i22 = (i21 + i) - i20;
                int i23 = i22 + 1;
                float f = fArr[i23];
                fArr[i23] = fArr[i22];
                fArr[i22] = f;
                i20++;
            } else {
                fArr[i + 1] = 0.0f;
                return;
            }
        }
    }

    public void realForwardFull(final FloatLargeArray floatLargeArray, final long j) {
        long j2;
        if (!this.useLargeArrays) {
            if (!floatLargeArray.isLarge() && !floatLargeArray.isConstant() && j < 2147483647L) {
                realForwardFull(floatLargeArray.getData(), (int) j);
                return;
            }
            throw new IllegalArgumentException("The data array is too big.");
        }
        final long j3 = this.nl * 2;
        int i = AnonymousClass29.$SwitchMap$org$jtransforms$fft$FloatFFT_1D$Plans[this.plan.ordinal()];
        if (i == 1) {
            realForward(floatLargeArray, j);
            int numberOfThreads = ConcurrencyUtils.getNumberOfThreads();
            if (numberOfThreads <= 1 || this.nl / 2 <= CommonUtils.getThreadsBeginN_1D_FFT_2Threads()) {
                for (long j4 = 0; j4 < this.nl / 2; j4++) {
                    long j5 = j4 * 2;
                    long j6 = ((j3 - j5) % j3) + j;
                    long j7 = j5 + j;
                    floatLargeArray.setFloat(j6, floatLargeArray.getFloat(j7));
                    floatLargeArray.setFloat(j6 + 1, -floatLargeArray.getFloat(j7 + 1));
                }
            } else {
                Future[] futureArr = new Future[numberOfThreads];
                long j8 = (this.nl / 2) / numberOfThreads;
                int i2 = 0;
                while (i2 < numberOfThreads) {
                    final long j9 = i2 * j8;
                    final long j10 = i2 == numberOfThreads + (-1) ? this.nl / 2 : j9 + j8;
                    Future[] futureArr2 = futureArr;
                    int i3 = i2;
                    futureArr2[i3] = ConcurrencyUtils.submit(new Runnable() { // from class: org.jtransforms.fft.FloatFFT_1D.2
                        @Override // java.lang.Runnable
                        public void run() {
                            for (long j11 = j9; j11 < j10; j11++) {
                                long j12 = 2 * j11;
                                long j13 = j;
                                long j14 = j3;
                                long j15 = ((j14 - j12) % j14) + j13;
                                FloatLargeArray floatLargeArray2 = floatLargeArray;
                                floatLargeArray2.setFloat(j15, floatLargeArray2.getFloat(j13 + j12));
                                FloatLargeArray floatLargeArray3 = floatLargeArray;
                                floatLargeArray3.setFloat(j15 + 1, -floatLargeArray3.getFloat(j + j12 + 1));
                            }
                        }
                    });
                    i2 = i3 + 1;
                    futureArr = futureArr2;
                }
                try {
                    ConcurrencyUtils.waitForCompletion(futureArr);
                } catch (InterruptedException e) {
                    Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e);
                } catch (ExecutionException e2) {
                    Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e2);
                }
            }
            long j11 = j + 1;
            floatLargeArray.setFloat(this.nl + j, -floatLargeArray.getFloat(j11));
            floatLargeArray.setFloat(j11, 0.0f);
            return;
        }
        if (i != 2) {
            if (i != 3) {
                return;
            }
            bluestein_real_full(floatLargeArray, j, -1L);
            return;
        }
        rfftf(floatLargeArray, j);
        long j12 = this.nl;
        if (j12 % 2 == 0) {
            j2 = j12 / 2;
        } else {
            j2 = (j12 + 1) / 2;
        }
        for (long j13 = 1; j13 < j2; j13++) {
            long j14 = j13 * 2;
            long j15 = (j + j3) - j14;
            long j16 = j14 + j;
            floatLargeArray.setFloat(j15 + 1, -floatLargeArray.getFloat(j16));
            floatLargeArray.setFloat(j15, floatLargeArray.getFloat(j16 - 1));
        }
        long j17 = 1;
        while (true) {
            long j18 = this.nl;
            if (j17 < j18) {
                long j19 = (j18 + j) - j17;
                long j20 = j19 + 1;
                float f = floatLargeArray.getFloat(j20);
                floatLargeArray.setFloat(j20, floatLargeArray.getFloat(j19));
                floatLargeArray.setFloat(j19, f);
                j17++;
            } else {
                floatLargeArray.setFloat(j + 1, 0.0f);
                return;
            }
        }
    }

    public void realInverse(float[] fArr, boolean z) {
        realInverse(fArr, 0, z);
    }

    public void realInverse(FloatLargeArray floatLargeArray, boolean z) {
        realInverse(floatLargeArray, 0L, z);
    }

    public void realInverse(float[] fArr, int i, boolean z) {
        if (this.useLargeArrays) {
            realInverse(new FloatLargeArray(fArr), i, z);
            return;
        }
        if (this.n == 1) {
            return;
        }
        int i2 = AnonymousClass29.$SwitchMap$org$jtransforms$fft$FloatFFT_1D$Plans[this.plan.ordinal()];
        if (i2 == 1) {
            int i3 = i + 1;
            float f = (fArr[i] - fArr[i3]) * 0.5f;
            fArr[i3] = f;
            fArr[i] = fArr[i] - f;
            int i4 = this.n;
            if (i4 > 4) {
                CommonUtils.rftfsub(i4, fArr, i, this.nc, this.w, this.nw);
                CommonUtils.cftbsub(this.n, fArr, i, this.ip, this.nw, this.w);
            } else if (i4 == 4) {
                CommonUtils.cftxc020(fArr, i);
            }
            if (z) {
                int i5 = this.n;
                CommonUtils.scale(i5, 1.0f / (i5 / 2.0f), fArr, i, false);
                return;
            }
            return;
        }
        if (i2 != 2) {
            if (i2 != 3) {
                return;
            }
            bluestein_real_inverse(fArr, i);
            if (z) {
                int i6 = this.n;
                CommonUtils.scale(i6, 1.0f / i6, fArr, i, false);
                return;
            }
            return;
        }
        for (int i7 = 2; i7 < this.n; i7++) {
            int i8 = i + i7;
            int i9 = i8 - 1;
            float f2 = fArr[i9];
            fArr[i9] = fArr[i8];
            fArr[i8] = f2;
        }
        rfftb(fArr, i);
        if (z) {
            int i10 = this.n;
            CommonUtils.scale(i10, 1.0f / i10, fArr, i, false);
        }
    }

    public void realInverse(FloatLargeArray floatLargeArray, long j, boolean z) {
        if (!this.useLargeArrays) {
            if (!floatLargeArray.isLarge() && !floatLargeArray.isConstant() && j < 2147483647L) {
                realInverse(floatLargeArray.getData(), (int) j, z);
                return;
            }
            throw new IllegalArgumentException("The data array is too big.");
        }
        if (this.nl == 1) {
            return;
        }
        int i = AnonymousClass29.$SwitchMap$org$jtransforms$fft$FloatFFT_1D$Plans[this.plan.ordinal()];
        if (i == 1) {
            long j2 = j + 1;
            floatLargeArray.setFloat(j2, (floatLargeArray.getFloat(j) - floatLargeArray.getFloat(j2)) * 0.5f);
            floatLargeArray.setFloat(j, floatLargeArray.getFloat(j) - floatLargeArray.getFloat(j2));
            long j3 = this.nl;
            if (j3 > 4) {
                CommonUtils.rftfsub(j3, floatLargeArray, j, this.ncl, this.wl, this.nwl);
                CommonUtils.cftbsub(this.nl, floatLargeArray, j, this.ipl, this.nwl, this.wl);
            } else if (j3 == 4) {
                CommonUtils.cftxc020(floatLargeArray, j);
            }
            if (z) {
                long j4 = this.nl;
                CommonUtils.scale(j4, 1.0f / (j4 / 2.0f), floatLargeArray, j, false);
                return;
            }
            return;
        }
        if (i != 2) {
            if (i != 3) {
                return;
            }
            bluestein_real_inverse(floatLargeArray, j);
            if (z) {
                long j5 = this.nl;
                CommonUtils.scale(j5, 1.0f / j5, floatLargeArray, j, false);
                return;
            }
            return;
        }
        for (long j6 = 2; j6 < this.nl; j6++) {
            long j7 = j + j6;
            long j8 = j7 - 1;
            float f = floatLargeArray.getFloat(j8);
            floatLargeArray.setFloat(j8, floatLargeArray.getFloat(j7));
            floatLargeArray.setFloat(j7, f);
        }
        rfftb(floatLargeArray, j);
        if (z) {
            long j9 = this.nl;
            CommonUtils.scale(j9, 1.0f / j9, floatLargeArray, j, false);
        }
    }

    public void realInverseFull(float[] fArr, boolean z) {
        realInverseFull(fArr, 0, z);
    }

    public void realInverseFull(FloatLargeArray floatLargeArray, boolean z) {
        realInverseFull(floatLargeArray, 0L, z);
    }

    public void realInverseFull(final float[] fArr, final int i, boolean z) {
        int i2;
        if (this.useLargeArrays) {
            realInverseFull(new FloatLargeArray(fArr), i, z);
            return;
        }
        final int i3 = this.n * 2;
        int i4 = AnonymousClass29.$SwitchMap$org$jtransforms$fft$FloatFFT_1D$Plans[this.plan.ordinal()];
        if (i4 == 1) {
            realInverse2(fArr, i, z);
            int numberOfThreads = ConcurrencyUtils.getNumberOfThreads();
            if (numberOfThreads > 1 && this.n / 2 > CommonUtils.getThreadsBeginN_1D_FFT_2Threads()) {
                Future[] futureArr = new Future[numberOfThreads];
                int i5 = (this.n / 2) / numberOfThreads;
                int i6 = 0;
                while (i6 < numberOfThreads) {
                    final int i7 = i6 * i5;
                    final int i8 = i6 == numberOfThreads + (-1) ? this.n / 2 : i7 + i5;
                    int i9 = i6;
                    Future[] futureArr2 = futureArr;
                    futureArr2[i9] = ConcurrencyUtils.submit(new Runnable() { // from class: org.jtransforms.fft.FloatFFT_1D.3
                        @Override // java.lang.Runnable
                        public void run() {
                            for (int i10 = i7; i10 < i8; i10++) {
                                int i11 = i10 * 2;
                                int i12 = i;
                                int i13 = i3;
                                int i14 = ((i13 - i11) % i13) + i12;
                                float[] fArr2 = fArr;
                                fArr2[i14] = fArr2[i12 + i11];
                                fArr2[i14 + 1] = -fArr2[i12 + i11 + 1];
                            }
                        }
                    });
                    i6 = i9 + 1;
                    futureArr = futureArr2;
                }
                try {
                    ConcurrencyUtils.waitForCompletion(futureArr);
                } catch (InterruptedException e) {
                    Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e);
                } catch (ExecutionException e2) {
                    Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e2);
                }
            } else {
                for (int i10 = 0; i10 < this.n / 2; i10++) {
                    int i11 = i10 * 2;
                    int i12 = ((i3 - i11) % i3) + i;
                    int i13 = i11 + i;
                    fArr[i12] = fArr[i13];
                    fArr[i12 + 1] = -fArr[i13 + 1];
                }
            }
            int i14 = i + 1;
            fArr[this.n + i] = -fArr[i14];
            fArr[i14] = 0.0f;
            return;
        }
        if (i4 != 2) {
            if (i4 != 3) {
                return;
            }
            bluestein_real_full(fArr, i, 1);
            if (z) {
                int i15 = this.n;
                CommonUtils.scale(i15, 1.0f / i15, fArr, i, true);
                return;
            }
            return;
        }
        rfftf(fArr, i);
        if (z) {
            int i16 = this.n;
            CommonUtils.scale(i16, 1.0f / i16, fArr, i, false);
        }
        int i17 = this.n;
        if (i17 % 2 == 0) {
            i2 = i17 / 2;
        } else {
            i2 = (i17 + 1) / 2;
        }
        for (int i18 = 1; i18 < i2; i18++) {
            int i19 = i18 * 2;
            int i20 = i + i19;
            int i21 = (i + i3) - i19;
            float f = -fArr[i20];
            fArr[i20] = f;
            fArr[i21 + 1] = -f;
            fArr[i21] = fArr[i20 - 1];
        }
        int i22 = 1;
        while (true) {
            int i23 = this.n;
            if (i22 < i23) {
                int i24 = (i23 + i) - i22;
                int i25 = i24 + 1;
                float f2 = fArr[i25];
                fArr[i25] = fArr[i24];
                fArr[i24] = f2;
                i22++;
            } else {
                fArr[i + 1] = 0.0f;
                return;
            }
        }
    }

    public void realInverseFull(final FloatLargeArray floatLargeArray, final long j, boolean z) {
        long j2;
        if (!this.useLargeArrays) {
            if (!floatLargeArray.isLarge() && !floatLargeArray.isConstant() && j < 2147483647L) {
                realInverseFull(floatLargeArray.getData(), (int) j, z);
                return;
            }
            throw new IllegalArgumentException("The data array is too big.");
        }
        final long j3 = this.nl * 2;
        int i = AnonymousClass29.$SwitchMap$org$jtransforms$fft$FloatFFT_1D$Plans[this.plan.ordinal()];
        if (i == 1) {
            realInverse2(floatLargeArray, j, z);
            int numberOfThreads = ConcurrencyUtils.getNumberOfThreads();
            if (numberOfThreads <= 1 || this.nl / 2 <= CommonUtils.getThreadsBeginN_1D_FFT_2Threads()) {
                for (long j4 = 0; j4 < this.nl / 2; j4++) {
                    long j5 = j4 * 2;
                    long j6 = ((j3 - j5) % j3) + j;
                    long j7 = j5 + j;
                    floatLargeArray.setFloat(j6, floatLargeArray.getFloat(j7));
                    floatLargeArray.setFloat(j6 + 1, -floatLargeArray.getFloat(j7 + 1));
                }
            } else {
                Future[] futureArr = new Future[numberOfThreads];
                long j8 = (this.nl / 2) / numberOfThreads;
                int i2 = 0;
                while (i2 < numberOfThreads) {
                    final long j9 = i2 * j8;
                    final long j10 = i2 == numberOfThreads + (-1) ? this.nl / 2 : j9 + j8;
                    Future[] futureArr2 = futureArr;
                    int i3 = i2;
                    futureArr2[i3] = ConcurrencyUtils.submit(new Runnable() { // from class: org.jtransforms.fft.FloatFFT_1D.4
                        @Override // java.lang.Runnable
                        public void run() {
                            for (long j11 = j9; j11 < j10; j11++) {
                                long j12 = 2 * j11;
                                long j13 = j;
                                long j14 = j3;
                                long j15 = ((j14 - j12) % j14) + j13;
                                FloatLargeArray floatLargeArray2 = floatLargeArray;
                                floatLargeArray2.setFloat(j15, floatLargeArray2.getFloat(j13 + j12));
                                FloatLargeArray floatLargeArray3 = floatLargeArray;
                                floatLargeArray3.setFloat(j15 + 1, -floatLargeArray3.getFloat(j + j12 + 1));
                            }
                        }
                    });
                    i2 = i3 + 1;
                    futureArr = futureArr2;
                }
                try {
                    ConcurrencyUtils.waitForCompletion(futureArr);
                } catch (InterruptedException e) {
                    Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e);
                } catch (ExecutionException e2) {
                    Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e2);
                }
            }
            long j11 = j + 1;
            floatLargeArray.setFloat(this.nl + j, -floatLargeArray.getFloat(j11));
            floatLargeArray.setFloat(j11, 0.0f);
            return;
        }
        if (i != 2) {
            if (i != 3) {
                return;
            }
            bluestein_real_full(floatLargeArray, j, 1L);
            if (z) {
                long j12 = this.nl;
                CommonUtils.scale(j12, 1.0f / j12, floatLargeArray, j, true);
                return;
            }
            return;
        }
        rfftf(floatLargeArray, j);
        if (z) {
            long j13 = this.nl;
            CommonUtils.scale(j13, 1.0f / j13, floatLargeArray, j, false);
        }
        long j14 = this.nl;
        if (j14 % 2 == 0) {
            j2 = j14 / 2;
        } else {
            j2 = (j14 + 1) / 2;
        }
        for (long j15 = 1; j15 < j2; j15++) {
            long j16 = j15 * 2;
            long j17 = j + j16;
            long j18 = (j + j3) - j16;
            floatLargeArray.setFloat(j17, -floatLargeArray.getFloat(j17));
            floatLargeArray.setFloat(j18 + 1, -floatLargeArray.getFloat(j17));
            floatLargeArray.setFloat(j18, floatLargeArray.getFloat(j17 - 1));
        }
        long j19 = 1;
        while (true) {
            long j20 = this.nl;
            if (j19 < j20) {
                long j21 = (j20 + j) - j19;
                long j22 = j21 + 1;
                float f = floatLargeArray.getFloat(j22);
                floatLargeArray.setFloat(j22, floatLargeArray.getFloat(j21));
                floatLargeArray.setFloat(j21, f);
                j19++;
            } else {
                floatLargeArray.setFloat(j + 1, 0.0f);
                return;
            }
        }
    }

    protected void realInverse2(float[] fArr, int i, boolean z) {
        if (this.useLargeArrays) {
            realInverse2(new FloatLargeArray(fArr), i, z);
            return;
        }
        if (this.n == 1) {
            return;
        }
        int i2 = AnonymousClass29.$SwitchMap$org$jtransforms$fft$FloatFFT_1D$Plans[this.plan.ordinal()];
        if (i2 == 1) {
            int i3 = this.n;
            if (i3 > 4) {
                CommonUtils.cftfsub(i3, fArr, i, this.ip, this.nw, this.w);
                CommonUtils.rftbsub(this.n, fArr, i, this.nc, this.w, this.nw);
            } else if (i3 == 4) {
                CommonUtils.cftbsub(i3, fArr, i, this.ip, this.nw, this.w);
            }
            float f = fArr[i];
            int i4 = i + 1;
            float f2 = fArr[i4];
            fArr[i] = f + f2;
            fArr[i4] = f - f2;
            if (z) {
                int i5 = this.n;
                CommonUtils.scale(i5, 1.0f / i5, fArr, i, false);
                return;
            }
            return;
        }
        if (i2 != 2) {
            if (i2 != 3) {
                return;
            }
            bluestein_real_inverse2(fArr, i);
            if (z) {
                int i6 = this.n;
                CommonUtils.scale(i6, 1.0f / i6, fArr, i, false);
                return;
            }
            return;
        }
        rfftf(fArr, i);
        for (int i7 = this.n - 1; i7 >= 2; i7--) {
            int i8 = i + i7;
            float f3 = fArr[i8];
            int i9 = i8 - 1;
            fArr[i8] = fArr[i9];
            fArr[i9] = f3;
        }
        if (z) {
            int i10 = this.n;
            CommonUtils.scale(i10, 1.0f / i10, fArr, i, false);
        }
        int i11 = this.n;
        if (i11 % 2 == 0) {
            int i12 = i11 / 2;
            for (int i13 = 1; i13 < i12; i13++) {
                int i14 = (i13 * 2) + i + 1;
                fArr[i14] = -fArr[i14];
            }
            return;
        }
        int i15 = (i11 - 1) / 2;
        for (int i16 = 0; i16 < i15; i16++) {
            int i17 = (i16 * 2) + i + 1;
            fArr[i17] = -fArr[i17];
        }
    }

    protected void realInverse2(FloatLargeArray floatLargeArray, long j, boolean z) {
        if (!this.useLargeArrays) {
            if (!floatLargeArray.isLarge() && !floatLargeArray.isConstant() && j < 2147483647L) {
                realInverse2(floatLargeArray.getData(), (int) j, z);
                return;
            }
            throw new IllegalArgumentException("The data array is too big.");
        }
        if (this.nl == 1) {
            return;
        }
        int i = AnonymousClass29.$SwitchMap$org$jtransforms$fft$FloatFFT_1D$Plans[this.plan.ordinal()];
        if (i == 1) {
            long j2 = this.nl;
            if (j2 > 4) {
                CommonUtils.cftfsub(j2, floatLargeArray, j, this.ipl, this.nwl, this.wl);
                CommonUtils.rftbsub(this.nl, floatLargeArray, j, this.ncl, this.wl, this.nwl);
            } else if (j2 == 4) {
                CommonUtils.cftbsub(j2, floatLargeArray, j, this.ipl, this.nwl, this.wl);
            }
            long j3 = j + 1;
            float f = floatLargeArray.getFloat(j) - floatLargeArray.getFloat(j3);
            floatLargeArray.setFloat(j, floatLargeArray.getFloat(j) + floatLargeArray.getFloat(j3));
            floatLargeArray.setFloat(j3, f);
            if (z) {
                long j4 = this.nl;
                CommonUtils.scale(j4, 1.0f / j4, floatLargeArray, j, false);
                return;
            }
            return;
        }
        if (i != 2) {
            if (i != 3) {
                return;
            }
            bluestein_real_inverse2(floatLargeArray, j);
            if (z) {
                long j5 = this.nl;
                CommonUtils.scale(j5, 1.0f / j5, floatLargeArray, j, false);
                return;
            }
            return;
        }
        rfftf(floatLargeArray, j);
        long j6 = this.nl;
        while (true) {
            j6--;
            if (j6 < 2) {
                break;
            }
            long j7 = j + j6;
            float f2 = floatLargeArray.getFloat(j7);
            long j8 = j7 - 1;
            floatLargeArray.setFloat(j7, floatLargeArray.getFloat(j8));
            floatLargeArray.setFloat(j8, f2);
        }
        if (z) {
            long j9 = this.nl;
            CommonUtils.scale(j9, 1.0f / j9, floatLargeArray, j, false);
        }
        long j10 = this.nl;
        if (j10 % 2 == 0) {
            long j11 = j10 / 2;
            for (long j12 = 1; j12 < j11; j12++) {
                long j13 = (j12 * 2) + j + 1;
                floatLargeArray.setFloat(j13, -floatLargeArray.getFloat(j13));
            }
            return;
        }
        long j14 = (j10 - 1) / 2;
        for (long j15 = 0; j15 < j14; j15++) {
            long j16 = (j15 * 2) + j + 1;
            floatLargeArray.setFloat(j16, -floatLargeArray.getFloat(j16));
        }
    }

    void cffti(int i, int i2) {
        int i3;
        int i4 = i;
        int i5 = 1;
        if (i4 == 1) {
            return;
        }
        int i6 = i4 * 2;
        int i7 = i4 * 4;
        int i8 = i4;
        int i9 = 0;
        int i10 = 0;
        int i11 = 0;
        loop0: while (true) {
            int i12 = i9 + 1;
            i3 = 2;
            i10 = i12 <= 4 ? factors[i9] : i10 + 2;
            while (true) {
                int i13 = i8 / i10;
                if (i8 - (i10 * i13) != 0) {
                    break;
                }
                i11++;
                this.wtable[i2 + i11 + 1 + i7] = i10;
                if (i10 == 2 && i11 != 1) {
                    for (int i14 = 2; i14 <= i11; i14++) {
                        float[] fArr = this.wtable;
                        int i15 = i2 + (i11 - i14) + 2 + i7;
                        fArr[i15 + 1] = fArr[i15];
                    }
                    this.wtable[i2 + 2 + i7] = 2.0f;
                }
                if (i13 == 1) {
                    break loop0;
                }
                i4 = i;
                i8 = i13;
            }
            i9 = i12;
        }
        float[] fArr2 = this.wtable;
        float f = i4;
        fArr2[i2 + i7] = f;
        fArr2[i2 + 1 + i7] = i11;
        float f2 = TWO_PI / f;
        int i16 = 1;
        int i17 = 1;
        int i18 = 1;
        while (i16 <= i11) {
            int i19 = (int) this.wtable[i2 + i16 + i5 + i7];
            int i20 = i17 * i19;
            int i21 = i4 / i20;
            int i22 = i21 + i21 + i3;
            int i23 = i19 - 1;
            int i24 = 1;
            int i25 = 0;
            while (i24 <= i23) {
                float[] fArr3 = this.wtable;
                int i26 = i2 + i18;
                fArr3[(i26 - 1) + i6] = 1.0f;
                float f3 = 0.0f;
                fArr3[i26 + i6] = 0.0f;
                int i27 = i25 + i17;
                float f4 = i27 * f2;
                int i28 = i18;
                int i29 = 4;
                while (i29 <= i22) {
                    i28 += 2;
                    f3 += 1.0f;
                    int i30 = i2 + i28 + i6;
                    int i31 = i11;
                    double d = f3 * f4;
                    this.wtable[i30 - 1] = (float) FastMath.cos(d);
                    this.wtable[i30] = (float) FastMath.sin(d);
                    i29 += 2;
                    i27 = i27;
                    i23 = i23;
                    i7 = i7;
                    i11 = i31;
                    i17 = i17;
                    f4 = f4;
                }
                int i32 = i23;
                int i33 = i7;
                int i34 = i11;
                int i35 = i17;
                int i36 = i27;
                if (i19 > 5) {
                    float[] fArr4 = this.wtable;
                    int i37 = i2 + i18 + i6;
                    int i38 = i2 + i28 + i6;
                    fArr4[i37 - 1] = fArr4[i38 - 1];
                    fArr4[i37] = fArr4[i38];
                }
                i24++;
                i25 = i36;
                i18 = i28;
                i23 = i32;
                i7 = i33;
                i11 = i34;
                i17 = i35;
            }
            i16++;
            i4 = i;
            i17 = i20;
            i5 = 1;
            i3 = 2;
        }
    }

    final void cffti() {
        int i;
        int i2;
        int i3 = this.n;
        int i4 = 1;
        if (i3 == 1) {
            return;
        }
        int i5 = i3 * 2;
        int i6 = i3 * 4;
        int i7 = 0;
        int i8 = 0;
        int i9 = 0;
        loop0: while (true) {
            int i10 = i7 + 1;
            i = 2;
            i8 = i10 <= 4 ? factors[i7] : i8 + 2;
            while (true) {
                int i11 = i3 / i8;
                if (i3 - (i8 * i11) != 0) {
                    break;
                }
                i2 = i9 + 1;
                this.wtable[i9 + 2 + i6] = i8;
                if (i8 == 2 && i2 != 1) {
                    for (int i12 = 2; i12 <= i2; i12++) {
                        int i13 = (i2 - i12) + 2 + i6;
                        float[] fArr = this.wtable;
                        fArr[i13 + 1] = fArr[i13];
                    }
                    this.wtable[i6 + 2] = 2.0f;
                }
                if (i11 == 1) {
                    break loop0;
                }
                i3 = i11;
                i9 = i2;
            }
            i7 = i10;
        }
        float[] fArr2 = this.wtable;
        int i14 = this.n;
        fArr2[i6] = i14;
        fArr2[i6 + 1] = i2;
        float f = TWO_PI / i14;
        int i15 = 1;
        int i16 = 1;
        int i17 = 1;
        while (i15 <= i2) {
            i15++;
            int i18 = (int) this.wtable[i15 + i6];
            int i19 = i16 * i18;
            int i20 = this.n / i19;
            int i21 = i20 + i20 + i;
            int i22 = i18 - 1;
            int i23 = 0;
            while (i4 <= i22) {
                float[] fArr3 = this.wtable;
                fArr3[(i17 - 1) + i5] = 1.0f;
                int i24 = i17 + i5;
                float f2 = 0.0f;
                fArr3[i24] = 0.0f;
                int i25 = i23 + i16;
                float f3 = i25 * f;
                int i26 = 4;
                while (i26 <= i21) {
                    i17 += 2;
                    f2 += 1.0f;
                    int i27 = i17 + i5;
                    int i28 = i25;
                    double d = f2 * f3;
                    this.wtable[i27 - 1] = (float) FastMath.cos(d);
                    this.wtable[i27] = (float) FastMath.sin(d);
                    i26 += 2;
                    i16 = i16;
                    i2 = i2;
                    i6 = i6;
                    f = f;
                    i25 = i28;
                    i15 = i15;
                }
                int i29 = i2;
                int i30 = i6;
                int i31 = i25;
                float f4 = f;
                int i32 = i15;
                int i33 = i16;
                if (i18 > 5) {
                    int i34 = i17 + i5;
                    float[] fArr4 = this.wtable;
                    fArr4[i24 - 1] = fArr4[i34 - 1];
                    fArr4[i24] = fArr4[i34];
                }
                i4++;
                i16 = i33;
                i2 = i29;
                i6 = i30;
                f = f4;
                i23 = i31;
                i15 = i32;
                i = 2;
            }
            i16 = i19;
            i4 = 1;
        }
    }

    final void cfftil() {
        long j;
        long j2;
        long j3;
        long j4 = this.nl;
        long j5 = 1;
        if (j4 == 1) {
            return;
        }
        long j6 = 2;
        long j7 = j4 * 2;
        long j8 = 4;
        long j9 = j4 * 4;
        long j10 = 0;
        long j11 = 0;
        long j12 = 0;
        loop0: while (true) {
            long j13 = j10 + j5;
            long j14 = j13 <= j8 ? factors[(int) j10] : j11 + j6;
            while (true) {
                long j15 = j4 / j14;
                if (j4 - (j14 * j15) != 0) {
                    break;
                }
                j = j12 + j5;
                this.wtablel.setFloat(j12 + j6 + j9, j14);
                j2 = 1;
                if (j14 == j6 && j != 1) {
                    long j16 = j6;
                    while (j16 <= j) {
                        long j17 = (j - j16) + j6 + j9;
                        FloatLargeArray floatLargeArray = this.wtablel;
                        floatLargeArray.setFloat(j17 + 1, floatLargeArray.getFloat(j17));
                        j16++;
                        j6 = 2;
                    }
                    this.wtablel.setFloat(j9 + 2, 2.0f);
                }
                if (j15 == 1) {
                    break loop0;
                }
                j4 = j15;
                j5 = 1;
                j12 = j;
                j6 = 2;
                j8 = 4;
            }
            j11 = j14;
            j10 = j13;
        }
        this.wtablel.setFloat(j9, this.nl);
        this.wtablel.setFloat(j9 + 1, j);
        float f = TWO_PI / this.nl;
        long j18 = 1;
        long j19 = 1;
        long j20 = 1;
        while (j18 <= j) {
            long j21 = j18 + j2;
            long j22 = j;
            long j23 = (long) this.wtablel.getFloat(j21 + j9);
            long j24 = j20 * j23;
            long j25 = this.nl / j24;
            long j26 = j25 + j25 + 2;
            long j27 = j23 - j2;
            long j28 = j2;
            long j29 = 0;
            while (j28 <= j27) {
                long j30 = j9;
                long j31 = j22;
                this.wtablel.setFloat((j19 - j2) + j7, 1.0f);
                long j32 = j19 + j7;
                float f2 = 0.0f;
                this.wtablel.setFloat(j32, 0.0f);
                long j33 = j19;
                long j34 = j29 + j20;
                float f3 = j34 * f;
                long j35 = 4;
                while (j35 <= j26) {
                    j33 += 2;
                    f2 += 1.0f;
                    long j36 = j26;
                    long j37 = j33 + j7;
                    long j38 = j20;
                    double d = f2 * f3;
                    this.wtablel.setFloat(j37 - 1, (float) FastMath.cos(d));
                    this.wtablel.setFloat(j37, (float) FastMath.sin(d));
                    j35 += 2;
                    f = f;
                    j26 = j36;
                    f3 = f3;
                    j34 = j34;
                    j20 = j38;
                    j32 = j32;
                }
                float f4 = f;
                long j39 = j26;
                long j40 = j34;
                long j41 = j32;
                long j42 = j20;
                if (j23 > 5) {
                    long j43 = j33 + j7;
                    FloatLargeArray floatLargeArray2 = this.wtablel;
                    j3 = 1;
                    floatLargeArray2.setFloat(j41 - 1, floatLargeArray2.getFloat(j43 - 1));
                    FloatLargeArray floatLargeArray3 = this.wtablel;
                    floatLargeArray3.setFloat(j41, floatLargeArray3.getFloat(j43));
                } else {
                    j3 = 1;
                }
                j28 += j3;
                j2 = j3;
                j22 = j31;
                j9 = j30;
                j19 = j33;
                f = f4;
                j26 = j39;
                j29 = j40;
                j20 = j42;
            }
            j = j22;
            j20 = j24;
            j18 = j21;
        }
    }

    void rffti() {
        int i;
        int i2 = this.n;
        int i3 = 1;
        if (i2 == 1) {
            return;
        }
        int i4 = i2 * 2;
        int i5 = 0;
        int i6 = 0;
        int i7 = 0;
        loop0: while (true) {
            int i8 = i5 + 1;
            i6 = i8 <= 4 ? factors[i5] : i6 + 2;
            while (true) {
                int i9 = i2 / i6;
                if (i2 - (i6 * i9) != 0) {
                    break;
                }
                i = i7 + 1;
                this.wtable_r[i7 + 2 + i4] = i6;
                if (i6 == 2 && i != 1) {
                    for (int i10 = 2; i10 <= i; i10++) {
                        int i11 = (i - i10) + 2 + i4;
                        float[] fArr = this.wtable_r;
                        fArr[i11 + 1] = fArr[i11];
                    }
                    this.wtable_r[i4 + 2] = 2.0f;
                }
                if (i9 == 1) {
                    break loop0;
                }
                i7 = i;
                i2 = i9;
            }
            i5 = i8;
        }
        float[] fArr2 = this.wtable_r;
        int i12 = this.n;
        fArr2[i4] = i12;
        fArr2[i4 + 1] = i;
        float f = TWO_PI / i12;
        if (i7 == 0) {
            return;
        }
        int i13 = 1;
        int i14 = 1;
        int i15 = 0;
        while (i13 <= i7) {
            i13++;
            int i16 = (int) this.wtable_r[i13 + i4];
            int i17 = i14 * i16;
            int i18 = this.n / i17;
            int i19 = i16 - i3;
            int i20 = 1;
            int i21 = 0;
            while (i20 <= i19) {
                i21 += i14;
                float f2 = i21 * f;
                float f3 = 0.0f;
                int i22 = i15;
                int i23 = 3;
                while (i23 <= i18) {
                    i22 += 2;
                    f3 += 1.0f;
                    int i24 = i22 + this.n;
                    int i25 = i13;
                    double d = f3 * f2;
                    this.wtable_r[i24 - 2] = (float) FastMath.cos(d);
                    this.wtable_r[i24 - 1] = (float) FastMath.sin(d);
                    i23 += 2;
                    f = f;
                    i14 = i14;
                    i13 = i25;
                    i19 = i19;
                }
                i15 += i18;
                i20++;
                i19 = i19;
                i3 = 1;
            }
            i14 = i17;
        }
    }

    void rfftil() {
        long j;
        long j2;
        long j3;
        long j4 = this.nl;
        long j5 = 1;
        if (j4 == 1) {
            return;
        }
        long j6 = 2;
        long j7 = j4 * 2;
        long j8 = 0;
        long j9 = 0;
        long j10 = 0;
        long j11 = 0;
        loop0: while (true) {
            long j12 = j9 + j5;
            j10 = j12 <= 4 ? factors[(int) j9] : j10 + j6;
            while (true) {
                long j13 = j4 / j10;
                if (j4 - (j10 * j13) != j8) {
                    break;
                }
                j = j11 + j5;
                this.wtable_rl.setFloat(j11 + j6 + j7, j10);
                if (j10 == j6) {
                    j5 = 1;
                    if (j != 1) {
                        long j14 = j6;
                        while (j14 <= j) {
                            long j15 = (j - j14) + j6 + j7;
                            long j16 = j10;
                            FloatLargeArray floatLargeArray = this.wtable_rl;
                            floatLargeArray.setFloat(j15 + 1, floatLargeArray.getFloat(j15));
                            j14++;
                            j10 = j16;
                            j11 = j11;
                            j6 = 2;
                        }
                        j2 = j10;
                        j3 = j11;
                        this.wtable_rl.setFloat(j7 + 2, 2.0f);
                    } else {
                        j2 = j10;
                        j3 = j11;
                    }
                } else {
                    j2 = j10;
                    j3 = j11;
                    j5 = 1;
                }
                if (j13 == j5) {
                    break loop0;
                }
                j11 = j;
                j4 = j13;
                j10 = j2;
                j6 = 2;
                j8 = 0;
            }
            j9 = j12;
        }
        this.wtable_rl.setFloat(j7, this.nl);
        this.wtable_rl.setFloat(j7 + j5, j);
        float f = TWO_PI / this.nl;
        if (j3 == 0) {
            return;
        }
        long j17 = 0;
        long j18 = 1;
        long j19 = 1;
        while (j19 <= j3) {
            j19++;
            long j20 = (long) this.wtable_rl.getFloat(j19 + j7);
            long j21 = j18 * j20;
            long j22 = j7;
            long j23 = this.nl / j21;
            long j24 = j20 - 1;
            long j25 = j17;
            long j26 = 1;
            long j27 = 0;
            while (j26 <= j24) {
                long j28 = j24;
                long j29 = j27 + j18;
                float f2 = j29 * f;
                float f3 = 0.0f;
                long j30 = 3;
                long j31 = j25;
                while (j30 <= j23) {
                    j31 += 2;
                    f3 += 1.0f;
                    long j32 = j29;
                    long j33 = j31 + this.nl;
                    long j34 = j19;
                    double d = f3 * f2;
                    this.wtable_rl.setFloat(j33 - 2, (float) FastMath.cos(d));
                    this.wtable_rl.setFloat(j33 - 1, (float) FastMath.sin(d));
                    j30 += 2;
                    f = f;
                    j29 = j32;
                    f2 = f2;
                    j18 = j18;
                    j19 = j34;
                    j26 = j26;
                }
                long j35 = j29;
                j25 += j23;
                j26++;
                j24 = j28;
                j27 = j35;
                j18 = j18;
            }
            j17 = j25;
            j18 = j21;
            j7 = j22;
        }
    }

    private void bluesteini() {
        float f = PI / this.n;
        float[] fArr = this.bk1;
        fArr[0] = 1.0f;
        fArr[1] = 0.0f;
        int i = 1;
        int i2 = 0;
        while (true) {
            int i3 = this.n;
            if (i >= i3) {
                break;
            }
            int i4 = i * 2;
            i2 += i4 - 1;
            if (i2 >= i3 * 2) {
                i2 -= i3 * 2;
            }
            double d = i2 * f;
            this.bk1[i4] = (float) FastMath.cos(d);
            this.bk1[i4 + 1] = (float) FastMath.sin(d);
            i++;
        }
        float f2 = 1.0f / this.nBluestein;
        float[] fArr2 = this.bk2;
        float[] fArr3 = this.bk1;
        fArr2[0] = fArr3[0] * f2;
        fArr2[1] = fArr3[1] * f2;
        for (int i5 = 2; i5 < this.n * 2; i5 += 2) {
            float[] fArr4 = this.bk2;
            float[] fArr5 = this.bk1;
            fArr4[i5] = fArr5[i5] * f2;
            int i6 = i5 + 1;
            fArr4[i6] = fArr5[i6] * f2;
            int i7 = this.nBluestein;
            fArr4[(i7 * 2) - i5] = fArr4[i5];
            fArr4[((i7 * 2) - i5) + 1] = fArr4[i6];
        }
        CommonUtils.cftbsub(this.nBluestein * 2, this.bk2, 0, this.ip, this.nw, this.w);
    }

    private void bluesteinil() {
        float f = PI / this.nl;
        this.bk1l.setFloat(0L, 1.0f);
        this.bk1l.setFloat(1L, 0.0f);
        int i = 1;
        long j = 0;
        while (true) {
            long j2 = i;
            long j3 = this.nl;
            if (j2 >= j3) {
                break;
            }
            int i2 = i * 2;
            j += i2 - 1;
            if (j >= j3 * 2) {
                j -= j3 * 2;
            }
            double d = j * f;
            this.bk1l.setFloat(i2, (float) FastMath.cos(d));
            this.bk1l.setFloat(i2 + 1, (float) FastMath.sin(d));
            i++;
        }
        float f2 = 1.0f / this.nBluesteinl;
        this.bk2l.setFloat(0L, this.bk1l.getFloat(0L) * f2);
        this.bk2l.setFloat(1L, this.bk1l.getFloat(1L) * f2);
        int i3 = 2;
        while (true) {
            long j4 = i3;
            if (j4 < this.nl * 2) {
                this.bk2l.setFloat(j4, this.bk1l.getFloat(j4) * f2);
                long j5 = i3 + 1;
                this.bk2l.setFloat(j5, this.bk1l.getFloat(j5) * f2);
                FloatLargeArray floatLargeArray = this.bk2l;
                floatLargeArray.setFloat((this.nBluesteinl * 2) - j4, floatLargeArray.getFloat(j4));
                FloatLargeArray floatLargeArray2 = this.bk2l;
                floatLargeArray2.setFloat(((this.nBluesteinl * 2) - j4) + 1, floatLargeArray2.getFloat(j5));
                i3 += 2;
            } else {
                CommonUtils.cftbsub(this.nBluesteinl * 2, this.bk2l, 0L, this.ipl, this.nwl, this.wl);
                return;
            }
        }
    }

    private void bluestein_complex(final float[] fArr, final int i, final int i2) {
        final float[] fArr2 = new float[this.nBluestein * 2];
        int numberOfThreads = ConcurrencyUtils.getNumberOfThreads();
        int i3 = 0;
        if (numberOfThreads > 1 && this.n >= CommonUtils.getThreadsBeginN_1D_FFT_2Threads()) {
            int i4 = (numberOfThreads < 4 || ((long) this.n) < CommonUtils.getThreadsBeginN_1D_FFT_4Threads()) ? 2 : 4;
            Future[] futureArr = new Future[i4];
            int i5 = this.n / i4;
            int i6 = 0;
            while (i6 < i4) {
                final int i7 = i6 * i5;
                final int i8 = i6 == i4 + (-1) ? this.n : i7 + i5;
                int i9 = i6;
                futureArr[i9] = ConcurrencyUtils.submit(new Runnable() { // from class: org.jtransforms.fft.FloatFFT_1D.5
                    @Override // java.lang.Runnable
                    public void run() {
                        if (i2 > 0) {
                            for (int i10 = i7; i10 < i8; i10++) {
                                int i11 = i10 * 2;
                                int i12 = i11 + 1;
                                int i13 = i;
                                int i14 = i13 + i11;
                                int i15 = i13 + i12;
                                fArr2[i11] = (fArr[i14] * FloatFFT_1D.this.bk1[i11]) - (fArr[i15] * FloatFFT_1D.this.bk1[i12]);
                                fArr2[i12] = (fArr[i14] * FloatFFT_1D.this.bk1[i12]) + (fArr[i15] * FloatFFT_1D.this.bk1[i11]);
                            }
                            return;
                        }
                        for (int i16 = i7; i16 < i8; i16++) {
                            int i17 = i16 * 2;
                            int i18 = i17 + 1;
                            int i19 = i;
                            int i20 = i19 + i17;
                            int i21 = i19 + i18;
                            fArr2[i17] = (fArr[i20] * FloatFFT_1D.this.bk1[i17]) + (fArr[i21] * FloatFFT_1D.this.bk1[i18]);
                            fArr2[i18] = ((-fArr[i20]) * FloatFFT_1D.this.bk1[i18]) + (fArr[i21] * FloatFFT_1D.this.bk1[i17]);
                        }
                    }
                });
                i6 = i9 + 1;
            }
            String str = null;
            try {
                ConcurrencyUtils.waitForCompletion(futureArr);
            } catch (InterruptedException e) {
                Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e);
            } catch (ExecutionException e2) {
                Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e2);
            }
            CommonUtils.cftbsub(this.nBluestein * 2, fArr2, 0, this.ip, this.nw, this.w);
            int i10 = this.nBluestein / i4;
            int i11 = 0;
            while (i11 < i4) {
                final int i12 = i11 * i10;
                final int i13 = i11 == i4 + (-1) ? this.nBluestein : i12 + i10;
                futureArr[i11] = ConcurrencyUtils.submit(new Runnable() { // from class: org.jtransforms.fft.FloatFFT_1D.6
                    @Override // java.lang.Runnable
                    public void run() {
                        if (i2 > 0) {
                            for (int i14 = i12; i14 < i13; i14++) {
                                int i15 = i14 * 2;
                                int i16 = i15 + 1;
                                float f = ((-fArr2[i15]) * FloatFFT_1D.this.bk2[i16]) + (fArr2[i16] * FloatFFT_1D.this.bk2[i15]);
                                float[] fArr3 = fArr2;
                                fArr3[i15] = (fArr3[i15] * FloatFFT_1D.this.bk2[i15]) + (fArr2[i16] * FloatFFT_1D.this.bk2[i16]);
                                fArr2[i16] = f;
                            }
                            return;
                        }
                        for (int i17 = i12; i17 < i13; i17++) {
                            int i18 = i17 * 2;
                            int i19 = i18 + 1;
                            float f2 = (fArr2[i18] * FloatFFT_1D.this.bk2[i19]) + (fArr2[i19] * FloatFFT_1D.this.bk2[i18]);
                            float[] fArr4 = fArr2;
                            fArr4[i18] = (fArr4[i18] * FloatFFT_1D.this.bk2[i18]) - (fArr2[i19] * FloatFFT_1D.this.bk2[i19]);
                            fArr2[i19] = f2;
                        }
                    }
                });
                i11++;
            }
            try {
                ConcurrencyUtils.waitForCompletion(futureArr);
            } catch (InterruptedException e3) {
                Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e3);
            } catch (ExecutionException e4) {
                Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e4);
            }
            CommonUtils.cftfsub(this.nBluestein * 2, fArr2, 0, this.ip, this.nw, this.w);
            int i14 = this.n / i4;
            while (i3 < i4) {
                final int i15 = i3 * i14;
                final int i16 = i3 == i4 + (-1) ? this.n : i15 + i14;
                futureArr[i3] = ConcurrencyUtils.submit(new Runnable() { // from class: org.jtransforms.fft.FloatFFT_1D.7
                    @Override // java.lang.Runnable
                    public void run() {
                        if (i2 > 0) {
                            for (int i17 = i15; i17 < i16; i17++) {
                                int i18 = i17 * 2;
                                int i19 = i18 + 1;
                                int i20 = i;
                                fArr[i20 + i18] = (FloatFFT_1D.this.bk1[i18] * fArr2[i18]) - (FloatFFT_1D.this.bk1[i19] * fArr2[i19]);
                                fArr[i20 + i19] = (FloatFFT_1D.this.bk1[i19] * fArr2[i18]) + (FloatFFT_1D.this.bk1[i18] * fArr2[i19]);
                            }
                            return;
                        }
                        for (int i21 = i15; i21 < i16; i21++) {
                            int i22 = i21 * 2;
                            int i23 = i22 + 1;
                            int i24 = i;
                            fArr[i24 + i22] = (FloatFFT_1D.this.bk1[i22] * fArr2[i22]) + (FloatFFT_1D.this.bk1[i23] * fArr2[i23]);
                            fArr[i24 + i23] = ((-FloatFFT_1D.this.bk1[i23]) * fArr2[i22]) + (FloatFFT_1D.this.bk1[i22] * fArr2[i23]);
                        }
                    }
                });
                i3++;
                str = str;
                i4 = i4;
            }
            String str2 = str;
            try {
                ConcurrencyUtils.waitForCompletion(futureArr);
                return;
            } catch (InterruptedException e5) {
                Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, str2, (Throwable) e5);
                return;
            } catch (ExecutionException e6) {
                Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, str2, (Throwable) e6);
                return;
            }
        }
        if (i2 > 0) {
            for (int i17 = 0; i17 < this.n; i17++) {
                int i18 = i17 * 2;
                int i19 = i18 + 1;
                int i20 = i + i18;
                int i21 = i + i19;
                float f = fArr[i20];
                float[] fArr3 = this.bk1;
                fArr2[i18] = (f * fArr3[i18]) - (fArr[i21] * fArr3[i19]);
                fArr2[i19] = (fArr[i20] * fArr3[i19]) + (fArr[i21] * fArr3[i18]);
            }
        } else {
            for (int i22 = 0; i22 < this.n; i22++) {
                int i23 = i22 * 2;
                int i24 = i23 + 1;
                int i25 = i + i23;
                int i26 = i + i24;
                float f2 = fArr[i25];
                float[] fArr4 = this.bk1;
                fArr2[i23] = (f2 * fArr4[i23]) + (fArr[i26] * fArr4[i24]);
                fArr2[i24] = ((-fArr[i25]) * fArr4[i24]) + (fArr[i26] * fArr4[i23]);
            }
        }
        CommonUtils.cftbsub(this.nBluestein * 2, fArr2, 0, this.ip, this.nw, this.w);
        if (i2 > 0) {
            for (int i27 = 0; i27 < this.nBluestein; i27++) {
                int i28 = i27 * 2;
                int i29 = i28 + 1;
                float f3 = fArr2[i28];
                float[] fArr5 = this.bk2;
                float f4 = fArr5[i29];
                float f5 = fArr2[i29];
                float f6 = fArr5[i28];
                fArr2[i28] = (f3 * f6) + (f5 * f4);
                fArr2[i29] = ((-f3) * f4) + (f5 * f6);
            }
        } else {
            for (int i30 = 0; i30 < this.nBluestein; i30++) {
                int i31 = i30 * 2;
                int i32 = i31 + 1;
                float f7 = fArr2[i31];
                float[] fArr6 = this.bk2;
                float f8 = fArr6[i32];
                float f9 = fArr2[i32];
                float f10 = fArr6[i31];
                fArr2[i31] = (f7 * f10) - (f9 * f8);
                fArr2[i32] = (f7 * f8) + (f9 * f10);
            }
        }
        CommonUtils.cftfsub(this.nBluestein * 2, fArr2, 0, this.ip, this.nw, this.w);
        if (i2 > 0) {
            while (i3 < this.n) {
                int i33 = i3 * 2;
                int i34 = i33 + 1;
                float[] fArr7 = this.bk1;
                fArr[i + i33] = (fArr7[i33] * fArr2[i33]) - (fArr7[i34] * fArr2[i34]);
                fArr[i + i34] = (fArr7[i34] * fArr2[i33]) + (fArr7[i33] * fArr2[i34]);
                i3++;
            }
            return;
        }
        while (i3 < this.n) {
            int i35 = i3 * 2;
            int i36 = i35 + 1;
            float[] fArr8 = this.bk1;
            fArr[i + i35] = (fArr8[i35] * fArr2[i35]) + (fArr8[i36] * fArr2[i36]);
            fArr[i + i36] = ((-fArr8[i36]) * fArr2[i35]) + (fArr8[i35] * fArr2[i36]);
            i3++;
        }
    }

    private void bluestein_complex(final FloatLargeArray floatLargeArray, final long j, final int i) {
        FloatLargeArray floatLargeArray2;
        final FloatLargeArray floatLargeArray3 = new FloatLargeArray(this.nBluesteinl * 2);
        int numberOfThreads = ConcurrencyUtils.getNumberOfThreads();
        if (numberOfThreads > 1 && this.nl > CommonUtils.getThreadsBeginN_1D_FFT_2Threads()) {
            int i2 = (numberOfThreads < 4 || this.nl <= CommonUtils.getThreadsBeginN_1D_FFT_4Threads()) ? 2 : 4;
            Future[] futureArr = new Future[i2];
            long j2 = i2;
            long j3 = this.nl / j2;
            int i3 = 0;
            while (i3 < i2) {
                final long j4 = i3 * j3;
                final long j5 = i3 == i2 + (-1) ? this.nl : j4 + j3;
                Future[] futureArr2 = futureArr;
                futureArr2[i3] = ConcurrencyUtils.submit(new Runnable() { // from class: org.jtransforms.fft.FloatFFT_1D.8
                    @Override // java.lang.Runnable
                    public void run() {
                        long j6 = 2;
                        long j7 = 1;
                        if (i > 0) {
                            long j8 = j4;
                            while (j8 < j5) {
                                long j9 = j8 * j6;
                                long j10 = j9 + j7;
                                long j11 = j;
                                long j12 = j11 + j9;
                                long j13 = j11 + j10;
                                floatLargeArray3.setFloat(j9, (floatLargeArray.getFloat(j12) * FloatFFT_1D.this.bk1l.getFloat(j9)) - (floatLargeArray.getFloat(j13) * FloatFFT_1D.this.bk1l.getFloat(j10)));
                                floatLargeArray3.setFloat(j10, (floatLargeArray.getFloat(j12) * FloatFFT_1D.this.bk1l.getFloat(j10)) + (floatLargeArray.getFloat(j13) * FloatFFT_1D.this.bk1l.getFloat(j9)));
                                j8++;
                                j7 = 1;
                                j6 = 2;
                            }
                            return;
                        }
                        long j14 = 1;
                        for (long j15 = j4; j15 < j5; j15++) {
                            long j16 = j15 * 2;
                            long j17 = j16 + j14;
                            long j18 = j;
                            long j19 = j18 + j16;
                            long j20 = j18 + j17;
                            floatLargeArray3.setFloat(j16, (floatLargeArray.getFloat(j19) * FloatFFT_1D.this.bk1l.getFloat(j16)) + (floatLargeArray.getFloat(j20) * FloatFFT_1D.this.bk1l.getFloat(j17)));
                            floatLargeArray3.setFloat(j17, ((-floatLargeArray.getFloat(j19)) * FloatFFT_1D.this.bk1l.getFloat(j17)) + (floatLargeArray.getFloat(j20) * FloatFFT_1D.this.bk1l.getFloat(j16)));
                            j14 = 1;
                        }
                    }
                });
                i3++;
                i2 = i2;
                j2 = j2;
                futureArr = futureArr2;
            }
            long j6 = j2;
            Future[] futureArr3 = futureArr;
            int i4 = i2;
            String str = null;
            try {
                ConcurrencyUtils.waitForCompletion(futureArr3);
            } catch (InterruptedException e) {
                Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e);
            } catch (ExecutionException e2) {
                Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e2);
            }
            CommonUtils.cftbsub(this.nBluesteinl * 2, floatLargeArray3, 0L, this.ipl, this.nwl, this.wl);
            long j7 = this.nBluesteinl / j6;
            int i5 = 0;
            while (i5 < i4) {
                final long j8 = i5 * j7;
                final long j9 = i5 == i4 + (-1) ? this.nBluesteinl : j8 + j7;
                futureArr3[i5] = ConcurrencyUtils.submit(new Runnable() { // from class: org.jtransforms.fft.FloatFFT_1D.9
                    @Override // java.lang.Runnable
                    public void run() {
                        if (i > 0) {
                            for (long j10 = j8; j10 < j9; j10++) {
                                long j11 = j10 * 2;
                                long j12 = j11 + 1;
                                float f = ((-floatLargeArray3.getFloat(j11)) * FloatFFT_1D.this.bk2l.getFloat(j12)) + (floatLargeArray3.getFloat(j12) * FloatFFT_1D.this.bk2l.getFloat(j11));
                                FloatLargeArray floatLargeArray4 = floatLargeArray3;
                                floatLargeArray4.setFloat(j11, (floatLargeArray4.getFloat(j11) * FloatFFT_1D.this.bk2l.getFloat(j11)) + (floatLargeArray3.getFloat(j12) * FloatFFT_1D.this.bk2l.getFloat(j12)));
                                floatLargeArray3.setFloat(j12, f);
                            }
                            return;
                        }
                        for (long j13 = j8; j13 < j9; j13++) {
                            long j14 = j13 * 2;
                            long j15 = j14 + 1;
                            float f2 = (floatLargeArray3.getFloat(j14) * FloatFFT_1D.this.bk2l.getFloat(j15)) + (floatLargeArray3.getFloat(j15) * FloatFFT_1D.this.bk2l.getFloat(j14));
                            FloatLargeArray floatLargeArray5 = floatLargeArray3;
                            floatLargeArray5.setFloat(j14, (floatLargeArray5.getFloat(j14) * FloatFFT_1D.this.bk2l.getFloat(j14)) - (floatLargeArray3.getFloat(j15) * FloatFFT_1D.this.bk2l.getFloat(j15)));
                            floatLargeArray3.setFloat(j15, f2);
                        }
                    }
                });
                i5++;
            }
            try {
                ConcurrencyUtils.waitForCompletion(futureArr3);
            } catch (InterruptedException e3) {
                Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e3);
            } catch (ExecutionException e4) {
                Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e4);
            }
            CommonUtils.cftfsub(this.nBluesteinl * 2, floatLargeArray3, 0L, this.ipl, this.nwl, this.wl);
            long j10 = this.nl / j6;
            int i6 = 0;
            while (i6 < i4) {
                final long j11 = i6 * j10;
                final long j12 = i6 == i4 + (-1) ? this.nl : j11 + j10;
                futureArr3[i6] = ConcurrencyUtils.submit(new Runnable() { // from class: org.jtransforms.fft.FloatFFT_1D.10
                    @Override // java.lang.Runnable
                    public void run() {
                        long j13 = 2;
                        long j14 = 1;
                        if (i > 0) {
                            long j15 = j11;
                            while (j15 < j12) {
                                long j16 = j15 * j13;
                                long j17 = j16 + j14;
                                long j18 = j;
                                floatLargeArray.setFloat(j18 + j16, (FloatFFT_1D.this.bk1l.getFloat(j16) * floatLargeArray3.getFloat(j16)) - (FloatFFT_1D.this.bk1l.getFloat(j17) * floatLargeArray3.getFloat(j17)));
                                floatLargeArray.setFloat(j18 + j17, (FloatFFT_1D.this.bk1l.getFloat(j17) * floatLargeArray3.getFloat(j16)) + (FloatFFT_1D.this.bk1l.getFloat(j16) * floatLargeArray3.getFloat(j17)));
                                j15++;
                                j14 = 1;
                                j13 = 2;
                            }
                            return;
                        }
                        long j19 = 1;
                        for (long j20 = j11; j20 < j12; j20++) {
                            long j21 = j20 * 2;
                            long j22 = j21 + j19;
                            long j23 = j;
                            floatLargeArray.setFloat(j23 + j21, (FloatFFT_1D.this.bk1l.getFloat(j21) * floatLargeArray3.getFloat(j21)) + (FloatFFT_1D.this.bk1l.getFloat(j22) * floatLargeArray3.getFloat(j22)));
                            floatLargeArray.setFloat(j23 + j22, ((-FloatFFT_1D.this.bk1l.getFloat(j22)) * floatLargeArray3.getFloat(j21)) + (FloatFFT_1D.this.bk1l.getFloat(j21) * floatLargeArray3.getFloat(j22)));
                            j19 = 1;
                        }
                    }
                });
                i6++;
                str = str;
                i4 = i4;
            }
            String str2 = str;
            try {
                ConcurrencyUtils.waitForCompletion(futureArr3);
                return;
            } catch (InterruptedException e5) {
                Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, str2, (Throwable) e5);
                return;
            } catch (ExecutionException e6) {
                Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, str2, (Throwable) e6);
                return;
            }
        }
        long j13 = 1;
        if (i > 0) {
            long j14 = 0;
            while (j14 < this.nl) {
                long j15 = j14 * 2;
                long j16 = j15 + j13;
                long j17 = j + j15;
                long j18 = j + j16;
                floatLargeArray3.setFloat(j15, (floatLargeArray.getFloat(j17) * this.bk1l.getFloat(j15)) - (floatLargeArray.getFloat(j18) * this.bk1l.getFloat(j16)));
                floatLargeArray3.setFloat(j16, (floatLargeArray.getFloat(j17) * this.bk1l.getFloat(j16)) + (floatLargeArray.getFloat(j18) * this.bk1l.getFloat(j15)));
                j14++;
                j13 = 1;
            }
            floatLargeArray2 = floatLargeArray;
        } else {
            floatLargeArray2 = floatLargeArray;
            long j19 = 1;
            for (long j20 = 0; j20 < this.nl; j20++) {
                long j21 = j20 * 2;
                long j22 = j21 + j19;
                long j23 = j + j21;
                long j24 = j + j22;
                floatLargeArray3.setFloat(j21, (floatLargeArray2.getFloat(j23) * this.bk1l.getFloat(j21)) + (floatLargeArray2.getFloat(j24) * this.bk1l.getFloat(j22)));
                floatLargeArray3.setFloat(j22, ((-floatLargeArray2.getFloat(j23)) * this.bk1l.getFloat(j22)) + (floatLargeArray2.getFloat(j24) * this.bk1l.getFloat(j21)));
                j19 = 1;
            }
        }
        CommonUtils.cftbsub(this.nBluesteinl * 2, floatLargeArray3, 0L, this.ipl, this.nwl, this.wl);
        if (i > 0) {
            for (long j25 = 0; j25 < this.nBluesteinl; j25++) {
                long j26 = j25 * 2;
                long j27 = j26 + 1;
                float f = ((-floatLargeArray3.getFloat(j26)) * this.bk2l.getFloat(j27)) + (floatLargeArray3.getFloat(j27) * this.bk2l.getFloat(j26));
                floatLargeArray3.setFloat(j26, (floatLargeArray3.getFloat(j26) * this.bk2l.getFloat(j26)) + (floatLargeArray3.getFloat(j27) * this.bk2l.getFloat(j27)));
                floatLargeArray3.setFloat(j27, f);
            }
        } else {
            long j28 = 1;
            for (long j29 = 0; j29 < this.nBluesteinl; j29++) {
                long j30 = j29 * 2;
                long j31 = j30 + j28;
                float f2 = (floatLargeArray3.getFloat(j30) * this.bk2l.getFloat(j31)) + (floatLargeArray3.getFloat(j31) * this.bk2l.getFloat(j30));
                floatLargeArray3.setFloat(j30, (floatLargeArray3.getFloat(j30) * this.bk2l.getFloat(j30)) - (floatLargeArray3.getFloat(j31) * this.bk2l.getFloat(j31)));
                floatLargeArray3.setFloat(j31, f2);
                j28 = 1;
            }
        }
        CommonUtils.cftfsub(this.nBluesteinl * 2, floatLargeArray3, 0L, this.ipl, this.nwl, this.wl);
        if (i > 0) {
            for (long j32 = 0; j32 < this.nl; j32++) {
                long j33 = j32 * 2;
                long j34 = j33 + 1;
                floatLargeArray2.setFloat(j + j33, (this.bk1l.getFloat(j33) * floatLargeArray3.getFloat(j33)) - (this.bk1l.getFloat(j34) * floatLargeArray3.getFloat(j34)));
                floatLargeArray2.setFloat(j + j34, (this.bk1l.getFloat(j34) * floatLargeArray3.getFloat(j33)) + (this.bk1l.getFloat(j33) * floatLargeArray3.getFloat(j34)));
            }
            return;
        }
        long j35 = 1;
        for (long j36 = 0; j36 < this.nl; j36++) {
            long j37 = j36 * 2;
            long j38 = j37 + j35;
            floatLargeArray2.setFloat(j + j37, (this.bk1l.getFloat(j37) * floatLargeArray3.getFloat(j37)) + (this.bk1l.getFloat(j38) * floatLargeArray3.getFloat(j38)));
            floatLargeArray2.setFloat(j + j38, ((-this.bk1l.getFloat(j38)) * floatLargeArray3.getFloat(j37)) + (this.bk1l.getFloat(j37) * floatLargeArray3.getFloat(j38)));
            j35 = 1;
        }
    }

    private void bluestein_real_full(final float[] fArr, final int i, final int i2) {
        final float[] fArr2 = new float[this.nBluestein * 2];
        int numberOfThreads = ConcurrencyUtils.getNumberOfThreads();
        int i3 = 0;
        if (numberOfThreads > 1 && this.n >= CommonUtils.getThreadsBeginN_1D_FFT_2Threads()) {
            int i4 = (numberOfThreads < 4 || ((long) this.n) < CommonUtils.getThreadsBeginN_1D_FFT_4Threads()) ? 2 : 4;
            Future[] futureArr = new Future[i4];
            int i5 = this.n / i4;
            int i6 = 0;
            while (i6 < i4) {
                final int i7 = i6 * i5;
                final int i8 = i6 == i4 + (-1) ? this.n : i7 + i5;
                int i9 = i6;
                futureArr[i9] = ConcurrencyUtils.submit(new Runnable() { // from class: org.jtransforms.fft.FloatFFT_1D.11
                    @Override // java.lang.Runnable
                    public void run() {
                        if (i2 > 0) {
                            for (int i10 = i7; i10 < i8; i10++) {
                                int i11 = i10 * 2;
                                int i12 = i11 + 1;
                                int i13 = i + i10;
                                fArr2[i11] = fArr[i13] * FloatFFT_1D.this.bk1[i11];
                                fArr2[i12] = fArr[i13] * FloatFFT_1D.this.bk1[i12];
                            }
                            return;
                        }
                        for (int i14 = i7; i14 < i8; i14++) {
                            int i15 = i14 * 2;
                            int i16 = i15 + 1;
                            int i17 = i + i14;
                            fArr2[i15] = fArr[i17] * FloatFFT_1D.this.bk1[i15];
                            fArr2[i16] = (-fArr[i17]) * FloatFFT_1D.this.bk1[i16];
                        }
                    }
                });
                i6 = i9 + 1;
            }
            String str = null;
            try {
                ConcurrencyUtils.waitForCompletion(futureArr);
            } catch (InterruptedException e) {
                Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e);
            } catch (ExecutionException e2) {
                Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e2);
            }
            CommonUtils.cftbsub(this.nBluestein * 2, fArr2, 0, this.ip, this.nw, this.w);
            int i10 = this.nBluestein / i4;
            int i11 = 0;
            while (i11 < i4) {
                final int i12 = i11 * i10;
                final int i13 = i11 == i4 + (-1) ? this.nBluestein : i12 + i10;
                futureArr[i11] = ConcurrencyUtils.submit(new Runnable() { // from class: org.jtransforms.fft.FloatFFT_1D.12
                    @Override // java.lang.Runnable
                    public void run() {
                        if (i2 > 0) {
                            for (int i14 = i12; i14 < i13; i14++) {
                                int i15 = i14 * 2;
                                int i16 = i15 + 1;
                                float f = ((-fArr2[i15]) * FloatFFT_1D.this.bk2[i16]) + (fArr2[i16] * FloatFFT_1D.this.bk2[i15]);
                                float[] fArr3 = fArr2;
                                fArr3[i15] = (fArr3[i15] * FloatFFT_1D.this.bk2[i15]) + (fArr2[i16] * FloatFFT_1D.this.bk2[i16]);
                                fArr2[i16] = f;
                            }
                            return;
                        }
                        for (int i17 = i12; i17 < i13; i17++) {
                            int i18 = i17 * 2;
                            int i19 = i18 + 1;
                            float f2 = (fArr2[i18] * FloatFFT_1D.this.bk2[i19]) + (fArr2[i19] * FloatFFT_1D.this.bk2[i18]);
                            float[] fArr4 = fArr2;
                            fArr4[i18] = (fArr4[i18] * FloatFFT_1D.this.bk2[i18]) - (fArr2[i19] * FloatFFT_1D.this.bk2[i19]);
                            fArr2[i19] = f2;
                        }
                    }
                });
                i11++;
            }
            try {
                ConcurrencyUtils.waitForCompletion(futureArr);
            } catch (InterruptedException e3) {
                Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e3);
            } catch (ExecutionException e4) {
                Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e4);
            }
            CommonUtils.cftfsub(this.nBluestein * 2, fArr2, 0, this.ip, this.nw, this.w);
            int i14 = this.n / i4;
            while (i3 < i4) {
                final int i15 = i3 * i14;
                final int i16 = i3 == i4 + (-1) ? this.n : i15 + i14;
                futureArr[i3] = ConcurrencyUtils.submit(new Runnable() { // from class: org.jtransforms.fft.FloatFFT_1D.13
                    @Override // java.lang.Runnable
                    public void run() {
                        if (i2 > 0) {
                            for (int i17 = i15; i17 < i16; i17++) {
                                int i18 = i17 * 2;
                                int i19 = i18 + 1;
                                fArr[i + i18] = (FloatFFT_1D.this.bk1[i18] * fArr2[i18]) - (FloatFFT_1D.this.bk1[i19] * fArr2[i19]);
                                fArr[i + i19] = (FloatFFT_1D.this.bk1[i19] * fArr2[i18]) + (FloatFFT_1D.this.bk1[i18] * fArr2[i19]);
                            }
                            return;
                        }
                        for (int i20 = i15; i20 < i16; i20++) {
                            int i21 = i20 * 2;
                            int i22 = i21 + 1;
                            fArr[i + i21] = (FloatFFT_1D.this.bk1[i21] * fArr2[i21]) + (FloatFFT_1D.this.bk1[i22] * fArr2[i22]);
                            fArr[i + i22] = ((-FloatFFT_1D.this.bk1[i22]) * fArr2[i21]) + (FloatFFT_1D.this.bk1[i21] * fArr2[i22]);
                        }
                    }
                });
                i3++;
                str = str;
                i4 = i4;
            }
            String str2 = str;
            try {
                ConcurrencyUtils.waitForCompletion(futureArr);
                return;
            } catch (InterruptedException e5) {
                Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, str2, (Throwable) e5);
                return;
            } catch (ExecutionException e6) {
                Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, str2, (Throwable) e6);
                return;
            }
        }
        if (i2 > 0) {
            for (int i17 = 0; i17 < this.n; i17++) {
                int i18 = i17 * 2;
                int i19 = i18 + 1;
                int i20 = i + i17;
                float f = fArr[i20];
                float[] fArr3 = this.bk1;
                fArr2[i18] = f * fArr3[i18];
                fArr2[i19] = fArr[i20] * fArr3[i19];
            }
        } else {
            for (int i21 = 0; i21 < this.n; i21++) {
                int i22 = i21 * 2;
                int i23 = i22 + 1;
                int i24 = i + i21;
                float f2 = fArr[i24];
                float[] fArr4 = this.bk1;
                fArr2[i22] = f2 * fArr4[i22];
                fArr2[i23] = (-fArr[i24]) * fArr4[i23];
            }
        }
        CommonUtils.cftbsub(this.nBluestein * 2, fArr2, 0, this.ip, this.nw, this.w);
        if (i2 > 0) {
            for (int i25 = 0; i25 < this.nBluestein; i25++) {
                int i26 = i25 * 2;
                int i27 = i26 + 1;
                float f3 = fArr2[i26];
                float[] fArr5 = this.bk2;
                float f4 = fArr5[i27];
                float f5 = fArr2[i27];
                float f6 = fArr5[i26];
                fArr2[i26] = (f3 * f6) + (f5 * f4);
                fArr2[i27] = ((-f3) * f4) + (f5 * f6);
            }
        } else {
            for (int i28 = 0; i28 < this.nBluestein; i28++) {
                int i29 = i28 * 2;
                int i30 = i29 + 1;
                float f7 = fArr2[i29];
                float[] fArr6 = this.bk2;
                float f8 = fArr6[i30];
                float f9 = fArr2[i30];
                float f10 = fArr6[i29];
                fArr2[i29] = (f7 * f10) - (f9 * f8);
                fArr2[i30] = (f7 * f8) + (f9 * f10);
            }
        }
        CommonUtils.cftfsub(this.nBluestein * 2, fArr2, 0, this.ip, this.nw, this.w);
        if (i2 > 0) {
            while (i3 < this.n) {
                int i31 = i3 * 2;
                int i32 = i31 + 1;
                float[] fArr7 = this.bk1;
                fArr[i + i31] = (fArr7[i31] * fArr2[i31]) - (fArr7[i32] * fArr2[i32]);
                fArr[i + i32] = (fArr7[i32] * fArr2[i31]) + (fArr7[i31] * fArr2[i32]);
                i3++;
            }
            return;
        }
        while (i3 < this.n) {
            int i33 = i3 * 2;
            int i34 = i33 + 1;
            float[] fArr8 = this.bk1;
            fArr[i + i33] = (fArr8[i33] * fArr2[i33]) + (fArr8[i34] * fArr2[i34]);
            fArr[i + i34] = ((-fArr8[i34]) * fArr2[i33]) + (fArr8[i33] * fArr2[i34]);
            i3++;
        }
    }

    private void bluestein_real_full(final FloatLargeArray floatLargeArray, final long j, final long j2) {
        FloatLargeArray floatLargeArray2;
        FloatLargeArray floatLargeArray3;
        FloatLargeArray floatLargeArray4 = new FloatLargeArray(this.nBluesteinl * 2);
        int numberOfThreads = ConcurrencyUtils.getNumberOfThreads();
        if (numberOfThreads > 1 && this.nl > CommonUtils.getThreadsBeginN_1D_FFT_2Threads()) {
            int i = (numberOfThreads < 4 || this.nl <= CommonUtils.getThreadsBeginN_1D_FFT_4Threads()) ? 2 : 4;
            Future[] futureArr = new Future[i];
            long j3 = i;
            long j4 = this.nl / j3;
            int i2 = 0;
            while (i2 < i) {
                final long j5 = i2 * j4;
                final long j6 = i2 == i + (-1) ? this.nl : j5 + j4;
                Future[] futureArr2 = futureArr;
                int i3 = i;
                final FloatLargeArray floatLargeArray5 = floatLargeArray4;
                futureArr2[i2] = ConcurrencyUtils.submit(new Runnable() { // from class: org.jtransforms.fft.FloatFFT_1D.14
                    @Override // java.lang.Runnable
                    public void run() {
                        if (j2 > 0) {
                            for (long j7 = j5; j7 < j6; j7++) {
                                long j8 = j7 * 2;
                                long j9 = j8 + 1;
                                long j10 = j + j7;
                                floatLargeArray5.setFloat(j8, floatLargeArray.getFloat(j10) * FloatFFT_1D.this.bk1l.getFloat(j8));
                                floatLargeArray5.setFloat(j9, floatLargeArray.getFloat(j10) * FloatFFT_1D.this.bk1l.getFloat(j9));
                            }
                            return;
                        }
                        for (long j11 = j5; j11 < j6; j11++) {
                            long j12 = j11 * 2;
                            long j13 = j12 + 1;
                            long j14 = j + j11;
                            floatLargeArray5.setFloat(j12, floatLargeArray.getFloat(j14) * FloatFFT_1D.this.bk1l.getFloat(j12));
                            floatLargeArray5.setFloat(j13, (-floatLargeArray.getFloat(j14)) * FloatFFT_1D.this.bk1l.getFloat(j13));
                        }
                    }
                });
                i2++;
                i = i3;
                futureArr = futureArr2;
                floatLargeArray4 = floatLargeArray4;
                j3 = j3;
            }
            long j7 = j3;
            Future[] futureArr3 = futureArr;
            int i4 = i;
            final FloatLargeArray floatLargeArray6 = floatLargeArray4;
            String str = null;
            try {
                ConcurrencyUtils.waitForCompletion(futureArr3);
            } catch (InterruptedException e) {
                Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e);
            } catch (ExecutionException e2) {
                Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e2);
            }
            CommonUtils.cftbsub(this.nBluesteinl * 2, floatLargeArray6, 0L, this.ipl, this.nwl, this.wl);
            long j8 = this.nBluesteinl / j7;
            int i5 = 0;
            while (i5 < i4) {
                final long j9 = i5 * j8;
                final long j10 = i5 == i4 + (-1) ? this.nBluesteinl : j9 + j8;
                futureArr3[i5] = ConcurrencyUtils.submit(new Runnable() { // from class: org.jtransforms.fft.FloatFFT_1D.15
                    @Override // java.lang.Runnable
                    public void run() {
                        if (j2 > 0) {
                            for (long j11 = j9; j11 < j10; j11++) {
                                long j12 = j11 * 2;
                                long j13 = j12 + 1;
                                float f = ((-floatLargeArray6.getFloat(j12)) * FloatFFT_1D.this.bk2l.getFloat(j13)) + (floatLargeArray6.getFloat(j13) * FloatFFT_1D.this.bk2l.getFloat(j12));
                                FloatLargeArray floatLargeArray7 = floatLargeArray6;
                                floatLargeArray7.setFloat(j12, (floatLargeArray7.getFloat(j12) * FloatFFT_1D.this.bk2l.getFloat(j12)) + (floatLargeArray6.getFloat(j13) * FloatFFT_1D.this.bk2l.getFloat(j13)));
                                floatLargeArray6.setFloat(j13, f);
                            }
                            return;
                        }
                        for (long j14 = j9; j14 < j10; j14++) {
                            long j15 = j14 * 2;
                            long j16 = j15 + 1;
                            float f2 = (floatLargeArray6.getFloat(j15) * FloatFFT_1D.this.bk2l.getFloat(j16)) + (floatLargeArray6.getFloat(j16) * FloatFFT_1D.this.bk2l.getFloat(j15));
                            FloatLargeArray floatLargeArray8 = floatLargeArray6;
                            floatLargeArray8.setFloat(j15, (floatLargeArray8.getFloat(j15) * FloatFFT_1D.this.bk2l.getFloat(j15)) - (floatLargeArray6.getFloat(j16) * FloatFFT_1D.this.bk2l.getFloat(j16)));
                            floatLargeArray6.setFloat(j16, f2);
                        }
                    }
                });
                i5++;
            }
            try {
                ConcurrencyUtils.waitForCompletion(futureArr3);
            } catch (InterruptedException e3) {
                Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e3);
            } catch (ExecutionException e4) {
                Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e4);
            }
            CommonUtils.cftfsub(this.nBluesteinl * 2, floatLargeArray6, 0L, this.ipl, this.nwl, this.wl);
            long j11 = this.nl / j7;
            int i6 = 0;
            while (i6 < i4) {
                final long j12 = i6 * j11;
                final long j13 = i6 == i4 + (-1) ? this.nl : j12 + j11;
                futureArr3[i6] = ConcurrencyUtils.submit(new Runnable() { // from class: org.jtransforms.fft.FloatFFT_1D.16
                    @Override // java.lang.Runnable
                    public void run() {
                        long j14 = 2;
                        if (j2 <= 0) {
                            for (long j15 = j12; j15 < j13; j15++) {
                                long j16 = j15 * 2;
                                long j17 = j16 + 1;
                                floatLargeArray.setFloat(j + j16, (FloatFFT_1D.this.bk1l.getFloat(j16) * floatLargeArray6.getFloat(j16)) + (FloatFFT_1D.this.bk1l.getFloat(j17) * floatLargeArray6.getFloat(j17)));
                                floatLargeArray.setFloat(j + j17, ((-FloatFFT_1D.this.bk1l.getFloat(j17)) * floatLargeArray6.getFloat(j16)) + (FloatFFT_1D.this.bk1l.getFloat(j16) * floatLargeArray6.getFloat(j17)));
                            }
                            return;
                        }
                        long j18 = j12;
                        while (j18 < j13) {
                            long j19 = j18 * j14;
                            long j20 = j19 + 1;
                            floatLargeArray.setFloat(j + j19, (FloatFFT_1D.this.bk1l.getFloat(j19) * floatLargeArray6.getFloat(j19)) - (FloatFFT_1D.this.bk1l.getFloat(j20) * floatLargeArray6.getFloat(j20)));
                            floatLargeArray.setFloat(j + j20, (FloatFFT_1D.this.bk1l.getFloat(j20) * floatLargeArray6.getFloat(j19)) + (FloatFFT_1D.this.bk1l.getFloat(j19) * floatLargeArray6.getFloat(j20)));
                            j18++;
                            j14 = 2;
                        }
                    }
                });
                i6++;
                str = str;
                i4 = i4;
            }
            String str2 = str;
            try {
                ConcurrencyUtils.waitForCompletion(futureArr3);
                return;
            } catch (InterruptedException e5) {
                Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, str2, (Throwable) e5);
                return;
            } catch (ExecutionException e6) {
                Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, str2, (Throwable) e6);
                return;
            }
        }
        if (j2 > 0) {
            for (long j14 = 0; j14 < this.nl; j14++) {
                long j15 = j14 * 2;
                long j16 = j15 + 1;
                long j17 = j + j14;
                floatLargeArray4.setFloat(j15, floatLargeArray.getFloat(j17) * this.bk1l.getFloat(j15));
                floatLargeArray4.setFloat(j16, floatLargeArray.getFloat(j17) * this.bk1l.getFloat(j16));
            }
            floatLargeArray2 = floatLargeArray;
            floatLargeArray3 = floatLargeArray4;
        } else {
            floatLargeArray2 = floatLargeArray;
            floatLargeArray3 = floatLargeArray4;
            for (long j18 = 0; j18 < this.nl; j18++) {
                long j19 = j18 * 2;
                long j20 = j19 + 1;
                long j21 = j + j18;
                floatLargeArray3.setFloat(j19, floatLargeArray2.getFloat(j21) * this.bk1l.getFloat(j19));
                floatLargeArray3.setFloat(j20, (-floatLargeArray2.getFloat(j21)) * this.bk1l.getFloat(j20));
            }
        }
        CommonUtils.cftbsub(this.nBluesteinl * 2, floatLargeArray3, 0L, this.ipl, this.nwl, this.wl);
        if (j2 > 0) {
            for (long j22 = 0; j22 < this.nBluesteinl; j22++) {
                long j23 = j22 * 2;
                long j24 = j23 + 1;
                float f = ((-floatLargeArray3.getFloat(j23)) * this.bk2l.getFloat(j24)) + (floatLargeArray3.getFloat(j24) * this.bk2l.getFloat(j23));
                floatLargeArray3.setFloat(j23, (floatLargeArray3.getFloat(j23) * this.bk2l.getFloat(j23)) + (floatLargeArray3.getFloat(j24) * this.bk2l.getFloat(j24)));
                floatLargeArray3.setFloat(j24, f);
            }
        } else {
            for (long j25 = 0; j25 < this.nBluesteinl; j25++) {
                long j26 = j25 * 2;
                long j27 = j26 + 1;
                float f2 = (floatLargeArray3.getFloat(j26) * this.bk2l.getFloat(j27)) + (floatLargeArray3.getFloat(j27) * this.bk2l.getFloat(j26));
                floatLargeArray3.setFloat(j26, (floatLargeArray3.getFloat(j26) * this.bk2l.getFloat(j26)) - (floatLargeArray3.getFloat(j27) * this.bk2l.getFloat(j27)));
                floatLargeArray3.setFloat(j27, f2);
            }
        }
        CommonUtils.cftfsub(this.nBluesteinl * 2, floatLargeArray3, 0L, this.ipl, this.nwl, this.wl);
        if (j2 > 0) {
            for (long j28 = 0; j28 < this.nl; j28++) {
                long j29 = j28 * 2;
                long j30 = j29 + 1;
                floatLargeArray2.setFloat(j + j29, (this.bk1l.getFloat(j29) * floatLargeArray3.getFloat(j29)) - (this.bk1l.getFloat(j30) * floatLargeArray3.getFloat(j30)));
                floatLargeArray2.setFloat(j + j30, (this.bk1l.getFloat(j30) * floatLargeArray3.getFloat(j29)) + (this.bk1l.getFloat(j29) * floatLargeArray3.getFloat(j30)));
            }
            return;
        }
        for (long j31 = 0; j31 < this.nl; j31++) {
            long j32 = j31 * 2;
            long j33 = j32 + 1;
            floatLargeArray2.setFloat(j + j32, (this.bk1l.getFloat(j32) * floatLargeArray3.getFloat(j32)) + (this.bk1l.getFloat(j33) * floatLargeArray3.getFloat(j33)));
            floatLargeArray2.setFloat(j + j33, ((-this.bk1l.getFloat(j33)) * floatLargeArray3.getFloat(j32)) + (this.bk1l.getFloat(j32) * floatLargeArray3.getFloat(j33)));
        }
    }

    private void bluestein_real_forward(final float[] fArr, final int i) {
        final float[] fArr2 = new float[this.nBluestein * 2];
        int numberOfThreads = ConcurrencyUtils.getNumberOfThreads();
        if (numberOfThreads > 1 && this.n >= CommonUtils.getThreadsBeginN_1D_FFT_2Threads()) {
            int i2 = (numberOfThreads < 4 || ((long) this.n) < CommonUtils.getThreadsBeginN_1D_FFT_4Threads()) ? 2 : 4;
            Future[] futureArr = new Future[i2];
            int i3 = this.n / i2;
            int i4 = 0;
            while (i4 < i2) {
                final int i5 = i4 * i3;
                final int i6 = i4 == i2 + (-1) ? this.n : i5 + i3;
                int i7 = i4;
                futureArr[i7] = ConcurrencyUtils.submit(new Runnable() { // from class: org.jtransforms.fft.FloatFFT_1D.17
                    @Override // java.lang.Runnable
                    public void run() {
                        for (int i8 = i5; i8 < i6; i8++) {
                            int i9 = i8 * 2;
                            int i10 = i9 + 1;
                            int i11 = i + i8;
                            fArr2[i9] = fArr[i11] * FloatFFT_1D.this.bk1[i9];
                            fArr2[i10] = (-fArr[i11]) * FloatFFT_1D.this.bk1[i10];
                        }
                    }
                });
                i4 = i7 + 1;
            }
            try {
                ConcurrencyUtils.waitForCompletion(futureArr);
            } catch (InterruptedException e) {
                Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e);
            } catch (ExecutionException e2) {
                Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e2);
            }
            CommonUtils.cftbsub(this.nBluestein * 2, fArr2, 0, this.ip, this.nw, this.w);
            int i8 = this.nBluestein / i2;
            int i9 = 0;
            while (i9 < i2) {
                final int i10 = i9 * i8;
                final int i11 = i9 == i2 + (-1) ? this.nBluestein : i10 + i8;
                futureArr[i9] = ConcurrencyUtils.submit(new Runnable() { // from class: org.jtransforms.fft.FloatFFT_1D.18
                    @Override // java.lang.Runnable
                    public void run() {
                        for (int i12 = i10; i12 < i11; i12++) {
                            int i13 = i12 * 2;
                            int i14 = i13 + 1;
                            float f = (fArr2[i13] * FloatFFT_1D.this.bk2[i14]) + (fArr2[i14] * FloatFFT_1D.this.bk2[i13]);
                            float[] fArr3 = fArr2;
                            fArr3[i13] = (fArr3[i13] * FloatFFT_1D.this.bk2[i13]) - (fArr2[i14] * FloatFFT_1D.this.bk2[i14]);
                            fArr2[i14] = f;
                        }
                    }
                });
                i9++;
            }
            try {
                ConcurrencyUtils.waitForCompletion(futureArr);
            } catch (InterruptedException e3) {
                Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e3);
            } catch (ExecutionException e4) {
                Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e4);
            }
        } else {
            for (int i12 = 0; i12 < this.n; i12++) {
                int i13 = i12 * 2;
                int i14 = i13 + 1;
                int i15 = i + i12;
                float f = fArr[i15];
                float[] fArr3 = this.bk1;
                fArr2[i13] = f * fArr3[i13];
                fArr2[i14] = (-fArr[i15]) * fArr3[i14];
            }
            CommonUtils.cftbsub(this.nBluestein * 2, fArr2, 0, this.ip, this.nw, this.w);
            for (int i16 = 0; i16 < this.nBluestein; i16++) {
                int i17 = i16 * 2;
                int i18 = i17 + 1;
                float f2 = fArr2[i17];
                float[] fArr4 = this.bk2;
                float f3 = fArr4[i18];
                float f4 = fArr2[i18];
                float f5 = fArr4[i17];
                fArr2[i17] = (f2 * f5) - (f4 * f3);
                fArr2[i18] = (f2 * f3) + (f4 * f5);
            }
        }
        CommonUtils.cftfsub(this.nBluestein * 2, fArr2, 0, this.ip, this.nw, this.w);
        int i19 = this.n;
        if (i19 % 2 == 0) {
            float[] fArr5 = this.bk1;
            fArr[i] = (fArr5[0] * fArr2[0]) + (fArr5[1] * fArr2[1]);
            fArr[i + 1] = (fArr5[i19] * fArr2[i19]) + (fArr5[i19 + 1] * fArr2[i19 + 1]);
            for (int i20 = 1; i20 < this.n / 2; i20++) {
                int i21 = i20 * 2;
                int i22 = i21 + 1;
                float[] fArr6 = this.bk1;
                fArr[i + i21] = (fArr6[i21] * fArr2[i21]) + (fArr6[i22] * fArr2[i22]);
                fArr[i + i22] = ((-fArr6[i22]) * fArr2[i21]) + (fArr6[i21] * fArr2[i22]);
            }
            return;
        }
        float[] fArr7 = this.bk1;
        fArr[i] = (fArr7[0] * fArr2[0]) + (fArr7[1] * fArr2[1]);
        fArr[i + 1] = ((-fArr7[i19]) * fArr2[i19 - 1]) + (fArr7[i19 - 1] * fArr2[i19]);
        int i23 = 1;
        while (true) {
            int i24 = this.n;
            if (i23 < (i24 - 1) / 2) {
                int i25 = i23 * 2;
                int i26 = i25 + 1;
                float[] fArr8 = this.bk1;
                fArr[i + i25] = (fArr8[i25] * fArr2[i25]) + (fArr8[i26] * fArr2[i26]);
                fArr[i + i26] = ((-fArr8[i26]) * fArr2[i25]) + (fArr8[i25] * fArr2[i26]);
                i23++;
            } else {
                float[] fArr9 = this.bk1;
                fArr[(i + i24) - 1] = (fArr9[i24 - 1] * fArr2[i24 - 1]) + (fArr9[i24] * fArr2[i24]);
                return;
            }
        }
    }

    private void bluestein_real_forward(final FloatLargeArray floatLargeArray, final long j) {
        FloatLargeArray floatLargeArray2;
        long j2;
        FloatLargeArray floatLargeArray3;
        FloatLargeArray floatLargeArray4 = new FloatLargeArray(this.nBluesteinl * 2);
        int numberOfThreads = ConcurrencyUtils.getNumberOfThreads();
        if (numberOfThreads > 1 && this.nl > CommonUtils.getThreadsBeginN_1D_FFT_2Threads()) {
            int i = (numberOfThreads < 4 || this.nl <= CommonUtils.getThreadsBeginN_1D_FFT_4Threads()) ? 2 : 4;
            Future[] futureArr = new Future[i];
            long j3 = i;
            long j4 = this.nl / j3;
            int i2 = 0;
            while (i2 < i) {
                final long j5 = i2 * j4;
                final long j6 = i2 == i + (-1) ? this.nl : j5 + j4;
                Future[] futureArr2 = futureArr;
                int i3 = i;
                final FloatLargeArray floatLargeArray5 = floatLargeArray4;
                futureArr2[i2] = ConcurrencyUtils.submit(new Runnable() { // from class: org.jtransforms.fft.FloatFFT_1D.19
                    @Override // java.lang.Runnable
                    public void run() {
                        for (long j7 = j5; j7 < j6; j7++) {
                            long j8 = 2 * j7;
                            long j9 = j8 + 1;
                            long j10 = j + j7;
                            floatLargeArray5.setFloat(j8, floatLargeArray.getFloat(j10) * FloatFFT_1D.this.bk1l.getFloat(j8));
                            floatLargeArray5.setFloat(j9, (-floatLargeArray.getFloat(j10)) * FloatFFT_1D.this.bk1l.getFloat(j9));
                        }
                    }
                });
                i2++;
                i = i3;
                floatLargeArray4 = floatLargeArray4;
                futureArr = futureArr2;
            }
            Future[] futureArr3 = futureArr;
            int i4 = i;
            final FloatLargeArray floatLargeArray6 = floatLargeArray4;
            try {
                ConcurrencyUtils.waitForCompletion(futureArr3);
            } catch (InterruptedException e) {
                Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e);
            } catch (ExecutionException e2) {
                Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e2);
            }
            CommonUtils.cftbsub(this.nBluesteinl * 2, floatLargeArray6, 0L, this.ipl, this.nwl, this.wl);
            long j7 = this.nBluesteinl / j3;
            int i5 = 0;
            while (i5 < i4) {
                final long j8 = i5 * j7;
                final long j9 = i5 == i4 + (-1) ? this.nBluesteinl : j8 + j7;
                futureArr3[i5] = ConcurrencyUtils.submit(new Runnable() { // from class: org.jtransforms.fft.FloatFFT_1D.20
                    @Override // java.lang.Runnable
                    public void run() {
                        for (long j10 = j8; j10 < j9; j10++) {
                            long j11 = 2 * j10;
                            long j12 = j11 + 1;
                            float f = (floatLargeArray6.getFloat(j11) * FloatFFT_1D.this.bk2l.getFloat(j12)) + (floatLargeArray6.getFloat(j12) * FloatFFT_1D.this.bk2l.getFloat(j11));
                            FloatLargeArray floatLargeArray7 = floatLargeArray6;
                            floatLargeArray7.setFloat(j11, (floatLargeArray7.getFloat(j11) * FloatFFT_1D.this.bk2l.getFloat(j11)) - (floatLargeArray6.getFloat(j12) * FloatFFT_1D.this.bk2l.getFloat(j12)));
                            floatLargeArray6.setFloat(j12, f);
                        }
                    }
                });
                i5++;
            }
            try {
                ConcurrencyUtils.waitForCompletion(futureArr3);
            } catch (InterruptedException e3) {
                Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e3);
            } catch (ExecutionException e4) {
                Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e4);
            }
            floatLargeArray2 = floatLargeArray;
            j2 = j;
            floatLargeArray3 = floatLargeArray6;
        } else {
            for (long j10 = 0; j10 < this.nl; j10++) {
                long j11 = j10 * 2;
                long j12 = j11 + 1;
                long j13 = j + j10;
                floatLargeArray4.setFloat(j11, floatLargeArray.getFloat(j13) * this.bk1l.getFloat(j11));
                floatLargeArray4.setFloat(j12, (-floatLargeArray.getFloat(j13)) * this.bk1l.getFloat(j12));
            }
            floatLargeArray2 = floatLargeArray;
            j2 = j;
            long j14 = 1;
            CommonUtils.cftbsub(this.nBluesteinl * 2, floatLargeArray4, 0L, this.ipl, this.nwl, this.wl);
            long j15 = 0;
            while (j15 < this.nBluesteinl) {
                long j16 = j15 * 2;
                long j17 = j16 + j14;
                float f = (floatLargeArray4.getFloat(j16) * this.bk2l.getFloat(j17)) + (floatLargeArray4.getFloat(j17) * this.bk2l.getFloat(j16));
                floatLargeArray4.setFloat(j16, (floatLargeArray4.getFloat(j16) * this.bk2l.getFloat(j16)) - (floatLargeArray4.getFloat(j17) * this.bk2l.getFloat(j17)));
                floatLargeArray4.setFloat(j17, f);
                j15++;
                j14 = 1;
            }
            floatLargeArray3 = floatLargeArray4;
        }
        FloatLargeArray floatLargeArray7 = floatLargeArray3;
        CommonUtils.cftfsub(this.nBluesteinl * 2, floatLargeArray3, 0L, this.ipl, this.nwl, this.wl);
        if (this.nl % 2 == 0) {
            long j18 = 1;
            floatLargeArray2.setFloat(j2, (this.bk1l.getFloat(0L) * floatLargeArray7.getFloat(0L)) + (this.bk1l.getFloat(1L) * floatLargeArray7.getFloat(1L)));
            floatLargeArray2.setFloat(j2 + 1, (this.bk1l.getFloat(this.nl) * floatLargeArray7.getFloat(this.nl)) + (this.bk1l.getFloat(this.nl + 1) * floatLargeArray7.getFloat(this.nl + 1)));
            long j19 = 1;
            while (j19 < this.nl / 2) {
                long j20 = j19 * 2;
                long j21 = j20 + j18;
                floatLargeArray2.setFloat(j2 + j20, (this.bk1l.getFloat(j20) * floatLargeArray7.getFloat(j20)) + (this.bk1l.getFloat(j21) * floatLargeArray7.getFloat(j21)));
                floatLargeArray2.setFloat(j2 + j21, ((-this.bk1l.getFloat(j21)) * floatLargeArray7.getFloat(j20)) + (this.bk1l.getFloat(j20) * floatLargeArray7.getFloat(j21)));
                j19++;
                j18 = 1;
            }
            return;
        }
        long j22 = 1;
        floatLargeArray2.setFloat(j2, (this.bk1l.getFloat(0L) * floatLargeArray7.getFloat(0L)) + (this.bk1l.getFloat(1L) * floatLargeArray7.getFloat(1L)));
        floatLargeArray2.setFloat(j2 + 1, ((-this.bk1l.getFloat(this.nl)) * floatLargeArray7.getFloat(this.nl - 1)) + (this.bk1l.getFloat(this.nl - 1) * floatLargeArray7.getFloat(this.nl)));
        long j23 = 1;
        while (true) {
            long j24 = this.nl;
            if (j23 < (j24 - j22) / 2) {
                long j25 = j23 * 2;
                long j26 = j25 + j22;
                floatLargeArray2.setFloat(j2 + j25, (this.bk1l.getFloat(j25) * floatLargeArray7.getFloat(j25)) + (this.bk1l.getFloat(j26) * floatLargeArray7.getFloat(j26)));
                floatLargeArray2.setFloat(j2 + j26, ((-this.bk1l.getFloat(j26)) * floatLargeArray7.getFloat(j25)) + (this.bk1l.getFloat(j25) * floatLargeArray7.getFloat(j26)));
                j23++;
                j22 = 1;
            } else {
                long j27 = j22;
                floatLargeArray2.setFloat((j2 + j24) - j27, (this.bk1l.getFloat(j24 - j27) * floatLargeArray7.getFloat(this.nl - j27)) + (this.bk1l.getFloat(this.nl) * floatLargeArray7.getFloat(this.nl)));
                return;
            }
        }
    }

    private void bluestein_real_inverse(final float[] fArr, final int i) {
        int i2;
        int i3;
        int i4;
        final float[] fArr2 = new float[this.nBluestein * 2];
        int i5 = 0;
        if (this.n % 2 == 0) {
            float f = fArr[i];
            float[] fArr3 = this.bk1;
            fArr2[0] = f * fArr3[0];
            fArr2[1] = fArr[i] * fArr3[1];
            int i6 = 1;
            while (true) {
                i4 = this.n;
                if (i6 >= i4 / 2) {
                    break;
                }
                int i7 = i6 * 2;
                int i8 = i7 + 1;
                int i9 = i + i7;
                int i10 = i + i8;
                float f2 = fArr[i9];
                float[] fArr4 = this.bk1;
                fArr2[i7] = (f2 * fArr4[i7]) - (fArr[i10] * fArr4[i8]);
                fArr2[i8] = (fArr[i9] * fArr4[i8]) + (fArr[i10] * fArr4[i7]);
                i6++;
            }
            int i11 = i + 1;
            float f3 = fArr[i11];
            float[] fArr5 = this.bk1;
            fArr2[i4] = f3 * fArr5[i4];
            fArr2[i4 + 1] = fArr[i11] * fArr5[i4 + 1];
            int i12 = (i4 / 2) + 1;
            while (true) {
                int i13 = this.n;
                if (i12 >= i13) {
                    break;
                }
                int i14 = i12 * 2;
                int i15 = i14 + 1;
                int i16 = (i + (i13 * 2)) - i14;
                int i17 = i16 + 1;
                float f4 = fArr[i16];
                float[] fArr6 = this.bk1;
                fArr2[i14] = (f4 * fArr6[i14]) + (fArr[i17] * fArr6[i15]);
                fArr2[i15] = (fArr[i16] * fArr6[i15]) - (fArr[i17] * fArr6[i14]);
                i12++;
            }
        } else {
            float f5 = fArr[i];
            float[] fArr7 = this.bk1;
            fArr2[0] = f5 * fArr7[0];
            fArr2[1] = fArr[i] * fArr7[1];
            int i18 = 1;
            while (true) {
                i2 = this.n;
                if (i18 >= (i2 - 1) / 2) {
                    break;
                }
                int i19 = i18 * 2;
                int i20 = i19 + 1;
                int i21 = i + i19;
                int i22 = i + i20;
                float f6 = fArr[i21];
                float[] fArr8 = this.bk1;
                fArr2[i19] = (f6 * fArr8[i19]) - (fArr[i22] * fArr8[i20]);
                fArr2[i20] = (fArr[i21] * fArr8[i20]) + (fArr[i22] * fArr8[i19]);
                i18++;
            }
            float f7 = fArr[(i + i2) - 1];
            float[] fArr9 = this.bk1;
            int i23 = i + 1;
            fArr2[i2 - 1] = (f7 * fArr9[i2 - 1]) - (fArr[i23] * fArr9[i2]);
            fArr2[i2] = (fArr[(i + i2) - 1] * fArr9[i2]) + (fArr[i23] * fArr9[i2 - 1]);
            fArr2[i2 + 1] = (fArr[(i + i2) - 1] * fArr9[i2 + 1]) + (fArr[i23] * fArr9[i2 + 2]);
            fArr2[i2 + 2] = (fArr[(i + i2) - 1] * fArr9[i2 + 2]) - (fArr[i23] * fArr9[i2 + 1]);
            int i24 = ((i2 - 1) / 2) + 2;
            while (true) {
                int i25 = this.n;
                if (i24 >= i25) {
                    break;
                }
                int i26 = i24 * 2;
                int i27 = i26 + 1;
                int i28 = (i + (i25 * 2)) - i26;
                int i29 = i28 + 1;
                float f8 = fArr[i28];
                float[] fArr10 = this.bk1;
                fArr2[i26] = (f8 * fArr10[i26]) + (fArr[i29] * fArr10[i27]);
                fArr2[i27] = (fArr[i28] * fArr10[i27]) - (fArr[i29] * fArr10[i26]);
                i24++;
            }
        }
        CommonUtils.cftbsub(this.nBluestein * 2, fArr2, 0, this.ip, this.nw, this.w);
        int numberOfThreads = ConcurrencyUtils.getNumberOfThreads();
        if (numberOfThreads > 1 && this.n >= CommonUtils.getThreadsBeginN_1D_FFT_2Threads()) {
            int i30 = (numberOfThreads < 4 || ((long) this.n) < CommonUtils.getThreadsBeginN_1D_FFT_4Threads()) ? 2 : 4;
            Future[] futureArr = new Future[i30];
            int i31 = this.nBluestein / i30;
            int i32 = 0;
            while (i32 < i30) {
                final int i33 = i32 * i31;
                final int i34 = i32 == i30 + (-1) ? this.nBluestein : i33 + i31;
                futureArr[i32] = ConcurrencyUtils.submit(new Runnable() { // from class: org.jtransforms.fft.FloatFFT_1D.21
                    @Override // java.lang.Runnable
                    public void run() {
                        for (int i35 = i33; i35 < i34; i35++) {
                            int i36 = i35 * 2;
                            int i37 = i36 + 1;
                            float f9 = ((-fArr2[i36]) * FloatFFT_1D.this.bk2[i37]) + (fArr2[i37] * FloatFFT_1D.this.bk2[i36]);
                            float[] fArr11 = fArr2;
                            fArr11[i36] = (fArr11[i36] * FloatFFT_1D.this.bk2[i36]) + (fArr2[i37] * FloatFFT_1D.this.bk2[i37]);
                            fArr2[i37] = f9;
                        }
                    }
                });
                i32++;
            }
            try {
                ConcurrencyUtils.waitForCompletion(futureArr);
            } catch (InterruptedException e) {
                Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e);
            } catch (ExecutionException e2) {
                Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e2);
            }
            CommonUtils.cftfsub(this.nBluestein * 2, fArr2, 0, this.ip, this.nw, this.w);
            int i35 = this.n / i30;
            while (i5 < i30) {
                final int i36 = i5 * i35;
                final int i37 = i5 == i30 + (-1) ? this.n : i36 + i35;
                futureArr[i5] = ConcurrencyUtils.submit(new Runnable() { // from class: org.jtransforms.fft.FloatFFT_1D.22
                    @Override // java.lang.Runnable
                    public void run() {
                        for (int i38 = i36; i38 < i37; i38++) {
                            int i39 = i38 * 2;
                            int i40 = i39 + 1;
                            fArr[i + i38] = (FloatFFT_1D.this.bk1[i39] * fArr2[i39]) - (FloatFFT_1D.this.bk1[i40] * fArr2[i40]);
                        }
                    }
                });
                i5++;
            }
            try {
                ConcurrencyUtils.waitForCompletion(futureArr);
                return;
            } catch (InterruptedException e3) {
                Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e3);
                return;
            } catch (ExecutionException e4) {
                Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e4);
                return;
            }
        }
        int i38 = 0;
        while (true) {
            i3 = this.nBluestein;
            if (i38 >= i3) {
                break;
            }
            int i39 = i38 * 2;
            int i40 = i39 + 1;
            float f9 = fArr2[i39];
            float[] fArr11 = this.bk2;
            float f10 = fArr11[i40];
            float f11 = fArr2[i40];
            float f12 = fArr11[i39];
            fArr2[i39] = (f9 * f12) + (f11 * f10);
            fArr2[i40] = ((-f9) * f10) + (f11 * f12);
            i38++;
        }
        CommonUtils.cftfsub(i3 * 2, fArr2, 0, this.ip, this.nw, this.w);
        while (i5 < this.n) {
            int i41 = i5 * 2;
            int i42 = i41 + 1;
            float[] fArr12 = this.bk1;
            fArr[i + i5] = (fArr12[i41] * fArr2[i41]) - (fArr12[i42] * fArr2[i42]);
            i5++;
        }
    }

    private void bluestein_real_inverse(final FloatLargeArray floatLargeArray, final long j) {
        Class<FloatFFT_1D> cls;
        long j2;
        long j3;
        long j4;
        long j5;
        Class<FloatFFT_1D> cls2 = FloatFFT_1D.class;
        long j6 = 2;
        final FloatLargeArray floatLargeArray2 = new FloatLargeArray(this.nBluesteinl * 2);
        long j7 = 1;
        if (this.nl % 2 == 0) {
            floatLargeArray2.setFloat(0L, floatLargeArray.getFloat(j) * this.bk1l.getFloat(0L));
            floatLargeArray2.setFloat(1L, floatLargeArray.getFloat(j) * this.bk1l.getFloat(1L));
            long j8 = 1;
            while (true) {
                j5 = this.nl;
                if (j8 >= j5 / j6) {
                    break;
                }
                long j9 = j8 * j6;
                long j10 = j9 + j7;
                long j11 = j + j9;
                long j12 = j + j10;
                floatLargeArray2.setFloat(j9, (floatLargeArray.getFloat(j11) * this.bk1l.getFloat(j9)) - (floatLargeArray.getFloat(j12) * this.bk1l.getFloat(j10)));
                floatLargeArray2.setFloat(j10, (floatLargeArray.getFloat(j11) * this.bk1l.getFloat(j10)) + (floatLargeArray.getFloat(j12) * this.bk1l.getFloat(j9)));
                j8++;
                j7 = 1;
                cls2 = cls2;
                j6 = 2;
            }
            long j13 = j7;
            cls = cls2;
            long j14 = j + j13;
            floatLargeArray2.setFloat(j5, floatLargeArray.getFloat(j14) * this.bk1l.getFloat(this.nl));
            floatLargeArray2.setFloat(this.nl + j13, floatLargeArray.getFloat(j14) * this.bk1l.getFloat(this.nl + j13));
            long j15 = 2;
            long j16 = (this.nl / 2) + j13;
            while (true) {
                long j17 = this.nl;
                if (j16 >= j17) {
                    break;
                }
                long j18 = j16 * j15;
                long j19 = j16;
                long j20 = j18 + j13;
                long j21 = (j + (j17 * j15)) - j18;
                long j22 = j21 + j13;
                floatLargeArray2.setFloat(j18, (floatLargeArray.getFloat(j21) * this.bk1l.getFloat(j18)) + (floatLargeArray.getFloat(j22) * this.bk1l.getFloat(j20)));
                floatLargeArray2.setFloat(j20, (floatLargeArray.getFloat(j21) * this.bk1l.getFloat(j20)) - (floatLargeArray.getFloat(j22) * this.bk1l.getFloat(j18)));
                j13 = 1;
                j16 = j19 + 1;
                j15 = 2;
            }
            j3 = j13;
        } else {
            long j23 = 1;
            cls = cls2;
            floatLargeArray2.setFloat(0L, floatLargeArray.getFloat(j) * this.bk1l.getFloat(0L));
            floatLargeArray2.setFloat(1L, floatLargeArray.getFloat(j) * this.bk1l.getFloat(1L));
            long j24 = 1;
            while (true) {
                j2 = this.nl;
                if (j24 >= (j2 - j23) / 2) {
                    break;
                }
                long j25 = j24 * 2;
                long j26 = j25 + j23;
                long j27 = j + j25;
                long j28 = j + j26;
                floatLargeArray2.setFloat(j25, (floatLargeArray.getFloat(j27) * this.bk1l.getFloat(j25)) - (floatLargeArray.getFloat(j28) * this.bk1l.getFloat(j26)));
                floatLargeArray2.setFloat(j26, (floatLargeArray.getFloat(j27) * this.bk1l.getFloat(j26)) + (floatLargeArray.getFloat(j28) * this.bk1l.getFloat(j25)));
                j23 = 1;
                j24++;
            }
            long j29 = j + j23;
            floatLargeArray2.setFloat(j2 - j23, (floatLargeArray.getFloat((j + j2) - j23) * this.bk1l.getFloat(this.nl - j23)) - (floatLargeArray.getFloat(j29) * this.bk1l.getFloat(this.nl)));
            long j30 = this.nl;
            floatLargeArray2.setFloat(j30, (floatLargeArray.getFloat((j + j30) - j23) * this.bk1l.getFloat(this.nl)) + (floatLargeArray.getFloat(j29) * this.bk1l.getFloat(this.nl - j23)));
            long j31 = this.nl;
            floatLargeArray2.setFloat(j31 + j23, (floatLargeArray.getFloat((j + j31) - j23) * this.bk1l.getFloat(this.nl + j23)) + (floatLargeArray.getFloat(j29) * this.bk1l.getFloat(this.nl + 2)));
            long j32 = this.nl;
            long j33 = 1;
            floatLargeArray2.setFloat(j32 + 2, (floatLargeArray.getFloat((j + j32) - 1) * this.bk1l.getFloat(this.nl + 2)) - (floatLargeArray.getFloat(j29) * this.bk1l.getFloat(this.nl + 1)));
            long j34 = 2;
            long j35 = ((this.nl - 1) / 2) + 2;
            while (true) {
                long j36 = this.nl;
                if (j35 >= j36) {
                    break;
                }
                long j37 = j35 * j34;
                long j38 = j35;
                long j39 = j37 + j33;
                long j40 = (j + (j36 * j34)) - j37;
                long j41 = j40 + j33;
                floatLargeArray2.setFloat(j37, (floatLargeArray.getFloat(j40) * this.bk1l.getFloat(j37)) + (floatLargeArray.getFloat(j41) * this.bk1l.getFloat(j39)));
                floatLargeArray2.setFloat(j39, (floatLargeArray.getFloat(j40) * this.bk1l.getFloat(j39)) - (floatLargeArray.getFloat(j41) * this.bk1l.getFloat(j37)));
                j35 = j38 + 1;
                j33 = 1;
                j34 = 2;
            }
            j3 = j33;
        }
        long j42 = j3;
        CommonUtils.cftbsub(this.nBluesteinl * 2, floatLargeArray2, 0L, this.ipl, this.nwl, this.wl);
        int numberOfThreads = ConcurrencyUtils.getNumberOfThreads();
        if (numberOfThreads > 1 && this.nl > CommonUtils.getThreadsBeginN_1D_FFT_2Threads()) {
            int i = (numberOfThreads < 4 || this.nl <= CommonUtils.getThreadsBeginN_1D_FFT_4Threads()) ? 2 : 4;
            Future[] futureArr = new Future[i];
            long j43 = i;
            long j44 = this.nBluesteinl / j43;
            int i2 = 0;
            while (i2 < i) {
                final long j45 = i2 * j44;
                final long j46 = i2 == i + (-1) ? this.nBluesteinl : j45 + j44;
                futureArr[i2] = ConcurrencyUtils.submit(new Runnable() { // from class: org.jtransforms.fft.FloatFFT_1D.23
                    @Override // java.lang.Runnable
                    public void run() {
                        for (long j47 = j45; j47 < j46; j47++) {
                            long j48 = 2 * j47;
                            long j49 = j48 + 1;
                            float f = ((-floatLargeArray2.getFloat(j48)) * FloatFFT_1D.this.bk2l.getFloat(j49)) + (floatLargeArray2.getFloat(j49) * FloatFFT_1D.this.bk2l.getFloat(j48));
                            FloatLargeArray floatLargeArray3 = floatLargeArray2;
                            floatLargeArray3.setFloat(j48, (floatLargeArray3.getFloat(j48) * FloatFFT_1D.this.bk2l.getFloat(j48)) + (floatLargeArray2.getFloat(j49) * FloatFFT_1D.this.bk2l.getFloat(j49)));
                            floatLargeArray2.setFloat(j49, f);
                        }
                    }
                });
                i2++;
            }
            try {
                ConcurrencyUtils.waitForCompletion(futureArr);
            } catch (InterruptedException e) {
                Logger.getLogger(cls.getName()).log(Level.SEVERE, (String) null, (Throwable) e);
            } catch (ExecutionException e2) {
                Logger.getLogger(cls.getName()).log(Level.SEVERE, (String) null, (Throwable) e2);
            }
            CommonUtils.cftfsub(this.nBluesteinl * 2, floatLargeArray2, 0L, this.ipl, this.nwl, this.wl);
            long j47 = this.nl / j43;
            int i3 = 0;
            while (i3 < i) {
                final long j48 = i3 * j47;
                final long j49 = i3 == i + (-1) ? this.nl : j48 + j47;
                futureArr[i3] = ConcurrencyUtils.submit(new Runnable() { // from class: org.jtransforms.fft.FloatFFT_1D.24
                    @Override // java.lang.Runnable
                    public void run() {
                        for (long j50 = j48; j50 < j49; j50++) {
                            long j51 = 2 * j50;
                            long j52 = j51 + 1;
                            floatLargeArray.setFloat(j + j50, (FloatFFT_1D.this.bk1l.getFloat(j51) * floatLargeArray2.getFloat(j51)) - (FloatFFT_1D.this.bk1l.getFloat(j52) * floatLargeArray2.getFloat(j52)));
                        }
                    }
                });
                i3++;
            }
            try {
                ConcurrencyUtils.waitForCompletion(futureArr);
                return;
            } catch (InterruptedException e3) {
                Logger.getLogger(cls.getName()).log(Level.SEVERE, (String) null, (Throwable) e3);
                return;
            } catch (ExecutionException e4) {
                Logger.getLogger(cls.getName()).log(Level.SEVERE, (String) null, (Throwable) e4);
                return;
            }
        }
        long j50 = 0;
        while (true) {
            j4 = this.nBluesteinl;
            if (j50 >= j4) {
                break;
            }
            long j51 = j50 * 2;
            long j52 = j51 + j42;
            float f = ((-floatLargeArray2.getFloat(j51)) * this.bk2l.getFloat(j52)) + (floatLargeArray2.getFloat(j52) * this.bk2l.getFloat(j51));
            floatLargeArray2.setFloat(j51, (floatLargeArray2.getFloat(j51) * this.bk2l.getFloat(j51)) + (floatLargeArray2.getFloat(j52) * this.bk2l.getFloat(j52)));
            floatLargeArray2.setFloat(j52, f);
            j50 += j42;
        }
        CommonUtils.cftfsub(j4 * 2, floatLargeArray2, 0L, this.ipl, this.nwl, this.wl);
        for (long j53 = 0; j53 < this.nl; j53 += j42) {
            long j54 = j53 * 2;
            long j55 = j54 + j42;
            floatLargeArray.setFloat(j + j53, (this.bk1l.getFloat(j54) * floatLargeArray2.getFloat(j54)) - (this.bk1l.getFloat(j55) * floatLargeArray2.getFloat(j55)));
        }
    }

    private void bluestein_real_inverse2(final float[] fArr, final int i) {
        final float[] fArr2 = new float[this.nBluestein * 2];
        int numberOfThreads = ConcurrencyUtils.getNumberOfThreads();
        if (numberOfThreads > 1 && this.n >= CommonUtils.getThreadsBeginN_1D_FFT_2Threads()) {
            int i2 = (numberOfThreads < 4 || ((long) this.n) < CommonUtils.getThreadsBeginN_1D_FFT_4Threads()) ? 2 : 4;
            Future[] futureArr = new Future[i2];
            int i3 = this.n / i2;
            int i4 = 0;
            while (i4 < i2) {
                final int i5 = i4 * i3;
                final int i6 = i4 == i2 + (-1) ? this.n : i5 + i3;
                int i7 = i4;
                futureArr[i7] = ConcurrencyUtils.submit(new Runnable() { // from class: org.jtransforms.fft.FloatFFT_1D.25
                    @Override // java.lang.Runnable
                    public void run() {
                        for (int i8 = i5; i8 < i6; i8++) {
                            int i9 = i8 * 2;
                            int i10 = i9 + 1;
                            int i11 = i + i8;
                            fArr2[i9] = fArr[i11] * FloatFFT_1D.this.bk1[i9];
                            fArr2[i10] = fArr[i11] * FloatFFT_1D.this.bk1[i10];
                        }
                    }
                });
                i4 = i7 + 1;
            }
            try {
                ConcurrencyUtils.waitForCompletion(futureArr);
            } catch (InterruptedException e) {
                Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e);
            } catch (ExecutionException e2) {
                Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e2);
            }
            CommonUtils.cftbsub(this.nBluestein * 2, fArr2, 0, this.ip, this.nw, this.w);
            int i8 = this.nBluestein / i2;
            int i9 = 0;
            while (i9 < i2) {
                final int i10 = i9 * i8;
                final int i11 = i9 == i2 + (-1) ? this.nBluestein : i10 + i8;
                futureArr[i9] = ConcurrencyUtils.submit(new Runnable() { // from class: org.jtransforms.fft.FloatFFT_1D.26
                    @Override // java.lang.Runnable
                    public void run() {
                        for (int i12 = i10; i12 < i11; i12++) {
                            int i13 = i12 * 2;
                            int i14 = i13 + 1;
                            float f = ((-fArr2[i13]) * FloatFFT_1D.this.bk2[i14]) + (fArr2[i14] * FloatFFT_1D.this.bk2[i13]);
                            float[] fArr3 = fArr2;
                            fArr3[i13] = (fArr3[i13] * FloatFFT_1D.this.bk2[i13]) + (fArr2[i14] * FloatFFT_1D.this.bk2[i14]);
                            fArr2[i14] = f;
                        }
                    }
                });
                i9++;
            }
            try {
                ConcurrencyUtils.waitForCompletion(futureArr);
            } catch (InterruptedException e3) {
                Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e3);
            } catch (ExecutionException e4) {
                Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e4);
            }
        } else {
            for (int i12 = 0; i12 < this.n; i12++) {
                int i13 = i12 * 2;
                int i14 = i13 + 1;
                int i15 = i + i12;
                float f = fArr[i15];
                float[] fArr3 = this.bk1;
                fArr2[i13] = f * fArr3[i13];
                fArr2[i14] = fArr[i15] * fArr3[i14];
            }
            CommonUtils.cftbsub(this.nBluestein * 2, fArr2, 0, this.ip, this.nw, this.w);
            for (int i16 = 0; i16 < this.nBluestein; i16++) {
                int i17 = i16 * 2;
                int i18 = i17 + 1;
                float f2 = fArr2[i17];
                float[] fArr4 = this.bk2;
                float f3 = fArr4[i18];
                float f4 = fArr2[i18];
                float f5 = fArr4[i17];
                fArr2[i17] = (f2 * f5) + (f4 * f3);
                fArr2[i18] = ((-f2) * f3) + (f4 * f5);
            }
        }
        CommonUtils.cftfsub(this.nBluestein * 2, fArr2, 0, this.ip, this.nw, this.w);
        int i19 = this.n;
        if (i19 % 2 == 0) {
            float[] fArr5 = this.bk1;
            fArr[i] = (fArr5[0] * fArr2[0]) - (fArr5[1] * fArr2[1]);
            fArr[i + 1] = (fArr5[i19] * fArr2[i19]) - (fArr5[i19 + 1] * fArr2[i19 + 1]);
            for (int i20 = 1; i20 < this.n / 2; i20++) {
                int i21 = i20 * 2;
                int i22 = i21 + 1;
                float[] fArr6 = this.bk1;
                fArr[i + i21] = (fArr6[i21] * fArr2[i21]) - (fArr6[i22] * fArr2[i22]);
                fArr[i + i22] = (fArr6[i22] * fArr2[i21]) + (fArr6[i21] * fArr2[i22]);
            }
            return;
        }
        float[] fArr7 = this.bk1;
        fArr[i] = (fArr7[0] * fArr2[0]) - (fArr7[1] * fArr2[1]);
        fArr[i + 1] = (fArr7[i19] * fArr2[i19 - 1]) + (fArr7[i19 - 1] * fArr2[i19]);
        int i23 = 1;
        while (true) {
            int i24 = this.n;
            if (i23 < (i24 - 1) / 2) {
                int i25 = i23 * 2;
                int i26 = i25 + 1;
                float[] fArr8 = this.bk1;
                fArr[i + i25] = (fArr8[i25] * fArr2[i25]) - (fArr8[i26] * fArr2[i26]);
                fArr[i + i26] = (fArr8[i26] * fArr2[i25]) + (fArr8[i25] * fArr2[i26]);
                i23++;
            } else {
                float[] fArr9 = this.bk1;
                fArr[(i + i24) - 1] = (fArr9[i24 - 1] * fArr2[i24 - 1]) - (fArr9[i24] * fArr2[i24]);
                return;
            }
        }
    }

    private void bluestein_real_inverse2(final FloatLargeArray floatLargeArray, final long j) {
        FloatLargeArray floatLargeArray2;
        long j2;
        FloatLargeArray floatLargeArray3;
        FloatLargeArray floatLargeArray4 = new FloatLargeArray(this.nBluesteinl * 2);
        int numberOfThreads = ConcurrencyUtils.getNumberOfThreads();
        if (numberOfThreads > 1 && this.nl > CommonUtils.getThreadsBeginN_1D_FFT_2Threads()) {
            int i = (numberOfThreads < 4 || this.nl <= CommonUtils.getThreadsBeginN_1D_FFT_4Threads()) ? 2 : 4;
            Future[] futureArr = new Future[i];
            long j3 = i;
            long j4 = this.nl / j3;
            int i2 = 0;
            while (i2 < i) {
                final long j5 = i2 * j4;
                final long j6 = i2 == i + (-1) ? this.nl : j5 + j4;
                Future[] futureArr2 = futureArr;
                int i3 = i;
                final FloatLargeArray floatLargeArray5 = floatLargeArray4;
                futureArr2[i2] = ConcurrencyUtils.submit(new Runnable() { // from class: org.jtransforms.fft.FloatFFT_1D.27
                    @Override // java.lang.Runnable
                    public void run() {
                        for (long j7 = j5; j7 < j6; j7++) {
                            long j8 = 2 * j7;
                            long j9 = j8 + 1;
                            long j10 = j + j7;
                            floatLargeArray5.setFloat(j8, floatLargeArray.getFloat(j10) * FloatFFT_1D.this.bk1l.getFloat(j8));
                            floatLargeArray5.setFloat(j9, floatLargeArray.getFloat(j10) * FloatFFT_1D.this.bk1l.getFloat(j9));
                        }
                    }
                });
                i2++;
                i = i3;
                floatLargeArray4 = floatLargeArray4;
                futureArr = futureArr2;
            }
            Future[] futureArr3 = futureArr;
            int i4 = i;
            final FloatLargeArray floatLargeArray6 = floatLargeArray4;
            try {
                ConcurrencyUtils.waitForCompletion(futureArr3);
            } catch (InterruptedException e) {
                Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e);
            } catch (ExecutionException e2) {
                Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e2);
            }
            CommonUtils.cftbsub(this.nBluesteinl * 2, floatLargeArray6, 0L, this.ipl, this.nwl, this.wl);
            long j7 = this.nBluesteinl / j3;
            int i5 = 0;
            while (i5 < i4) {
                final long j8 = i5 * j7;
                final long j9 = i5 == i4 + (-1) ? this.nBluesteinl : j8 + j7;
                futureArr3[i5] = ConcurrencyUtils.submit(new Runnable() { // from class: org.jtransforms.fft.FloatFFT_1D.28
                    @Override // java.lang.Runnable
                    public void run() {
                        for (long j10 = j8; j10 < j9; j10++) {
                            long j11 = 2 * j10;
                            long j12 = j11 + 1;
                            float f = ((-floatLargeArray6.getFloat(j11)) * FloatFFT_1D.this.bk2l.getFloat(j12)) + (floatLargeArray6.getFloat(j12) * FloatFFT_1D.this.bk2l.getFloat(j11));
                            FloatLargeArray floatLargeArray7 = floatLargeArray6;
                            floatLargeArray7.setFloat(j11, (floatLargeArray7.getFloat(j11) * FloatFFT_1D.this.bk2l.getFloat(j11)) + (floatLargeArray6.getFloat(j12) * FloatFFT_1D.this.bk2l.getFloat(j12)));
                            floatLargeArray6.setFloat(j12, f);
                        }
                    }
                });
                i5++;
            }
            try {
                ConcurrencyUtils.waitForCompletion(futureArr3);
            } catch (InterruptedException e3) {
                Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e3);
            } catch (ExecutionException e4) {
                Logger.getLogger(FloatFFT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e4);
            }
            floatLargeArray2 = floatLargeArray;
            j2 = j;
            floatLargeArray3 = floatLargeArray6;
        } else {
            for (long j10 = 0; j10 < this.nl; j10++) {
                long j11 = j10 * 2;
                long j12 = j11 + 1;
                long j13 = j + j10;
                floatLargeArray4.setFloat(j11, floatLargeArray.getFloat(j13) * this.bk1l.getFloat(j11));
                floatLargeArray4.setFloat(j12, floatLargeArray.getFloat(j13) * this.bk1l.getFloat(j12));
            }
            floatLargeArray2 = floatLargeArray;
            j2 = j;
            long j14 = 1;
            CommonUtils.cftbsub(this.nBluesteinl * 2, floatLargeArray4, 0L, this.ipl, this.nwl, this.wl);
            long j15 = 0;
            while (j15 < this.nBluesteinl) {
                long j16 = j15 * 2;
                long j17 = j16 + j14;
                float f = ((-floatLargeArray4.getFloat(j16)) * this.bk2l.getFloat(j17)) + (floatLargeArray4.getFloat(j17) * this.bk2l.getFloat(j16));
                floatLargeArray4.setFloat(j16, (floatLargeArray4.getFloat(j16) * this.bk2l.getFloat(j16)) + (floatLargeArray4.getFloat(j17) * this.bk2l.getFloat(j17)));
                floatLargeArray4.setFloat(j17, f);
                j15++;
                j14 = 1;
            }
            floatLargeArray3 = floatLargeArray4;
        }
        FloatLargeArray floatLargeArray7 = floatLargeArray3;
        CommonUtils.cftfsub(this.nBluesteinl * 2, floatLargeArray3, 0L, this.ipl, this.nwl, this.wl);
        if (this.nl % 2 == 0) {
            long j18 = 1;
            floatLargeArray2.setFloat(j2, (this.bk1l.getFloat(0L) * floatLargeArray7.getFloat(0L)) - (this.bk1l.getFloat(1L) * floatLargeArray7.getFloat(1L)));
            floatLargeArray2.setFloat(j2 + 1, (this.bk1l.getFloat(this.nl) * floatLargeArray7.getFloat(this.nl)) - (this.bk1l.getFloat(this.nl + 1) * floatLargeArray7.getFloat(this.nl + 1)));
            long j19 = 1;
            while (j19 < this.nl / 2) {
                long j20 = j19 * 2;
                long j21 = j20 + j18;
                floatLargeArray2.setFloat(j2 + j20, (this.bk1l.getFloat(j20) * floatLargeArray7.getFloat(j20)) - (this.bk1l.getFloat(j21) * floatLargeArray7.getFloat(j21)));
                floatLargeArray2.setFloat(j2 + j21, (this.bk1l.getFloat(j21) * floatLargeArray7.getFloat(j20)) + (this.bk1l.getFloat(j20) * floatLargeArray7.getFloat(j21)));
                j19++;
                j18 = 1;
            }
            return;
        }
        long j22 = 1;
        floatLargeArray2.setFloat(j2, (this.bk1l.getFloat(0L) * floatLargeArray7.getFloat(0L)) - (this.bk1l.getFloat(1L) * floatLargeArray7.getFloat(1L)));
        floatLargeArray2.setFloat(j2 + 1, (this.bk1l.getFloat(this.nl) * floatLargeArray7.getFloat(this.nl - 1)) + (this.bk1l.getFloat(this.nl - 1) * floatLargeArray7.getFloat(this.nl)));
        long j23 = 1;
        while (true) {
            long j24 = this.nl;
            if (j23 < (j24 - j22) / 2) {
                long j25 = j23 * 2;
                long j26 = j25 + j22;
                floatLargeArray2.setFloat(j2 + j25, (this.bk1l.getFloat(j25) * floatLargeArray7.getFloat(j25)) - (this.bk1l.getFloat(j26) * floatLargeArray7.getFloat(j26)));
                floatLargeArray2.setFloat(j2 + j26, (this.bk1l.getFloat(j26) * floatLargeArray7.getFloat(j25)) + (this.bk1l.getFloat(j25) * floatLargeArray7.getFloat(j26)));
                j23++;
                j22 = 1;
            } else {
                long j27 = j22;
                floatLargeArray2.setFloat((j2 + j24) - j27, (this.bk1l.getFloat(j24 - j27) * floatLargeArray7.getFloat(this.nl - j27)) - (this.bk1l.getFloat(this.nl) * floatLargeArray7.getFloat(this.nl)));
                return;
            }
        }
    }

    void rfftf(float[] fArr, int i) {
        int i2 = this.n;
        if (i2 == 1) {
            return;
        }
        float[] fArr2 = new float[i2];
        int i3 = i2 * 2;
        int i4 = (int) this.wtable_r[i3 + 1];
        int i5 = i3 - 1;
        int i6 = 1;
        int i7 = 1;
        while (i7 <= i4) {
            int i8 = (int) this.wtable_r[(i4 - i7) + 2 + i3];
            int i9 = i2 / i8;
            int i10 = this.n / i2;
            int i11 = i10 * i9;
            int i12 = i5 - ((i8 - 1) * i10);
            int i13 = 1 - i6;
            if (i8 != 2) {
                if (i8 != 3) {
                    if (i8 != 4) {
                        if (i8 != 5) {
                            if (i10 == 1) {
                                i13 = 1 - i13;
                            }
                            if (i13 == 0) {
                                radfg(i10, i8, i9, i11, fArr, i, fArr2, 0, i12);
                                i6 = 1;
                            } else {
                                radfg(i10, i8, i9, i11, fArr2, 0, fArr, i, i12);
                                i6 = 0;
                            }
                            i7++;
                            i2 = i9;
                            i5 = i12;
                        } else if (i13 == 0) {
                            radf5(i10, i9, fArr, i, fArr2, 0, i12);
                        } else {
                            radf5(i10, i9, fArr2, 0, fArr, i, i12);
                        }
                    } else if (i13 == 0) {
                        radf4(i10, i9, fArr, i, fArr2, 0, i12);
                    } else {
                        radf4(i10, i9, fArr2, 0, fArr, i, i12);
                    }
                } else if (i13 == 0) {
                    radf3(i10, i9, fArr, i, fArr2, 0, i12);
                } else {
                    radf3(i10, i9, fArr2, 0, fArr, i, i12);
                }
            } else if (i13 == 0) {
                radf2(i10, i9, fArr, i, fArr2, 0, i12);
            } else {
                radf2(i10, i9, fArr2, 0, fArr, i, i12);
            }
            i6 = i13;
            i7++;
            i2 = i9;
            i5 = i12;
        }
        if (i6 == 1) {
            return;
        }
        System.arraycopy(fArr2, 0, fArr, i, this.n);
    }

    void rfftf(FloatLargeArray floatLargeArray, long j) {
        long j2;
        FloatLargeArray floatLargeArray2;
        FloatFFT_1D floatFFT_1D = this;
        if (floatFFT_1D.nl == 1) {
            return;
        }
        FloatLargeArray floatLargeArray3 = new FloatLargeArray(floatFFT_1D.nl);
        long j3 = floatFFT_1D.nl * 2;
        long j4 = (long) floatFFT_1D.wtable_rl.getFloat(j3 + 1);
        long j5 = floatFFT_1D.nl;
        long j6 = j3 - 1;
        long j7 = 1;
        long j8 = 1;
        while (j8 <= j4) {
            int i = (int) floatFFT_1D.wtable_rl.getFloat((j4 - j8) + 2 + j3);
            long j9 = i;
            long j10 = j5 / j9;
            long j11 = floatFFT_1D.nl / j5;
            long j12 = j11 * j10;
            long j13 = j6 - ((i - 1) * j11);
            long j14 = 1 - j7;
            if (i == 2) {
                j2 = j4;
                floatLargeArray2 = floatLargeArray3;
                if (j14 == 0) {
                    radf2(j11, j10, floatLargeArray, j, floatLargeArray2, 0L, j13);
                } else {
                    radf2(j11, j10, floatLargeArray2, 0L, floatLargeArray, j, j13);
                }
            } else if (i == 3) {
                j2 = j4;
                floatLargeArray2 = floatLargeArray3;
                if (j14 == 0) {
                    radf3(j11, j10, floatLargeArray, j, floatLargeArray2, 0L, j13);
                } else {
                    radf3(j11, j10, floatLargeArray2, 0L, floatLargeArray, j, j13);
                }
            } else if (i == 4) {
                j2 = j4;
                floatLargeArray2 = floatLargeArray3;
                if (j14 == 0) {
                    radf4(j11, j10, floatLargeArray, j, floatLargeArray2, 0L, j13);
                } else {
                    radf4(j11, j10, floatLargeArray2, 0L, floatLargeArray, j, j13);
                }
            } else if (i != 5) {
                if (j11 == 1) {
                    j14 = 1 - j14;
                }
                if (j14 == 0) {
                    j2 = j4;
                    floatLargeArray2 = floatLargeArray3;
                    radfg(j11, j9, j10, j12, floatLargeArray, j, floatLargeArray3, 0L, j13);
                    j7 = 1;
                } else {
                    j2 = j4;
                    floatLargeArray2 = floatLargeArray3;
                    radfg(j11, j9, j10, j12, floatLargeArray2, 0L, floatLargeArray, j, j13);
                    j7 = 0;
                }
                j8++;
                floatFFT_1D = this;
                j5 = j10;
                j6 = j13;
                j4 = j2;
                floatLargeArray3 = floatLargeArray2;
            } else {
                j2 = j4;
                floatLargeArray2 = floatLargeArray3;
                if (j14 == 0) {
                    radf5(j11, j10, floatLargeArray, j, floatLargeArray2, 0L, j13);
                } else {
                    radf5(j11, j10, floatLargeArray2, 0L, floatLargeArray, j, j13);
                }
            }
            j7 = j14;
            j8++;
            floatFFT_1D = this;
            j5 = j10;
            j6 = j13;
            j4 = j2;
            floatLargeArray3 = floatLargeArray2;
        }
        FloatLargeArray floatLargeArray4 = floatLargeArray3;
        if (j7 == 1) {
            return;
        }
        LargeArrayUtils.arraycopy(floatLargeArray4, 0L, floatLargeArray, j, this.nl);
    }

    void rfftb(float[] fArr, int i) {
        int i2;
        int i3;
        int i4 = this.n;
        if (i4 == 1) {
            return;
        }
        float[] fArr2 = new float[i4];
        int i5 = i4 * 2;
        int i6 = (int) this.wtable_r[i5 + 1];
        int i7 = i4;
        int i8 = 1;
        int i9 = 1;
        int i10 = 0;
        while (i8 <= i6) {
            int i11 = i8 + 1;
            int i12 = (int) this.wtable_r[i11 + i5];
            int i13 = i12 * i9;
            int i14 = this.n / i13;
            int i15 = i14 * i9;
            if (i12 == 2) {
                i2 = i12;
                if (i10 == 0) {
                    radb2(i14, i9, fArr, i, fArr2, 0, i7);
                } else {
                    radb2(i14, i9, fArr2, 0, fArr, i, i7);
                }
            } else if (i12 == 3) {
                i2 = i12;
                if (i10 == 0) {
                    radb3(i14, i9, fArr, i, fArr2, 0, i7);
                } else {
                    radb3(i14, i9, fArr2, 0, fArr, i, i7);
                }
            } else if (i12 == 4) {
                i2 = i12;
                if (i10 == 0) {
                    radb4(i14, i9, fArr, i, fArr2, 0, i7);
                } else {
                    radb4(i14, i9, fArr2, 0, fArr, i, i7);
                }
            } else if (i12 != 5) {
                if (i10 == 0) {
                    i3 = i14;
                    i2 = i12;
                    radbg(i14, i12, i9, i15, fArr, i, fArr2, 0, i7);
                } else {
                    i3 = i14;
                    i2 = i12;
                    radbg(i3, i2, i9, i15, fArr2, 0, fArr, i, i7);
                }
                i14 = i3;
                if (i14 == 1) {
                }
                i7 += (i2 - 1) * i14;
                i8 = i11;
                i9 = i13;
            } else {
                i2 = i12;
                if (i10 == 0) {
                    radb5(i14, i9, fArr, i, fArr2, 0, i7);
                } else {
                    radb5(i14, i9, fArr2, 0, fArr, i, i7);
                }
            }
            i10 = 1 - i10;
            i7 += (i2 - 1) * i14;
            i8 = i11;
            i9 = i13;
        }
        if (i10 == 0) {
            return;
        }
        System.arraycopy(fArr2, 0, fArr, i, this.n);
    }

    void rfftb(FloatLargeArray floatLargeArray, long j) {
        int i;
        long j2;
        FloatLargeArray floatLargeArray2;
        FloatFFT_1D floatFFT_1D = this;
        if (floatFFT_1D.nl == 1) {
            return;
        }
        FloatLargeArray floatLargeArray3 = new FloatLargeArray(floatFFT_1D.nl);
        long j3 = floatFFT_1D.nl * 2;
        long j4 = (long) floatFFT_1D.wtable_rl.getFloat(j3 + 1);
        long j5 = floatFFT_1D.nl;
        long j6 = 1;
        long j7 = 1;
        long j8 = 0;
        while (j6 <= j4) {
            long j9 = j6 + 1;
            int i2 = (int) floatFFT_1D.wtable_rl.getFloat(j9 + j3);
            long j10 = i2;
            long j11 = j10 * j7;
            long j12 = floatFFT_1D.nl / j11;
            long j13 = j12 * j7;
            if (i2 == 2) {
                i = i2;
                j2 = j4;
                floatLargeArray2 = floatLargeArray3;
                if (j8 == 0) {
                    radb2(j12, j7, floatLargeArray, j, floatLargeArray2, 0L, j5);
                } else {
                    radb2(j12, j7, floatLargeArray2, 0L, floatLargeArray, j, j5);
                }
            } else if (i2 == 3) {
                i = i2;
                j2 = j4;
                floatLargeArray2 = floatLargeArray3;
                if (j8 == 0) {
                    radb3(j12, j7, floatLargeArray, j, floatLargeArray2, 0L, j5);
                } else {
                    radb3(j12, j7, floatLargeArray2, 0L, floatLargeArray, j, j5);
                }
            } else if (i2 == 4) {
                i = i2;
                j2 = j4;
                floatLargeArray2 = floatLargeArray3;
                if (j8 == 0) {
                    radb4(j12, j7, floatLargeArray, j, floatLargeArray2, 0L, j5);
                } else {
                    radb4(j12, j7, floatLargeArray2, 0L, floatLargeArray, j, j5);
                }
            } else if (i2 != 5) {
                if (j8 == 0) {
                    i = i2;
                    j2 = j4;
                    floatLargeArray2 = floatLargeArray3;
                    radbg(j12, j10, j7, j13, floatLargeArray, j, floatLargeArray3, 0L, j5);
                } else {
                    i = i2;
                    j2 = j4;
                    floatLargeArray2 = floatLargeArray3;
                    radbg(j12, j10, j7, j13, floatLargeArray2, 0L, floatLargeArray, j, j5);
                }
                if (j12 == 1) {
                }
                j5 += (i - 1) * j12;
                floatFFT_1D = this;
                j6 = j9;
                j7 = j11;
                j4 = j2;
                floatLargeArray3 = floatLargeArray2;
            } else {
                i = i2;
                j2 = j4;
                floatLargeArray2 = floatLargeArray3;
                if (j8 == 0) {
                    radb5(j12, j7, floatLargeArray, j, floatLargeArray2, 0L, j5);
                } else {
                    radb5(j12, j7, floatLargeArray2, 0L, floatLargeArray, j, j5);
                }
            }
            j8 = 1 - j8;
            j5 += (i - 1) * j12;
            floatFFT_1D = this;
            j6 = j9;
            j7 = j11;
            j4 = j2;
            floatLargeArray3 = floatLargeArray2;
        }
        FloatLargeArray floatLargeArray4 = floatLargeArray3;
        if (j8 == 0) {
            return;
        }
        LargeArrayUtils.arraycopy(floatLargeArray4, 0L, floatLargeArray, j, this.nl);
    }

    void radf2(int i, int i2, float[] fArr, int i3, float[] fArr2, int i4, int i5) {
        int i6 = i2 * i;
        int i7 = i * 2;
        for (int i8 = 0; i8 < i2; i8++) {
            int i9 = i4 + (i8 * i7);
            int i10 = i3 + (i8 * i);
            int i11 = i10 + i6;
            float f = fArr[i10];
            float f2 = fArr[i11];
            fArr2[i9] = f + f2;
            fArr2[(i9 + i7) - 1] = f - f2;
        }
        if (i < 2) {
            return;
        }
        if (i != 2) {
            for (int i12 = 0; i12 < i2; i12++) {
                i7 = i12 * i;
                int i13 = i7 * 2;
                int i14 = i13 + i;
                int i15 = i7 + i6;
                for (int i16 = 2; i16 < i; i16 += 2) {
                    int i17 = (i16 - 1) + i5;
                    int i18 = i4 + i16 + i13;
                    int i19 = i4 + (i - i16) + i14;
                    int i20 = i3 + i16;
                    int i21 = i20 + i7;
                    int i22 = i20 + i15;
                    float f3 = fArr[i21 - 1];
                    float f4 = fArr[i21];
                    float f5 = fArr[i22 - 1];
                    float f6 = fArr[i22];
                    float[] fArr3 = this.wtable_r;
                    float f7 = fArr3[i17 - 1];
                    float f8 = fArr3[i17];
                    float f9 = (f7 * f5) + (f8 * f6);
                    float f10 = (f7 * f6) - (f8 * f5);
                    fArr2[i18] = f4 + f10;
                    fArr2[i18 - 1] = f3 + f9;
                    fArr2[i19] = f10 - f4;
                    fArr2[i19 - 1] = f3 - f9;
                }
            }
            if (i % 2 == 1) {
                return;
            }
        }
        int i23 = i7 * 2;
        for (int i24 = 0; i24 < i2; i24++) {
            int i25 = i4 + i23 + i;
            int i26 = ((i3 + i) - 1) + (i24 * i);
            fArr2[i25] = -fArr[i26 + i6];
            fArr2[i25 - 1] = fArr[i26];
        }
    }

    void radf2(long j, long j2, FloatLargeArray floatLargeArray, long j3, FloatLargeArray floatLargeArray2, long j4, long j5) {
        long j6;
        long j7;
        long j8;
        long j9 = j2 * j;
        long j10 = 2;
        long j11 = j * 2;
        long j12 = 0;
        while (j12 < j2) {
            long j13 = j4 + (j12 * j11);
            long j14 = (j13 + j11) - 1;
            long j15 = j3 + (j12 * j);
            long j16 = j11;
            long j17 = j15 + j9;
            float f = floatLargeArray.getFloat(j15);
            float f2 = floatLargeArray.getFloat(j17);
            floatLargeArray2.setFloat(j13, f + f2);
            floatLargeArray2.setFloat(j14, f - f2);
            j12++;
            j11 = j16;
            j10 = 2;
        }
        long j18 = j11;
        if (j < j10) {
            return;
        }
        if (j != j10) {
            j8 = j18;
            long j19 = 0;
            while (j19 < j2) {
                j8 = j19 * j;
                long j20 = j8 * j10;
                long j21 = j20 + j;
                long j22 = j8 + j9;
                long j23 = 2;
                while (j23 < j) {
                    long j24 = j9;
                    long j25 = (j23 - 1) + j5;
                    long j26 = j19;
                    long j27 = j4 + j23 + j20;
                    long j28 = j20;
                    long j29 = j4 + (j - j23) + j21;
                    long j30 = j3 + j23;
                    long j31 = j21;
                    long j32 = j30 + j8;
                    long j33 = j8;
                    long j34 = j30 + j22;
                    long j35 = j22;
                    float f3 = floatLargeArray.getFloat(j32 - 1);
                    float f4 = floatLargeArray.getFloat(j32);
                    float f5 = floatLargeArray.getFloat(j34 - 1);
                    float f6 = floatLargeArray.getFloat(j34);
                    float f7 = this.wtable_rl.getFloat(j25 - 1);
                    float f8 = this.wtable_rl.getFloat(j25);
                    float f9 = (f7 * f5) + (f8 * f6);
                    float f10 = (f7 * f6) - (f8 * f5);
                    floatLargeArray2.setFloat(j27, f4 + f10);
                    floatLargeArray2.setFloat(j27 - 1, f3 + f9);
                    floatLargeArray2.setFloat(j29, f10 - f4);
                    floatLargeArray2.setFloat(j29 - 1, f3 - f9);
                    j23 += 2;
                    j22 = j35;
                    j20 = j28;
                    j9 = j24;
                    j19 = j26;
                    j21 = j31;
                    j8 = j33;
                }
                j19++;
                j10 = 2;
                j9 = j9;
            }
            j6 = j9;
            j7 = j10;
            if (j % j7 == 1) {
                return;
            }
        } else {
            j6 = j9;
            j7 = j10;
            j8 = j18;
        }
        long j36 = j8 * j7;
        for (long j37 = 0; j37 < j2; j37++) {
            long j38 = j4 + j36 + j;
            long j39 = ((j3 + j) - 1) + (j37 * j);
            floatLargeArray2.setFloat(j38, -floatLargeArray.getFloat(j39 + j6));
            floatLargeArray2.setFloat(j38 - 1, floatLargeArray.getFloat(j39));
        }
    }

    void radb2(int i, int i2, float[] fArr, int i3, float[] fArr2, int i4, int i5) {
        int i6 = i2 * i;
        for (int i7 = 0; i7 < i2; i7++) {
            int i8 = i7 * i;
            int i9 = i8 * 2;
            int i10 = i4 + i8;
            float f = fArr[i3 + i9];
            float f2 = fArr[((i3 + i) - 1) + i9 + i];
            fArr2[i10] = f + f2;
            fArr2[i10 + i6] = f - f2;
        }
        if (i < 2) {
            return;
        }
        if (i != 2) {
            for (int i11 = 0; i11 < i2; i11++) {
                int i12 = i11 * i;
                int i13 = i12 * 2;
                int i14 = i13 + i;
                int i15 = i12 + i6;
                for (int i16 = 2; i16 < i; i16 += 2) {
                    int i17 = (i16 - 1) + i5;
                    int i18 = i4 + i16;
                    float[] fArr3 = this.wtable_r;
                    float f3 = fArr3[i17 - 1];
                    float f4 = fArr3[i17];
                    int i19 = i3 + i16 + i13;
                    int i20 = i3 + (i - i16) + i14;
                    int i21 = i18 + i12;
                    int i22 = i18 + i15;
                    float f5 = fArr[i19 - 1];
                    float f6 = fArr[i20 - 1];
                    float f7 = f5 - f6;
                    float f8 = fArr[i19];
                    float f9 = fArr[i20];
                    float f10 = f8 + f9;
                    fArr2[i21 - 1] = f5 + f6;
                    fArr2[i21] = f8 - f9;
                    fArr2[i22 - 1] = (f3 * f7) - (f4 * f10);
                    fArr2[i22] = (f3 * f10) + (f4 * f7);
                }
            }
            if (i % 2 == 1) {
                return;
            }
        }
        for (int i23 = 0; i23 < i2; i23++) {
            int i24 = i23 * i;
            int i25 = ((i4 + i) - 1) + i24;
            int i26 = i3 + (i24 * 2) + i;
            fArr2[i25] = fArr[i26 - 1] * 2.0f;
            fArr2[i25 + i6] = fArr[i26] * (-2.0f);
        }
    }

    void radb2(long j, long j2, FloatLargeArray floatLargeArray, long j3, FloatLargeArray floatLargeArray2, long j4, long j5) {
        long j6;
        long j7;
        long j8;
        long j9 = j2 * j;
        long j10 = 0;
        while (true) {
            j6 = 2;
            if (j10 >= j2) {
                break;
            }
            long j11 = j10 * j;
            long j12 = 2 * j11;
            long j13 = j12 + j;
            long j14 = j4 + j11;
            float f = floatLargeArray.getFloat(j3 + j12);
            float f2 = floatLargeArray.getFloat(((j3 + j) - 1) + j13);
            floatLargeArray2.setFloat(j14, f + f2);
            floatLargeArray2.setFloat(j14 + j9, f - f2);
            j10++;
        }
        if (j < 2) {
            return;
        }
        if (j != 2) {
            long j15 = 0;
            while (j15 < j2) {
                long j16 = j15 * j;
                long j17 = j16 * j6;
                long j18 = j17 + j;
                long j19 = j16 + j9;
                long j20 = j6;
                while (j20 < j) {
                    long j21 = (j20 - 1) + j5;
                    long j22 = j4 + j20;
                    long j23 = j9;
                    long j24 = j15;
                    float f3 = this.wtable_rl.getFloat(j21 - 1);
                    float f4 = this.wtable_rl.getFloat(j21);
                    long j25 = j3 + j20 + j17;
                    long j26 = j3 + (j - j20) + j18;
                    long j27 = j17;
                    long j28 = j22 + j16;
                    long j29 = j16;
                    long j30 = j22 + j19;
                    long j31 = j25 - 1;
                    long j32 = j26 - 1;
                    float f5 = floatLargeArray.getFloat(j31) - floatLargeArray.getFloat(j32);
                    float f6 = floatLargeArray.getFloat(j25) + floatLargeArray.getFloat(j26);
                    float f7 = floatLargeArray.getFloat(j25);
                    float f8 = floatLargeArray.getFloat(j31);
                    float f9 = floatLargeArray.getFloat(j26);
                    floatLargeArray2.setFloat(j28 - 1, f8 + floatLargeArray.getFloat(j32));
                    floatLargeArray2.setFloat(j28, f7 - f9);
                    floatLargeArray2.setFloat(j30 - 1, (f3 * f5) - (f4 * f6));
                    floatLargeArray2.setFloat(j30, (f3 * f6) + (f4 * f5));
                    j20 += 2;
                    j6 = 2;
                    j17 = j27;
                    j16 = j29;
                    j9 = j23;
                    j15 = j24;
                }
                j15++;
                j9 = j9;
            }
            j7 = j9;
            j8 = j6;
            if (j % j8 == 1) {
                return;
            }
        } else {
            j7 = j9;
            j8 = 2;
        }
        for (long j33 = 0; j33 < j2; j33++) {
            long j34 = j33 * j;
            long j35 = ((j4 + j) - 1) + j34;
            long j36 = j3 + (j34 * j8) + j;
            floatLargeArray2.setFloat(j35, floatLargeArray.getFloat(j36 - 1) * 2.0f);
            floatLargeArray2.setFloat(j35 + j7, floatLargeArray.getFloat(j36) * (-2.0f));
        }
    }

    void radf3(int i, int i2, float[] fArr, int i3, float[] fArr2, int i4, int i5) {
        int i6 = i5 + i;
        int i7 = i2 * i;
        for (int i8 = 0; i8 < i2; i8++) {
            int i9 = i8 * i;
            int i10 = ((i8 * 3) + 1) * i;
            int i11 = i3 + i9;
            int i12 = i11 + i7;
            int i13 = (i7 * 2) + i11;
            float f = fArr[i11];
            float f2 = fArr[i12];
            float f3 = fArr[i13];
            float f4 = f2 + f3;
            fArr2[i4 + (i9 * 3)] = f + f4;
            fArr2[i4 + i10 + i] = (f3 - f2) * 0.8660254f;
            fArr2[((i4 + i) - 1) + i10] = f + (f4 * (-0.5f));
        }
        if (i == 1) {
            return;
        }
        for (int i14 = 0; i14 < i2; i14++) {
            int i15 = i14 * i;
            int i16 = i15 * 3;
            int i17 = i15 + i7;
            int i18 = i17 + i7;
            int i19 = i16 + i;
            int i20 = i19 + i;
            for (int i21 = 2; i21 < i; i21 += 2) {
                int i22 = i21 - 1;
                int i23 = i22 + i5;
                int i24 = i22 + i6;
                float[] fArr3 = this.wtable_r;
                float f5 = fArr3[i23 - 1];
                float f6 = fArr3[i23];
                float f7 = fArr3[i24 - 1];
                float f8 = fArr3[i24];
                int i25 = i3 + i21;
                int i26 = i4 + i21;
                int i27 = i25 + i15;
                int i28 = i25 + i17;
                int i29 = i25 + i18;
                float f9 = fArr[i27 - 1];
                float f10 = fArr[i27];
                float f11 = fArr[i28 - 1];
                float f12 = fArr[i28];
                float f13 = fArr[i29 - 1];
                float f14 = fArr[i29];
                float f15 = (f5 * f11) + (f6 * f12);
                float f16 = (f5 * f12) - (f6 * f11);
                float f17 = (f7 * f13) + (f8 * f14);
                float f18 = (f7 * f14) - (f8 * f13);
                float f19 = f15 + f17;
                float f20 = f16 + f18;
                float f21 = f9 + (f19 * (-0.5f));
                float f22 = f10 + (f20 * (-0.5f));
                float f23 = (f16 - f18) * 0.8660254f;
                float f24 = (f17 - f15) * 0.8660254f;
                int i30 = i26 + i16;
                int i31 = i4 + (i - i21) + i19;
                int i32 = i26 + i20;
                fArr2[i30 - 1] = f9 + f19;
                fArr2[i30] = f10 + f20;
                fArr2[i31 - 1] = f21 - f23;
                fArr2[i31] = f24 - f22;
                fArr2[i32 - 1] = f21 + f23;
                fArr2[i32] = f22 + f24;
            }
        }
    }

    void radf3(long j, long j2, FloatLargeArray floatLargeArray, long j3, FloatLargeArray floatLargeArray2, long j4, long j5) {
        long j6;
        FloatFFT_1D floatFFT_1D = this;
        FloatLargeArray floatLargeArray3 = floatLargeArray;
        long j7 = j5 + j;
        long j8 = j2 * j;
        long j9 = 0;
        while (true) {
            j6 = 2;
            if (j9 >= j2) {
                break;
            }
            long j10 = j9 * j;
            long j11 = ((j9 * 3) + 1) * j;
            long j12 = j3 + j10;
            long j13 = j12 + j8;
            long j14 = j12 + (2 * j8);
            float f = floatLargeArray3.getFloat(j12);
            float f2 = floatLargeArray3.getFloat(j13);
            float f3 = floatLargeArray3.getFloat(j14);
            float f4 = f2 + f3;
            floatLargeArray2.setFloat(j4 + (j10 * 3), f + f4);
            floatLargeArray2.setFloat(j4 + j11 + j, (f3 - f2) * 0.8660254f);
            floatLargeArray2.setFloat(((j4 + j) - 1) + j11, f + (f4 * (-0.5f)));
            j9++;
        }
        if (j == 1) {
            return;
        }
        long j15 = 0;
        while (j15 < j2) {
            long j16 = j15 * j;
            long j17 = j16 * 3;
            long j18 = j16 + j8;
            long j19 = j18 + j8;
            long j20 = j17 + j;
            long j21 = j20 + j;
            long j22 = j6;
            while (j22 < j) {
                long j23 = j22 - 1;
                long j24 = j23 + j5;
                long j25 = j8;
                long j26 = j23 + j7;
                long j27 = j7;
                float f5 = floatFFT_1D.wtable_rl.getFloat(j24 - 1);
                float f6 = floatFFT_1D.wtable_rl.getFloat(j24);
                long j28 = j15;
                float f7 = floatFFT_1D.wtable_rl.getFloat(j26 - 1);
                float f8 = floatFFT_1D.wtable_rl.getFloat(j26);
                long j29 = j3 + j22;
                long j30 = j4 + j22;
                long j31 = j17;
                long j32 = j29 + j16;
                long j33 = j16;
                long j34 = j29 + j18;
                long j35 = j29 + j19;
                float f9 = floatLargeArray3.getFloat(j32 - 1);
                float f10 = floatLargeArray3.getFloat(j32);
                float f11 = floatLargeArray3.getFloat(j34 - 1);
                float f12 = floatLargeArray3.getFloat(j34);
                float f13 = floatLargeArray3.getFloat(j35 - 1);
                float f14 = floatLargeArray3.getFloat(j35);
                float f15 = (f5 * f11) + (f6 * f12);
                float f16 = (f5 * f12) - (f6 * f11);
                float f17 = (f7 * f13) + (f8 * f14);
                float f18 = (f7 * f14) - (f8 * f13);
                float f19 = f15 + f17;
                float f20 = f16 + f18;
                float f21 = (f19 * (-0.5f)) + f9;
                float f22 = (f20 * (-0.5f)) + f10;
                float f23 = (f16 - f18) * 0.8660254f;
                float f24 = (f17 - f15) * 0.8660254f;
                long j36 = j30 + j31;
                long j37 = j4 + (j - j22) + j20;
                long j38 = j30 + j21;
                floatLargeArray2.setFloat(j36 - 1, f9 + f19);
                floatLargeArray2.setFloat(j36, f10 + f20);
                floatLargeArray2.setFloat(j37 - 1, f21 - f23);
                floatLargeArray2.setFloat(j37, f24 - f22);
                floatLargeArray2.setFloat(j38 - 1, f21 + f23);
                floatLargeArray2.setFloat(j38, f22 + f24);
                j22 += 2;
                j6 = 2;
                j8 = j25;
                j7 = j27;
                j17 = j31;
                j16 = j33;
                j15 = j28;
                floatFFT_1D = this;
                floatLargeArray3 = floatLargeArray;
            }
            j15++;
            j7 = j7;
            floatFFT_1D = this;
            floatLargeArray3 = floatLargeArray;
        }
    }

    void radb3(int i, int i2, float[] fArr, int i3, float[] fArr2, int i4, int i5) {
        float f;
        int i6 = i;
        int i7 = i5 + i6;
        int i8 = 0;
        int i9 = 0;
        while (true) {
            f = -0.5f;
            if (i9 >= i2) {
                break;
            }
            int i10 = i9 * i6;
            int i11 = i3 + (i10 * 3);
            int i12 = (i6 * 2) + i11;
            float f2 = fArr[i11];
            float f3 = fArr[i12 - 1] * 2.0f;
            float f4 = ((-0.5f) * f3) + f2;
            float f5 = fArr[i12] * 1.7320508f;
            fArr2[i4 + i10] = f2 + f3;
            fArr2[i4 + ((i9 + i2) * i6)] = f4 - f5;
            fArr2[i4 + (((i2 * 2) + i9) * i6)] = f4 + f5;
            i9++;
        }
        if (i6 == 1) {
            return;
        }
        int i13 = i2 * i6;
        while (i8 < i2) {
            int i14 = i8 * i6;
            int i15 = i14 * 3;
            int i16 = i15 + i6;
            int i17 = i16 + i6;
            int i18 = i14 + i13;
            int i19 = i18 + i13;
            int i20 = 2;
            while (i20 < i6) {
                int i21 = i3 + i20;
                int i22 = i4 + i20;
                int i23 = i21 + i15;
                int i24 = i21 + i17;
                int i25 = i3 + (i6 - i20) + i16;
                float f6 = fArr[i23 - 1];
                float f7 = fArr[i23];
                float f8 = fArr[i24 - 1];
                float f9 = fArr[i24];
                float f10 = fArr[i25 - 1];
                float f11 = fArr[i25];
                float f12 = f8 + f10;
                float f13 = f6 + (f12 * f);
                float f14 = f9 - f11;
                float f15 = f7 + (f14 * f);
                float f16 = (f8 - f10) * 0.8660254f;
                float f17 = (f9 + f11) * 0.8660254f;
                float f18 = f13 - f17;
                float f19 = f13 + f17;
                float f20 = f15 + f16;
                float f21 = f15 - f16;
                int i26 = i20 - 1;
                int i27 = i26 + i5;
                int i28 = i26 + i7;
                float[] fArr3 = this.wtable_r;
                float f22 = fArr3[i27 - 1];
                float f23 = fArr3[i27];
                float f24 = fArr3[i28 - 1];
                float f25 = fArr3[i28];
                int i29 = i22 + i14;
                int i30 = i22 + i18;
                int i31 = i22 + i19;
                fArr2[i29 - 1] = f6 + f12;
                fArr2[i29] = f7 + f14;
                fArr2[i30 - 1] = (f22 * f18) - (f23 * f20);
                fArr2[i30] = (f22 * f20) + (f23 * f18);
                fArr2[i31 - 1] = (f24 * f19) - (f25 * f21);
                fArr2[i31] = (f24 * f21) + (f25 * f19);
                i20 += 2;
                i6 = i;
                f = -0.5f;
            }
            i8++;
            i6 = i;
            f = -0.5f;
        }
    }

    void radb3(long j, long j2, FloatLargeArray floatLargeArray, long j3, FloatLargeArray floatLargeArray2, long j4, long j5) {
        long j6;
        FloatLargeArray floatLargeArray3 = floatLargeArray;
        long j7 = j5 + j;
        long j8 = 0;
        while (true) {
            j6 = 3;
            if (j8 >= j2) {
                break;
            }
            long j9 = j8 * j;
            long j10 = j3 + (3 * j9);
            long j11 = j10 + (j * 2);
            float f = floatLargeArray3.getFloat(j10);
            float f2 = floatLargeArray3.getFloat(j11 - 1) * 2.0f;
            float f3 = ((-0.5f) * f2) + f;
            float f4 = floatLargeArray3.getFloat(j11) * 1.7320508f;
            floatLargeArray2.setFloat(j4 + j9, f + f2);
            floatLargeArray2.setFloat(j4 + ((j8 + j2) * j), f3 - f4);
            floatLargeArray2.setFloat(j4 + (((2 * j2) + j8) * j), f3 + f4);
            j8++;
        }
        if (j == 1) {
            return;
        }
        long j12 = j2 * j;
        long j13 = 0;
        while (j13 < j2) {
            long j14 = j13 * j;
            long j15 = j14 * j6;
            long j16 = j15 + j;
            long j17 = j16 + j;
            long j18 = j14 + j12;
            long j19 = j18 + j12;
            long j20 = 2;
            while (j20 < j) {
                long j21 = j3 + j20;
                long j22 = j4 + j20;
                long j23 = j21 + j15;
                long j24 = j15;
                long j25 = j21 + j17;
                long j26 = j12;
                long j27 = j3 + (j - j20) + j16;
                long j28 = j14;
                float f5 = floatLargeArray3.getFloat(j23 - 1);
                float f6 = floatLargeArray3.getFloat(j23);
                float f7 = floatLargeArray3.getFloat(j25 - 1);
                float f8 = floatLargeArray3.getFloat(j25);
                float f9 = floatLargeArray3.getFloat(j27 - 1);
                float f10 = floatLargeArray3.getFloat(j27);
                float f11 = f7 + f9;
                float f12 = (f11 * (-0.5f)) + f5;
                float f13 = f8 - f10;
                float f14 = f6 + (f13 * (-0.5f));
                float f15 = (f7 - f9) * 0.8660254f;
                float f16 = (f8 + f10) * 0.8660254f;
                float f17 = f12 - f16;
                float f18 = f12 + f16;
                float f19 = f14 + f15;
                float f20 = f14 - f15;
                long j29 = j20 - 1;
                long j30 = j29 + j5;
                long j31 = j29 + j7;
                long j32 = j7;
                float f21 = this.wtable_rl.getFloat(j30 - 1);
                float f22 = this.wtable_rl.getFloat(j30);
                float f23 = this.wtable_rl.getFloat(j31 - 1);
                float f24 = this.wtable_rl.getFloat(j31);
                long j33 = j22 + j28;
                long j34 = j22 + j18;
                long j35 = j22 + j19;
                floatLargeArray2.setFloat(j33 - 1, f5 + f11);
                floatLargeArray2.setFloat(j33, f6 + f13);
                floatLargeArray2.setFloat(j34 - 1, (f21 * f17) - (f22 * f19));
                floatLargeArray2.setFloat(j34, (f21 * f19) + (f22 * f17));
                floatLargeArray2.setFloat(j35 - 1, (f23 * f18) - (f24 * f20));
                floatLargeArray2.setFloat(j35, (f23 * f20) + (f24 * f18));
                j20 += 2;
                floatLargeArray3 = floatLargeArray;
                j14 = j28;
                j12 = j26;
                j15 = j24;
                j7 = j32;
            }
            j13++;
            floatLargeArray3 = floatLargeArray;
            j7 = j7;
            j6 = 3;
        }
    }

    void radf4(int i, int i2, float[] fArr, int i3, float[] fArr2, int i4, int i5) {
        int i6 = i5 + i;
        int i7 = i6 + i;
        int i8 = i2 * i;
        for (int i9 = 0; i9 < i2; i9++) {
            int i10 = i9 * i;
            int i11 = i10 * 4;
            int i12 = i10 + i8;
            int i13 = i12 + i8;
            int i14 = i13 + i8;
            float f = fArr[i3 + i10];
            float f2 = fArr[i3 + i12];
            float f3 = fArr[i3 + i13];
            float f4 = fArr[i3 + i14];
            float f5 = f2 + f4;
            float f6 = f + f3;
            int i15 = i4 + i11 + i + i;
            fArr2[i4 + i11] = f5 + f6;
            int i16 = i15 - 1;
            fArr2[i16 + i + i] = f6 - f5;
            fArr2[i16] = f - f3;
            fArr2[i15] = f4 - f2;
        }
        if (i < 2) {
            return;
        }
        if (i != 2) {
            for (int i17 = 0; i17 < i2; i17++) {
                int i18 = i17 * i;
                int i19 = i18 + i8;
                int i20 = i19 + i8;
                int i21 = i20 + i8;
                int i22 = i18 * 4;
                int i23 = i22 + i;
                int i24 = i23 + i;
                int i25 = i24 + i;
                for (int i26 = 2; i26 < i; i26 += 2) {
                    int i27 = i26 - 1;
                    int i28 = i27 + i5;
                    int i29 = i27 + i6;
                    int i30 = i27 + i7;
                    float[] fArr3 = this.wtable_r;
                    float f7 = fArr3[i28 - 1];
                    float f8 = fArr3[i28];
                    float f9 = fArr3[i29 - 1];
                    float f10 = fArr3[i29];
                    float f11 = fArr3[i30 - 1];
                    float f12 = fArr3[i30];
                    int i31 = i3 + i26;
                    int i32 = i4 + i26;
                    int i33 = i4 + (i - i26);
                    int i34 = i31 + i18;
                    int i35 = i31 + i19;
                    int i36 = i31 + i20;
                    int i37 = i31 + i21;
                    float f13 = fArr[i34 - 1];
                    float f14 = fArr[i34];
                    float f15 = fArr[i35 - 1];
                    float f16 = fArr[i35];
                    float f17 = fArr[i36 - 1];
                    float f18 = fArr[i36];
                    float f19 = fArr[i37 - 1];
                    float f20 = fArr[i37];
                    float f21 = (f7 * f15) + (f8 * f16);
                    float f22 = (f7 * f16) - (f8 * f15);
                    float f23 = (f9 * f17) + (f10 * f18);
                    float f24 = (f9 * f18) - (f10 * f17);
                    float f25 = (f11 * f19) + (f12 * f20);
                    float f26 = (f11 * f20) - (f12 * f19);
                    float f27 = f21 + f25;
                    float f28 = f25 - f21;
                    float f29 = f22 + f26;
                    float f30 = f22 - f26;
                    float f31 = f14 + f24;
                    float f32 = f14 - f24;
                    float f33 = f13 + f23;
                    float f34 = f13 - f23;
                    int i38 = i32 + i22;
                    int i39 = i33 + i23;
                    int i40 = i32 + i24;
                    int i41 = i33 + i25;
                    fArr2[i38 - 1] = f27 + f33;
                    fArr2[i41 - 1] = f33 - f27;
                    fArr2[i38] = f29 + f31;
                    fArr2[i41] = f29 - f31;
                    fArr2[i40 - 1] = f30 + f34;
                    fArr2[i39 - 1] = f34 - f30;
                    fArr2[i40] = f28 + f32;
                    fArr2[i39] = f28 - f32;
                }
            }
            if (i % 2 == 1) {
                return;
            }
        }
        for (int i42 = 0; i42 < i2; i42++) {
            int i43 = i42 * i;
            int i44 = i43 * 4;
            int i45 = i43 + i8;
            int i46 = i45 + i8;
            int i47 = i46 + i8;
            int i48 = i44 + i;
            int i49 = i48 + i;
            int i50 = (i3 + i) - 1;
            float f35 = fArr[i43 + i50];
            float f36 = fArr[i45 + i50];
            float f37 = fArr[i46 + i50];
            float f38 = fArr[i50 + i47];
            float f39 = (f36 + f38) * (-0.70710677f);
            float f40 = (f36 - f38) * 0.70710677f;
            int i51 = (i4 + i) - 1;
            fArr2[i44 + i51] = f40 + f35;
            fArr2[i51 + i49] = f35 - f40;
            fArr2[i4 + i48] = f39 - f37;
            fArr2[i4 + i49 + i] = f39 + f37;
        }
    }

    void radf4(long j, long j2, FloatLargeArray floatLargeArray, long j3, FloatLargeArray floatLargeArray2, long j4, long j5) {
        long j6;
        long j7;
        FloatLargeArray floatLargeArray3;
        FloatLargeArray floatLargeArray4 = floatLargeArray;
        FloatLargeArray floatLargeArray5 = floatLargeArray2;
        long j8 = j5 + j;
        long j9 = j8 + j;
        long j10 = j2 * j;
        long j11 = 0;
        while (true) {
            j6 = 4;
            j7 = 1;
            if (j11 >= j2) {
                break;
            }
            long j12 = j11 * j;
            long j13 = 4 * j12;
            long j14 = j12 + j10;
            long j15 = j14 + j10;
            long j16 = j15 + j10;
            float f = floatLargeArray4.getFloat(j3 + j12);
            long j17 = j9;
            float f2 = floatLargeArray4.getFloat(j3 + j14);
            long j18 = j8;
            float f3 = floatLargeArray4.getFloat(j3 + j15);
            long j19 = j10;
            float f4 = floatLargeArray4.getFloat(j3 + j16);
            float f5 = f2 + f4;
            float f6 = f + f3;
            long j20 = j4 + j13 + j + j;
            floatLargeArray5.setFloat(j4 + j13, f5 + f6);
            long j21 = j20 - 1;
            floatLargeArray5.setFloat(j21 + j + j, f6 - f5);
            floatLargeArray5.setFloat(j21, f - f3);
            floatLargeArray5.setFloat(j20, f4 - f2);
            j11++;
            floatLargeArray4 = floatLargeArray;
            j9 = j17;
            j8 = j18;
            j10 = j19;
        }
        long j22 = j8;
        long j23 = j9;
        long j24 = j10;
        long j25 = 2;
        if (j < 2) {
            return;
        }
        if (j != 2) {
            long j26 = 0;
            while (j26 < j2) {
                long j27 = j26 * j;
                long j28 = j27 + j24;
                long j29 = j28 + j24;
                long j30 = j29 + j24;
                long j31 = j27 * j6;
                long j32 = j31 + j;
                long j33 = j32 + j;
                long j34 = j33 + j;
                long j35 = j25;
                while (j35 < j) {
                    long j36 = j35 - j7;
                    long j37 = j36 + j5;
                    long j38 = j36 + j22;
                    long j39 = j26;
                    long j40 = j36 + j23;
                    long j41 = j30;
                    long j42 = j29;
                    float f7 = this.wtable_rl.getFloat(j37 - j7);
                    float f8 = this.wtable_rl.getFloat(j37);
                    float f9 = this.wtable_rl.getFloat(j38 - j7);
                    float f10 = this.wtable_rl.getFloat(j38);
                    float f11 = this.wtable_rl.getFloat(j40 - j7);
                    float f12 = this.wtable_rl.getFloat(j40);
                    long j43 = j3 + j35;
                    long j44 = j4 + j35;
                    long j45 = j4 + (j - j35);
                    long j46 = j43 + j27;
                    long j47 = j27;
                    long j48 = j43 + j28;
                    long j49 = j28;
                    long j50 = j43 + j42;
                    long j51 = j43 + j41;
                    float f13 = floatLargeArray.getFloat(j46 - j7);
                    float f14 = floatLargeArray.getFloat(j46);
                    float f15 = floatLargeArray.getFloat(j48 - 1);
                    float f16 = floatLargeArray.getFloat(j48);
                    float f17 = floatLargeArray.getFloat(j50 - 1);
                    float f18 = floatLargeArray.getFloat(j50);
                    float f19 = floatLargeArray.getFloat(j51 - 1);
                    float f20 = floatLargeArray.getFloat(j51);
                    float f21 = (f7 * f15) + (f8 * f16);
                    float f22 = (f7 * f16) - (f8 * f15);
                    float f23 = (f9 * f17) + (f10 * f18);
                    float f24 = (f9 * f18) - (f10 * f17);
                    float f25 = (f11 * f19) + (f12 * f20);
                    float f26 = (f20 * f11) - (f19 * f12);
                    float f27 = f21 + f25;
                    float f28 = f25 - f21;
                    float f29 = f22 + f26;
                    float f30 = f22 - f26;
                    float f31 = f14 + f24;
                    float f32 = f14 - f24;
                    float f33 = f13 + f23;
                    float f34 = f13 - f23;
                    long j52 = j44 + j31;
                    long j53 = j45 + j32;
                    long j54 = j44 + j33;
                    long j55 = j45 + j34;
                    floatLargeArray2.setFloat(j52 - 1, f27 + f33);
                    floatLargeArray2.setFloat(j55 - 1, f33 - f27);
                    floatLargeArray2.setFloat(j52, f29 + f31);
                    floatLargeArray2.setFloat(j55, f29 - f31);
                    floatLargeArray2.setFloat(j54 - 1, f30 + f34);
                    floatLargeArray2.setFloat(j53 - 1, f34 - f30);
                    floatLargeArray2.setFloat(j54, f28 + f32);
                    floatLargeArray2.setFloat(j53, f28 - f32);
                    j25 = 2;
                    j35 += 2;
                    floatLargeArray5 = floatLargeArray2;
                    j7 = 1;
                    j30 = j41;
                    j26 = j39;
                    j29 = j42;
                    j27 = j47;
                    j28 = j49;
                }
                j26 += j7;
                j6 = 4;
            }
            floatLargeArray3 = floatLargeArray5;
            if (j % j25 == j7) {
                return;
            }
        } else {
            floatLargeArray3 = floatLargeArray5;
        }
        for (long j56 = 0; j56 < j2; j56++) {
            long j57 = j56 * j;
            long j58 = j57 * 4;
            long j59 = j57 + j24;
            long j60 = j59 + j24;
            long j61 = j58 + j;
            long j62 = j61 + j;
            long j63 = (j3 + j) - 1;
            float f35 = floatLargeArray.getFloat(j63 + j57);
            float f36 = floatLargeArray.getFloat(j63 + j59);
            float f37 = floatLargeArray.getFloat(j63 + j60);
            float f38 = floatLargeArray.getFloat(j63 + j60 + j24);
            float f39 = (f36 + f38) * (-0.70710677f);
            float f40 = (f36 - f38) * 0.70710677f;
            long j64 = (j4 + j) - 1;
            floatLargeArray3.setFloat(j64 + j58, f40 + f35);
            floatLargeArray3.setFloat(j64 + j62, f35 - f40);
            floatLargeArray3.setFloat(j4 + j61, f39 - f37);
            floatLargeArray3.setFloat(j4 + j62 + j, f39 + f37);
        }
    }

    void radb4(int i, int i2, float[] fArr, int i3, float[] fArr2, int i4, int i5) {
        int i6 = i5 + i;
        int i7 = i6 + i;
        int i8 = i2 * i;
        for (int i9 = 0; i9 < i2; i9++) {
            int i10 = i9 * i;
            int i11 = i10 * 4;
            int i12 = i10 + i8;
            int i13 = i12 + i8;
            int i14 = i11 + i;
            int i15 = i14 + i;
            int i16 = i15 + i;
            float f = fArr[i3 + i11];
            float f2 = fArr[i3 + i15];
            int i17 = (i3 + i) - 1;
            float f3 = fArr[i17 + i16];
            float f4 = fArr[i17 + i14];
            float f5 = f - f3;
            float f6 = f + f3;
            float f7 = f4 + f4;
            float f8 = f2 + f2;
            fArr2[i4 + i10] = f6 + f7;
            fArr2[i4 + i12] = f5 - f8;
            fArr2[i4 + i13] = f6 - f7;
            fArr2[i4 + i13 + i8] = f5 + f8;
        }
        if (i < 2) {
            return;
        }
        if (i != 2) {
            for (int i18 = 0; i18 < i2; i18++) {
                int i19 = i18 * i;
                int i20 = i19 + i8;
                int i21 = i20 + i8;
                int i22 = i21 + i8;
                int i23 = i19 * 4;
                int i24 = i23 + i;
                int i25 = i24 + i;
                int i26 = i25 + i;
                for (int i27 = 2; i27 < i; i27 += 2) {
                    int i28 = i27 - 1;
                    int i29 = i28 + i5;
                    int i30 = i28 + i6;
                    int i31 = i28 + i7;
                    float[] fArr3 = this.wtable_r;
                    float f9 = fArr3[i29 - 1];
                    float f10 = fArr3[i29];
                    float f11 = fArr3[i30 - 1];
                    float f12 = fArr3[i30];
                    float f13 = fArr3[i31 - 1];
                    float f14 = fArr3[i31];
                    int i32 = i3 + i27;
                    int i33 = i3 + (i - i27);
                    int i34 = i4 + i27;
                    int i35 = i32 + i23;
                    int i36 = i33 + i24;
                    int i37 = i32 + i25;
                    int i38 = i33 + i26;
                    float f15 = fArr[i35 - 1];
                    float f16 = fArr[i35];
                    float f17 = fArr[i36 - 1];
                    float f18 = fArr[i36];
                    float f19 = fArr[i37 - 1];
                    float f20 = fArr[i37];
                    float f21 = fArr[i38 - 1];
                    float f22 = fArr[i38];
                    float f23 = f16 + f22;
                    float f24 = f16 - f22;
                    float f25 = f20 - f18;
                    float f26 = f20 + f18;
                    float f27 = f15 - f21;
                    float f28 = f15 + f21;
                    float f29 = f19 - f17;
                    float f30 = f19 + f17;
                    float f31 = f28 - f30;
                    float f32 = f24 - f25;
                    float f33 = f27 - f26;
                    float f34 = f27 + f26;
                    float f35 = f23 + f29;
                    float f36 = f23 - f29;
                    int i39 = i34 + i19;
                    int i40 = i34 + i20;
                    int i41 = i34 + i21;
                    int i42 = i34 + i22;
                    fArr2[i39 - 1] = f28 + f30;
                    fArr2[i39] = f24 + f25;
                    fArr2[i40 - 1] = (f9 * f33) - (f10 * f35);
                    fArr2[i40] = (f9 * f35) + (f10 * f33);
                    fArr2[i41 - 1] = (f11 * f31) - (f12 * f32);
                    fArr2[i41] = (f11 * f32) + (f12 * f31);
                    fArr2[i42 - 1] = (f13 * f34) - (f14 * f36);
                    fArr2[i42] = (f13 * f36) + (f14 * f34);
                }
            }
            if (i % 2 == 1) {
                return;
            }
        }
        for (int i43 = 0; i43 < i2; i43++) {
            int i44 = i43 * i;
            int i45 = i44 * 4;
            int i46 = i44 + i8;
            int i47 = i46 + i8;
            int i48 = i45 + i;
            int i49 = i48 + i;
            int i50 = i49 + i;
            int i51 = (i3 + i) - 1;
            float f37 = fArr[i45 + i51];
            float f38 = fArr[i51 + i49];
            float f39 = fArr[i3 + i48];
            float f40 = fArr[i3 + i50];
            float f41 = f39 + f40;
            float f42 = f40 - f39;
            float f43 = f37 - f38;
            float f44 = f37 + f38;
            int i52 = (i4 + i) - 1;
            fArr2[i44 + i52] = f44 + f44;
            fArr2[i46 + i52] = (f43 - f41) * 1.4142135f;
            fArr2[i47 + i52] = f42 + f42;
            fArr2[i52 + i47 + i8] = (f43 + f41) * (-1.4142135f);
        }
    }

    void radb4(long j, long j2, FloatLargeArray floatLargeArray, long j3, FloatLargeArray floatLargeArray2, long j4, long j5) {
        long j6;
        long j7;
        FloatFFT_1D floatFFT_1D = this;
        FloatLargeArray floatLargeArray3 = floatLargeArray;
        long j8 = j5 + j;
        long j9 = j8 + j;
        long j10 = j2 * j;
        long j11 = 0;
        while (true) {
            j6 = 4;
            if (j11 >= j2) {
                break;
            }
            long j12 = j11 * j;
            long j13 = 4 * j12;
            long j14 = j12 + j10;
            long j15 = j14 + j10;
            long j16 = j13 + j;
            long j17 = j16 + j;
            long j18 = j17 + j;
            float f = floatLargeArray3.getFloat(j3 + j13);
            float f2 = floatLargeArray3.getFloat(j3 + j17);
            long j19 = (j3 + j) - 1;
            long j20 = j9;
            float f3 = floatLargeArray3.getFloat(j19 + j18);
            long j21 = j8;
            float f4 = floatLargeArray3.getFloat(j19 + j16);
            float f5 = f - f3;
            float f6 = f + f3;
            float f7 = f4 + f4;
            float f8 = f2 + f2;
            floatLargeArray2.setFloat(j4 + j12, f6 + f7);
            floatLargeArray2.setFloat(j4 + j14, f5 - f8);
            floatLargeArray2.setFloat(j4 + j15, f6 - f7);
            floatLargeArray2.setFloat(j4 + j15 + j10, f5 + f8);
            j11++;
            j8 = j21;
            j9 = j20;
        }
        long j22 = j8;
        long j23 = j9;
        long j24 = 2;
        if (j < 2) {
            return;
        }
        if (j != 2) {
            long j25 = 0;
            while (j25 < j2) {
                long j26 = j25 * j;
                long j27 = j26 + j10;
                long j28 = j27 + j10;
                long j29 = j28 + j10;
                long j30 = j26 * j6;
                long j31 = j30 + j;
                long j32 = j31 + j;
                long j33 = j32 + j;
                long j34 = j24;
                while (j34 < j) {
                    long j35 = j34 - 1;
                    long j36 = j35 + j5;
                    long j37 = j35 + j22;
                    long j38 = j10;
                    long j39 = j35 + j23;
                    long j40 = j25;
                    long j41 = j27;
                    float f9 = floatFFT_1D.wtable_rl.getFloat(j36 - 1);
                    float f10 = floatFFT_1D.wtable_rl.getFloat(j36);
                    float f11 = floatFFT_1D.wtable_rl.getFloat(j37 - 1);
                    float f12 = floatFFT_1D.wtable_rl.getFloat(j37);
                    float f13 = floatFFT_1D.wtable_rl.getFloat(j39 - 1);
                    float f14 = floatFFT_1D.wtable_rl.getFloat(j39);
                    long j42 = j3 + j34;
                    long j43 = j3 + (j - j34);
                    long j44 = j4 + j34;
                    long j45 = j42 + j30;
                    long j46 = j43 + j31;
                    long j47 = j42 + j32;
                    long j48 = j43 + j33;
                    long j49 = j26;
                    float f15 = floatLargeArray3.getFloat(j45 - 1);
                    float f16 = floatLargeArray3.getFloat(j45);
                    float f17 = floatLargeArray3.getFloat(j46 - 1);
                    float f18 = floatLargeArray3.getFloat(j46);
                    float f19 = floatLargeArray3.getFloat(j47 - 1);
                    float f20 = floatLargeArray3.getFloat(j47);
                    float f21 = floatLargeArray3.getFloat(j48 - 1);
                    float f22 = floatLargeArray3.getFloat(j48);
                    float f23 = f16 + f22;
                    float f24 = f16 - f22;
                    float f25 = f20 - f18;
                    float f26 = f20 + f18;
                    float f27 = f15 - f21;
                    float f28 = f15 + f21;
                    float f29 = f19 - f17;
                    float f30 = f19 + f17;
                    float f31 = f28 - f30;
                    float f32 = f24 - f25;
                    float f33 = f27 - f26;
                    float f34 = f27 + f26;
                    float f35 = f23 + f29;
                    float f36 = f23 - f29;
                    long j50 = j44 + j49;
                    long j51 = j44 + j41;
                    long j52 = j44 + j28;
                    long j53 = j44 + j29;
                    floatLargeArray2.setFloat(j50 - 1, f28 + f30);
                    floatLargeArray2.setFloat(j50, f24 + f25);
                    floatLargeArray2.setFloat(j51 - 1, (f9 * f33) - (f10 * f35));
                    floatLargeArray2.setFloat(j51, (f9 * f35) + (f10 * f33));
                    floatLargeArray2.setFloat(j52 - 1, (f11 * f31) - (f12 * f32));
                    floatLargeArray2.setFloat(j52, (f11 * f32) + (f12 * f31));
                    floatLargeArray2.setFloat(j53 - 1, (f13 * f34) - (f14 * f36));
                    floatLargeArray2.setFloat(j53, (f13 * f36) + (f14 * f34));
                    j34 += 2;
                    j24 = 2;
                    j26 = j49;
                    j25 = j40;
                    j10 = j38;
                    j27 = j41;
                    floatFFT_1D = this;
                    floatLargeArray3 = floatLargeArray;
                }
                j25++;
                j6 = 4;
                floatFFT_1D = this;
                floatLargeArray3 = floatLargeArray;
            }
            j7 = j10;
            if (j % j24 == 1) {
                return;
            }
        } else {
            j7 = j10;
        }
        long j54 = 0;
        while (j54 < j2) {
            long j55 = j54 * j;
            long j56 = j55 * 4;
            long j57 = j55 + j7;
            long j58 = j57 + j7;
            long j59 = j56 + j;
            long j60 = j59 + j;
            long j61 = (j3 + j) - 1;
            float f37 = floatLargeArray.getFloat(j61 + j56);
            float f38 = floatLargeArray.getFloat(j61 + j60);
            long j62 = j54;
            float f39 = floatLargeArray.getFloat(j3 + j59);
            float f40 = floatLargeArray.getFloat(j3 + j60 + j);
            float f41 = f39 + f40;
            float f42 = f40 - f39;
            float f43 = f37 - f38;
            float f44 = f37 + f38;
            long j63 = (j4 + j) - 1;
            floatLargeArray2.setFloat(j63 + j55, f44 + f44);
            floatLargeArray2.setFloat(j63 + j57, (f43 - f41) * 1.4142135f);
            floatLargeArray2.setFloat(j63 + j58, f42 + f42);
            floatLargeArray2.setFloat(j63 + j58 + j7, (f43 + f41) * (-1.4142135f));
            j54 = j62 + 1;
        }
    }

    void radf5(int i, int i2, float[] fArr, int i3, float[] fArr2, int i4, int i5) {
        int i6 = i5 + i;
        int i7 = i6 + i;
        int i8 = i7 + i;
        int i9 = i2 * i;
        for (int i10 = 0; i10 < i2; i10++) {
            int i11 = i10 * i;
            int i12 = i11 * 5;
            int i13 = i12 + i;
            int i14 = i13 + i;
            int i15 = i14 + i;
            int i16 = i11 + i9;
            int i17 = i16 + i9;
            int i18 = i17 + i9;
            int i19 = (i4 + i) - 1;
            float f = fArr[i3 + i11];
            float f2 = fArr[i3 + i16];
            float f3 = fArr[i3 + i17];
            float f4 = fArr[i3 + i18];
            float f5 = fArr[i3 + i18 + i9];
            float f6 = f5 + f2;
            float f7 = f5 - f2;
            float f8 = f4 + f3;
            float f9 = f4 - f3;
            fArr2[i4 + i12] = f + f6 + f8;
            fArr2[i19 + i13] = (f6 * 0.309017f) + f + (f8 * (-0.809017f));
            fArr2[i4 + i14] = (f7 * 0.95105654f) + (f9 * 0.58778524f);
            fArr2[i19 + i15] = f + (f6 * (-0.809017f)) + (f8 * 0.309017f);
            fArr2[i4 + i15 + i] = (f7 * 0.58778524f) - (f9 * 0.95105654f);
        }
        if (i == 1) {
            return;
        }
        for (int i20 = 0; i20 < i2; i20++) {
            int i21 = i20 * i;
            int i22 = i21 * 5;
            int i23 = i22 + i;
            int i24 = i23 + i;
            int i25 = i24 + i;
            int i26 = i25 + i;
            int i27 = i21 + i9;
            int i28 = i27 + i9;
            int i29 = i28 + i9;
            int i30 = i29 + i9;
            for (int i31 = 2; i31 < i; i31 += 2) {
                int i32 = i31 - 1;
                int i33 = i32 + i5;
                int i34 = i32 + i6;
                int i35 = i32 + i7;
                int i36 = i32 + i8;
                float[] fArr3 = this.wtable_r;
                float f10 = fArr3[i33 - 1];
                float f11 = fArr3[i33];
                float f12 = fArr3[i34 - 1];
                float f13 = fArr3[i34];
                float f14 = fArr3[i35 - 1];
                float f15 = fArr3[i35];
                float f16 = fArr3[i36 - 1];
                float f17 = fArr3[i36];
                int i37 = i3 + i31;
                int i38 = i4 + i31;
                int i39 = i4 + (i - i31);
                int i40 = i37 + i21;
                int i41 = i37 + i27;
                int i42 = i37 + i28;
                int i43 = i37 + i29;
                int i44 = i37 + i30;
                float f18 = fArr[i40 - 1];
                float f19 = fArr[i40];
                float f20 = fArr[i41 - 1];
                float f21 = fArr[i41];
                float f22 = fArr[i42 - 1];
                float f23 = fArr[i42];
                float f24 = fArr[i43 - 1];
                float f25 = fArr[i43];
                float f26 = fArr[i44 - 1];
                float f27 = fArr[i44];
                float f28 = (f10 * f20) + (f11 * f21);
                float f29 = (f10 * f21) - (f11 * f20);
                float f30 = (f12 * f22) + (f13 * f23);
                float f31 = (f12 * f23) - (f13 * f22);
                float f32 = (f14 * f24) + (f15 * f25);
                float f33 = (f14 * f25) - (f15 * f24);
                float f34 = (f16 * f26) + (f17 * f27);
                float f35 = (f16 * f27) - (f17 * f26);
                float f36 = f28 + f34;
                float f37 = f34 - f28;
                float f38 = f29 - f35;
                float f39 = f29 + f35;
                float f40 = f30 + f32;
                float f41 = f32 - f30;
                float f42 = f31 - f33;
                float f43 = f31 + f33;
                float f44 = f18 + (f36 * 0.309017f) + (f40 * (-0.809017f));
                float f45 = f19 + (f39 * 0.309017f) + (f43 * (-0.809017f));
                float f46 = f18 + (f36 * (-0.809017f)) + (f40 * 0.309017f);
                float f47 = f19 + (f39 * (-0.809017f)) + (f43 * 0.309017f);
                float f48 = (f38 * 0.95105654f) + (f42 * 0.58778524f);
                float f49 = (f37 * 0.95105654f) + (f41 * 0.58778524f);
                float f50 = (f38 * 0.58778524f) - (f42 * 0.95105654f);
                float f51 = (f37 * 0.58778524f) - (f41 * 0.95105654f);
                int i45 = i38 + i22;
                int i46 = i39 + i23;
                int i47 = i38 + i24;
                int i48 = i39 + i25;
                int i49 = i38 + i26;
                fArr2[i45 - 1] = f18 + f36 + f40;
                fArr2[i45] = f19 + f39 + f43;
                fArr2[i47 - 1] = f44 + f48;
                fArr2[i46 - 1] = f44 - f48;
                fArr2[i47] = f45 + f49;
                fArr2[i46] = f49 - f45;
                fArr2[i49 - 1] = f46 + f50;
                fArr2[i48 - 1] = f46 - f50;
                fArr2[i49] = f47 + f51;
                fArr2[i48] = f51 - f47;
            }
        }
    }

    void radf5(long j, long j2, FloatLargeArray floatLargeArray, long j3, FloatLargeArray floatLargeArray2, long j4, long j5) {
        long j6;
        FloatFFT_1D floatFFT_1D = this;
        FloatLargeArray floatLargeArray3 = floatLargeArray;
        long j7 = j5 + j;
        long j8 = j7 + j;
        long j9 = j8 + j;
        long j10 = j2 * j;
        long j11 = 0;
        while (true) {
            j6 = 5;
            if (j11 >= j2) {
                break;
            }
            long j12 = j11 * j;
            long j13 = 5 * j12;
            long j14 = j13 + j;
            long j15 = j14 + j;
            long j16 = j15 + j;
            long j17 = j12 + j10;
            long j18 = j17 + j10;
            long j19 = j18 + j10;
            long j20 = (j4 + j) - 1;
            float f = floatLargeArray3.getFloat(j3 + j12);
            long j21 = j9;
            float f2 = floatLargeArray3.getFloat(j3 + j17);
            long j22 = j8;
            float f3 = floatLargeArray3.getFloat(j3 + j18);
            long j23 = j7;
            float f4 = floatLargeArray3.getFloat(j3 + j19);
            float f5 = floatLargeArray3.getFloat(j3 + j19 + j10);
            float f6 = f5 + f2;
            float f7 = f5 - f2;
            float f8 = f4 + f3;
            float f9 = f4 - f3;
            floatLargeArray2.setFloat(j4 + j13, f + f6 + f8);
            floatLargeArray2.setFloat(j20 + j14, (f6 * 0.309017f) + f + (f8 * (-0.809017f)));
            floatLargeArray2.setFloat(j4 + j15, (f7 * 0.95105654f) + (f9 * 0.58778524f));
            floatLargeArray2.setFloat(j20 + j16, f + (f6 * (-0.809017f)) + (f8 * 0.309017f));
            floatLargeArray2.setFloat(j4 + j16 + j, (f7 * 0.58778524f) - (f9 * 0.95105654f));
            j11++;
            j9 = j21;
            j8 = j22;
            j7 = j23;
            j10 = j10;
        }
        long j24 = j7;
        long j25 = j8;
        long j26 = j9;
        long j27 = j10;
        if (j == 1) {
            return;
        }
        long j28 = 0;
        while (j28 < j2) {
            long j29 = j28 * j;
            long j30 = j29 * j6;
            long j31 = j30 + j;
            long j32 = j31 + j;
            long j33 = j32 + j;
            long j34 = j33 + j;
            long j35 = j29 + j27;
            long j36 = j35 + j27;
            long j37 = j36 + j27;
            long j38 = j37 + j27;
            long j39 = 2;
            while (j39 < j) {
                long j40 = j39 - 1;
                long j41 = j28;
                long j42 = j40 + j5;
                long j43 = j33;
                long j44 = j40 + j24;
                long j45 = j32;
                long j46 = j40 + j25;
                long j47 = j31;
                long j48 = j40 + j26;
                long j49 = j30;
                float f10 = floatFFT_1D.wtable_rl.getFloat(j42 - 1);
                float f11 = floatFFT_1D.wtable_rl.getFloat(j42);
                float f12 = floatFFT_1D.wtable_rl.getFloat(j44 - 1);
                float f13 = floatFFT_1D.wtable_rl.getFloat(j44);
                float f14 = floatFFT_1D.wtable_rl.getFloat(j46 - 1);
                float f15 = floatFFT_1D.wtable_rl.getFloat(j46);
                float f16 = floatFFT_1D.wtable_rl.getFloat(j48 - 1);
                float f17 = floatFFT_1D.wtable_rl.getFloat(j48);
                long j50 = j3 + j39;
                long j51 = j4 + j39;
                long j52 = j4 + (j - j39);
                long j53 = j50 + j29;
                long j54 = j29;
                long j55 = j50 + j35;
                long j56 = j50 + j36;
                long j57 = j50 + j37;
                long j58 = j50 + j38;
                float f18 = floatLargeArray3.getFloat(j53 - 1);
                float f19 = floatLargeArray3.getFloat(j53);
                float f20 = floatLargeArray3.getFloat(j55 - 1);
                float f21 = floatLargeArray3.getFloat(j55);
                float f22 = floatLargeArray3.getFloat(j56 - 1);
                float f23 = floatLargeArray3.getFloat(j56);
                float f24 = floatLargeArray3.getFloat(j57 - 1);
                float f25 = floatLargeArray3.getFloat(j57);
                float f26 = floatLargeArray3.getFloat(j58 - 1);
                float f27 = floatLargeArray3.getFloat(j58);
                float f28 = (f10 * f20) + (f11 * f21);
                float f29 = (f21 * f10) - (f11 * f20);
                float f30 = (f12 * f22) + (f13 * f23);
                float f31 = (f23 * f12) - (f22 * f13);
                float f32 = (f14 * f24) + (f15 * f25);
                float f33 = (f25 * f14) - (f24 * f15);
                float f34 = (f16 * f26) + (f17 * f27);
                float f35 = (f27 * f16) - (f26 * f17);
                float f36 = f28 + f34;
                float f37 = f34 - f28;
                float f38 = f29 - f35;
                float f39 = f29 + f35;
                float f40 = f30 + f32;
                float f41 = f32 - f30;
                float f42 = f31 - f33;
                float f43 = f31 + f33;
                float f44 = (f36 * 0.309017f) + f18 + (f40 * (-0.809017f));
                float f45 = (f39 * 0.309017f) + f19 + (f43 * (-0.809017f));
                float f46 = (f36 * (-0.809017f)) + f18 + (f40 * 0.309017f);
                float f47 = f19 + (f39 * (-0.809017f)) + (f43 * 0.309017f);
                float f48 = (f38 * 0.95105654f) + (f42 * 0.58778524f);
                float f49 = (f37 * 0.95105654f) + (f41 * 0.58778524f);
                float f50 = (f38 * 0.58778524f) - (f42 * 0.95105654f);
                float f51 = (f37 * 0.58778524f) - (f41 * 0.95105654f);
                long j59 = j51 + j49;
                long j60 = j52 + j47;
                long j61 = j51 + j45;
                long j62 = j52 + j43;
                long j63 = j51 + j34;
                floatLargeArray2.setFloat(j59 - 1, f18 + f36 + f40);
                floatLargeArray2.setFloat(j59, f19 + f39 + f43);
                floatLargeArray2.setFloat(j61 - 1, f44 + f48);
                floatLargeArray2.setFloat(j60 - 1, f44 - f48);
                floatLargeArray2.setFloat(j61, f45 + f49);
                floatLargeArray2.setFloat(j60, f49 - f45);
                floatLargeArray2.setFloat(j63 - 1, f46 + f50);
                floatLargeArray2.setFloat(j62 - 1, f46 - f50);
                floatLargeArray2.setFloat(j63, f47 + f51);
                floatLargeArray2.setFloat(j62, f51 - f47);
                j39 += 2;
                floatFFT_1D = this;
                floatLargeArray3 = floatLargeArray;
                j28 = j41;
                j33 = j43;
                j32 = j45;
                j31 = j47;
                j30 = j49;
                j29 = j54;
            }
            j28++;
            floatFFT_1D = this;
            floatLargeArray3 = floatLargeArray;
            j6 = 5;
        }
    }

    void radb5(int i, int i2, float[] fArr, int i3, float[] fArr2, int i4, int i5) {
        int i6 = i5 + i;
        int i7 = i6 + i;
        int i8 = i7 + i;
        int i9 = i2 * i;
        for (int i10 = 0; i10 < i2; i10++) {
            int i11 = i10 * i;
            int i12 = i11 * 5;
            int i13 = i12 + i;
            int i14 = i13 + i;
            int i15 = i14 + i;
            int i16 = i11 + i9;
            int i17 = i16 + i9;
            int i18 = i17 + i9;
            int i19 = (i3 + i) - 1;
            float f = fArr[i3 + i12];
            float f2 = fArr[i3 + i14] * 2.0f;
            float f3 = fArr[i3 + i15 + i] * 2.0f;
            float f4 = fArr[i19 + i13] * 2.0f;
            float f5 = fArr[i19 + i15] * 2.0f;
            float f6 = f + (f4 * 0.309017f) + (f5 * (-0.809017f));
            float f7 = ((-0.809017f) * f4) + f + (0.309017f * f5);
            float f8 = (f2 * 0.95105654f) + (f3 * 0.58778524f);
            float f9 = (f2 * 0.58778524f) - (f3 * 0.95105654f);
            fArr2[i4 + i11] = f + f4 + f5;
            fArr2[i4 + i16] = f6 - f8;
            fArr2[i4 + i17] = f7 - f9;
            fArr2[i4 + i18] = f7 + f9;
            fArr2[i4 + i18 + i9] = f6 + f8;
        }
        if (i == 1) {
            return;
        }
        for (int i20 = 0; i20 < i2; i20++) {
            int i21 = i20 * i;
            int i22 = i21 * 5;
            int i23 = i22 + i;
            int i24 = i23 + i;
            int i25 = i24 + i;
            int i26 = i25 + i;
            int i27 = i21 + i9;
            int i28 = i27 + i9;
            int i29 = i28 + i9;
            int i30 = i29 + i9;
            for (int i31 = 2; i31 < i; i31 += 2) {
                int i32 = i31 - 1;
                int i33 = i32 + i5;
                int i34 = i32 + i6;
                int i35 = i32 + i7;
                int i36 = i32 + i8;
                float[] fArr3 = this.wtable_r;
                float f10 = fArr3[i33 - 1];
                float f11 = fArr3[i33];
                float f12 = fArr3[i34 - 1];
                float f13 = fArr3[i34];
                float f14 = fArr3[i35 - 1];
                float f15 = fArr3[i35];
                float f16 = fArr3[i36 - 1];
                float f17 = fArr3[i36];
                int i37 = i3 + i31;
                int i38 = i3 + (i - i31);
                int i39 = i4 + i31;
                int i40 = i37 + i22;
                int i41 = i38 + i23;
                int i42 = i37 + i24;
                int i43 = i38 + i25;
                int i44 = i37 + i26;
                float f18 = fArr[i40 - 1];
                float f19 = fArr[i40];
                float f20 = fArr[i41 - 1];
                float f21 = fArr[i41];
                float f22 = fArr[i42 - 1];
                float f23 = fArr[i42];
                float f24 = fArr[i43 - 1];
                float f25 = fArr[i43];
                float f26 = fArr[i44 - 1];
                float f27 = fArr[i44];
                float f28 = f23 + f21;
                float f29 = f23 - f21;
                float f30 = f27 + f25;
                float f31 = f27 - f25;
                float f32 = f22 - f20;
                float f33 = f22 + f20;
                float f34 = f26 - f24;
                float f35 = f26 + f24;
                float f36 = f18 + (f33 * 0.309017f) + (f35 * (-0.809017f));
                float f37 = f19 + (f29 * 0.309017f) + (f31 * (-0.809017f));
                float f38 = f18 + (f33 * (-0.809017f)) + (f35 * 0.309017f);
                float f39 = f19 + (f29 * (-0.809017f)) + (f31 * 0.309017f);
                float f40 = (f32 * 0.95105654f) + (f34 * 0.58778524f);
                float f41 = (f28 * 0.95105654f) + (f30 * 0.58778524f);
                float f42 = (f32 * 0.58778524f) - (f34 * 0.95105654f);
                float f43 = (f28 * 0.58778524f) - (f30 * 0.95105654f);
                float f44 = f38 - f43;
                float f45 = f38 + f43;
                float f46 = f39 + f42;
                float f47 = f39 - f42;
                float f48 = f36 + f41;
                float f49 = f36 - f41;
                float f50 = f37 - f40;
                float f51 = f37 + f40;
                int i45 = i39 + i21;
                int i46 = i39 + i27;
                int i47 = i39 + i28;
                int i48 = i39 + i29;
                int i49 = i39 + i30;
                fArr2[i45 - 1] = f18 + f33 + f35;
                fArr2[i45] = f19 + f29 + f31;
                fArr2[i46 - 1] = (f10 * f49) - (f11 * f51);
                fArr2[i46] = (f10 * f51) + (f11 * f49);
                fArr2[i47 - 1] = (f12 * f44) - (f13 * f46);
                fArr2[i47] = (f12 * f46) + (f13 * f44);
                fArr2[i48 - 1] = (f14 * f45) - (f15 * f47);
                fArr2[i48] = (f14 * f47) + (f15 * f45);
                fArr2[i49 - 1] = (f16 * f48) - (f17 * f50);
                fArr2[i49] = (f16 * f50) + (f17 * f48);
            }
        }
    }

    void radb5(long j, long j2, FloatLargeArray floatLargeArray, long j3, FloatLargeArray floatLargeArray2, long j4, long j5) {
        FloatFFT_1D floatFFT_1D = this;
        FloatLargeArray floatLargeArray3 = floatLargeArray;
        FloatLargeArray floatLargeArray4 = floatLargeArray2;
        long j6 = j5 + j;
        long j7 = j6 + j;
        long j8 = j7 + j;
        long j9 = j2 * j;
        long j10 = 0;
        while (j10 < j2) {
            long j11 = j10 * j;
            long j12 = 5 * j11;
            long j13 = j12 + j;
            long j14 = j13 + j;
            long j15 = j14 + j;
            long j16 = j11 + j9;
            long j17 = j16 + j9;
            long j18 = j17 + j9;
            long j19 = (j3 + j) - 1;
            float f = floatLargeArray3.getFloat(j3 + j12);
            long j20 = j8;
            float f2 = floatLargeArray3.getFloat(j3 + j14) * 2.0f;
            long j21 = j7;
            float f3 = floatLargeArray3.getFloat(j3 + j15 + j) * 2.0f;
            long j22 = j6;
            float f4 = floatLargeArray3.getFloat(j19 + j13) * 2.0f;
            float f5 = floatLargeArray3.getFloat(j19 + j15) * 2.0f;
            float f6 = (f4 * 0.309017f) + f + (f5 * (-0.809017f));
            float f7 = f + ((-0.809017f) * f4) + (0.309017f * f5);
            float f8 = (f2 * 0.95105654f) + (f3 * 0.58778524f);
            float f9 = (f2 * 0.58778524f) - (f3 * 0.95105654f);
            floatLargeArray4.setFloat(j4 + j11, f + f4 + f5);
            floatLargeArray4.setFloat(j4 + j16, f6 - f8);
            floatLargeArray4.setFloat(j4 + j17, f7 - f9);
            floatLargeArray4.setFloat(j4 + j18, f7 + f9);
            floatLargeArray4.setFloat(j4 + j18 + j9, f6 + f8);
            j10++;
            j9 = j9;
            j7 = j21;
            j6 = j22;
            j8 = j20;
        }
        long j23 = j6;
        long j24 = j7;
        long j25 = j8;
        long j26 = j9;
        if (j == 1) {
            return;
        }
        long j27 = 0;
        while (j27 < j2) {
            long j28 = j27 * j;
            long j29 = j28 * 5;
            long j30 = j29 + j;
            long j31 = j30 + j;
            long j32 = j31 + j;
            long j33 = j32 + j;
            long j34 = j28 + j26;
            long j35 = j34 + j26;
            long j36 = j35 + j26;
            long j37 = j36 + j26;
            long j38 = 2;
            while (j38 < j) {
                long j39 = j38 - 1;
                long j40 = j27;
                long j41 = j39 + j5;
                long j42 = j28;
                long j43 = j39 + j23;
                long j44 = j32;
                long j45 = j39 + j24;
                long j46 = j31;
                long j47 = j39 + j25;
                long j48 = j30;
                float f10 = floatFFT_1D.wtable_rl.getFloat(j41 - 1);
                float f11 = floatFFT_1D.wtable_rl.getFloat(j41);
                float f12 = floatFFT_1D.wtable_rl.getFloat(j43 - 1);
                float f13 = floatFFT_1D.wtable_rl.getFloat(j43);
                float f14 = floatFFT_1D.wtable_rl.getFloat(j45 - 1);
                float f15 = floatFFT_1D.wtable_rl.getFloat(j45);
                float f16 = floatFFT_1D.wtable_rl.getFloat(j47 - 1);
                float f17 = floatFFT_1D.wtable_rl.getFloat(j47);
                long j49 = j3 + j38;
                long j50 = j3 + (j - j38);
                long j51 = j4 + j38;
                long j52 = j49 + j29;
                long j53 = j29;
                long j54 = j50 + j48;
                long j55 = j49 + j46;
                long j56 = j50 + j44;
                long j57 = j49 + j33;
                float f18 = floatLargeArray3.getFloat(j52 - 1);
                float f19 = floatLargeArray3.getFloat(j52);
                float f20 = floatLargeArray3.getFloat(j54 - 1);
                float f21 = floatLargeArray3.getFloat(j54);
                float f22 = floatLargeArray3.getFloat(j55 - 1);
                float f23 = floatLargeArray3.getFloat(j55);
                float f24 = floatLargeArray3.getFloat(j56 - 1);
                float f25 = floatLargeArray3.getFloat(j56);
                float f26 = floatLargeArray3.getFloat(j57 - 1);
                float f27 = floatLargeArray3.getFloat(j57);
                float f28 = f23 + f21;
                float f29 = f23 - f21;
                float f30 = f27 + f25;
                float f31 = f27 - f25;
                float f32 = f22 - f20;
                float f33 = f22 + f20;
                float f34 = f26 - f24;
                float f35 = f26 + f24;
                float f36 = (f33 * 0.309017f) + f18 + (f35 * (-0.809017f));
                float f37 = (f29 * 0.309017f) + f19 + (f31 * (-0.809017f));
                float f38 = f18 + (f33 * (-0.809017f)) + (f35 * 0.309017f);
                float f39 = f19 + (f29 * (-0.809017f)) + (f31 * 0.309017f);
                float f40 = (f32 * 0.95105654f) + (f34 * 0.58778524f);
                float f41 = (f28 * 0.95105654f) + (f30 * 0.58778524f);
                float f42 = (f32 * 0.58778524f) - (f34 * 0.95105654f);
                float f43 = (f28 * 0.58778524f) - (f30 * 0.95105654f);
                float f44 = f38 - f43;
                float f45 = f38 + f43;
                float f46 = f39 + f42;
                float f47 = f39 - f42;
                float f48 = f36 + f41;
                float f49 = f36 - f41;
                float f50 = f37 - f40;
                float f51 = f37 + f40;
                long j58 = j51 + j42;
                long j59 = j51 + j34;
                long j60 = j51 + j35;
                long j61 = j51 + j36;
                long j62 = j51 + j37;
                floatLargeArray2.setFloat(j58 - 1, f33 + f18 + f35);
                floatLargeArray2.setFloat(j58, f19 + f29 + f31);
                floatLargeArray2.setFloat(j59 - 1, (f10 * f49) - (f11 * f51));
                floatLargeArray2.setFloat(j59, (f10 * f51) + (f11 * f49));
                floatLargeArray2.setFloat(j60 - 1, (f12 * f44) - (f13 * f46));
                floatLargeArray2.setFloat(j60, (f12 * f46) + (f13 * f44));
                floatLargeArray2.setFloat(j61 - 1, (f14 * f45) - (f15 * f47));
                floatLargeArray2.setFloat(j61, (f14 * f47) + (f15 * f45));
                floatLargeArray2.setFloat(j62 - 1, (f16 * f48) - (f17 * f50));
                floatLargeArray2.setFloat(j62, (f16 * f50) + (f17 * f48));
                j38 += 2;
                floatFFT_1D = this;
                floatLargeArray3 = floatLargeArray;
                floatLargeArray4 = floatLargeArray2;
                j30 = j48;
                j27 = j40;
                j28 = j42;
                j32 = j44;
                j31 = j46;
                j29 = j53;
            }
            j27++;
            floatFFT_1D = this;
            floatLargeArray3 = floatLargeArray;
        }
    }

    void radfg(int i, int i2, int i3, int i4, float[] fArr, int i5, float[] fArr2, int i6, int i7) {
        float f;
        int i8;
        int i9 = i2;
        double d = TWO_PI / i9;
        float fCos = (float) FastMath.cos(d);
        float fSin = (float) FastMath.sin(d);
        int i10 = (i9 + 1) / 2;
        int i11 = (i - 1) / 2;
        if (i != 1) {
            for (int i12 = 0; i12 < i4; i12++) {
                fArr2[i6 + i12] = fArr[i5 + i12];
            }
            for (int i13 = 1; i13 < i9; i13++) {
                int i14 = i13 * i3 * i;
                for (int i15 = 0; i15 < i3; i15++) {
                    int i16 = (i15 * i) + i14;
                    fArr2[i6 + i16] = fArr[i5 + i16];
                }
            }
            if (i11 <= i3) {
                int i17 = -i;
                int i18 = 1;
                while (i18 < i9) {
                    int i19 = i17 + i;
                    int i20 = i19 - 1;
                    int i21 = i18 * i3 * i;
                    int i22 = 2;
                    while (i22 < i) {
                        i20 += 2;
                        int i23 = i20 + i7;
                        int i24 = i5 + i22;
                        int i25 = i6 + i22;
                        float[] fArr3 = this.wtable_r;
                        float f2 = fArr3[i23 - 1];
                        float f3 = fArr3[i23];
                        float f4 = fSin;
                        for (int i26 = 0; i26 < i3; i26++) {
                            int i27 = (i26 * i) + i21;
                            int i28 = i25 + i27;
                            int i29 = i24 + i27;
                            float f5 = fArr[i29 - 1];
                            float f6 = fArr[i29];
                            fArr2[i28 - 1] = (f2 * f5) + (f3 * f6);
                            fArr2[i28] = (f6 * f2) - (f5 * f3);
                        }
                        i22 += 2;
                        fSin = f4;
                    }
                    i18++;
                    i17 = i19;
                }
                f = fSin;
            } else {
                f = fSin;
                int i30 = -i;
                for (int i31 = 1; i31 < i9; i31++) {
                    i30 += i;
                    int i32 = i31 * i3 * i;
                    int i33 = 0;
                    while (i33 < i3) {
                        int i34 = i30 - 1;
                        int i35 = (i33 * i) + i32;
                        int i36 = i30;
                        int i37 = 2;
                        while (i37 < i) {
                            i34 += 2;
                            int i38 = i34 + i7;
                            int i39 = i32;
                            float[] fArr4 = this.wtable_r;
                            float f7 = fArr4[i38 - 1];
                            float f8 = fArr4[i38];
                            int i40 = i6 + i37 + i35;
                            int i41 = i5 + i37 + i35;
                            float f9 = fArr[i41 - 1];
                            float f10 = fArr[i41];
                            fArr2[i40 - 1] = (f7 * f9) + (f8 * f10);
                            fArr2[i40] = (f7 * f10) - (f8 * f9);
                            i37 += 2;
                            i32 = i39;
                        }
                        i33++;
                        i30 = i36;
                    }
                }
            }
            if (i11 >= i3) {
                for (int i42 = 1; i42 < i10; i42++) {
                    int i43 = i42 * i3 * i;
                    int i44 = (i9 - i42) * i3 * i;
                    for (int i45 = 0; i45 < i3; i45++) {
                        int i46 = i45 * i;
                        int i47 = i46 + i43;
                        int i48 = i46 + i44;
                        for (int i49 = 2; i49 < i; i49 += 2) {
                            int i50 = i5 + i49;
                            int i51 = i6 + i49;
                            int i52 = i50 + i47;
                            int i53 = i50 + i48;
                            int i54 = i51 + i47;
                            int i55 = i51 + i48;
                            float f11 = fArr2[i54 - 1];
                            float f12 = fArr2[i54];
                            float f13 = fArr2[i55 - 1];
                            float f14 = fArr2[i55];
                            fArr[i52 - 1] = f11 + f13;
                            fArr[i52] = f12 + f14;
                            fArr[i53 - 1] = f12 - f14;
                            fArr[i53] = f13 - f11;
                        }
                    }
                }
            } else {
                for (int i56 = 1; i56 < i10; i56++) {
                    int i57 = i56 * i3 * i;
                    int i58 = (i9 - i56) * i3 * i;
                    int i59 = 2;
                    while (i59 < i) {
                        int i60 = i5 + i59;
                        int i61 = i6 + i59;
                        int i62 = i11;
                        for (int i63 = 0; i63 < i3; i63++) {
                            int i64 = i63 * i;
                            int i65 = i64 + i57;
                            int i66 = i64 + i58;
                            int i67 = i60 + i65;
                            int i68 = i60 + i66;
                            int i69 = i61 + i65;
                            int i70 = i61 + i66;
                            float f15 = fArr2[i69 - 1];
                            float f16 = fArr2[i69];
                            float f17 = fArr2[i70 - 1];
                            float f18 = fArr2[i70];
                            fArr[i67 - 1] = f15 + f17;
                            fArr[i67] = f16 + f18;
                            fArr[i68 - 1] = f16 - f18;
                            fArr[i68] = f17 - f15;
                        }
                        i59 += 2;
                        i11 = i62;
                    }
                }
            }
            i8 = i11;
        } else {
            f = fSin;
            i8 = i11;
            System.arraycopy(fArr2, i6, fArr, i5, i4);
        }
        for (int i71 = 1; i71 < i10; i71++) {
            int i72 = i71 * i3 * i;
            int i73 = (i9 - i71) * i3 * i;
            for (int i74 = 0; i74 < i3; i74++) {
                int i75 = i74 * i;
                int i76 = i75 + i72;
                int i77 = i75 + i73;
                float f19 = fArr2[i6 + i76];
                float f20 = fArr2[i6 + i77];
                fArr[i76 + i5] = f19 + f20;
                fArr[i77 + i5] = f20 - f19;
            }
        }
        int i78 = (i9 - 1) * i4;
        float f21 = 1.0f;
        float f22 = 0.0f;
        int i79 = 1;
        while (i79 < i10) {
            float f23 = (fCos * f21) - (f * f22);
            f22 = (f22 * fCos) + (f21 * f);
            int i80 = i79 * i4;
            int i81 = (i9 - i79) * i4;
            float f24 = fCos;
            for (int i82 = 0; i82 < i4; i82++) {
                int i83 = i6 + i82;
                int i84 = i5 + i82;
                fArr2[i83 + i80] = fArr[i84] + (fArr[i84 + i4] * f23);
                fArr2[i83 + i81] = fArr[i84 + i78] * f22;
            }
            float f25 = f22;
            float f26 = f23;
            int i85 = 2;
            while (i85 < i10) {
                float f27 = (f23 * f26) - (f22 * f25);
                f25 = (f25 * f23) + (f26 * f22);
                int i86 = i85 * i4;
                int i87 = (i9 - i85) * i4;
                int i88 = i78;
                for (int i89 = 0; i89 < i4; i89++) {
                    int i90 = i6 + i89;
                    int i91 = i5 + i89;
                    int i92 = i90 + i80;
                    fArr2[i92] = fArr2[i92] + (fArr[i91 + i86] * f27);
                    int i93 = i90 + i81;
                    fArr2[i93] = fArr2[i93] + (fArr[i91 + i87] * f25);
                }
                i85++;
                i78 = i88;
                f26 = f27;
            }
            i79++;
            f21 = f23;
            fCos = f24;
        }
        for (int i94 = 1; i94 < i10; i94++) {
            int i95 = i94 * i4;
            for (int i96 = 0; i96 < i4; i96++) {
                int i97 = i6 + i96;
                fArr2[i97] = fArr2[i97] + fArr[i5 + i96 + i95];
            }
        }
        if (i >= i3) {
            for (int i98 = 0; i98 < i3; i98++) {
                int i99 = i98 * i;
                int i100 = i99 * i9;
                for (int i101 = 0; i101 < i; i101++) {
                    fArr[i5 + i101 + i100] = fArr2[i6 + i101 + i99];
                }
            }
        } else {
            for (int i102 = 0; i102 < i; i102++) {
                for (int i103 = 0; i103 < i3; i103++) {
                    int i104 = i103 * i;
                    fArr[i5 + i102 + (i104 * i9)] = fArr2[i6 + i102 + i104];
                }
            }
        }
        int i105 = i9 * i;
        for (int i106 = 1; i106 < i10; i106++) {
            int i107 = i106 * i3 * i;
            int i108 = (i9 - i106) * i3 * i;
            int i109 = i106 * 2 * i;
            for (int i110 = 0; i110 < i3; i110++) {
                int i111 = i110 * i;
                int i112 = i110 * i105;
                fArr[((((i5 + i) - 1) + i109) - i) + i112] = fArr2[i111 + i107 + i6];
                fArr[i5 + i109 + i112] = fArr2[i111 + i108 + i6];
            }
        }
        if (i == 1) {
            return;
        }
        if (i8 >= i3) {
            for (int i113 = 1; i113 < i10; i113++) {
                int i114 = i113 * i3 * i;
                int i115 = (i9 - i113) * i3 * i;
                int i116 = i113 * 2 * i;
                int i117 = 0;
                while (i117 < i3) {
                    int i118 = i117 * i105;
                    int i119 = i117 * i;
                    int i120 = i105;
                    for (int i121 = 2; i121 < i; i121 += 2) {
                        int i122 = i5 + i121 + i116 + i118;
                        int i123 = (((i5 + (i - i121)) + i116) - i) + i118;
                        int i124 = i6 + i121 + i119;
                        int i125 = i124 + i114;
                        int i126 = i124 + i115;
                        float f28 = fArr2[i125 - 1];
                        float f29 = fArr2[i125];
                        float f30 = fArr2[i126 - 1];
                        float f31 = fArr2[i126];
                        fArr[i122 - 1] = f28 + f30;
                        fArr[i123 - 1] = f28 - f30;
                        fArr[i122] = f29 + f31;
                        fArr[i123] = f31 - f29;
                    }
                    i117++;
                    i105 = i120;
                }
            }
            return;
        }
        int i127 = 1;
        while (i127 < i10) {
            int i128 = i127 * i3 * i;
            int i129 = (i9 - i127) * i3 * i;
            int i130 = i127 * 2 * i;
            for (int i131 = 2; i131 < i; i131 += 2) {
                int i132 = i5 + i131;
                int i133 = (i - i131) + i5;
                int i134 = i6 + i131;
                for (int i135 = 0; i135 < i3; i135++) {
                    int i136 = i135 * i105;
                    int i137 = i132 + i130 + i136;
                    int i138 = ((i133 + i130) - i) + i136;
                    int i139 = i134 + (i135 * i);
                    int i140 = i139 + i128;
                    int i141 = i139 + i129;
                    float f32 = fArr2[i140 - 1];
                    float f33 = fArr2[i140];
                    float f34 = fArr2[i141 - 1];
                    float f35 = fArr2[i141];
                    fArr[i137 - 1] = f32 + f34;
                    fArr[i138 - 1] = f32 - f34;
                    fArr[i137] = f33 + f35;
                    fArr[i138] = f35 - f33;
                }
            }
            i127++;
            i9 = i2;
        }
    }

    void radfg(long j, long j2, long j3, long j4, FloatLargeArray floatLargeArray, long j5, FloatLargeArray floatLargeArray2, long j6, long j7) {
        float f;
        FloatFFT_1D floatFFT_1D = this;
        long j8 = j;
        long j9 = j2;
        double d = TWO_PI / j9;
        float fCos = (float) FastMath.cos(d);
        float fSin = (float) FastMath.sin(d);
        long j10 = (j9 + 1) / 2;
        long j11 = (j8 - 1) / 2;
        if (j8 != 1) {
            for (long j12 = 0; j12 < j4; j12++) {
                floatLargeArray2.setFloat(j6 + j12, floatLargeArray.getFloat(j5 + j12));
            }
            for (long j13 = 1; j13 < j9; j13++) {
                long j14 = j13 * j3 * j8;
                long j15 = 0;
                while (j15 < j3) {
                    long j16 = (j15 * j8) + j14;
                    floatLargeArray2.setFloat(j6 + j16, floatLargeArray.getFloat(j5 + j16));
                    j15++;
                    j14 = j14;
                    fSin = fSin;
                }
            }
            float f2 = fSin;
            int i = (j11 > j3 ? 1 : (j11 == j3 ? 0 : -1));
            if (i <= 0) {
                long j17 = -j8;
                long j18 = 1;
                while (j18 < j9) {
                    j17 += j8;
                    long j19 = j17 - 1;
                    long j20 = j18 * j3 * j8;
                    long j21 = 2;
                    while (j21 < j8) {
                        long j22 = j19 + 2;
                        long j23 = j17;
                        long j24 = j22 + j7;
                        long j25 = j5 + j21;
                        long j26 = j6 + j21;
                        float f3 = floatFFT_1D.wtable_rl.getFloat(j24 - 1);
                        float f4 = floatFFT_1D.wtable_rl.getFloat(j24);
                        long j27 = 0;
                        while (j27 < j3) {
                            long j28 = (j27 * j8) + j20;
                            long j29 = j26 + j28;
                            long j30 = j25 + j28;
                            float f5 = floatLargeArray.getFloat(j30 - 1);
                            float f6 = floatLargeArray.getFloat(j30);
                            floatLargeArray2.setFloat(j29 - 1, (f3 * f5) + (f4 * f6));
                            floatLargeArray2.setFloat(j29, (f6 * f3) - (f5 * f4));
                            j27++;
                            j8 = j;
                            j18 = j18;
                        }
                        j21 += 2;
                        floatFFT_1D = this;
                        j8 = j;
                        j17 = j23;
                        j19 = j22;
                    }
                    j18++;
                    floatFFT_1D = this;
                    j8 = j;
                    j9 = j2;
                }
            } else {
                long j31 = j8;
                long j32 = -j31;
                long j33 = 1;
                while (j33 < j2) {
                    j32 += j31;
                    long j34 = j33 * j3 * j31;
                    long j35 = 0;
                    while (j35 < j3) {
                        long j36 = j32 - 1;
                        long j37 = (j35 * j31) + j34;
                        long j38 = 2;
                        while (j38 < j31) {
                            j36 += 2;
                            long j39 = j32;
                            long j40 = j36 + j7;
                            long j41 = j34;
                            float f7 = this.wtable_rl.getFloat(j40 - 1);
                            float f8 = this.wtable_rl.getFloat(j40);
                            long j42 = j6 + j38 + j37;
                            long j43 = j5 + j38 + j37;
                            int i2 = i;
                            float f9 = floatLargeArray.getFloat(j43 - 1);
                            float f10 = floatLargeArray.getFloat(j43);
                            floatLargeArray2.setFloat(j42 - 1, (f7 * f9) + (f8 * f10));
                            floatLargeArray2.setFloat(j42, (f7 * f10) - (f8 * f9));
                            j38 += 2;
                            j31 = j;
                            i = i2;
                            j32 = j39;
                            j34 = j41;
                            j33 = j33;
                        }
                        j35++;
                        j31 = j;
                        j34 = j34;
                    }
                    j33++;
                    j31 = j;
                }
            }
            if (i >= 0) {
                long j44 = 1;
                while (j44 < j10) {
                    long j45 = j44 * j3 * j;
                    long j46 = (j2 - j44) * j3 * j;
                    long j47 = 0;
                    while (j47 < j3) {
                        long j48 = j47 * j;
                        long j49 = j48 + j45;
                        long j50 = j48 + j46;
                        long j51 = 2;
                        while (j51 < j) {
                            long j52 = j5 + j51;
                            long j53 = j6 + j51;
                            long j54 = j46;
                            long j55 = j52 + j49;
                            long j56 = j45;
                            long j57 = j52 + j50;
                            long j58 = j44;
                            long j59 = j53 + j49;
                            long j60 = j49;
                            long j61 = j53 + j50;
                            long j62 = j50;
                            float f11 = floatLargeArray2.getFloat(j59 - 1);
                            float f12 = floatLargeArray2.getFloat(j59);
                            long j63 = j47;
                            float f13 = floatLargeArray2.getFloat(j61 - 1);
                            float f14 = floatLargeArray2.getFloat(j61);
                            floatLargeArray.setFloat(j55 - 1, f11 + f13);
                            floatLargeArray.setFloat(j55, f12 + f14);
                            floatLargeArray.setFloat(j57 - 1, f12 - f14);
                            floatLargeArray.setFloat(j57, f13 - f11);
                            j51 += 2;
                            j46 = j54;
                            j44 = j58;
                            j50 = j62;
                            j45 = j56;
                            j49 = j60;
                            j47 = j63;
                        }
                        j47++;
                    }
                    j44++;
                }
            } else {
                long j64 = 1;
                while (j64 < j10) {
                    long j65 = j64 * j3 * j;
                    long j66 = (j2 - j64) * j3 * j;
                    for (long j67 = 2; j67 < j; j67 += 2) {
                        long j68 = j5 + j67;
                        long j69 = j6 + j67;
                        long j70 = 0;
                        while (j70 < j3) {
                            long j71 = j70 * j;
                            long j72 = j71 + j65;
                            long j73 = j71 + j66;
                            long j74 = j66;
                            long j75 = j68 + j72;
                            long j76 = j65;
                            long j77 = j68 + j73;
                            long j78 = j68;
                            long j79 = j69 + j72;
                            long j80 = j64;
                            long j81 = j69 + j73;
                            long j82 = j69;
                            float f15 = floatLargeArray2.getFloat(j79 - 1);
                            float f16 = floatLargeArray2.getFloat(j79);
                            float f17 = floatLargeArray2.getFloat(j81 - 1);
                            float f18 = floatLargeArray2.getFloat(j81);
                            floatLargeArray.setFloat(j75 - 1, f15 + f17);
                            floatLargeArray.setFloat(j75, f16 + f18);
                            floatLargeArray.setFloat(j77 - 1, f16 - f18);
                            floatLargeArray.setFloat(j77, f17 - f15);
                            j70++;
                            j66 = j74;
                            j69 = j82;
                            j64 = j80;
                            j65 = j76;
                            j68 = j78;
                        }
                    }
                    j64++;
                }
            }
            f = f2;
        } else {
            f = fSin;
            LargeArrayUtils.arraycopy(floatLargeArray2, j6, floatLargeArray, j5, j4);
        }
        for (long j83 = 1; j83 < j10; j83++) {
            long j84 = j83 * j3 * j;
            long j85 = (j2 - j83) * j3 * j;
            long j86 = 0;
            while (j86 < j3) {
                long j87 = j86 * j;
                long j88 = j87 + j84;
                long j89 = j87 + j85;
                long j90 = j85;
                float f19 = floatLargeArray2.getFloat(j6 + j88);
                float f20 = floatLargeArray2.getFloat(j6 + j89);
                floatLargeArray.setFloat(j5 + j88, f19 + f20);
                floatLargeArray.setFloat(j5 + j89, f20 - f19);
                j86++;
                j85 = j90;
                j84 = j84;
            }
        }
        long j91 = (j2 - 1) * j4;
        float f21 = 1.0f;
        float f22 = 0.0f;
        long j92 = 1;
        while (j92 < j10) {
            float f23 = (fCos * f21) - (f * f22);
            float f24 = (f22 * fCos) + (f * f21);
            long j93 = j92 * j4;
            long j94 = (j2 - j92) * j4;
            long j95 = 0;
            while (j95 < j4) {
                long j96 = j6 + j95;
                long j97 = j92;
                long j98 = j5 + j95;
                float f25 = f24;
                floatLargeArray2.setFloat(j96 + j93, floatLargeArray.getFloat(j98) + (floatLargeArray.getFloat(j98 + j4) * f23));
                floatLargeArray2.setFloat(j96 + j94, floatLargeArray.getFloat(j98 + j91) * f25);
                j95++;
                j92 = j97;
                f24 = f25;
                j93 = j93;
            }
            float f26 = f24;
            long j99 = j92;
            long j100 = j93;
            float f27 = f23;
            float f28 = f26;
            long j101 = 2;
            while (j101 < j10) {
                float f29 = (f23 * f27) - (f26 * f28);
                f28 = (f28 * f23) + (f27 * f26);
                long j102 = j101 * j4;
                long j103 = (j2 - j101) * j4;
                long j104 = 0;
                while (j104 < j4) {
                    long j105 = j6 + j104;
                    long j106 = j5 + j104;
                    float f30 = f;
                    long j107 = j105 + j100;
                    floatLargeArray2.setFloat(j107, floatLargeArray2.getFloat(j107) + (floatLargeArray.getFloat(j106 + j102) * f29));
                    long j108 = j105 + j94;
                    floatLargeArray2.setFloat(j108, floatLargeArray2.getFloat(j108) + (floatLargeArray.getFloat(j106 + j103) * f28));
                    j104++;
                    f = f30;
                    j91 = j91;
                    j101 = j101;
                }
                j101++;
                f27 = f29;
            }
            f21 = f23;
            f22 = f26;
            f = f;
            j92 = j99 + 1;
            j91 = j91;
        }
        for (long j109 = 1; j109 < j10; j109++) {
            long j110 = j109 * j4;
            for (long j111 = 0; j111 < j4; j111++) {
                long j112 = j6 + j111;
                floatLargeArray2.setFloat(j112, floatLargeArray2.getFloat(j112) + floatLargeArray.getFloat(j5 + j111 + j110));
            }
        }
        if (j >= j3) {
            for (long j113 = 0; j113 < j3; j113++) {
                long j114 = j113 * j;
                long j115 = j114 * j2;
                for (long j116 = 0; j116 < j; j116++) {
                    floatLargeArray.setFloat(j5 + j116 + j115, floatLargeArray2.getFloat(j6 + j116 + j114));
                }
            }
        } else {
            for (long j117 = 0; j117 < j; j117++) {
                for (long j118 = 0; j118 < j3; j118++) {
                    long j119 = j118 * j;
                    floatLargeArray.setFloat(j5 + j117 + (j119 * j2), floatLargeArray2.getFloat(j6 + j117 + j119));
                }
            }
        }
        long j120 = j2 * j;
        for (long j121 = 1; j121 < j10; j121++) {
            long j122 = j121 * j3 * j;
            long j123 = (j2 - j121) * j3 * j;
            long j124 = j121 * 2 * j;
            long j125 = 0;
            while (j125 < j3) {
                long j126 = j125 * j;
                long j127 = j125 * j120;
                floatLargeArray.setFloat(((((j5 + j) - 1) + j124) - j) + j127, floatLargeArray2.getFloat(j6 + j126 + j122));
                floatLargeArray.setFloat(j5 + j124 + j127, floatLargeArray2.getFloat(j6 + j126 + j123));
                j125++;
                j123 = j123;
                j122 = j122;
            }
        }
        if (j8 == 1) {
            return;
        }
        if (j11 >= j3) {
            long j128 = 1;
            while (j128 < j10) {
                long j129 = j128 * j3 * j;
                long j130 = (j2 - j128) * j3 * j;
                long j131 = j128 * 2 * j;
                long j132 = 0;
                while (j132 < j3) {
                    long j133 = j132 * j120;
                    long j134 = j132 * j;
                    long j135 = 2;
                    while (j135 < j) {
                        long j136 = j120;
                        long j137 = j5 + j135 + j131 + j133;
                        long j138 = j131;
                        long j139 = (((j5 + (j - j135)) + j131) - j) + j133;
                        long j140 = j6 + j135 + j134;
                        long j141 = j128;
                        long j142 = j140 + j129;
                        long j143 = j129;
                        long j144 = j140 + j130;
                        long j145 = j130;
                        float f31 = floatLargeArray2.getFloat(j142 - 1);
                        float f32 = floatLargeArray2.getFloat(j142);
                        float f33 = floatLargeArray2.getFloat(j144 - 1);
                        float f34 = floatLargeArray2.getFloat(j144);
                        floatLargeArray.setFloat(j137 - 1, f31 + f33);
                        floatLargeArray.setFloat(j139 - 1, f31 - f33);
                        floatLargeArray.setFloat(j137, f32 + f34);
                        floatLargeArray.setFloat(j139, f34 - f32);
                        j135 += 2;
                        j120 = j136;
                        j131 = j138;
                        j128 = j141;
                        j129 = j143;
                        j130 = j145;
                        j132 = j132;
                    }
                    j132++;
                }
                j128++;
            }
            return;
        }
        long j146 = j120;
        long j147 = 1;
        while (j147 < j10) {
            long j148 = j147 * j3 * j;
            long j149 = (j2 - j147) * j3 * j;
            long j150 = j147 * 2 * j;
            long j151 = 2;
            while (j151 < j) {
                long j152 = j5 + j151;
                long j153 = j5 + (j - j151);
                long j154 = j6 + j151;
                long j155 = 0;
                while (j155 < j3) {
                    long j156 = j146;
                    long j157 = j155 * j156;
                    long j158 = j147;
                    long j159 = j152 + j150 + j157;
                    long j160 = j150;
                    long j161 = ((j153 + j150) - j) + j157;
                    long j162 = j154 + (j155 * j);
                    long j163 = j153;
                    long j164 = j162 + j148;
                    long j165 = j148;
                    long j166 = j162 + j149;
                    long j167 = j149;
                    float f35 = floatLargeArray2.getFloat(j164 - 1);
                    float f36 = floatLargeArray2.getFloat(j164);
                    float f37 = floatLargeArray2.getFloat(j166 - 1);
                    float f38 = floatLargeArray2.getFloat(j166);
                    floatLargeArray.setFloat(j159 - 1, f35 + f37);
                    floatLargeArray.setFloat(j161 - 1, f35 - f37);
                    floatLargeArray.setFloat(j159, f36 + f38);
                    floatLargeArray.setFloat(j161, f38 - f36);
                    j155++;
                    j147 = j158;
                    j150 = j160;
                    j146 = j156;
                    j153 = j163;
                    j149 = j167;
                    j148 = j165;
                }
                j151 += 2;
                j146 = j146;
            }
            j147++;
        }
    }

    void radbg(int i, int i2, int i3, int i4, float[] fArr, int i5, float[] fArr2, int i6, int i7) {
        int i8;
        int i9 = i6;
        double d = TWO_PI / i2;
        float fCos = (float) FastMath.cos(d);
        float fSin = (float) FastMath.sin(d);
        int i10 = (i - 1) / 2;
        int i11 = (i2 + 1) / 2;
        int i12 = i2 * i;
        if (i >= i3) {
            for (int i13 = 0; i13 < i3; i13++) {
                int i14 = i13 * i;
                int i15 = i13 * i12;
                for (int i16 = 0; i16 < i; i16++) {
                    fArr2[i9 + i16 + i14] = fArr[i5 + i16 + i15];
                }
            }
        } else {
            for (int i17 = 0; i17 < i; i17++) {
                int i18 = i9 + i17;
                int i19 = i5 + i17;
                for (int i20 = 0; i20 < i3; i20++) {
                    fArr2[i18 + (i20 * i)] = fArr[i19 + (i20 * i12)];
                }
            }
        }
        int i21 = 1;
        int i22 = (i5 + i) - 1;
        int i23 = 1;
        while (i23 < i11) {
            int i24 = i23 * i3 * i;
            int i25 = (i2 - i23) * i3 * i;
            int i26 = i23 * 2 * i;
            for (int i27 = 0; i27 < i3; i27++) {
                int i28 = i27 * i;
                int i29 = i28 * i2;
                int i30 = i5 + i26 + i29;
                float f = fArr[((i22 + i26) + i29) - i];
                float f2 = fArr[i30];
                int i31 = i9 + i28;
                fArr2[i31 + i24] = f + f;
                fArr2[i31 + i25] = f2 + f2;
            }
            i23++;
            i21 = 1;
        }
        if (i == i21) {
            i8 = i10;
        } else if (i10 >= i3) {
            int i32 = 1;
            while (i32 < i11) {
                int i33 = i32 * i3 * i;
                int i34 = (i2 - i32) * i3 * i;
                int i35 = i32 * 2 * i;
                int i36 = i10;
                int i37 = 0;
                while (i37 < i3) {
                    int i38 = i37 * i;
                    int i39 = i38 + i33;
                    int i40 = i38 + i34;
                    int i41 = (i37 * i2 * i) + i35;
                    int i42 = i34;
                    for (int i43 = 2; i43 < i; i43 += 2) {
                        int i44 = i9 + i43;
                        int i45 = i44 + i39;
                        int i46 = i44 + i40;
                        int i47 = i5 + i43 + i41;
                        int i48 = ((i5 + (i - i43)) + i41) - i;
                        float f3 = fArr[i47 - 1];
                        float f4 = fArr[i47];
                        float f5 = fArr[i48 - 1];
                        float f6 = fArr[i48];
                        fArr2[i45 - 1] = f3 + f5;
                        fArr2[i46 - 1] = f3 - f5;
                        fArr2[i45] = f4 - f6;
                        fArr2[i46] = f4 + f6;
                    }
                    i37++;
                    i34 = i42;
                }
                i32++;
                i10 = i36;
            }
            i8 = i10;
        } else {
            i8 = i10;
            int i49 = 1;
            while (i49 < i11) {
                int i50 = i49 * i3 * i;
                int i51 = (i2 - i49) * i3 * i;
                int i52 = i49 * 2 * i;
                int i53 = 2;
                while (i53 < i) {
                    int i54 = i9 + i53;
                    int i55 = i5 + (i - i53);
                    int i56 = i5 + i53;
                    for (int i57 = 0; i57 < i3; i57++) {
                        int i58 = i57 * i;
                        int i59 = (i57 * i2 * i) + i52;
                        int i60 = i54 + i58 + i50;
                        int i61 = i54 + i58 + i51;
                        int i62 = i56 + i59;
                        int i63 = (i55 + i59) - i;
                        float f7 = fArr[i62 - 1];
                        float f8 = fArr[i62];
                        float f9 = fArr[i63 - 1];
                        float f10 = fArr[i63];
                        fArr2[i60 - 1] = f7 + f9;
                        fArr2[i61 - 1] = f7 - f9;
                        fArr2[i60] = f8 - f10;
                        fArr2[i61] = f8 + f10;
                    }
                    i53 += 2;
                    i9 = i6;
                }
                i49++;
                i9 = i6;
            }
        }
        int i64 = (i2 - 1) * i4;
        float f11 = 1.0f;
        float f12 = 0.0f;
        int i65 = 1;
        while (i65 < i11) {
            float f13 = (fCos * f11) - (fSin * f12);
            f12 = (f12 * fCos) + (f11 * fSin);
            int i66 = i65 * i4;
            int i67 = (i2 - i65) * i4;
            float f14 = fSin;
            int i68 = 0;
            while (i68 < i4) {
                int i69 = i5 + i68;
                int i70 = i6 + i68;
                fArr[i69 + i66] = fArr2[i70] + (fArr2[i70 + i4] * f13);
                fArr[i69 + i67] = fArr2[i70 + i64] * f12;
                i68++;
                fCos = fCos;
            }
            float f15 = fCos;
            float f16 = f12;
            float f17 = f13;
            int i71 = 2;
            while (i71 < i11) {
                float f18 = (f13 * f17) - (f12 * f16);
                f16 = (f16 * f13) + (f17 * f12);
                int i72 = i71 * i4;
                int i73 = (i2 - i71) * i4;
                int i74 = i64;
                for (int i75 = 0; i75 < i4; i75++) {
                    int i76 = i5 + i75;
                    int i77 = i6 + i75;
                    int i78 = i76 + i66;
                    fArr[i78] = fArr[i78] + (fArr2[i77 + i72] * f18);
                    int i79 = i76 + i67;
                    fArr[i79] = fArr[i79] + (fArr2[i77 + i73] * f16);
                }
                i71++;
                f17 = f18;
                i64 = i74;
            }
            i65++;
            f11 = f13;
            fSin = f14;
            fCos = f15;
        }
        for (int i80 = 1; i80 < i11; i80++) {
            int i81 = i80 * i4;
            for (int i82 = 0; i82 < i4; i82++) {
                int i83 = i6 + i82;
                fArr2[i83] = fArr2[i83] + fArr2[i83 + i81];
            }
        }
        for (int i84 = 1; i84 < i11; i84++) {
            int i85 = i84 * i3 * i;
            int i86 = (i2 - i84) * i3 * i;
            for (int i87 = 0; i87 < i3; i87++) {
                int i88 = i87 * i;
                int i89 = i6 + i88;
                int i90 = i88 + i5;
                float f19 = fArr[i90 + i85];
                float f20 = fArr[i90 + i86];
                fArr2[i89 + i85] = f19 - f20;
                fArr2[i89 + i86] = f19 + f20;
            }
        }
        if (i == 1) {
            return;
        }
        int i91 = i8;
        if (i91 >= i3) {
            for (int i92 = 1; i92 < i11; i92++) {
                int i93 = i92 * i3 * i;
                int i94 = (i2 - i92) * i3 * i;
                for (int i95 = 0; i95 < i3; i95++) {
                    int i96 = i95 * i;
                    for (int i97 = 2; i97 < i; i97 += 2) {
                        int i98 = i6 + i97 + i96;
                        int i99 = i98 + i93;
                        int i100 = i98 + i94;
                        int i101 = i5 + i97 + i96;
                        int i102 = i101 + i93;
                        int i103 = i101 + i94;
                        float f21 = fArr[i102 - 1];
                        float f22 = fArr[i102];
                        float f23 = fArr[i103 - 1];
                        float f24 = fArr[i103];
                        fArr2[i99 - 1] = f21 - f24;
                        fArr2[i100 - 1] = f21 + f24;
                        fArr2[i99] = f22 + f23;
                        fArr2[i100] = f22 - f23;
                    }
                }
            }
        } else {
            for (int i104 = 1; i104 < i11; i104++) {
                int i105 = i104 * i3 * i;
                int i106 = (i2 - i104) * i3 * i;
                int i107 = 2;
                while (i107 < i) {
                    int i108 = i6 + i107;
                    int i109 = i5 + i107;
                    int i110 = i11;
                    for (int i111 = 0; i111 < i3; i111++) {
                        int i112 = i111 * i;
                        int i113 = i108 + i112;
                        int i114 = i113 + i105;
                        int i115 = i113 + i106;
                        int i116 = i109 + i112;
                        int i117 = i116 + i105;
                        int i118 = i116 + i106;
                        float f25 = fArr[i117 - 1];
                        float f26 = fArr[i117];
                        float f27 = fArr[i118 - 1];
                        float f28 = fArr[i118];
                        fArr2[i114 - 1] = f25 - f28;
                        fArr2[i115 - 1] = f25 + f28;
                        fArr2[i114] = f26 + f27;
                        fArr2[i115] = f26 - f27;
                    }
                    i107 += 2;
                    i11 = i110;
                }
            }
        }
        System.arraycopy(fArr2, i6, fArr, i5, i4);
        for (int i119 = 1; i119 < i2; i119++) {
            int i120 = i119 * i3 * i;
            for (int i121 = 0; i121 < i3; i121++) {
                int i122 = (i121 * i) + i120;
                fArr[i5 + i122] = fArr2[i122 + i6];
            }
        }
        if (i91 > i3) {
            int i123 = -i;
            for (int i124 = 1; i124 < i2; i124++) {
                i123 += i;
                int i125 = i124 * i3 * i;
                for (int i126 = 0; i126 < i3; i126++) {
                    int i127 = i123 - 1;
                    int i128 = (i126 * i) + i125;
                    for (int i129 = 2; i129 < i; i129 += 2) {
                        i127 += 2;
                        int i130 = i127 + i7;
                        float[] fArr3 = this.wtable_r;
                        float f29 = fArr3[i130 - 1];
                        float f30 = fArr3[i130];
                        int i131 = i5 + i129 + i128;
                        int i132 = i6 + i129 + i128;
                        float f31 = fArr2[i132 - 1];
                        float f32 = fArr2[i132];
                        fArr[i131 - 1] = (f29 * f31) - (f30 * f32);
                        fArr[i131] = (f29 * f32) + (f30 * f31);
                    }
                }
            }
            return;
        }
        int i133 = -i;
        for (int i134 = 1; i134 < i2; i134++) {
            i133 += i;
            int i135 = i133 - 1;
            int i136 = i134 * i3 * i;
            int i137 = 2;
            while (i137 < i) {
                i135 += 2;
                int i138 = i135 + i7;
                float[] fArr4 = this.wtable_r;
                float f33 = fArr4[i138 - 1];
                float f34 = fArr4[i138];
                int i139 = i5 + i137;
                int i140 = i6 + i137;
                int i141 = i133;
                for (int i142 = 0; i142 < i3; i142++) {
                    int i143 = (i142 * i) + i136;
                    int i144 = i139 + i143;
                    int i145 = i140 + i143;
                    float f35 = fArr2[i145 - 1];
                    float f36 = fArr2[i145];
                    fArr[i144 - 1] = (f33 * f35) - (f34 * f36);
                    fArr[i144] = (f36 * f33) + (f35 * f34);
                }
                i137 += 2;
                i133 = i141;
            }
        }
    }

    void radbg(long j, long j2, long j3, long j4, FloatLargeArray floatLargeArray, long j5, FloatLargeArray floatLargeArray2, long j6, long j7) {
        float f;
        float f2;
        long j8;
        int i;
        int i2;
        long j9 = j;
        double d = TWO_PI / j2;
        float fCos = (float) FastMath.cos(d);
        float fSin = (float) FastMath.sin(d);
        long j10 = (j9 - 1) / 2;
        long j11 = (j2 + 1) / 2;
        long j12 = j2 * j9;
        if (j9 >= j3) {
            for (long j13 = 0; j13 < j3; j13++) {
                long j14 = j13 * j9;
                long j15 = j13 * j12;
                long j16 = 0;
                while (j16 < j9) {
                    floatLargeArray2.setFloat(j6 + j16 + j14, floatLargeArray.getFloat(j5 + j16 + j15));
                    j16++;
                    fSin = fSin;
                    fCos = fCos;
                    j10 = j10;
                }
            }
            f = fSin;
            f2 = fCos;
            j8 = j10;
        } else {
            f = fSin;
            f2 = fCos;
            j8 = j10;
            for (long j17 = 0; j17 < j9; j17++) {
                long j18 = j6 + j17;
                long j19 = j5 + j17;
                long j20 = 0;
                while (j20 < j3) {
                    floatLargeArray2.setFloat(j18 + (j20 * j9), floatLargeArray.getFloat(j19 + (j20 * j12)));
                    j20++;
                    j18 = j18;
                }
            }
        }
        long j21 = (j5 + j9) - 1;
        for (long j22 = 1; j22 < j11; j22++) {
            long j23 = j22 * j3 * j9;
            long j24 = (j2 - j22) * j3 * j9;
            long j25 = j22 * 2 * j9;
            long j26 = 0;
            while (j26 < j3) {
                long j27 = j26 * j9;
                long j28 = j27 * j2;
                long j29 = j21;
                float f3 = floatLargeArray.getFloat(((j21 + j25) + j28) - j9);
                float f4 = floatLargeArray.getFloat(j5 + j25 + j28);
                long j30 = j6 + j27;
                floatLargeArray2.setFloat(j30 + j23, f3 + f3);
                floatLargeArray2.setFloat(j30 + j24, f4 + f4);
                j26++;
                f = f;
                j21 = j29;
                j11 = j11;
            }
        }
        long j31 = j11;
        float f5 = f;
        int i3 = (j9 > 1L ? 1 : (j9 == 1L ? 0 : -1));
        if (i3 == 0) {
            i = i3;
        } else if (j8 >= j3) {
            long j32 = 1;
            while (j32 < j31) {
                long j33 = j32 * j3 * j9;
                long j34 = (j2 - j32) * j3 * j9;
                long j35 = j32 * 2 * j9;
                long j36 = 0;
                while (j36 < j3) {
                    long j37 = j36 * j9;
                    long j38 = j37 + j33;
                    long j39 = j37 + j34;
                    long j40 = (j36 * j2 * j9) + j35;
                    long j41 = 2;
                    while (j41 < j9) {
                        long j42 = j6 + j41;
                        long j43 = j34;
                        long j44 = j42 + j38;
                        long j45 = j33;
                        long j46 = j42 + j39;
                        long j47 = j35;
                        long j48 = j5 + j41 + j40;
                        int i4 = i3;
                        long j49 = ((j5 + (j9 - j41)) + j40) - j9;
                        float f6 = floatLargeArray.getFloat(j48 - 1);
                        float f7 = floatLargeArray.getFloat(j48);
                        float f8 = floatLargeArray.getFloat(j49 - 1);
                        float f9 = floatLargeArray.getFloat(j49);
                        floatLargeArray2.setFloat(j44 - 1, f6 + f8);
                        floatLargeArray2.setFloat(j46 - 1, f6 - f8);
                        floatLargeArray2.setFloat(j44, f7 - f9);
                        floatLargeArray2.setFloat(j46, f7 + f9);
                        j41 += 2;
                        j9 = j;
                        i3 = i4;
                        j35 = j47;
                        j32 = j32;
                        j34 = j43;
                        j33 = j45;
                    }
                    j36++;
                    j9 = j;
                }
                j32++;
                j9 = j;
            }
            i = i3;
        } else {
            int i5 = i3;
            for (long j50 = 1; j50 < j31; j50++) {
                long j51 = j;
                long j52 = j50 * j3 * j51;
                long j53 = (j2 - j50) * j3 * j51;
                long j54 = j50 * 2 * j51;
                long j55 = 2;
                while (j55 < j51) {
                    long j56 = j6 + j55;
                    long j57 = j5 + (j51 - j55);
                    long j58 = j5 + j55;
                    long j59 = 0;
                    while (j59 < j3) {
                        long j60 = j59 * j51;
                        long j61 = j60 + j52;
                        long j62 = j60 + j53;
                        long j63 = (j59 * j2 * j51) + j54;
                        long j64 = j53;
                        long j65 = j56 + j61;
                        long j66 = j52;
                        long j67 = j56 + j62;
                        long j68 = j54;
                        long j69 = j58 + j63;
                        long j70 = (j57 + j63) - j51;
                        float f10 = floatLargeArray.getFloat(j69 - 1);
                        float f11 = floatLargeArray.getFloat(j69);
                        float f12 = floatLargeArray.getFloat(j70 - 1);
                        float f13 = floatLargeArray.getFloat(j70);
                        floatLargeArray2.setFloat(j65 - 1, f10 + f12);
                        floatLargeArray2.setFloat(j67 - 1, f10 - f12);
                        floatLargeArray2.setFloat(j65, f11 - f13);
                        floatLargeArray2.setFloat(j67, f11 + f13);
                        j59++;
                        j51 = j;
                        i5 = i5;
                        j54 = j68;
                        j52 = j66;
                        j53 = j64;
                    }
                    j55 += 2;
                    j51 = j;
                }
            }
            i = i5;
        }
        long j71 = (j2 - 1) * j4;
        float f14 = 1.0f;
        float f15 = 0.0f;
        long j72 = 1;
        while (j72 < j31) {
            float f16 = (f2 * f14) - (f5 * f15);
            f15 = (f15 * f2) + (f14 * f5);
            long j73 = j72 * j4;
            long j74 = (j2 - j72) * j4;
            long j75 = 0;
            while (j75 < j4) {
                long j76 = j5 + j75;
                long j77 = j72;
                long j78 = j6 + j75;
                floatLargeArray.setFloat(j76 + j73, floatLargeArray2.getFloat(j78) + (floatLargeArray2.getFloat(j78 + j4) * f16));
                floatLargeArray.setFloat(j76 + j74, floatLargeArray2.getFloat(j78 + j71) * f15);
                j75++;
                j72 = j77;
                j73 = j73;
            }
            long j79 = j72;
            long j80 = j73;
            float f17 = f15;
            float f18 = f16;
            long j81 = 2;
            while (j81 < j31) {
                float f19 = (f16 * f18) - (f15 * f17);
                f17 = (f17 * f16) + (f18 * f15);
                long j82 = j81 * j4;
                long j83 = (j2 - j81) * j4;
                long j84 = 0;
                while (j84 < j4) {
                    long j85 = j5 + j84;
                    long j86 = j6 + j84;
                    long j87 = j71;
                    long j88 = j85 + j80;
                    floatLargeArray.setFloat(j88, floatLargeArray.getFloat(j88) + (floatLargeArray2.getFloat(j86 + j82) * f19));
                    long j89 = j85 + j74;
                    floatLargeArray.setFloat(j89, floatLargeArray.getFloat(j89) + (floatLargeArray2.getFloat(j86 + j83) * f17));
                    j84++;
                    j71 = j87;
                    f15 = f15;
                    j81 = j81;
                }
                j81++;
                f18 = f19;
            }
            j72 = j79 + 1;
            f14 = f16;
        }
        for (long j90 = 1; j90 < j31; j90++) {
            long j91 = j90 * j4;
            for (long j92 = 0; j92 < j4; j92++) {
                long j93 = j6 + j92;
                floatLargeArray2.setFloat(j93, floatLargeArray2.getFloat(j93) + floatLargeArray2.getFloat(j93 + j91));
            }
        }
        long j94 = 1;
        while (j94 < j31) {
            long j95 = j94 * j3 * j;
            long j96 = (j2 - j94) * j3 * j;
            long j97 = 0;
            while (j97 < j3) {
                long j98 = j97 * j;
                long j99 = j6 + j98;
                long j100 = j5 + j98;
                long j101 = j94;
                float f20 = floatLargeArray.getFloat(j100 + j95);
                float f21 = floatLargeArray.getFloat(j100 + j96);
                floatLargeArray2.setFloat(j99 + j95, f20 - f21);
                floatLargeArray2.setFloat(j99 + j96, f20 + f21);
                j97++;
                j94 = j101;
            }
            j94++;
        }
        if (i == 0) {
            return;
        }
        int i6 = (j8 > j3 ? 1 : (j8 == j3 ? 0 : -1));
        if (i6 >= 0) {
            long j102 = 1;
            while (j102 < j31) {
                long j103 = j102 * j3 * j;
                long j104 = (j2 - j102) * j3 * j;
                long j105 = 0;
                while (j105 < j3) {
                    long j106 = j105 * j;
                    long j107 = 2;
                    while (j107 < j) {
                        long j108 = j6 + j107 + j106;
                        int i7 = i6;
                        long j109 = j108 + j103;
                        long j110 = j105;
                        long j111 = j108 + j104;
                        long j112 = j5 + j107 + j106;
                        long j113 = j106;
                        long j114 = j112 + j103;
                        long j115 = j103;
                        long j116 = j112 + j104;
                        long j117 = j104;
                        float f22 = floatLargeArray.getFloat(j114 - 1);
                        float f23 = floatLargeArray.getFloat(j114);
                        float f24 = floatLargeArray.getFloat(j116 - 1);
                        float f25 = floatLargeArray.getFloat(j116);
                        floatLargeArray2.setFloat(j109 - 1, f22 - f25);
                        floatLargeArray2.setFloat(j111 - 1, f22 + f25);
                        floatLargeArray2.setFloat(j109, f23 + f24);
                        floatLargeArray2.setFloat(j111, f23 - f24);
                        j107 += 2;
                        j106 = j113;
                        j104 = j117;
                        i6 = i7;
                        j102 = j102;
                        j105 = j110;
                        j103 = j115;
                    }
                    j105++;
                }
                j102++;
            }
            i2 = i6;
        } else {
            i2 = i6;
            long j118 = 1;
            while (j118 < j31) {
                long j119 = j118 * j3 * j;
                long j120 = (j2 - j118) * j3 * j;
                for (long j121 = 2; j121 < j; j121 += 2) {
                    long j122 = j6 + j121;
                    long j123 = j5 + j121;
                    long j124 = 0;
                    while (j124 < j3) {
                        long j125 = j124 * j;
                        long j126 = j122 + j125;
                        long j127 = j122;
                        long j128 = j126 + j119;
                        long j129 = j118;
                        long j130 = j126 + j120;
                        long j131 = j123 + j125;
                        long j132 = j123;
                        long j133 = j131 + j119;
                        long j134 = j119;
                        long j135 = j131 + j120;
                        long j136 = j120;
                        float f26 = floatLargeArray.getFloat(j133 - 1);
                        float f27 = floatLargeArray.getFloat(j133);
                        float f28 = floatLargeArray.getFloat(j135 - 1);
                        float f29 = floatLargeArray.getFloat(j135);
                        floatLargeArray2.setFloat(j128 - 1, f26 - f29);
                        floatLargeArray2.setFloat(j130 - 1, f26 + f29);
                        floatLargeArray2.setFloat(j128, f27 + f28);
                        floatLargeArray2.setFloat(j130, f27 - f28);
                        j124++;
                        j120 = j136;
                        j123 = j132;
                        j122 = j127;
                        j118 = j129;
                        j119 = j134;
                    }
                }
                j118++;
            }
        }
        long j137 = j;
        LargeArrayUtils.arraycopy(floatLargeArray2, j6, floatLargeArray, j5, j4);
        for (long j138 = 1; j138 < j2; j138++) {
            long j139 = j138 * j3 * j137;
            for (long j140 = 0; j140 < j3; j140++) {
                long j141 = (j140 * j137) + j139;
                floatLargeArray.setFloat(j5 + j141, floatLargeArray2.getFloat(j6 + j141));
            }
        }
        if (i2 > 0) {
            long j142 = -j137;
            long j143 = 1;
            while (j143 < j2) {
                j142 += j137;
                long j144 = j143 * j3 * j137;
                long j145 = 0;
                while (j145 < j3) {
                    long j146 = j142 - 1;
                    long j147 = (j145 * j137) + j144;
                    long j148 = 2;
                    while (j148 < j137) {
                        long j149 = j146 + 2;
                        long j150 = j149 + j7;
                        long j151 = j142;
                        long j152 = j144;
                        float f30 = this.wtable_rl.getFloat(j150 - 1);
                        float f31 = this.wtable_rl.getFloat(j150);
                        long j153 = j5 + j148 + j147;
                        long j154 = j6 + j148 + j147;
                        float f32 = floatLargeArray2.getFloat(j154 - 1);
                        float f33 = floatLargeArray2.getFloat(j154);
                        floatLargeArray.setFloat(j153 - 1, (f30 * f32) - (f31 * f33));
                        floatLargeArray.setFloat(j153, (f30 * f33) + (f31 * f32));
                        j148 += 2;
                        j137 = j;
                        j142 = j151;
                        j144 = j152;
                        j143 = j143;
                        j146 = j149;
                    }
                    j145++;
                    j137 = j;
                }
                j143++;
                j137 = j;
            }
            return;
        }
        long j155 = -j137;
        long j156 = 1;
        while (j156 < j2) {
            j155 += j137;
            long j157 = j155 - 1;
            long j158 = j156 * j3 * j137;
            long j159 = 2;
            while (j159 < j137) {
                long j160 = j157 + 2;
                long j161 = j155;
                long j162 = j160 + j7;
                long j163 = j156;
                float f34 = this.wtable_rl.getFloat(j162 - 1);
                float f35 = this.wtable_rl.getFloat(j162);
                long j164 = j5 + j159;
                long j165 = j6 + j159;
                long j166 = 0;
                while (j166 < j3) {
                    long j167 = (j166 * j137) + j158;
                    long j168 = j164 + j167;
                    long j169 = j164;
                    long j170 = j165 + j167;
                    float f36 = floatLargeArray2.getFloat(j170 - 1);
                    float f37 = floatLargeArray2.getFloat(j170);
                    floatLargeArray.setFloat(j168 - 1, (f34 * f36) - (f35 * f37));
                    floatLargeArray.setFloat(j168, (f37 * f34) + (f36 * f35));
                    j166++;
                    j137 = j;
                    j158 = j158;
                    j164 = j169;
                }
                j159 += 2;
                j137 = j;
                j155 = j161;
                j157 = j160;
                j156 = j163;
            }
            j156++;
            j137 = j;
        }
    }

    void cfftf(float[] fArr, int i, int i2) {
        int i3;
        int i4;
        int i5;
        char c;
        int i6 = this.n;
        int i7 = i6 * 2;
        float[] fArr2 = new float[i7];
        int i8 = 4;
        int i9 = i6 * 4;
        int[] iArr = {0};
        int i10 = (int) this.wtable[i9 + 1];
        int i11 = 2;
        int i12 = i7;
        int i13 = 1;
        int i14 = 2;
        int i15 = 0;
        while (i14 <= i10 + 1) {
            int i16 = (int) this.wtable[i14 + i9];
            int i17 = i16 * i13;
            int i18 = this.n / i17;
            int i19 = i18 + i18;
            int i20 = i19 * i13;
            if (i16 == i11) {
                i3 = i16;
                i4 = i14;
                i5 = i10;
                if (i15 == 0) {
                    passf2(i19, i13, fArr, i, fArr2, 0, i12, i2);
                } else {
                    passf2(i19, i13, fArr2, 0, fArr, i, i12, i2);
                }
            } else if (i16 == 3) {
                i3 = i16;
                i4 = i14;
                i5 = i10;
                if (i15 == 0) {
                    passf3(i19, i13, fArr, i, fArr2, 0, i12, i2);
                } else {
                    passf3(i19, i13, fArr2, 0, fArr, i, i12, i2);
                }
            } else if (i16 == i8) {
                i3 = i16;
                i4 = i14;
                i5 = i10;
                if (i15 == 0) {
                    passf4(i19, i13, fArr, i, fArr2, 0, i12, i2);
                } else {
                    passf4(i19, i13, fArr2, 0, fArr, i, i12, i2);
                }
            } else if (i16 != 5) {
                if (i15 == 0) {
                    i3 = i16;
                    i4 = i14;
                    i5 = i10;
                    c = 0;
                    passfg(iArr, i19, i16, i13, i20, fArr, i, fArr2, 0, i12, i2);
                } else {
                    i3 = i16;
                    i4 = i14;
                    i5 = i10;
                    c = 0;
                    passfg(iArr, i19, i3, i13, i20, fArr2, 0, fArr, i, i12, i2);
                }
                if (iArr[c] != 0) {
                }
                i12 += (i3 - 1) * i19;
                i14 = i4 + 1;
                i13 = i17;
                i10 = i5;
                i11 = 2;
                i8 = 4;
            } else {
                i3 = i16;
                i4 = i14;
                i5 = i10;
                if (i15 == 0) {
                    passf5(i19, i13, fArr, i, fArr2, 0, i12, i2);
                } else {
                    passf5(i19, i13, fArr2, 0, fArr, i, i12, i2);
                }
            }
            i15 = 1 - i15;
            i12 += (i3 - 1) * i19;
            i14 = i4 + 1;
            i13 = i17;
            i10 = i5;
            i11 = 2;
            i8 = 4;
        }
        if (i15 == 0) {
            return;
        }
        System.arraycopy(fArr2, 0, fArr, i, i7);
    }

    void cfftf(FloatLargeArray floatLargeArray, long j, int i) {
        long j2;
        long j3;
        int i2;
        int i3;
        FloatLargeArray floatLargeArray2;
        FloatFFT_1D floatFFT_1D = this;
        int i4 = i;
        long j4 = floatFFT_1D.nl * 2;
        FloatLargeArray floatLargeArray3 = new FloatLargeArray(j4);
        long j5 = floatFFT_1D.nl * 4;
        int[] iArr = {0};
        long j6 = (long) floatFFT_1D.wtablel.getFloat(j5 + 1);
        long j7 = 2;
        long j8 = j4;
        long j9 = 1;
        long j10 = 0;
        while (j7 <= j6 + 1) {
            int i5 = (int) floatFFT_1D.wtablel.getFloat(j7 + j5);
            long j11 = i5;
            long j12 = j11 * j9;
            long j13 = floatFFT_1D.nl / j12;
            long j14 = j13 + j13;
            long j15 = j14 * j9;
            if (i5 == 2) {
                j2 = j6;
                j3 = j4;
                i2 = i5;
                i3 = i4;
                floatLargeArray2 = floatLargeArray3;
                if (j10 == 0) {
                    passf2(j14, j9, floatLargeArray, j, floatLargeArray2, 0L, j8, i3);
                } else {
                    passf2(j14, j9, floatLargeArray2, 0L, floatLargeArray, j, j8, i3);
                }
            } else if (i5 == 3) {
                j2 = j6;
                j3 = j4;
                i2 = i5;
                i3 = i4;
                floatLargeArray2 = floatLargeArray3;
                if (j10 == 0) {
                    passf3(j14, j9, floatLargeArray, j, floatLargeArray2, 0L, j8, i3);
                } else {
                    passf3(j14, j9, floatLargeArray2, 0L, floatLargeArray, j, j8, i3);
                }
            } else if (i5 == 4) {
                j2 = j6;
                j3 = j4;
                i2 = i5;
                i3 = i4;
                floatLargeArray2 = floatLargeArray3;
                if (j10 == 0) {
                    passf4(j14, j9, floatLargeArray, j, floatLargeArray2, 0L, j8, i);
                } else {
                    passf4(j14, j9, floatLargeArray2, 0L, floatLargeArray, j, j8, i);
                }
            } else if (i5 != 5) {
                if (j10 == 0) {
                    j2 = j6;
                    j3 = j4;
                    i2 = i5;
                    floatLargeArray2 = floatLargeArray3;
                    passfg(iArr, j14, j11, j9, j15, floatLargeArray, j, floatLargeArray2, 0L, j8, i4);
                } else {
                    j2 = j6;
                    j3 = j4;
                    i2 = i5;
                    floatLargeArray2 = floatLargeArray3;
                    passfg(iArr, j14, j11, j9, j15, floatLargeArray2, 0L, floatLargeArray, j, j8, i);
                }
                if (iArr[0] != 0) {
                    j10 = 1 - j10;
                }
                i3 = i;
                j8 += (i2 - 1) * j14;
                j7++;
                floatFFT_1D = this;
                i4 = i3;
                j9 = j12;
                j6 = j2;
                j4 = j3;
                floatLargeArray3 = floatLargeArray2;
            } else {
                j2 = j6;
                j3 = j4;
                i2 = i5;
                floatLargeArray2 = floatLargeArray3;
                if (j10 == 0) {
                    i3 = i;
                    passf5(j14, j9, floatLargeArray, j, floatLargeArray2, 0L, j8, i3);
                } else {
                    i3 = i;
                    passf5(j14, j9, floatLargeArray2, 0L, floatLargeArray, j, j8, i3);
                }
            }
            j10 = 1 - j10;
            j8 += (i2 - 1) * j14;
            j7++;
            floatFFT_1D = this;
            i4 = i3;
            j9 = j12;
            j6 = j2;
            j4 = j3;
            floatLargeArray3 = floatLargeArray2;
        }
        long j16 = j4;
        FloatLargeArray floatLargeArray4 = floatLargeArray3;
        if (j10 == 0) {
            return;
        }
        LargeArrayUtils.arraycopy(floatLargeArray4, 0L, floatLargeArray, j, j16);
    }

    void passf2(int i, int i2, float[] fArr, int i3, float[] fArr2, int i4, int i5, int i6) {
        int i7 = i * i2;
        if (i <= 2) {
            for (int i8 = 0; i8 < i2; i8++) {
                int i9 = i8 * i;
                int i10 = i3 + (i9 * 2);
                int i11 = i10 + i;
                float f = fArr[i10];
                float f2 = fArr[i10 + 1];
                float f3 = fArr[i11];
                float f4 = fArr[i11 + 1];
                int i12 = i4 + i9;
                int i13 = i12 + i7;
                fArr2[i12] = f + f3;
                fArr2[i12 + 1] = f2 + f4;
                fArr2[i13] = f - f3;
                fArr2[i13 + 1] = f2 - f4;
            }
        } else {
            for (int i14 = 0; i14 < i2; i14++) {
                for (int i15 = 0; i15 < i - 1; i15 += 2) {
                    int i16 = i14 * i;
                    int i17 = i3 + i15 + (i16 * 2);
                    int i18 = i17 + i;
                    float f5 = fArr[i17];
                    float f6 = fArr[i17 + 1];
                    float f7 = fArr[i18];
                    float f8 = fArr[i18 + 1];
                    int i19 = i15 + i5;
                    float[] fArr3 = this.wtable;
                    float f9 = fArr3[i19];
                    float f10 = i6 * fArr3[i19 + 1];
                    float f11 = f5 - f7;
                    float f12 = f6 - f8;
                    int i20 = i4 + i15 + i16;
                    int i21 = i20 + i7;
                    fArr2[i20] = f5 + f7;
                    fArr2[i20 + 1] = f6 + f8;
                    fArr2[i21] = (f9 * f11) - (f10 * f12);
                    fArr2[i21 + 1] = (f9 * f12) + (f10 * f11);
                }
            }
        }
    }

    void passf2(long j, long j2, FloatLargeArray floatLargeArray, long j3, FloatLargeArray floatLargeArray2, long j4, long j5, long j6) {
        FloatFFT_1D floatFFT_1D = this;
        FloatLargeArray floatLargeArray3 = floatLargeArray;
        FloatLargeArray floatLargeArray4 = floatLargeArray2;
        long j7 = j * j2;
        long j8 = 1;
        long j9 = 2;
        if (j <= 2) {
            long j10 = 0;
            while (j10 < j2) {
                long j11 = j10 * j;
                long j12 = j3 + (j11 * j9);
                long j13 = j12 + j;
                float f = floatLargeArray3.getFloat(j12);
                float f2 = floatLargeArray3.getFloat(j12 + j8);
                float f3 = floatLargeArray3.getFloat(j13);
                float f4 = floatLargeArray3.getFloat(j13 + j8);
                long j14 = j4 + j11;
                long j15 = j14 + j7;
                floatLargeArray4.setFloat(j14, f + f3);
                floatLargeArray4.setFloat(j14 + 1, f2 + f4);
                floatLargeArray4.setFloat(j15, f - f3);
                floatLargeArray4.setFloat(j15 + 1, f2 - f4);
                j10++;
                j8 = 1;
                j9 = 2;
            }
            return;
        }
        long j16 = 0;
        while (j16 < j2) {
            long j17 = 0;
            while (j17 < j - 1) {
                long j18 = j16 * j;
                long j19 = j3 + j17 + (j18 * 2);
                long j20 = j19 + j;
                float f5 = floatLargeArray3.getFloat(j19);
                float f6 = floatLargeArray3.getFloat(j19 + 1);
                float f7 = floatLargeArray3.getFloat(j20);
                float f8 = floatLargeArray3.getFloat(j20 + 1);
                long j21 = j17 + j5;
                float f9 = floatFFT_1D.wtablel.getFloat(j21);
                float f10 = j6 * floatFFT_1D.wtablel.getFloat(j21 + 1);
                float f11 = f5 - f7;
                float f12 = f6 - f8;
                long j22 = j4 + j17 + j18;
                long j23 = j22 + j7;
                floatLargeArray2.setFloat(j22, f5 + f7);
                floatLargeArray2.setFloat(j22 + 1, f6 + f8);
                floatLargeArray2.setFloat(j23, (f9 * f11) - (f10 * f12));
                floatLargeArray2.setFloat(j23 + 1, (f9 * f12) + (f10 * f11));
                j17 += 2;
                floatLargeArray3 = floatLargeArray;
                floatLargeArray4 = floatLargeArray2;
                j16 = j16;
                floatFFT_1D = this;
            }
            j16++;
            floatLargeArray3 = floatLargeArray;
            floatLargeArray4 = floatLargeArray4;
            floatFFT_1D = this;
        }
    }

    void passf3(int i, int i2, float[] fArr, int i3, float[] fArr2, int i4, int i5, int i6) {
        int i7 = i;
        int i8 = i5 + i7;
        int i9 = i2 * i7;
        float f = 0.8660254f;
        float f2 = -0.5f;
        int i10 = 2;
        if (i7 == 2) {
            int i11 = 1;
            while (i11 <= i2) {
                int i12 = i3 + (((i11 * 3) - 2) * i7);
                int i13 = i12 + i7;
                int i14 = i12 - i7;
                float f3 = fArr[i12];
                float f4 = fArr[i12 + 1];
                float f5 = fArr[i13];
                float f6 = fArr[i13 + 1];
                float f7 = fArr[i14];
                float f8 = fArr[i14 + 1];
                float f9 = f3 + f5;
                float f10 = f7 + (f9 * f2);
                float f11 = f4 + f6;
                float f12 = f8 + (f11 * f2);
                float f13 = i6 * 0.8660254f;
                float f14 = (f3 - f5) * f13;
                float f15 = f13 * (f4 - f6);
                int i15 = i4 + ((i11 - 1) * i7);
                int i16 = i15 + i9;
                int i17 = i16 + i9;
                fArr2[i15] = f7 + f9;
                fArr2[i15 + 1] = f8 + f11;
                fArr2[i16] = f10 - f15;
                fArr2[i16 + 1] = f12 + f14;
                fArr2[i17] = f10 + f15;
                fArr2[i17 + 1] = f12 - f14;
                i11++;
                f2 = -0.5f;
            }
        } else {
            int i18 = 1;
            while (i18 <= i2) {
                int i19 = i3 + (((i18 * 3) - i10) * i7);
                int i20 = i4 + ((i18 - 1) * i7);
                int i21 = 0;
                while (i21 < i7 - 1) {
                    int i22 = i21 + i19;
                    int i23 = i22 + i7;
                    int i24 = i22 - i7;
                    float f16 = fArr[i22];
                    float f17 = fArr[i22 + 1];
                    float f18 = fArr[i23];
                    float f19 = fArr[i23 + 1];
                    float f20 = fArr[i24];
                    float f21 = fArr[i24 + 1];
                    float f22 = f16 + f18;
                    float f23 = f20 + (f22 * (-0.5f));
                    float f24 = f17 + f19;
                    float f25 = f21 + (f24 * (-0.5f));
                    float f26 = i6;
                    float f27 = f26 * f;
                    float f28 = (f16 - f18) * f27;
                    float f29 = f27 * (f17 - f19);
                    float f30 = f23 - f29;
                    float f31 = f23 + f29;
                    float f32 = f25 + f28;
                    float f33 = f25 - f28;
                    int i25 = i21 + i5;
                    int i26 = i21 + i8;
                    float[] fArr3 = this.wtable;
                    float f34 = fArr3[i25];
                    float f35 = fArr3[i25 + 1] * f26;
                    float f36 = fArr3[i26];
                    float f37 = f26 * fArr3[i26 + 1];
                    int i27 = i21 + i20;
                    int i28 = i27 + i9;
                    int i29 = i28 + i9;
                    fArr2[i27] = f20 + f22;
                    fArr2[i27 + 1] = f21 + f24;
                    fArr2[i28] = (f34 * f30) - (f35 * f32);
                    fArr2[i28 + 1] = (f34 * f32) + (f35 * f30);
                    fArr2[i29] = (f36 * f31) - (f37 * f33);
                    fArr2[i29 + 1] = (f36 * f33) + (f37 * f31);
                    i21 += 2;
                    i7 = i;
                    f = 0.8660254f;
                }
                i18++;
                i7 = i;
                f = 0.8660254f;
                i10 = 2;
            }
        }
    }

    void passf3(long j, long j2, FloatLargeArray floatLargeArray, long j3, FloatLargeArray floatLargeArray2, long j4, long j5, long j6) {
        FloatLargeArray floatLargeArray3 = floatLargeArray;
        FloatLargeArray floatLargeArray4 = floatLargeArray2;
        long j7 = j6;
        long j8 = j5 + j;
        long j9 = j2 * j;
        long j10 = 3;
        long j11 = 2;
        if (j == 2) {
            long j12 = 1;
            while (j12 <= j2) {
                long j13 = j3 + (((j12 * j10) - j11) * j);
                long j14 = j13 + j;
                long j15 = j13 - j;
                float f = floatLargeArray3.getFloat(j13);
                float f2 = floatLargeArray3.getFloat(j13 + 1);
                float f3 = floatLargeArray3.getFloat(j14);
                float f4 = floatLargeArray3.getFloat(j14 + 1);
                float f5 = floatLargeArray3.getFloat(j15);
                float f6 = floatLargeArray3.getFloat(j15 + 1);
                float f7 = f + f3;
                float f8 = f5 + (f7 * (-0.5f));
                float f9 = f2 + f4;
                float f10 = f6 + (f9 * (-0.5f));
                float f11 = j7 * 0.8660254f;
                float f12 = (f - f3) * f11;
                float f13 = f11 * (f2 - f4);
                long j16 = j4 + ((j12 - 1) * j);
                long j17 = j16 + j9;
                long j18 = j12;
                long j19 = j17 + j9;
                floatLargeArray4.setFloat(j16, floatLargeArray3.getFloat(j15) + f7);
                floatLargeArray4.setFloat(j16 + 1, f6 + f9);
                floatLargeArray4.setFloat(j17, f8 - f13);
                floatLargeArray4.setFloat(j17 + 1, f10 + f12);
                floatLargeArray4.setFloat(j19, f8 + f13);
                floatLargeArray4.setFloat(j19 + 1, f10 - f12);
                j12 = j18 + 1;
                j7 = j6;
                j10 = 3;
                j11 = 2;
            }
        } else {
            long j20 = 1;
            long j21 = 1;
            while (j21 <= j2) {
                long j22 = j3 + (((j21 * 3) - 2) * j);
                long j23 = j4 + ((j21 - j20) * j);
                long j24 = 0;
                while (j24 < j - j20) {
                    long j25 = j24 + j22;
                    long j26 = j22;
                    long j27 = j25 + j;
                    long j28 = j21;
                    long j29 = j25 - j;
                    float f14 = floatLargeArray3.getFloat(j25);
                    float f15 = floatLargeArray3.getFloat(j25 + j20);
                    float f16 = floatLargeArray3.getFloat(j27);
                    float f17 = floatLargeArray3.getFloat(j27 + j20);
                    float f18 = floatLargeArray3.getFloat(j29);
                    float f19 = floatLargeArray3.getFloat(j29 + j20);
                    float f20 = f14 + f16;
                    float f21 = f18 + (f20 * (-0.5f));
                    float f22 = f15 + f17;
                    float f23 = f19 + (f22 * (-0.5f));
                    float f24 = j6;
                    float f25 = f24 * 0.8660254f;
                    float f26 = (f14 - f16) * f25;
                    float f27 = f25 * (f15 - f17);
                    float f28 = f21 - f27;
                    float f29 = f21 + f27;
                    float f30 = f23 + f26;
                    float f31 = f23 - f26;
                    long j30 = j24 + j5;
                    long j31 = j24 + j8;
                    float f32 = this.wtablel.getFloat(j30);
                    j20 = 1;
                    float f33 = this.wtablel.getFloat(j30 + 1) * f24;
                    float f34 = this.wtablel.getFloat(j31);
                    float f35 = f24 * this.wtablel.getFloat(j31 + 1);
                    long j32 = j24 + j23;
                    long j33 = j23;
                    long j34 = j32 + j9;
                    long j35 = j34 + j9;
                    floatLargeArray2.setFloat(j32, f18 + f20);
                    floatLargeArray2.setFloat(j32 + 1, f19 + f22);
                    floatLargeArray2.setFloat(j34, (f32 * f28) - (f33 * f30));
                    floatLargeArray2.setFloat(j34 + 1, (f32 * f30) + (f33 * f28));
                    floatLargeArray2.setFloat(j35, (f34 * f29) - (f35 * f31));
                    floatLargeArray2.setFloat(j35 + 1, (f34 * f31) + (f35 * f29));
                    j24 += 2;
                    floatLargeArray3 = floatLargeArray;
                    floatLargeArray4 = floatLargeArray2;
                    j22 = j26;
                    j21 = j28;
                    j8 = j8;
                    j23 = j33;
                }
                floatLargeArray3 = floatLargeArray;
                j8 = j8;
                floatLargeArray4 = floatLargeArray4;
                j21 += j20;
            }
        }
    }

    void passf4(int i, int i2, float[] fArr, int i3, float[] fArr2, int i4, int i5, int i6) {
        int i7 = i;
        int i8 = i2;
        int i9 = i5 + i7;
        int i10 = i9 + i7;
        int i11 = i8 * i7;
        if (i7 == 2) {
            for (int i12 = 0; i12 < i8; i12++) {
                int i13 = i12 * i7;
                int i14 = i3 + (i13 * 4);
                int i15 = i14 + 1;
                int i16 = i15 + i7;
                int i17 = i16 + i7;
                int i18 = i17 + i7;
                float f = fArr[i14];
                float f2 = fArr[i15];
                float f3 = fArr[i16 - 1];
                float f4 = fArr[i16];
                float f5 = fArr[i17 - 1];
                float f6 = fArr[i17];
                float f7 = fArr[i18 - 1];
                float f8 = fArr[i18];
                float f9 = f2 - f6;
                float f10 = f2 + f6;
                float f11 = f8 - f4;
                float f12 = f4 + f8;
                float f13 = f - f5;
                float f14 = f + f5;
                float f15 = f3 - f7;
                float f16 = f3 + f7;
                int i19 = i4 + i13;
                int i20 = i19 + i11;
                int i21 = i20 + i11;
                int i22 = i21 + i11;
                fArr2[i19] = f14 + f16;
                fArr2[i19 + 1] = f10 + f12;
                float f17 = i6;
                float f18 = f11 * f17;
                fArr2[i20] = f13 + f18;
                float f19 = f17 * f15;
                fArr2[i20 + 1] = f9 + f19;
                fArr2[i21] = f14 - f16;
                fArr2[i21 + 1] = f10 - f12;
                fArr2[i22] = f13 - f18;
                fArr2[i22 + 1] = f9 - f19;
            }
        } else {
            int i23 = 0;
            while (i23 < i8) {
                int i24 = i23 * i7;
                int i25 = i3 + 1 + (i24 * 4);
                int i26 = 0;
                while (i26 < i7 - 1) {
                    int i27 = i26 + i25;
                    int i28 = i27 + i7;
                    int i29 = i28 + i7;
                    int i30 = i29 + i7;
                    float f20 = fArr[i27 - 1];
                    float f21 = fArr[i27];
                    float f22 = fArr[i28 - 1];
                    float f23 = fArr[i28];
                    float f24 = fArr[i29 - 1];
                    float f25 = fArr[i29];
                    float f26 = fArr[i30 - 1];
                    float f27 = fArr[i30];
                    float f28 = f21 - f25;
                    float f29 = f21 + f25;
                    float f30 = f23 + f27;
                    float f31 = f27 - f23;
                    float f32 = f20 - f24;
                    float f33 = f20 + f24;
                    float f34 = f22 - f26;
                    float f35 = f22 + f26;
                    float f36 = f33 - f35;
                    float f37 = f29 - f30;
                    float f38 = i6;
                    float f39 = f31 * f38;
                    float f40 = f32 + f39;
                    float f41 = f32 - f39;
                    float f42 = f34 * f38;
                    float f43 = f28 + f42;
                    float f44 = f28 - f42;
                    int i31 = i26 + i5;
                    int i32 = i26 + i9;
                    int i33 = i26 + i10;
                    float[] fArr3 = this.wtable;
                    float f45 = fArr3[i31];
                    float f46 = fArr3[i31 + 1] * f38;
                    float f47 = fArr3[i32];
                    float f48 = fArr3[i32 + 1] * f38;
                    float f49 = fArr3[i33];
                    float f50 = f38 * fArr3[i33 + 1];
                    int i34 = i4 + i26 + i24;
                    int i35 = i34 + i11;
                    int i36 = i35 + i11;
                    int i37 = i36 + i11;
                    fArr2[i34] = f33 + f35;
                    fArr2[i34 + 1] = f29 + f30;
                    fArr2[i35] = (f45 * f40) - (f46 * f43);
                    fArr2[i35 + 1] = (f45 * f43) + (f46 * f40);
                    fArr2[i36] = (f47 * f36) - (f48 * f37);
                    fArr2[i36 + 1] = (f47 * f37) + (f48 * f36);
                    fArr2[i37] = (f49 * f41) - (f50 * f44);
                    fArr2[i37 + 1] = (f49 * f44) + (f50 * f41);
                    i26 += 2;
                    i7 = i;
                }
                i23++;
                i7 = i;
                i8 = i2;
            }
        }
    }

    void passf4(long j, long j2, FloatLargeArray floatLargeArray, long j3, FloatLargeArray floatLargeArray2, long j4, long j5, int i) {
        FloatLargeArray floatLargeArray3 = floatLargeArray;
        int i2 = i;
        long j6 = j5 + j;
        long j7 = j6 + j;
        long j8 = j2 * j;
        long j9 = 4;
        long j10 = 1;
        if (j == 2) {
            long j11 = 0;
            while (j11 < j2) {
                long j12 = j11 * j;
                long j13 = j3 + (j12 * j9);
                long j14 = j13 + j10;
                long j15 = j14 + j;
                long j16 = j11;
                long j17 = j15 + j;
                long j18 = j17 + j;
                float f = floatLargeArray3.getFloat(j13);
                float f2 = floatLargeArray3.getFloat(j14);
                long j19 = j8;
                float f3 = floatLargeArray3.getFloat(j15 - 1);
                float f4 = floatLargeArray3.getFloat(j15);
                float f5 = floatLargeArray3.getFloat(j17 - 1);
                float f6 = floatLargeArray3.getFloat(j17);
                float f7 = floatLargeArray3.getFloat(j18 - 1);
                float f8 = floatLargeArray3.getFloat(j18);
                float f9 = f2 - f6;
                float f10 = f2 + f6;
                float f11 = f8 - f4;
                float f12 = f4 + f8;
                float f13 = f - f5;
                float f14 = f + f5;
                float f15 = f3 - f7;
                float f16 = f3 + f7;
                long j20 = j4 + j12;
                long j21 = j20 + j19;
                long j22 = j21 + j19;
                long j23 = j22 + j19;
                floatLargeArray2.setFloat(j20, f14 + f16);
                floatLargeArray2.setFloat(j20 + 1, f10 + f12);
                float f17 = i;
                float f18 = f11 * f17;
                floatLargeArray2.setFloat(j21, f13 + f18);
                float f19 = f17 * f15;
                floatLargeArray2.setFloat(j21 + 1, f9 + f19);
                floatLargeArray2.setFloat(j22, f14 - f16);
                floatLargeArray2.setFloat(j22 + 1, f10 - f12);
                floatLargeArray2.setFloat(j23, f13 - f18);
                floatLargeArray2.setFloat(j23 + 1, f9 - f19);
                j11 = j16 + 1;
                floatLargeArray3 = floatLargeArray;
                j10 = 1;
                j8 = j19;
                j9 = 4;
            }
            return;
        }
        FloatLargeArray floatLargeArray4 = floatLargeArray2;
        long j24 = 1;
        long j25 = 0;
        while (j25 < j2) {
            long j26 = j25 * j;
            long j27 = j3 + j24 + (j26 * 4);
            long j28 = 0;
            while (j28 < j - j24) {
                long j29 = j28 + j27;
                long j30 = j29 + j;
                long j31 = j27;
                long j32 = j30 + j;
                long j33 = j25;
                long j34 = j32 + j;
                long j35 = j26;
                float f20 = floatLargeArray.getFloat(j29 - j24);
                float f21 = floatLargeArray.getFloat(j29);
                float f22 = floatLargeArray.getFloat(j30 - j24);
                float f23 = floatLargeArray.getFloat(j30);
                float f24 = floatLargeArray.getFloat(j32 - j24);
                float f25 = floatLargeArray.getFloat(j32);
                long j36 = j7;
                float f26 = floatLargeArray.getFloat(j34 - j24);
                float f27 = floatLargeArray.getFloat(j34);
                float f28 = f21 - f25;
                float f29 = f21 + f25;
                float f30 = f23 + f27;
                float f31 = f27 - f23;
                float f32 = f20 - f24;
                float f33 = f20 + f24;
                float f34 = f22 - f26;
                float f35 = f22 + f26;
                float f36 = f33 - f35;
                float f37 = f29 - f30;
                float f38 = i2;
                float f39 = f31 * f38;
                float f40 = f32 + f39;
                float f41 = f32 - f39;
                float f42 = f34 * f38;
                float f43 = f28 + f42;
                float f44 = f28 - f42;
                long j37 = j28 + j5;
                long j38 = j28 + j6;
                long j39 = j6;
                long j40 = j28 + j36;
                float f45 = this.wtablel.getFloat(j37);
                j24 = 1;
                float f46 = this.wtablel.getFloat(j37 + 1) * f38;
                float f47 = this.wtablel.getFloat(j38);
                float f48 = this.wtablel.getFloat(j38 + 1) * f38;
                float f49 = this.wtablel.getFloat(j40);
                float f50 = f38 * this.wtablel.getFloat(j40 + 1);
                long j41 = j4 + j28 + j35;
                long j42 = j41 + j8;
                long j43 = j42 + j8;
                long j44 = j43 + j8;
                floatLargeArray2.setFloat(j41, f33 + f35);
                floatLargeArray2.setFloat(j41 + 1, f29 + f30);
                floatLargeArray2.setFloat(j42, (f45 * f40) - (f46 * f43));
                floatLargeArray2.setFloat(j42 + 1, (f45 * f43) + (f46 * f40));
                floatLargeArray2.setFloat(j43, (f47 * f36) - (f48 * f37));
                floatLargeArray2.setFloat(j43 + 1, (f47 * f37) + (f48 * f36));
                floatLargeArray2.setFloat(j44, (f49 * f41) - (f50 * f44));
                floatLargeArray2.setFloat(j44 + 1, (f49 * f44) + (f50 * f41));
                j28 += 2;
                i2 = i;
                floatLargeArray4 = floatLargeArray2;
                j27 = j31;
                j25 = j33;
                j26 = j35;
                j7 = j36;
                j6 = j39;
            }
            j25 += j24;
            i2 = i;
        }
    }

    void passf5(int i, int i2, float[] fArr, int i3, float[] fArr2, int i4, int i5, int i6) {
        int i7 = i5 + i;
        int i8 = i7 + i;
        int i9 = i8 + i;
        int i10 = i2 * i;
        float f = 0.58778524f;
        float f2 = 0.95105654f;
        float f3 = -0.809017f;
        float f4 = 0.309017f;
        if (i == 2) {
            int i11 = 1;
            while (i11 <= i2) {
                int i12 = i3 + (((i11 * 5) - 4) * i);
                int i13 = i12 + 1;
                int i14 = i13 + i;
                int i15 = i13 - i;
                int i16 = i14 + i;
                int i17 = i16 + i;
                float f5 = fArr[i12];
                float f6 = fArr[i13];
                float f7 = fArr[i14 - 1];
                float f8 = fArr[i14];
                float f9 = fArr[i15 - 1];
                float f10 = fArr[i15];
                float f11 = fArr[i16 - 1];
                float f12 = fArr[i16];
                float f13 = fArr[i17 - 1];
                float f14 = fArr[i17];
                float f15 = f6 - f14;
                float f16 = f6 + f14;
                float f17 = f8 - f12;
                float f18 = f8 + f12;
                float f19 = f5 - f13;
                float f20 = f5 + f13;
                float f21 = f7 - f11;
                float f22 = f7 + f11;
                float f23 = f9 + (f20 * 0.309017f) + (f22 * f3);
                float f24 = f10 + (f16 * 0.309017f) + (f18 * f3);
                float f25 = f9 + (f20 * f3) + (f22 * 0.309017f);
                float f26 = f10 + (f16 * f3) + (f18 * 0.309017f);
                float f27 = i6;
                float f28 = ((f19 * 0.95105654f) + (f21 * 0.58778524f)) * f27;
                float f29 = ((f15 * 0.95105654f) + (f17 * 0.58778524f)) * f27;
                float f30 = ((f19 * 0.58778524f) - (f21 * 0.95105654f)) * f27;
                float f31 = f27 * ((f15 * 0.58778524f) - (f17 * 0.95105654f));
                int i18 = i4 + ((i11 - 1) * i);
                int i19 = i18 + i10;
                int i20 = i19 + i10;
                int i21 = i20 + i10;
                int i22 = i21 + i10;
                fArr2[i18] = f9 + f20 + f22;
                fArr2[i18 + 1] = f10 + f16 + f18;
                fArr2[i19] = f23 - f29;
                fArr2[i19 + 1] = f24 + f28;
                fArr2[i20] = f25 - f31;
                fArr2[i20 + 1] = f26 + f30;
                fArr2[i21] = f25 + f31;
                fArr2[i21 + 1] = f26 - f30;
                fArr2[i22] = f23 + f29;
                fArr2[i22 + 1] = f24 - f28;
                i11++;
                f3 = -0.809017f;
            }
        } else {
            int i23 = 1;
            while (i23 <= i2) {
                int i24 = i3 + 1 + (((i23 * 5) - 4) * i);
                int i25 = i4 + ((i23 - 1) * i);
                int i26 = 0;
                while (i26 < i - 1) {
                    int i27 = i26 + i24;
                    int i28 = i27 + i;
                    int i29 = i27 - i;
                    int i30 = i28 + i;
                    int i31 = i30 + i;
                    float f32 = fArr[i27 - 1];
                    float f33 = fArr[i27];
                    float f34 = fArr[i28 - 1];
                    float f35 = fArr[i28];
                    float f36 = fArr[i29 - 1];
                    float f37 = fArr[i29];
                    float f38 = fArr[i30 - 1];
                    float f39 = fArr[i30];
                    float f40 = fArr[i31 - 1];
                    float f41 = fArr[i31];
                    float f42 = f33 - f41;
                    float f43 = f33 + f41;
                    float f44 = f35 - f39;
                    float f45 = f35 + f39;
                    float f46 = f32 - f40;
                    float f47 = f32 + f40;
                    float f48 = f34 - f38;
                    float f49 = f34 + f38;
                    float f50 = f36 + (f47 * f4) + (f49 * (-0.809017f));
                    float f51 = f37 + (f43 * f4) + (f45 * (-0.809017f));
                    float f52 = f36 + (f47 * (-0.809017f)) + (f49 * f4);
                    float f53 = f37 + (f43 * (-0.809017f)) + (f45 * f4);
                    float f54 = i6;
                    float f55 = ((f46 * f2) + (f48 * f)) * f54;
                    float f56 = ((f42 * f2) + (f44 * f)) * f54;
                    float f57 = ((f46 * f) - (f48 * f2)) * f54;
                    float f58 = ((f42 * f) - (f44 * f2)) * f54;
                    float f59 = f52 - f58;
                    float f60 = f52 + f58;
                    float f61 = f53 + f57;
                    float f62 = f53 - f57;
                    float f63 = f50 + f56;
                    float f64 = f50 - f56;
                    float f65 = f51 - f55;
                    float f66 = f51 + f55;
                    int i32 = i26 + i5;
                    int i33 = i26 + i7;
                    int i34 = i26 + i8;
                    int i35 = i26 + i9;
                    float[] fArr3 = this.wtable;
                    float f67 = fArr3[i32];
                    float f68 = fArr3[i32 + 1] * f54;
                    float f69 = fArr3[i33];
                    float f70 = fArr3[i33 + 1] * f54;
                    float f71 = fArr3[i34];
                    float f72 = fArr3[i34 + 1] * f54;
                    float f73 = fArr3[i35];
                    float f74 = f54 * fArr3[i35 + 1];
                    int i36 = i26 + i25;
                    int i37 = i36 + i10;
                    int i38 = i37 + i10;
                    int i39 = i38 + i10;
                    int i40 = i39 + i10;
                    fArr2[i36] = f36 + f47 + f49;
                    fArr2[i36 + 1] = f37 + f43 + f45;
                    fArr2[i37] = (f67 * f64) - (f68 * f66);
                    fArr2[i37 + 1] = (f67 * f66) + (f68 * f64);
                    fArr2[i38] = (f69 * f59) - (f70 * f61);
                    fArr2[i38 + 1] = (f69 * f61) + (f70 * f59);
                    fArr2[i39] = (f71 * f60) - (f72 * f62);
                    fArr2[i39 + 1] = (f71 * f62) + (f72 * f60);
                    fArr2[i40] = (f73 * f63) - (f74 * f65);
                    fArr2[i40 + 1] = (f73 * f65) + (f74 * f63);
                    i26 += 2;
                    f = 0.58778524f;
                    f2 = 0.95105654f;
                    f4 = 0.309017f;
                }
                i23++;
                f = 0.58778524f;
                f2 = 0.95105654f;
                f4 = 0.309017f;
            }
        }
    }

    void passf5(long j, long j2, FloatLargeArray floatLargeArray, long j3, FloatLargeArray floatLargeArray2, long j4, long j5, long j6) {
        FloatLargeArray floatLargeArray3 = floatLargeArray;
        long j7 = j5 + j;
        long j8 = j7 + j;
        long j9 = j8 + j;
        long j10 = j2 * j;
        long j11 = 4;
        long j12 = 5;
        if (j == 2) {
            long j13 = 1;
            while (j13 <= j2) {
                long j14 = j3 + (((j13 * j12) - j11) * j);
                long j15 = j14 + 1;
                long j16 = j15 + j;
                long j17 = j10;
                long j18 = j15 - j;
                long j19 = j13;
                long j20 = j16 + j;
                long j21 = j20 + j;
                float f = floatLargeArray3.getFloat(j14);
                float f2 = floatLargeArray3.getFloat(j15);
                float f3 = floatLargeArray3.getFloat(j16 - 1);
                float f4 = floatLargeArray3.getFloat(j16);
                float f5 = floatLargeArray3.getFloat(j18 - 1);
                float f6 = floatLargeArray3.getFloat(j18);
                float f7 = floatLargeArray3.getFloat(j20 - 1);
                float f8 = floatLargeArray3.getFloat(j20);
                float f9 = floatLargeArray3.getFloat(j21 - 1);
                float f10 = floatLargeArray3.getFloat(j21);
                float f11 = f2 - f10;
                float f12 = f2 + f10;
                float f13 = f4 - f8;
                float f14 = f4 + f8;
                float f15 = f - f9;
                float f16 = f + f9;
                float f17 = f3 - f7;
                float f18 = f3 + f7;
                float f19 = (f16 * 0.309017f) + f5 + (f18 * (-0.809017f));
                float f20 = (f12 * 0.309017f) + f6 + (f14 * (-0.809017f));
                float f21 = (f16 * (-0.809017f)) + f5 + (f18 * 0.309017f);
                float f22 = f6 + (f12 * (-0.809017f)) + (f14 * 0.309017f);
                float f23 = j6;
                float f24 = ((f15 * 0.95105654f) + (f17 * 0.58778524f)) * f23;
                float f25 = ((f11 * 0.95105654f) + (f13 * 0.58778524f)) * f23;
                float f26 = ((f15 * 0.58778524f) - (f17 * 0.95105654f)) * f23;
                float f27 = f23 * ((f11 * 0.58778524f) - (f13 * 0.95105654f));
                long j22 = j4 + ((j19 - 1) * j);
                long j23 = j22 + j17;
                long j24 = j23 + j17;
                long j25 = j24 + j17;
                long j26 = j25 + j17;
                floatLargeArray2.setFloat(j22, f5 + f16 + f18);
                floatLargeArray2.setFloat(j22 + 1, f6 + f12 + f14);
                floatLargeArray2.setFloat(j23, f19 - f25);
                floatLargeArray2.setFloat(j23 + 1, f20 + f24);
                floatLargeArray2.setFloat(j24, f21 - f27);
                floatLargeArray2.setFloat(j24 + 1, f22 + f26);
                floatLargeArray2.setFloat(j25, f21 + f27);
                floatLargeArray2.setFloat(j25 + 1, f22 - f26);
                floatLargeArray2.setFloat(j26, f19 + f25);
                floatLargeArray2.setFloat(j26 + 1, f20 - f24);
                j13 = j19 + 1;
                floatLargeArray3 = floatLargeArray;
                j10 = j17;
                j11 = 4;
                j12 = 5;
            }
            return;
        }
        FloatLargeArray floatLargeArray4 = floatLargeArray2;
        long j27 = 1;
        while (j27 <= j2) {
            long j28 = j3 + 1 + (((j27 * 5) - 4) * j);
            long j29 = j4 + ((j27 - 1) * j);
            long j30 = 0;
            while (j30 < j - 1) {
                long j31 = j30 + j28;
                long j32 = j31 + j;
                long j33 = j28;
                long j34 = j31 - j;
                long j35 = j27;
                long j36 = j32 + j;
                long j37 = j9;
                long j38 = j36 + j;
                long j39 = j8;
                long j40 = j7;
                float f28 = floatLargeArray.getFloat(j31 - 1);
                float f29 = floatLargeArray.getFloat(j31);
                float f30 = floatLargeArray.getFloat(j32 - 1);
                float f31 = floatLargeArray.getFloat(j32);
                float f32 = floatLargeArray.getFloat(j34 - 1);
                float f33 = floatLargeArray.getFloat(j34);
                long j41 = j29;
                float f34 = floatLargeArray.getFloat(j36 - 1);
                float f35 = floatLargeArray.getFloat(j36);
                float f36 = floatLargeArray.getFloat(j38 - 1);
                float f37 = floatLargeArray.getFloat(j38);
                float f38 = f29 - f37;
                float f39 = f29 + f37;
                float f40 = f31 - f35;
                float f41 = f31 + f35;
                float f42 = f28 - f36;
                float f43 = f28 + f36;
                float f44 = f30 - f34;
                float f45 = f30 + f34;
                float f46 = (f43 * 0.309017f) + f32 + (f45 * (-0.809017f));
                float f47 = (f39 * 0.309017f) + f33 + (f41 * (-0.809017f));
                float f48 = (f43 * (-0.809017f)) + f32 + (f45 * 0.309017f);
                float f49 = f33 + (f39 * (-0.809017f)) + (f41 * 0.309017f);
                float f50 = j6;
                float f51 = ((f42 * 0.95105654f) + (f44 * 0.58778524f)) * f50;
                float f52 = ((f38 * 0.95105654f) + (f40 * 0.58778524f)) * f50;
                float f53 = ((f42 * 0.58778524f) - (f44 * 0.95105654f)) * f50;
                float f54 = ((f38 * 0.58778524f) - (f40 * 0.95105654f)) * f50;
                float f55 = f48 - f54;
                float f56 = f48 + f54;
                float f57 = f49 + f53;
                float f58 = f49 - f53;
                float f59 = f46 + f52;
                float f60 = f46 - f52;
                float f61 = f47 - f51;
                float f62 = f47 + f51;
                long j42 = j30 + j5;
                long j43 = j30 + j40;
                long j44 = j30 + j39;
                long j45 = j30 + j37;
                float f63 = this.wtablel.getFloat(j42);
                float f64 = this.wtablel.getFloat(j42 + 1) * f50;
                float f65 = this.wtablel.getFloat(j43);
                float f66 = this.wtablel.getFloat(j43 + 1) * f50;
                float f67 = this.wtablel.getFloat(j44);
                float f68 = this.wtablel.getFloat(j44 + 1) * f50;
                float f69 = this.wtablel.getFloat(j45);
                float f70 = f50 * this.wtablel.getFloat(j45 + 1);
                long j46 = j30 + j41;
                long j47 = j46 + j10;
                long j48 = j47 + j10;
                long j49 = j48 + j10;
                long j50 = j49 + j10;
                floatLargeArray2.setFloat(j46, f32 + f43 + f45);
                floatLargeArray2.setFloat(j46 + 1, f33 + f39 + f41);
                floatLargeArray2.setFloat(j47, (f63 * f60) - (f64 * f62));
                floatLargeArray2.setFloat(j47 + 1, (f63 * f62) + (f64 * f60));
                floatLargeArray2.setFloat(j48, (f65 * f55) - (f66 * f57));
                floatLargeArray2.setFloat(j48 + 1, (f65 * f57) + (f66 * f55));
                floatLargeArray2.setFloat(j49, (f67 * f56) - (f68 * f58));
                floatLargeArray2.setFloat(j49 + 1, (f67 * f58) + (f68 * f56));
                floatLargeArray2.setFloat(j50, (f69 * f59) - (f70 * f61));
                floatLargeArray2.setFloat(j50 + 1, (f69 * f61) + (f70 * f59));
                j30 += 2;
                floatLargeArray4 = floatLargeArray2;
                j28 = j33;
                j27 = j35;
                j9 = j37;
                j8 = j39;
                j7 = j40;
                j29 = j41;
            }
            j27++;
            j8 = j8;
        }
    }

    void passfg(int[] iArr, int i, int i2, int i3, int i4, float[] fArr, int i5, float[] fArr2, int i6, int i7, int i8) {
        int i9;
        int i10;
        FloatFFT_1D floatFFT_1D = this;
        int i11 = i;
        int i12 = i11 / 2;
        int i13 = (i2 + 1) / 2;
        int i14 = i2 * i11;
        if (i11 >= i3) {
            for (int i15 = 1; i15 < i13; i15++) {
                int i16 = i15 * i11;
                int i17 = (i2 - i15) * i11;
                for (int i18 = 0; i18 < i3; i18++) {
                    int i19 = i18 * i11;
                    int i20 = i19 + (i16 * i3);
                    int i21 = i19 + (i17 * i3);
                    int i22 = i19 * i2;
                    for (int i23 = 0; i23 < i11; i23++) {
                        int i24 = i6 + i23;
                        int i25 = i5 + i23;
                        float f = fArr[i25 + i16 + i22];
                        float f2 = fArr[i25 + i17 + i22];
                        fArr2[i24 + i20] = f + f2;
                        fArr2[i24 + i21] = f - f2;
                    }
                }
            }
            int i26 = 0;
            while (i26 < i3) {
                int i27 = i26 * i11;
                int i28 = i27 * i2;
                int i29 = i12;
                for (int i30 = 0; i30 < i11; i30++) {
                    fArr2[i6 + i30 + i27] = fArr[i5 + i30 + i28];
                }
                i26++;
                i12 = i29;
            }
            i9 = i12;
            i10 = i14;
        } else {
            i9 = i12;
            int i31 = 1;
            while (i31 < i13) {
                int i32 = i2 - i31;
                int i33 = i31 * i3 * i11;
                int i34 = i32 * i3 * i11;
                int i35 = i31 * i11;
                int i36 = i32 * i11;
                int i37 = i14;
                for (int i38 = 0; i38 < i11; i38++) {
                    for (int i39 = 0; i39 < i3; i39++) {
                        int i40 = i39 * i11;
                        int i41 = i40 * i2;
                        int i42 = i5 + i38;
                        float f3 = fArr[i42 + i35 + i41];
                        float f4 = fArr[i42 + i36 + i41];
                        int i43 = i6 + i38 + i40;
                        fArr2[i43 + i33] = f3 + f4;
                        fArr2[i43 + i34] = f3 - f4;
                    }
                }
                i31++;
                i14 = i37;
            }
            i10 = i14;
            for (int i44 = 0; i44 < i11; i44++) {
                for (int i45 = 0; i45 < i3; i45++) {
                    int i46 = i45 * i11;
                    fArr2[i6 + i44 + i46] = fArr[i5 + i44 + (i46 * i2)];
                }
            }
        }
        int i47 = 2 - i11;
        int i48 = (i2 - 1) * i4;
        int i49 = i47;
        int i50 = 1;
        int i51 = 0;
        while (i50 < i13) {
            int i52 = i49 + i11;
            int i53 = i50 * i4;
            int i54 = (i2 - i50) * i4;
            int i55 = i52 + i7;
            int i56 = i47;
            float[] fArr3 = floatFFT_1D.wtable;
            float f5 = fArr3[i55 - 2];
            float f6 = i8;
            float f7 = fArr3[i55 - 1] * f6;
            for (int i57 = 0; i57 < i4; i57++) {
                int i58 = i5 + i57;
                int i59 = i6 + i57;
                fArr[i58 + i53] = fArr2[i59] + (fArr2[i59 + i4] * f5);
                fArr[i58 + i54] = fArr2[i59 + i48] * f7;
            }
            i51 += i11;
            int i60 = i52;
            int i61 = 2;
            while (i61 < i13) {
                int i62 = i2 - i61;
                i60 += i51;
                int i63 = i48;
                int i64 = i10;
                if (i60 > i64) {
                    i60 -= i64;
                }
                int i65 = i60 + i7;
                float[] fArr4 = floatFFT_1D.wtable;
                float f8 = fArr4[i65 - 2];
                float f9 = fArr4[i65 - 1] * f6;
                int i66 = i61 * i4;
                int i67 = i62 * i4;
                float f10 = f6;
                for (int i68 = 0; i68 < i4; i68++) {
                    int i69 = i5 + i68;
                    int i70 = i6 + i68;
                    int i71 = i69 + i53;
                    fArr[i71] = fArr[i71] + (fArr2[i70 + i66] * f8);
                    int i72 = i69 + i54;
                    fArr[i72] = fArr[i72] + (fArr2[i70 + i67] * f9);
                }
                i61++;
                i48 = i63;
                i10 = i64;
                f6 = f10;
            }
            i50++;
            i47 = i56;
            i49 = i52;
        }
        int i73 = i47;
        for (int i74 = 1; i74 < i13; i74++) {
            int i75 = i74 * i4;
            for (int i76 = 0; i76 < i4; i76++) {
                int i77 = i6 + i76;
                fArr2[i77] = fArr2[i77] + fArr2[i77 + i75];
            }
        }
        for (int i78 = 1; i78 < i13; i78++) {
            int i79 = i78 * i4;
            int i80 = (i2 - i78) * i4;
            for (int i81 = 1; i81 < i4; i81 += 2) {
                int i82 = i6 + i81;
                int i83 = i5 + i81;
                int i84 = i83 + i79;
                int i85 = i83 + i80;
                float f11 = fArr[i84 - 1];
                float f12 = fArr[i84];
                float f13 = fArr[i85 - 1];
                float f14 = fArr[i85];
                int i86 = i82 + i79;
                int i87 = i82 + i80;
                fArr2[i86 - 1] = f11 - f14;
                fArr2[i87 - 1] = f11 + f14;
                fArr2[i86] = f12 + f13;
                fArr2[i87] = f12 - f13;
            }
        }
        iArr[0] = 1;
        if (i11 == 2) {
            return;
        }
        iArr[0] = 0;
        System.arraycopy(fArr2, i6, fArr, i5, i4);
        int i88 = i3 * i11;
        for (int i89 = 1; i89 < i2; i89++) {
            int i90 = i89 * i88;
            for (int i91 = 0; i91 < i3; i91++) {
                int i92 = i91 * i11;
                int i93 = i6 + i92 + i90;
                int i94 = i92 + i5 + i90;
                fArr[i94] = fArr2[i93];
                fArr[i94 + 1] = fArr2[i93 + 1];
            }
        }
        if (i9 <= i3) {
            int i95 = 0;
            for (int i96 = 1; i96 < i2; i96++) {
                int i97 = 2;
                i95 += 2;
                int i98 = i96 * i3 * i11;
                int i99 = 3;
                while (i99 < i11) {
                    int i100 = i95 + 2;
                    int i101 = i100 + i7;
                    int i102 = i101 - 1;
                    float[] fArr5 = floatFFT_1D.wtable;
                    float f15 = fArr5[i101 - i97];
                    float f16 = i8 * fArr5[i102];
                    int i103 = i5 + i99;
                    int i104 = i6 + i99;
                    for (int i105 = 0; i105 < i3; i105++) {
                        int i106 = (i105 * i11) + i98;
                        int i107 = i103 + i106;
                        int i108 = i104 + i106;
                        float f17 = fArr2[i108 - 1];
                        float f18 = fArr2[i108];
                        fArr[i107 - 1] = (f15 * f17) - (f16 * f18);
                        fArr[i107] = (f18 * f15) + (f17 * f16);
                    }
                    i99 += 2;
                    i95 = i100;
                    i97 = 2;
                }
            }
            return;
        }
        int i109 = 1;
        while (i109 < i2) {
            i73 += i11;
            int i110 = i109 * i3 * i11;
            int i111 = 0;
            while (i111 < i3) {
                int i112 = (i111 * i11) + i110;
                int i113 = i73;
                int i114 = 3;
                while (i114 < i11) {
                    int i115 = i113 + 2;
                    int i116 = i113 + 1 + i7;
                    float[] fArr6 = floatFFT_1D.wtable;
                    float f19 = fArr6[i116 - 1];
                    float f20 = i8 * fArr6[i116];
                    int i117 = i5 + i114 + i112;
                    int i118 = i6 + i114 + i112;
                    float f21 = fArr2[i118 - 1];
                    float f22 = fArr2[i118];
                    fArr[i117 - 1] = (f19 * f21) - (f20 * f22);
                    fArr[i117] = (f19 * f22) + (f20 * f21);
                    i114 += 2;
                    floatFFT_1D = this;
                    i11 = i;
                    i113 = i115;
                }
                i111++;
                floatFFT_1D = this;
                i11 = i;
            }
            i109++;
            floatFFT_1D = this;
            i11 = i;
        }
    }

    void passfg(int[] iArr, long j, long j2, long j3, long j4, FloatLargeArray floatLargeArray, long j5, FloatLargeArray floatLargeArray2, long j6, long j7, long j8) {
        long j9;
        long j10;
        long j11;
        long j12 = j / 2;
        long j13 = (j2 + 1) / 2;
        long j14 = j2 * j;
        if (j >= j3) {
            for (long j15 = 1; j15 < j13; j15++) {
                long j16 = j15 * j;
                long j17 = (j2 - j15) * j;
                for (long j18 = 0; j18 < j3; j18++) {
                    long j19 = j18 * j;
                    long j20 = j19 + (j16 * j3);
                    long j21 = j19 + (j17 * j3);
                    long j22 = j19 * j2;
                    long j23 = 0;
                    while (j23 < j) {
                        long j24 = j6 + j23;
                        long j25 = j5 + j23;
                        float f = floatLargeArray.getFloat(j25 + j16 + j22);
                        long j26 = j17;
                        float f2 = floatLargeArray.getFloat(j25 + j17 + j22);
                        floatLargeArray2.setFloat(j24 + j20, f + f2);
                        floatLargeArray2.setFloat(j24 + j21, f - f2);
                        j23++;
                        j12 = j12;
                        j17 = j26;
                    }
                }
            }
            j10 = j12;
            for (long j27 = 0; j27 < j3; j27++) {
                long j28 = j27 * j;
                long j29 = j28 * j2;
                long j30 = 0;
                while (j30 < j) {
                    floatLargeArray2.setFloat(j6 + j30 + j28, floatLargeArray.getFloat(j5 + j30 + j29));
                    j30++;
                    j14 = j14;
                    j28 = j28;
                }
            }
            j9 = j14;
            j11 = j13;
        } else {
            j9 = j14;
            j10 = j12;
            for (long j31 = 1; j31 < j13; j31++) {
                long j32 = j2 - j31;
                long j33 = j31 * j3 * j;
                long j34 = j32 * j3 * j;
                long j35 = j31 * j;
                long j36 = j32 * j;
                for (long j37 = 0; j37 < j; j37++) {
                    long j38 = 0;
                    while (j38 < j3) {
                        long j39 = j38 * j;
                        long j40 = j39 * j2;
                        long j41 = j5 + j37;
                        float f3 = floatLargeArray.getFloat(j41 + j35 + j40);
                        long j42 = j36;
                        float f4 = floatLargeArray.getFloat(j41 + j36 + j40);
                        long j43 = j6 + j37 + j39;
                        floatLargeArray2.setFloat(j43 + j33, f3 + f4);
                        floatLargeArray2.setFloat(j43 + j34, f3 - f4);
                        j38++;
                        j13 = j13;
                        j36 = j42;
                    }
                }
            }
            j11 = j13;
            for (long j44 = 0; j44 < j; j44++) {
                for (long j45 = 0; j45 < j3; j45++) {
                    long j46 = j45 * j;
                    floatLargeArray2.setFloat(j6 + j44 + j46, floatLargeArray.getFloat(j5 + j44 + (j46 * j2)));
                }
            }
        }
        long j47 = 2 - j;
        long j48 = (j2 - 1) * j4;
        long j49 = j47;
        long j50 = 1;
        long j51 = 0;
        while (j50 < j11) {
            long j52 = j49 + j;
            long j53 = j50 * j4;
            long j54 = (j2 - j50) * j4;
            long j55 = j52 + j7;
            long j56 = j47;
            float f5 = this.wtablel.getFloat(j55 - 2);
            float f6 = j8;
            long j57 = j50;
            float f7 = this.wtablel.getFloat(j55 - 1) * f6;
            long j58 = 0;
            while (j58 < j4) {
                long j59 = j5 + j58;
                float f8 = f6;
                long j60 = j6 + j58;
                floatLargeArray.setFloat(j59 + j53, floatLargeArray2.getFloat(j60) + (floatLargeArray2.getFloat(j60 + j4) * f5));
                floatLargeArray.setFloat(j59 + j54, floatLargeArray2.getFloat(j60 + j48) * f7);
                j58++;
                f6 = f8;
                j51 = j51;
            }
            float f9 = f6;
            j51 += j;
            long j61 = j52;
            long j62 = 2;
            while (j62 < j11) {
                long j63 = j2 - j62;
                j61 += j51;
                if (j61 > j9) {
                    j61 -= j9;
                }
                long j64 = j61 + j7;
                long j65 = j48;
                float f10 = this.wtablel.getFloat(j64 - 2);
                long j66 = j51;
                float f11 = this.wtablel.getFloat(j64 - 1) * f9;
                long j67 = j62 * j4;
                long j68 = j63 * j4;
                long j69 = 0;
                while (j69 < j4) {
                    long j70 = j5 + j69;
                    long j71 = j6 + j69;
                    long j72 = j70 + j53;
                    floatLargeArray.setFloat(j72, floatLargeArray.getFloat(j72) + (floatLargeArray2.getFloat(j71 + j67) * f10));
                    long j73 = j70 + j54;
                    floatLargeArray.setFloat(j73, floatLargeArray.getFloat(j73) + (floatLargeArray2.getFloat(j71 + j68) * f11));
                    j69++;
                    j67 = j67;
                    f9 = f9;
                    j61 = j61;
                }
                j62++;
                j51 = j66;
                j48 = j65;
            }
            j50 = j57 + 1;
            j49 = j52;
            j47 = j56;
        }
        long j74 = j47;
        for (long j75 = 1; j75 < j11; j75++) {
            long j76 = j75 * j4;
            for (long j77 = 0; j77 < j4; j77++) {
                long j78 = j6 + j77;
                floatLargeArray2.setFloat(j78, floatLargeArray2.getFloat(j78) + floatLargeArray2.getFloat(j78 + j76));
            }
        }
        long j79 = 1;
        while (j79 < j11) {
            long j80 = j79 * j4;
            long j81 = (j2 - j79) * j4;
            long j82 = 1;
            while (j82 < j4) {
                long j83 = j6 + j82;
                long j84 = j5 + j82;
                long j85 = j79;
                long j86 = j84 + j80;
                long j87 = j84 + j81;
                long j88 = j82;
                float f12 = floatLargeArray.getFloat(j86 - 1);
                float f13 = floatLargeArray.getFloat(j86);
                float f14 = floatLargeArray.getFloat(j87 - 1);
                float f15 = floatLargeArray.getFloat(j87);
                long j89 = j83 + j80;
                long j90 = j83 + j81;
                floatLargeArray2.setFloat(j89 - 1, f12 - f15);
                floatLargeArray2.setFloat(j90 - 1, f12 + f15);
                floatLargeArray2.setFloat(j89, f13 + f14);
                floatLargeArray2.setFloat(j90, f13 - f14);
                j82 = j88 + 2;
                j79 = j85;
                j81 = j81;
            }
            j79++;
        }
        iArr[0] = 1;
        if (j == 2) {
            return;
        }
        iArr[0] = 0;
        LargeArrayUtils.arraycopy(floatLargeArray2, j6, floatLargeArray, j5, j4);
        long j91 = j3 * j;
        for (long j92 = 1; j92 < j2; j92++) {
            long j93 = j92 * j91;
            for (long j94 = 0; j94 < j3; j94++) {
                long j95 = j94 * j;
                long j96 = j6 + j95 + j93;
                long j97 = j5 + j95 + j93;
                floatLargeArray.setFloat(j97, floatLargeArray2.getFloat(j96));
                floatLargeArray.setFloat(j97 + 1, floatLargeArray2.getFloat(j96 + 1));
            }
        }
        if (j10 > j3) {
            long j98 = 1;
            long j99 = j74;
            while (j98 < j2) {
                j99 += j;
                long j100 = j98 * j3 * j;
                long j101 = 0;
                while (j101 < j3) {
                    long j102 = (j101 * j) + j100;
                    long j103 = j99;
                    long j104 = 3;
                    while (j104 < j) {
                        long j105 = j100;
                        long j106 = j103 + 1 + j7;
                        long j107 = j99;
                        float f16 = this.wtablel.getFloat(j106 - 1);
                        long j108 = j98;
                        float f17 = j8 * this.wtablel.getFloat(j106);
                        long j109 = j5 + j104 + j102;
                        long j110 = j6 + j104 + j102;
                        long j111 = j102;
                        float f18 = floatLargeArray2.getFloat(j110 - 1);
                        float f19 = floatLargeArray2.getFloat(j110);
                        floatLargeArray.setFloat(j109 - 1, (f16 * f18) - (f17 * f19));
                        floatLargeArray.setFloat(j109, (f16 * f19) + (f17 * f18));
                        j104 += 2;
                        j100 = j105;
                        j103 += 2;
                        j99 = j107;
                        j98 = j108;
                        j102 = j111;
                    }
                    j101++;
                    j98 = j98;
                }
                j98++;
            }
            return;
        }
        long j112 = 1;
        long j113 = 0;
        while (j112 < j2) {
            long j114 = 2;
            j113 += 2;
            long j115 = j112 * j3 * j;
            long j116 = 3;
            while (j116 < j) {
                long j117 = j113 + j114;
                long j118 = j117 + j7;
                long j119 = j112;
                float f20 = this.wtablel.getFloat(j118 - j114);
                float f21 = j8 * this.wtablel.getFloat(j118 - 1);
                long j120 = j5 + j116;
                long j121 = j6 + j116;
                long j122 = 0;
                while (j122 < j3) {
                    long j123 = (j122 * j) + j115;
                    long j124 = j115;
                    long j125 = j120 + j123;
                    long j126 = j120;
                    long j127 = j121 + j123;
                    long j128 = j121;
                    float f22 = floatLargeArray2.getFloat(j127 - 1);
                    float f23 = floatLargeArray2.getFloat(j127);
                    floatLargeArray.setFloat(j125 - 1, (f20 * f22) - (f21 * f23));
                    floatLargeArray.setFloat(j125, (f23 * f20) + (f22 * f21));
                    j122++;
                    j121 = j128;
                    j115 = j124;
                    j120 = j126;
                }
                j116 += 2;
                j114 = 2;
                j113 = j117;
                j112 = j119;
            }
            j112++;
        }
    }
}
