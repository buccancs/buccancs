// Summary for: /mnt/c/dev/buccancs/external/ShimmerCapturePure/sources/org/jtransforms/dht/FloatDHT_1D.java
// Size: 8608 bytes
// Modified: 2025-10-21 16:32:08.501661000 +0100

package org.jtransforms.dht;

import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.jtransforms.fft.FloatFFT_1D;
import org.jtransforms.utils.CommonUtils;
import pl.edu.icm.jlargearrays.ConcurrencyUtils;
import pl.edu.icm.jlargearrays.FloatLargeArray;
import pl.edu.icm.jlargearrays.LargeArray;
import pl.edu.icm.jlargearrays.LargeArrayUtils;

/* loaded from: classes2.dex */
public class FloatDHT_1D {
    private final FloatFFT_1D fft;
    private final int n;
    private final long nl;
    private final boolean useLargeArrays;

    public FloatDHT_1D(long j) {
        this.n = (int) j;
        this.nl = j;
        this.useLargeArrays = CommonUtils.isUseLargeArrays() || j > ((long) LargeArray.getMaxSizeOf32bitArray());
        this.fft = new FloatFFT_1D(j);
    }

    public void forward(float[] fArr) {
        forward(fArr, 0);
    }

    public void forward(FloatLargeArray floatLargeArray) {
        forward(floatLargeArray, 0L);
    }

    public void forward(final float[] fArr, final int i) {
        if (this.n == 1) {
            return;
        }
        if (this.useLargeArrays) {
            forward(new FloatLargeArray(fArr), i);
            return;
        }
        this.fft.realForward(fArr, i);
        int i2 = this.n;
        final float[] fArr2 = new float[i2];
        System.arraycopy(fArr, i, fArr2, 0, i2);
        int i3 = this.n / 2;
        if (ConcurrencyUtils.getNumberOfThreads() <= 1 || i3 <= CommonUtils.getThreadsBeginN_1D_FFT_2Threads()) {
            for (int i4 = 1; i4 < i3; i4++) {
                int i5 = i4 * 2;
                int i6 = i5 + 1;
                fArr[i + i4] = fArr2[i5] - fArr2[i6];
                fArr[(this.n + i) - i4] = fArr2[i5] + fArr2[i6];
            }
        } else {
            int i7 = i3 / 2;
            Future[] futureArr = new Future[2];
            int i8 = 0;
            while (i8 < 2) {
                final int i9 = (i8 * i7) + 1;
                final int i10 = i8 == 1 ? i3 : i9 + i7;
                int i11 = i8;
                Future[] futureArr2 = futureArr;
                futureArr2[i11] = ConcurrencyUtils.submit(new Runnable() { // from class: org.jtransforms.dht.FloatDHT_1D.1
                    @Override // java.lang.Runnable
                    public void run() {
                        for (int i12 = i9; i12 < i10; i12++) {
                            int i13 = i12 * 2;
                            int i14 = i13 + 1;
                            float[] fArr3 = fArr;
                            int i15 = i;
                            float[] fArr4 = fArr2;
                            fArr3[i15 + i12] = fArr4[i13] - fArr4[i14];
                            int i16 = (i15 + FloatDHT_1D.this.n) - i12;
                            float[] fArr5 = fArr2;
                            fArr3[i16] = fArr5[i13] + fArr5[i14];
                        }
                    }
                });
                i8 = i11 + 1;
                futureArr = futureArr2;
            }
            try {
                ConcurrencyUtils.waitForCompletion(futureArr);
            } catch (InterruptedException e) {
                Logger.getLogger(FloatDHT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e);
            } catch (ExecutionException e2) {
                Logger.getLogger(FloatDHT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e2);
            }
        }
        int i12 = this.n;
        if (i12 % 2 == 0) {
            fArr[i + i3] = fArr2[1];
            return;
        }
        int i13 = i + i3;
        fArr[i13] = fArr2[i12 - 1] - fArr2[1];
        fArr[i13 + 1] = fArr2[i12 - 1] + fArr2[1];
    }

    public void forward(final FloatLargeArray floatLargeArray, final long j) {
        long j2;
        long j3 = 1;
        if (this.nl == 1) {
            return;
        }
        if (!this.useLargeArrays) {
            if (!floatLargeArray.isLarge() && !floatLargeArray.isConstant() && j < 2147483647L) {
                forward(floatLargeArray.getData(), (int) j);
                return;
            }
            throw new IllegalArgumentException("The data array is too big.");
        }
        this.fft.realForward(floatLargeArray, j);
        final FloatLargeArray floatLargeArray2 = new FloatLargeArray(this.nl, false);
        int i = 0;
        LargeArrayUtils.arraycopy(floatLargeArray, j, floatLargeArray2, 0L, this.nl);
        long j4 = this.nl / 2;
        int i2 = 1;
        if (ConcurrencyUtils.getNumberOfThreads() <= 1 || j4 <= CommonUtils.getThreadsBeginN_1D_FFT_2Threads()) {
            j2 = 1;
            long j5 = 1;
            while (j5 < j4) {
                long j6 = j5 * 2;
                long j7 = j6 + j2;
                floatLargeArray.setFloat(j + j5, floatLargeArray2.getFloat(j6) - floatLargeArray2.getFloat(j7));
                floatLargeArray.setFloat((this.nl + j) - j5, floatLargeArray2.getFloat(j6) + floatLargeArray2.getFloat(j7));
                j5++;
                j2 = 1;
            }
        } else {
            int i3 = 2;
            long j8 = j4 / 2;
            Future[] futureArr = new Future[2];
            while (i < i3) {
                final long j9 = (i * j8) + j3;
                Future[] futureArr2 = futureArr;
                final long j10 = i == i2 ? j4 : j9 + j8;
                futureArr2[i] = ConcurrencyUtils.submit(new Runnable() { // from class: org.jtransforms.dht.FloatDHT_1D.2
                    @Override // java.lang.Runnable
                    public void run() {
                        for (long j11 = j9; j11 < j10; j11++) {
                            long j12 = 2 * j11;
                            long j13 = j12 + 1;
                            floatLargeArray.setFloat(j + j11, floatLargeArray2.getFloat(j12) - floatLargeArray2.getFloat(j13));
                            floatLargeArray.setFloat((j + FloatDHT_1D.this.nl) - j11, floatLargeArray2.getFloat(j12) + floatLargeArray2.getFloat(j13));
                        }
                    }
                });
                i++;
                j3 = j3;
                futureArr = futureArr2;
                i3 = 2;
                i2 = 1;
            }
            j2 = j3;
            try {
                ConcurrencyUtils.waitForCompletion(futureArr);
            } catch (InterruptedException e) {
                Logger.getLogger(FloatDHT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e);
            } catch (ExecutionException e2) {
                Logger.getLogger(FloatDHT_1D.class.getName()).log(Level.SEVERE, (String) null, (Throwable) e2);
            }
        }
        long j11 = j2;
        long j12 = this.nl;
        if (j12 % 2 == 0) {
            floatLargeArray.setFloat(j + j4, floatLargeArray2.getFloat(j11));
            return;
        }
        long j13 = j + j4;
        floatLargeArray.setFloat(j13, floatLargeArray2.getFloat(j12 - j11) - floatLargeArray2.getFloat(j11));
        floatLargeArray.setFloat(j13 + j11, floatLargeArray2.getFloat(this.nl - j11) + floatLargeArray2.getFloat(j11));
    }

    public void inverse(float[] fArr, boolean z) {
        inverse(fArr, 0, z);
    }

    public void inverse(FloatLargeArray floatLargeArray, boolean z) {
        inverse(floatLargeArray, 0L, z);
    }

    public void inverse(float[] fArr, int i, boolean z) {
        if (this.n == 1) {
            return;
        }
        if (this.useLargeArrays) {
            inverse(new FloatLargeArray(fArr), i, z);
            return;
        }
        forward(fArr, i);
        if (z) {
            int i2 = this.n;
            CommonUtils.scale(i2, 1.0f / i2, fArr, i, false);
        }
    }

    public void inverse(FloatLargeArray floatLargeArray, long j, boolean z) {
        if (this.n == 1) {
            return;
        }
        if (!this.useLargeArrays) {
            if (!floatLargeArray.isLarge() && !floatLargeArray.isConstant() && j < 2147483647L) {
                inverse(floatLargeArray.getData(), (int) j, z);
                return;
            }
            throw new IllegalArgumentException("The data array is too big.");
        }
        forward(floatLargeArray, j);
        if (z) {
            int i = this.n;
            CommonUtils.scale(i, 1.0f / i, floatLargeArray, j, false);
        }
    }
}
