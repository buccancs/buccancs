// Summary for: /mnt/c/dev/buccancs/external/ShimmerCapturePure/sources/org/bouncycastle/crypto/engines/DSTU7624Engine.java
// Size: 66234 bytes
// Modified: 2025-10-21 16:32:05.167840800 +0100

package org.bouncycastle.crypto.engines;

import com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper;
import com.google.common.base.Ascii;
import com.shimmerresearch.driver.ShimmerObject;
import com.shimmerresearch.sensors.adxl371.SensorADXL371;
import com.shimmerresearch.sensors.lisxmdl.SensorLIS3MDL;
import com.shimmerresearch.sensors.lsm6dsv.SensorLSM6DSV;
import org.bouncycastle.crypto.BlockCipher;
import org.bouncycastle.crypto.DataLengthException;
import org.bouncycastle.crypto.OutputLengthException;
import org.bouncycastle.crypto.signers.PSSSigner;
import org.bouncycastle.util.Arrays;
import org.bouncycastle.util.Pack;

/* loaded from: classes5.dex */
public class DSTU7624Engine implements BlockCipher {
    private static final int ROUNDS_128 = 10;
    private static final int ROUNDS_256 = 14;
    private static final int ROUNDS_512 = 18;
    private static final byte[] S0 = {ShimmerObject.SET_TEST, 67, ShimmerObject.INTERNAL_EXP_POWER_ENABLE_RESPONSE, 6, ShimmerObject.BAUD_RATE_RESPONSE, ShimmerObject.GET_TRIAL_CONFIG_COMMAND, ShimmerObject.GET_BAUD_RATE_COMMAND, 89, ShimmerObject.STATUS_RESPONSE, -33, ShimmerObject.GET_CONFIGTIME_COMMAND, -107, 23, -16, -40, 9, ShimmerObject.SET_DERIVED_CHANNEL_BYTES, -13, Ascii.GS, -53, -55, 77, 44, SensorLIS3MDL.SET_ALT_MAG_CALIBRATION_COMMAND, ShimmerObject.SET_SHIMMERNAME_COMMAND, ShimmerObject.ROUTINE_COMMUNICATION, ShimmerObject.STOP_SDBT_COMMAND, -3, ShimmerObject.GET_DERIVED_CHANNEL_BYTES, 75, 69, 57, 62, -35, -93, SensorLSM6DSV.SET_ALT_ACCEL_RANGE_COMMAND, SensorLIS3MDL.GET_ALT_MAG_SAMPLING_RATE_COMMAND, -74, ShimmerObject.GET_CALIB_DUMP_COMMAND, 14, Ascii.US, ByteSourceJsonBootstrapper.UTF8_BOM_3, 21, -31, 73, -46, ShimmerObject.STOP_LOGGING_ONLY_COMMAND, -58, ShimmerObject.START_LOGGING_ONLY_COMMAND, ShimmerObject.GET_STATUS_COMMAND, -98, ShimmerObject.SET_EXG_REGS_COMMAND, -47, ShimmerObject.GET_EXG_REGS_COMMAND, -6, -18, -12, 25, -43, SensorADXL371.ALT_ACCEL_SAMPLING_RATE_RESPONSE, 88, -92, ByteSourceJsonBootstrapper.UTF8_BOM_2, ShimmerObject.GET_BT_FW_VERSION_STR_COMMAND, -36, -14, ShimmerObject.NSHIMMER_RESPONSE, 55, 66, -28, ShimmerObject.SHIMMERNAME_RESPONSE, ShimmerObject.GET_BLINK_LED, ShimmerObject.UPD_SDLOG_CFG_COMMAND, -52, SensorADXL371.GET_ALT_ACCEL_CALIBRATION_COMMAND, 74, ShimmerObject.SET_RWC_COMMAND, ShimmerObject.DERIVED_CHANNEL_BYTES_RESPONSE, 4, ShimmerObject.EMG_CALIBRATION_RESPONSE, ShimmerObject.GET_FW_VERSION_COMMAND, -25, -30, 90, ShimmerObject.TEST_CONNECTION_COMMAND, 22, 35, ShimmerObject.GET_ECG_CALIBRATION_COMMAND, -62, ShimmerObject.DAUGHTER_CARD_ID_RESPONSE, ShimmerObject.GET_DAUGHTER_CARD_ID_COMMAND, 15, PSSSigner.TRAILER_IMPLICIT, SensorADXL371.SET_ALT_ACCEL_CALIBRATION_COMMAND, 71, 65, ShimmerObject.SET_BUFFER_SIZE_COMMAND, 72, -4, -73, ShimmerObject.SET_BAUD_RATE_COMMAND, ShimmerObject.DIR_RESPONSE, -91, 83, ShimmerObject.CONFIGTIME_RESPONSE, -7, ShimmerObject.RESET_CALIBRATION_VALUE_COMMAND, -37, 56, ShimmerObject.GET_SHIMMERNAME_COMMAND, -61, Ascii.RS, 34, 51, ShimmerObject.GET_SHIMMER_VERSION_COMMAND, ShimmerObject.GET_EMG_CALIBRATION_COMMAND, ShimmerObject.GET_BUFFER_SIZE_COMMAND, -57, SensorLIS3MDL.SET_ALT_MAG_SAMPLING_RATE_COMMAND, 59, ShimmerObject.GET_INFOMEM_COMMAND, ShimmerObject.CENTER_RESPONSE, -70, -11, 20, ShimmerObject.BMP280_CALIBRATION_COEFFICIENTS_RESPONSE, 8, 85, ShimmerObject.UPD_CALIB_DUMP_COMMAND, 76, -2, ShimmerObject.GET_INTERNAL_EXP_POWER_ENABLE_COMMAND, 92, -38, 24, 70, -51, ShimmerObject.EXPID_RESPONSE, 33, SensorLIS3MDL.ALT_MAG_CALIBRATION_RESPONSE, ShimmerObject.GET_SHIMMER_VERSION_COMMAND_NEW, 27, ShimmerObject.GET_DIR_COMMAND, -1, -21, ShimmerObject.GET_NSHIMMER_COMMAND, 105, 58, -99, -41, -45, ShimmerObject.START_SDBT_COMMAND, 103, 64, -75, -34, 93, ShimmerObject.SET_BLINK_LED, ShimmerObject.GET_RWC_COMMAND, SensorLIS3MDL.GET_ALT_MAG_CALIBRATION_COMMAND, ShimmerObject.GET_CENTER_COMMAND, 17, 1, -27, 0, 104, ShimmerObject.SET_CALIB_DUMP_COMMAND, ShimmerObject.GET_BMP280_CALIBRATION_COEFFICIENTS_COMMAND, -59, 2, -90, ShimmerObject.TRIAL_CONFIG_RESPONSE, ShimmerObject.ALL_CALIBRATION_RESPONSE, 11, ShimmerObject.BT_FW_VERSION_STR_RESPONSE, ShimmerObject.SET_CENTER_COMMAND, SensorLIS3MDL.ALT_MAG_SAMPLING_RATE_RESPONSE, -66, -50, -67, SensorADXL371.GET_ALT_ACCEL_SAMPLING_RATE_COMMAND, -23, ShimmerObject.INSTREAM_CMD_RESPONSE, ShimmerObject.BLINK_LED_RESPONSE, 28, -20, -15, ShimmerObject.RSP_CALIB_DUMP_COMMAND, -108, SensorADXL371.ALT_ACCEL_CALIBRATION_RESPONSE, -10, ShimmerObject.SET_EMG_CALIBRATION_COMMAND, ShimmerObject.FW_VERSION_RESPONSE, ByteSourceJsonBootstrapper.UTF8_BOM_1, -24, ShimmerObject.SET_INFOMEM_COMMAND, ShimmerObject.BUFFER_SIZE_RESPONSE, 3, -44, 127, -5, 5, -63, ShimmerObject.SET_INTERNAL_EXP_POWER_ENABLE_COMMAND, ShimmerObject.RWC_RESPONSE, 32, 61, ShimmerObject.SET_NSHIMMER_COMMAND, -9, -22, 10, 13, ShimmerObject.GET_EXPID_COMMAND, -8, SensorLSM6DSV.ALT_ACCEL_RANGE_RESPONSE, 26, -60, 7, 87, -72, 60, ShimmerObject.EXG_REGS_RESPONSE, -29, -56, SensorADXL371.SET_ALT_ACCEL_SAMPLING_RATE_COMMAND, 82, 100, 16, -48, -39, 19, 12, 18, ShimmerObject.SET_ECG_CALIBRATION_COMMAND, SensorLSM6DSV.GET_ALT_ACCEL_RANGE_COMMAND, -71, -49, -42, ShimmerObject.SET_TRIAL_CONFIG_COMMAND, ShimmerObject.INFOMEM_RESPONSE, ShimmerObject.GET_MYID_COMMAND, 84, -64, -19, 78, 68, -89, ShimmerObject.ECG_CALIBRATION_RESPONSE, ShimmerObject.SET_CONFIGTIME_COMMAND, ShimmerObject.GET_SHIMMER_VERSION_RESPONSE, -26, -54, ShimmerObject.SET_EXPID_COMMAND, ShimmerObject.SET_CRC_COMMAND, 86, -128};
    private static final byte[] S1 = {-50, ByteSourceJsonBootstrapper.UTF8_BOM_2, -21, ShimmerObject.START_LOGGING_ONLY_COMMAND, -22, -53, 19, -63, -23, 58, -42, SensorLIS3MDL.SET_ALT_MAG_SAMPLING_RATE_COMMAND, -46, ShimmerObject.RWC_RESPONSE, 23, -8, 66, 21, 86, SensorLIS3MDL.GET_ALT_MAG_SAMPLING_RATE_COMMAND, ShimmerObject.DAUGHTER_CARD_ID_RESPONSE, 28, ShimmerObject.DIR_RESPONSE, 67, -59, 92, ShimmerObject.GET_BUFFER_SIZE_COMMAND, -70, -11, 87, 103, ShimmerObject.INFOMEM_RESPONSE, ShimmerObject.BLINK_LED_RESPONSE, -10, 100, 88, -98, -12, 34, SensorADXL371.ALT_ACCEL_CALIBRATION_RESPONSE, ShimmerObject.GET_TRIAL_CONFIG_COMMAND, 15, 2, SensorLIS3MDL.GET_ALT_MAG_CALIBRATION_COMMAND, -33, ShimmerObject.SET_DERIVED_CHANNEL_BYTES, ShimmerObject.SET_TRIAL_CONFIG_COMMAND, 77, ShimmerObject.SET_EXPID_COMMAND, ShimmerObject.SET_EMG_CALIBRATION_COMMAND, ShimmerObject.GET_FW_VERSION_COMMAND, -9, 8, 93, 68, 62, ShimmerObject.BMP280_CALIBRATION_COEFFICIENTS_RESPONSE, 20, -56, SensorADXL371.GET_ALT_ACCEL_SAMPLING_RATE_COMMAND, 84, 16, -40, PSSSigner.TRAILER_IMPLICIT, 26, ShimmerObject.BAUD_RATE_RESPONSE, 105, -13, -67, 51, SensorADXL371.GET_ALT_ACCEL_CALIBRATION_COMMAND, -6, -47, ShimmerObject.UPD_CALIB_DUMP_COMMAND, 104, 78, 22, -107, ShimmerObject.GET_RWC_COMMAND, -18, 76, ShimmerObject.GET_EXG_REGS_COMMAND, ShimmerObject.GET_INFOMEM_COMMAND, ShimmerObject.RESET_CALIBRATION_VALUE_COMMAND, -52, 60, 25, ShimmerObject.GET_BT_FW_VERSION_STR_COMMAND, ShimmerObject.GET_MYID_COMMAND, 73, ShimmerObject.GET_SHIMMERNAME_COMMAND, -39, ShimmerObject.GET_DERIVED_CHANNEL_BYTES, 55, ShimmerObject.GET_INTERNAL_EXP_POWER_ENABLE_COMMAND, -54, -25, ShimmerObject.GET_ECG_CALIBRATION_COMMAND, 72, -3, ShimmerObject.TEST_CONNECTION_COMMAND, 69, -4, 65, 18, 13, ShimmerObject.SET_SHIMMERNAME_COMMAND, -27, ShimmerObject.GET_DIR_COMMAND, ShimmerObject.SET_INFOMEM_COMMAND, -29, 32, ShimmerObject.SET_BLINK_LED, -36, -73, ShimmerObject.GET_BAUD_RATE_COMMAND, 74, -75, ShimmerObject.GET_SHIMMER_VERSION_COMMAND_NEW, ShimmerObject.STOP_SDBT_COMMAND, -44, ShimmerObject.EXG_REGS_RESPONSE, ShimmerObject.ALL_CALIBRATION_RESPONSE, 6, -92, -91, ShimmerObject.NSHIMMER_RESPONSE, ShimmerObject.INTERNAL_EXP_POWER_ENABLE_RESPONSE, ShimmerObject.ECG_CALIBRATION_RESPONSE, -38, -55, 0, ShimmerObject.GET_EXPID_COMMAND, ShimmerObject.BT_FW_VERSION_STR_RESPONSE, 85, ByteSourceJsonBootstrapper.UTF8_BOM_3, 17, -43, ShimmerObject.UPD_SDLOG_CFG_COMMAND, -49, 14, 10, 61, SensorLSM6DSV.GET_ALT_ACCEL_RANGE_COMMAND, ShimmerObject.EXPID_RESPONSE, ShimmerObject.STOP_LOGGING_ONLY_COMMAND, 27, -2, -60, 71, 9, ShimmerObject.CONFIGTIME_RESPONSE, 11, ShimmerObject.SET_RWC_COMMAND, -99, ShimmerObject.SET_BAUD_RATE_COMMAND, 7, -71, SensorLIS3MDL.ALT_MAG_CALIBRATION_RESPONSE, ShimmerObject.SET_CALIB_DUMP_COMMAND, 24, ShimmerObject.GET_BLINK_LED, ShimmerObject.STATUS_RESPONSE, 75, ByteSourceJsonBootstrapper.UTF8_BOM_1, 59, ShimmerObject.START_SDBT_COMMAND, ShimmerObject.GET_BMP280_CALIBRATION_COEFFICIENTS_COMMAND, -28, 64, -1, -61, SensorADXL371.SET_ALT_ACCEL_CALIBRATION_COMMAND, -26, ShimmerObject.GET_CENTER_COMMAND, -7, ShimmerObject.SET_CRC_COMMAND, 70, -128, Ascii.RS, 56, -31, -72, ShimmerObject.SET_TEST, ShimmerObject.ROUTINE_COMMUNICATION, 12, 35, ShimmerObject.SET_CENTER_COMMAND, Ascii.GS, ShimmerObject.GET_SHIMMER_VERSION_RESPONSE, ShimmerObject.GET_SHIMMER_VERSION_COMMAND, 5, -15, ShimmerObject.DERIVED_CHANNEL_BYTES_RESPONSE, -108, ShimmerObject.GET_EMG_CALIBRATION_COMMAND, ShimmerObject.GET_CALIB_DUMP_COMMAND, ShimmerObject.GET_NSHIMMER_COMMAND, -24, -93, SensorLSM6DSV.SET_ALT_ACCEL_RANGE_COMMAND, ShimmerObject.CENTER_RESPONSE, -45, ShimmerObject.SET_CONFIGTIME_COMMAND, -30, 82, -14, ShimmerObject.SET_NSHIMMER_COMMAND, SensorLSM6DSV.ALT_ACCEL_RANGE_RESPONSE, ShimmerObject.SHIMMERNAME_RESPONSE, ShimmerObject.FW_VERSION_RESPONSE, ShimmerObject.TRIAL_CONFIG_RESPONSE, 83, SensorLIS3MDL.ALT_MAG_SAMPLING_RATE_RESPONSE, ShimmerObject.SET_EXG_REGS_COMMAND, SensorLIS3MDL.SET_ALT_MAG_CALIBRATION_COMMAND, 57, ShimmerObject.BUFFER_SIZE_RESPONSE, -34, -51, Ascii.US, ShimmerObject.RSP_CALIB_DUMP_COMMAND, SensorADXL371.SET_ALT_ACCEL_SAMPLING_RATE_COMMAND, SensorADXL371.ALT_ACCEL_SAMPLING_RATE_RESPONSE, ShimmerObject.GET_STATUS_COMMAND, 44, -35, -48, ShimmerObject.GET_CONFIGTIME_COMMAND, -66, ShimmerObject.SET_INTERNAL_EXP_POWER_ENABLE_COMMAND, -90, -20, 4, -58, 3, ShimmerObject.SET_BUFFER_SIZE_COMMAND, -5, -37, 89, -74, -62, 1, -16, 90, -19, -89, ShimmerObject.GET_DAUGHTER_CARD_ID_COMMAND, 33, 127, ShimmerObject.INSTREAM_CMD_RESPONSE, ShimmerObject.EMG_CALIBRATION_RESPONSE, -57, -64, ShimmerObject.SET_ECG_CALIBRATION_COMMAND, -41};
    private static final byte[] S2 = {ShimmerObject.STOP_LOGGING_ONLY_COMMAND, -39, ShimmerObject.GET_CALIB_DUMP_COMMAND, -75, ShimmerObject.SET_CALIB_DUMP_COMMAND, 34, 69, -4, -70, ShimmerObject.SET_BAUD_RATE_COMMAND, -33, 2, ShimmerObject.BMP280_CALIBRATION_COEFFICIENTS_RESPONSE, -36, SensorLSM6DSV.GET_ALT_ACCEL_RANGE_COMMAND, 89, 74, 23, ShimmerObject.GET_ECG_CALIBRATION_COMMAND, -62, -108, -12, ByteSourceJsonBootstrapper.UTF8_BOM_2, -93, ShimmerObject.EXG_REGS_RESPONSE, -28, ShimmerObject.STATUS_RESPONSE, -44, -51, ShimmerObject.START_SDBT_COMMAND, 22, -31, 73, 60, -64, -40, 92, ShimmerObject.UPD_CALIB_DUMP_COMMAND, SensorADXL371.ALT_ACCEL_SAMPLING_RATE_RESPONSE, ShimmerObject.SET_CONFIGTIME_COMMAND, 83, ShimmerObject.GET_BT_FW_VERSION_STR_COMMAND, ShimmerObject.SHIMMERNAME_RESPONSE, -56, ShimmerObject.ALL_CALIBRATION_RESPONSE, ShimmerObject.ROUTINE_COMMUNICATION, -47, ShimmerObject.GET_STATUS_COMMAND, -90, 44, -60, -29, ShimmerObject.SET_CENTER_COMMAND, ShimmerObject.GET_CENTER_COMMAND, -73, SensorLIS3MDL.GET_ALT_MAG_SAMPLING_RATE_COMMAND, 9, 59, 14, 65, 76, -34, SensorLIS3MDL.SET_ALT_MAG_SAMPLING_RATE_COMMAND, ShimmerObject.RWC_RESPONSE, ShimmerObject.GET_SHIMMER_VERSION_RESPONSE, -91, -41, 3, 17, 0, -61, ShimmerObject.GET_FW_VERSION_COMMAND, ShimmerObject.START_LOGGING_ONLY_COMMAND, ByteSourceJsonBootstrapper.UTF8_BOM_1, 78, 18, -99, ShimmerObject.EXPID_RESPONSE, -53, ShimmerObject.BUFFER_SIZE_RESPONSE, 16, -43, SensorLSM6DSV.SET_ALT_ACCEL_RANGE_COMMAND, -98, 77, SensorADXL371.SET_ALT_ACCEL_CALIBRATION_COMMAND, 85, -58, -48, ShimmerObject.GET_SHIMMERNAME_COMMAND, 24, ShimmerObject.STOP_SDBT_COMMAND, -45, ShimmerObject.GET_BUFFER_SIZE_COMMAND, -26, 72, 86, ShimmerObject.GET_MYID_COMMAND, ShimmerObject.SET_RWC_COMMAND, ShimmerObject.CENTER_RESPONSE, -52, ShimmerObject.UPD_SDLOG_CFG_COMMAND, -71, -30, SensorADXL371.SET_ALT_ACCEL_SAMPLING_RATE_COMMAND, -72, ShimmerObject.FW_VERSION_RESPONSE, 21, -92, ShimmerObject.SET_EXPID_COMMAND, -38, 56, Ascii.RS, 11, 5, -42, 20, ShimmerObject.DERIVED_CHANNEL_BYTES_RESPONSE, ShimmerObject.GET_BAUD_RATE_COMMAND, ShimmerObject.GET_EXPID_COMMAND, ShimmerObject.GET_DAUGHTER_CARD_ID_COMMAND, -3, SensorLIS3MDL.GET_ALT_MAG_CALIBRATION_COMMAND, -27, ShimmerObject.GET_INTERNAL_EXP_POWER_ENABLE_COMMAND, SensorLIS3MDL.SET_ALT_MAG_CALIBRATION_COMMAND, ShimmerObject.SET_INTERNAL_EXP_POWER_ENABLE_COMMAND, 51, ShimmerObject.GET_CONFIGTIME_COMMAND, -55, -16, 93, ShimmerObject.SET_DERIVED_CHANNEL_BYTES, ShimmerObject.GET_SHIMMER_VERSION_COMMAND_NEW, ShimmerObject.DIR_RESPONSE, ShimmerObject.INFOMEM_RESPONSE, -57, -9, Ascii.GS, -23, -20, -19, -128, ShimmerObject.SET_ECG_CALIBRATION_COMMAND, ShimmerObject.EMG_CALIBRATION_RESPONSE, -49, ShimmerObject.RSP_CALIB_DUMP_COMMAND, ShimmerObject.SET_TEST, SensorLSM6DSV.ALT_ACCEL_RANGE_RESPONSE, 15, 55, ShimmerObject.GET_SHIMMER_VERSION_COMMAND, ShimmerObject.GET_EMG_CALIBRATION_COMMAND, ShimmerObject.SET_BLINK_LED, -107, -46, 62, ShimmerObject.RESET_CALIBRATION_VALUE_COMMAND, 64, ShimmerObject.NSHIMMER_RESPONSE, SensorLIS3MDL.ALT_MAG_SAMPLING_RATE_RESPONSE, 105, 87, Ascii.US, 7, 28, ShimmerObject.INSTREAM_CMD_RESPONSE, PSSSigner.TRAILER_IMPLICIT, 32, -21, -50, ShimmerObject.GET_INFOMEM_COMMAND, SensorADXL371.GET_ALT_ACCEL_CALIBRATION_COMMAND, -18, ShimmerObject.BLINK_LED_RESPONSE, ShimmerObject.BT_FW_VERSION_STR_RESPONSE, ShimmerObject.SET_TRIAL_CONFIG_COMMAND, -7, -54, 58, 26, -5, 13, -63, -2, -6, -14, ShimmerObject.GET_DERIVED_CHANNEL_BYTES, -67, ShimmerObject.TEST_CONNECTION_COMMAND, -35, 67, 82, -74, 8, -13, SensorADXL371.GET_ALT_ACCEL_SAMPLING_RATE_COMMAND, -66, 25, ShimmerObject.GET_DIR_COMMAND, ShimmerObject.GET_BLINK_LED, ShimmerObject.SET_EMG_CALIBRATION_COMMAND, SensorLIS3MDL.ALT_MAG_CALIBRATION_RESPONSE, -22, 75, 100, ShimmerObject.GET_NSHIMMER_COMMAND, ShimmerObject.SET_NSHIMMER_COMMAND, ShimmerObject.BAUD_RATE_RESPONSE, -11, ShimmerObject.SET_SHIMMERNAME_COMMAND, ByteSourceJsonBootstrapper.UTF8_BOM_3, 1, ShimmerObject.INTERNAL_EXP_POWER_ENABLE_RESPONSE, ShimmerObject.GET_TRIAL_CONFIG_COMMAND, ShimmerObject.GET_EXG_REGS_COMMAND, 27, 35, 61, 104, ShimmerObject.ECG_CALIBRATION_RESPONSE, ShimmerObject.DAUGHTER_CARD_ID_RESPONSE, -24, ShimmerObject.GET_RWC_COMMAND, -10, -1, 19, 88, -15, 71, 10, 127, -59, -89, -25, ShimmerObject.SET_EXG_REGS_COMMAND, 90, 6, 70, 68, 66, 4, ShimmerObject.GET_BMP280_CALIBRATION_COEFFICIENTS_COMMAND, -37, 57, ShimmerObject.CONFIGTIME_RESPONSE, 84, SensorADXL371.ALT_ACCEL_CALIBRATION_RESPONSE, ShimmerObject.SET_INFOMEM_COMMAND, ShimmerObject.SET_BUFFER_SIZE_COMMAND, 33, ShimmerObject.SET_CRC_COMMAND, -8, 12, ShimmerObject.TRIAL_CONFIG_RESPONSE, 103};
    private static final byte[] S3 = {104, ShimmerObject.INFOMEM_RESPONSE, -54, 77, ShimmerObject.SET_TRIAL_CONFIG_COMMAND, 75, 78, ShimmerObject.ECG_CALIBRATION_RESPONSE, -44, 82, ShimmerObject.SET_EMG_CALIBRATION_COMMAND, SensorLIS3MDL.ALT_MAG_SAMPLING_RATE_RESPONSE, 84, Ascii.RS, 25, Ascii.US, 34, 3, 70, 61, ShimmerObject.ALL_CALIBRATION_RESPONSE, 74, 83, ShimmerObject.NSHIMMER_RESPONSE, 19, ShimmerObject.INSTREAM_CMD_RESPONSE, -73, -43, ShimmerObject.GET_SHIMMER_VERSION_RESPONSE, ShimmerObject.SET_SHIMMERNAME_COMMAND, -11, -67, 88, ShimmerObject.FW_VERSION_RESPONSE, 13, 2, -19, SensorLSM6DSV.GET_ALT_ACCEL_RANGE_COMMAND, -98, 17, -14, 62, 85, ShimmerObject.SET_INTERNAL_EXP_POWER_ENABLE_COMMAND, -47, 22, 60, ShimmerObject.GET_DAUGHTER_CARD_ID_COMMAND, ShimmerObject.START_SDBT_COMMAND, 93, -13, 69, 64, -52, -24, -108, 86, 8, -50, 26, 58, -46, -31, -33, -75, 56, ShimmerObject.DERIVED_CHANNEL_BYTES_RESPONSE, 14, -27, -12, -7, ShimmerObject.CONFIGTIME_RESPONSE, -23, SensorLSM6DSV.SET_ALT_ACCEL_RANGE_COMMAND, -42, ShimmerObject.SET_CONFIGTIME_COMMAND, 35, -49, ShimmerObject.GET_BLINK_LED, ShimmerObject.RSP_CALIB_DUMP_COMMAND, ShimmerObject.BLINK_LED_RESPONSE, 20, SensorADXL371.GET_ALT_ACCEL_SAMPLING_RATE_COMMAND, -18, -56, 72, -45, ShimmerObject.SET_BLINK_LED, ShimmerObject.GET_BT_FW_VERSION_STR_COMMAND, ShimmerObject.START_LOGGING_ONLY_COMMAND, 65, SensorLIS3MDL.GET_ALT_MAG_CALIBRATION_COMMAND, 24, -60, 44, ShimmerObject.STATUS_RESPONSE, ShimmerObject.GET_STATUS_COMMAND, 68, 21, -3, 55, -66, ShimmerObject.INTERNAL_EXP_POWER_ENABLE_RESPONSE, SensorADXL371.ALT_ACCEL_CALIBRATION_RESPONSE, ShimmerObject.UPD_CALIB_DUMP_COMMAND, ShimmerObject.DIR_RESPONSE, -40, SensorADXL371.GET_ALT_ACCEL_CALIBRATION_COMMAND, ShimmerObject.GET_DIR_COMMAND, ShimmerObject.UPD_SDLOG_CFG_COMMAND, -6, ShimmerObject.GET_INTERNAL_EXP_POWER_ENABLE_COMMAND, -22, PSSSigner.TRAILER_IMPLICIT, ShimmerObject.EXG_REGS_RESPONSE, 12, ShimmerObject.GET_SHIMMER_VERSION_COMMAND, -90, ShimmerObject.SET_TEST, -20, 103, 32, -37, ShimmerObject.SET_EXPID_COMMAND, ShimmerObject.GET_EMG_CALIBRATION_COMMAND, -35, SensorADXL371.SET_ALT_ACCEL_SAMPLING_RATE_COMMAND, ShimmerObject.RESET_CALIBRATION_VALUE_COMMAND, ShimmerObject.SET_BUFFER_SIZE_COMMAND, ShimmerObject.GET_EXPID_COMMAND, 16, -15, ShimmerObject.GET_SHIMMERNAME_COMMAND, ShimmerObject.SET_RWC_COMMAND, ShimmerObject.GET_EXG_REGS_COMMAND, ShimmerObject.GET_BMP280_CALIBRATION_COEFFICIENTS_COMMAND, 5, ShimmerObject.GET_CALIB_DUMP_COMMAND, 67, ShimmerObject.CENTER_RESPONSE, 33, ByteSourceJsonBootstrapper.UTF8_BOM_3, ShimmerObject.EMG_CALIBRATION_RESPONSE, 9, -61, ShimmerObject.BMP280_CALIBRATION_COEFFICIENTS_RESPONSE, -74, -41, ShimmerObject.SET_ECG_CALIBRATION_COMMAND, -62, -21, -64, -92, ShimmerObject.SET_CRC_COMMAND, ShimmerObject.SET_INFOMEM_COMMAND, Ascii.GS, -5, -1, -63, SensorLIS3MDL.SET_ALT_MAG_SAMPLING_RATE_COMMAND, ShimmerObject.STOP_SDBT_COMMAND, ShimmerObject.GET_FW_VERSION_COMMAND, -8, ShimmerObject.DAUGHTER_CARD_ID_RESPONSE, -10, ShimmerObject.GET_TRIAL_CONFIG_COMMAND, 7, 4, 73, 51, -28, -39, -71, -48, 66, -57, ShimmerObject.GET_BAUD_RATE_COMMAND, ShimmerObject.RWC_RESPONSE, 0, ShimmerObject.GET_INFOMEM_COMMAND, ShimmerObject.GET_DERIVED_CHANNEL_BYTES, SensorLSM6DSV.ALT_ACCEL_RANGE_RESPONSE, 1, -59, -38, 71, ShimmerObject.GET_SHIMMER_VERSION_COMMAND_NEW, -51, 105, ShimmerObject.BT_FW_VERSION_STR_RESPONSE, -30, ShimmerObject.SHIMMERNAME_RESPONSE, -89, -58, ShimmerObject.STOP_LOGGING_ONLY_COMMAND, 15, 10, 6, -26, ShimmerObject.GET_ECG_CALIBRATION_COMMAND, ShimmerObject.TEST_CONNECTION_COMMAND, -93, 28, SensorLIS3MDL.SET_ALT_MAG_CALIBRATION_COMMAND, ShimmerObject.SET_BAUD_RATE_COMMAND, 18, ShimmerObject.GET_NSHIMMER_COMMAND, 57, -25, SensorLIS3MDL.ALT_MAG_CALIBRATION_RESPONSE, ShimmerObject.SET_NSHIMMER_COMMAND, -9, -2, -99, ShimmerObject.GET_CONFIGTIME_COMMAND, 92, ShimmerObject.GET_MYID_COMMAND, ShimmerObject.BUFFER_SIZE_RESPONSE, -34, SensorLIS3MDL.GET_ALT_MAG_SAMPLING_RATE_COMMAND, -91, -4, -128, ByteSourceJsonBootstrapper.UTF8_BOM_1, -53, ByteSourceJsonBootstrapper.UTF8_BOM_2, ShimmerObject.BAUD_RATE_RESPONSE, ShimmerObject.SET_CENTER_COMMAND, -70, 90, ShimmerObject.EXPID_RESPONSE, ShimmerObject.GET_CENTER_COMMAND, 11, -107, -29, SensorADXL371.ALT_ACCEL_SAMPLING_RATE_RESPONSE, ShimmerObject.TRIAL_CONFIG_RESPONSE, ShimmerObject.SET_CALIB_DUMP_COMMAND, 59, ShimmerObject.GET_BUFFER_SIZE_COMMAND, 100, ShimmerObject.SET_DERIVED_CHANNEL_BYTES, -36, -16, 89, SensorADXL371.SET_ALT_ACCEL_CALIBRATION_COMMAND, 76, 23, 127, ShimmerObject.GET_RWC_COMMAND, -72, -55, 87, 27, ShimmerObject.ROUTINE_COMMUNICATION, ShimmerObject.SET_EXG_REGS_COMMAND};
    private static final byte[] T0 = {-92, ShimmerObject.BT_FW_VERSION_STR_RESPONSE, SensorADXL371.SET_ALT_ACCEL_CALIBRATION_COMMAND, -59, 78, -55, 3, -39, ShimmerObject.GET_EXPID_COMMAND, 15, -46, SensorADXL371.ALT_ACCEL_SAMPLING_RATE_RESPONSE, -25, -45, ShimmerObject.EMG_CALIBRATION_RESPONSE, ShimmerObject.RESET_CALIBRATION_VALUE_COMMAND, -29, ShimmerObject.GET_BT_FW_VERSION_STR_COMMAND, -24, -26, ShimmerObject.SET_EXPID_COMMAND, ShimmerObject.ECG_CALIBRATION_RESPONSE, 85, 12, ShimmerObject.CONFIGTIME_RESPONSE, 57, -41, ShimmerObject.INFOMEM_RESPONSE, -72, 18, ShimmerObject.GET_DERIVED_CHANNEL_BYTES, ShimmerObject.GET_EMG_CALIBRATION_COMMAND, -51, ShimmerObject.INSTREAM_CMD_RESPONSE, ShimmerObject.START_SDBT_COMMAND, 86, ShimmerObject.GET_STATUS_COMMAND, -7, ByteSourceJsonBootstrapper.UTF8_BOM_3, SensorLSM6DSV.SET_ALT_ACCEL_RANGE_COMMAND, ShimmerObject.SET_TRIAL_CONFIG_COMMAND, -23, -9, 87, 22, SensorADXL371.SET_ALT_ACCEL_SAMPLING_RATE_COMMAND, SensorLSM6DSV.ALT_ACCEL_RANGE_RESPONSE, -64, -99, -73, 71, ShimmerObject.STATUS_RESPONSE, ShimmerObject.GET_INTERNAL_EXP_POWER_ENABLE_COMMAND, -60, ShimmerObject.TRIAL_CONFIG_RESPONSE, 67, ShimmerObject.GET_BAUD_RATE_COMMAND, Ascii.US, ShimmerObject.STOP_LOGGING_ONLY_COMMAND, ShimmerObject.CENTER_RESPONSE, -36, -50, 32, ShimmerObject.SET_INFOMEM_COMMAND, ShimmerObject.RSP_CALIB_DUMP_COMMAND, ShimmerObject.INTERNAL_EXP_POWER_ENABLE_RESPONSE, 68, 1, -11, Ascii.RS, ShimmerObject.GET_CONFIGTIME_COMMAND, ShimmerObject.SET_INTERNAL_EXP_POWER_ENABLE_COMMAND, ShimmerObject.SET_EXG_REGS_COMMAND, 44, 75, Ascii.GS, ShimmerObject.GET_MYID_COMMAND, 21, -12, 35, -42, -22, -31, 103, -15, 127, -2, -38, 60, 7, 83, ShimmerObject.SET_BAUD_RATE_COMMAND, ShimmerObject.GET_NSHIMMER_COMMAND, ShimmerObject.UPD_SDLOG_CFG_COMMAND, -53, 2, ShimmerObject.NSHIMMER_RESPONSE, 51, -35, ShimmerObject.BUFFER_SIZE_RESPONSE, -30, 89, 90, ShimmerObject.SET_CALIB_DUMP_COMMAND, -91, ShimmerObject.START_LOGGING_ONLY_COMMAND, 100, 4, 6, 16, 77, 28, ShimmerObject.STOP_SDBT_COMMAND, 8, ShimmerObject.BLINK_LED_RESPONSE, -18, SensorADXL371.GET_ALT_ACCEL_CALIBRATION_COMMAND, 5, SensorLIS3MDL.SET_ALT_MAG_CALIBRATION_COMMAND, ShimmerObject.SET_SHIMMERNAME_COMMAND, ShimmerObject.GET_BMP280_CALIBRATION_COEFFICIENTS_COMMAND, 24, 70, ShimmerObject.SET_DERIVED_CHANNEL_BYTES, -4, ShimmerObject.GET_DIR_COMMAND, -44, -57, -1, -16, -49, 66, ShimmerObject.GET_RWC_COMMAND, -8, 104, 10, ShimmerObject.DAUGHTER_CARD_ID_RESPONSE, ShimmerObject.GET_INFOMEM_COMMAND, -74, -3, -61, ByteSourceJsonBootstrapper.UTF8_BOM_1, ShimmerObject.GET_CENTER_COMMAND, 76, -52, -98, ShimmerObject.SET_BLINK_LED, ShimmerObject.GET_FW_VERSION_COMMAND, PSSSigner.TRAILER_IMPLICIT, 11, 84, 26, -90, ByteSourceJsonBootstrapper.UTF8_BOM_2, ShimmerObject.SET_EMG_CALIBRATION_COMMAND, -128, 72, -108, ShimmerObject.GET_BLINK_LED, ShimmerObject.EXPID_RESPONSE, -89, ShimmerObject.GET_SHIMMER_VERSION_COMMAND_NEW, SensorADXL371.GET_ALT_ACCEL_SAMPLING_RATE_COMMAND, 34, 61, ShimmerObject.GET_DAUGHTER_CARD_ID_COMMAND, SensorADXL371.ALT_ACCEL_CALIBRATION_RESPONSE, -10, 0, 93, -67, 74, ShimmerObject.ROUTINE_COMMUNICATION, 59, SensorLIS3MDL.GET_ALT_MAG_SAMPLING_RATE_COMMAND, 23, ShimmerObject.SET_CRC_COMMAND, ShimmerObject.BMP280_CALIBRATION_COEFFICIENTS_RESPONSE, ShimmerObject.SET_CENTER_COMMAND, SensorLIS3MDL.ALT_MAG_CALIBRATION_RESPONSE, ShimmerObject.GET_SHIMMER_VERSION_COMMAND, ShimmerObject.GET_CALIB_DUMP_COMMAND, ShimmerObject.GET_SHIMMER_VERSION_RESPONSE, ShimmerObject.GET_EXG_REGS_COMMAND, -37, -21, ShimmerObject.SHIMMERNAME_RESPONSE, 62, 92, SensorLIS3MDL.ALT_MAG_SAMPLING_RATE_RESPONSE, SensorLIS3MDL.GET_ALT_MAG_CALIBRATION_COMMAND, ShimmerObject.SET_ECG_CALIBRATION_COMMAND, -14, -54, 88, ShimmerObject.DERIVED_CHANNEL_BYTES_RESPONSE, -40, ShimmerObject.SET_TEST, ShimmerObject.FW_VERSION_RESPONSE, ShimmerObject.GET_TRIAL_CONFIG_COMMAND, -33, 20, -5, 19, 73, ShimmerObject.DIR_RESPONSE, SensorLIS3MDL.SET_ALT_MAG_SAMPLING_RATE_COMMAND, -20, -28, ShimmerObject.SET_BUFFER_SIZE_COMMAND, ShimmerObject.ALL_CALIBRATION_RESPONSE, ShimmerObject.TEST_CONNECTION_COMMAND, -58, 58, -19, -107, 14, -27, ShimmerObject.SET_CONFIGTIME_COMMAND, ShimmerObject.BAUD_RATE_RESPONSE, 64, 33, ShimmerObject.UPD_CALIB_DUMP_COMMAND, 9, 25, ShimmerObject.GET_ECG_CALIBRATION_COMMAND, 82, -34, 69, -93, -6, SensorLSM6DSV.GET_ALT_ACCEL_RANGE_COMMAND, -62, -75, -47, ShimmerObject.RWC_RESPONSE, -71, -13, 55, -63, 13, -70, 65, 17, 56, ShimmerObject.GET_SHIMMERNAME_COMMAND, -66, -48, -43, 105, ShimmerObject.GET_BUFFER_SIZE_COMMAND, -56, ShimmerObject.EXG_REGS_RESPONSE, 27, ShimmerObject.SET_NSHIMMER_COMMAND, ShimmerObject.SET_RWC_COMMAND};
    private static final byte[] T1 = {ShimmerObject.NSHIMMER_RESPONSE, -14, ShimmerObject.ECG_CALIBRATION_RESPONSE, -21, -23, ByteSourceJsonBootstrapper.UTF8_BOM_3, ShimmerObject.GET_SHIMMERNAME_COMMAND, ShimmerObject.UPD_SDLOG_CFG_COMMAND, ShimmerObject.SET_BUFFER_SIZE_COMMAND, ShimmerObject.TEST_CONNECTION_COMMAND, ShimmerObject.INFOMEM_RESPONSE, ShimmerObject.SET_CALIB_DUMP_COMMAND, -71, 105, ShimmerObject.SET_INFOMEM_COMMAND, ShimmerObject.SET_ECG_CALIBRATION_COMMAND, 61, ShimmerObject.DIR_RESPONSE, 104, 6, 57, 17, 76, 14, ShimmerObject.GET_BMP280_CALIBRATION_COEFFICIENTS_COMMAND, 86, 64, ShimmerObject.START_LOGGING_ONLY_COMMAND, 21, PSSSigner.TRAILER_IMPLICIT, SensorLIS3MDL.ALT_MAG_SAMPLING_RATE_RESPONSE, -36, ShimmerObject.GET_DERIVED_CHANNEL_BYTES, -8, ShimmerObject.SET_EMG_CALIBRATION_COMMAND, -70, -66, -67, ShimmerObject.BLINK_LED_RESPONSE, -5, -61, -2, -128, ShimmerObject.SET_EXG_REGS_COMMAND, -31, ShimmerObject.SHIMMERNAME_RESPONSE, ShimmerObject.GET_BLINK_LED, -46, ShimmerObject.START_SDBT_COMMAND, 32, ShimmerObject.GET_BT_FW_VERSION_STR_COMMAND, 69, -20, -39, 26, 93, SensorLIS3MDL.GET_ALT_MAG_SAMPLING_RATE_COMMAND, -40, 9, -91, 85, ShimmerObject.GET_INFOMEM_COMMAND, 55, ShimmerObject.SET_CENTER_COMMAND, SensorADXL371.SET_ALT_ACCEL_CALIBRATION_COMMAND, 103, 16, 23, ShimmerObject.GET_BUFFER_SIZE_COMMAND, ShimmerObject.DAUGHTER_CARD_ID_RESPONSE, SensorLIS3MDL.GET_ALT_MAG_CALIBRATION_COMMAND, -107, ShimmerObject.EXG_REGS_RESPONSE, 89, ShimmerObject.TRIAL_CONFIG_RESPONSE, -93, SensorLSM6DSV.ALT_ACCEL_RANGE_RESPONSE, ShimmerObject.FW_VERSION_RESPONSE, 75, -56, -48, ShimmerObject.SET_RWC_COMMAND, -51, -44, 60, ShimmerObject.CONFIGTIME_RESPONSE, 18, Ascii.GS, 35, ByteSourceJsonBootstrapper.UTF8_BOM_1, -12, 83, 25, ShimmerObject.BUFFER_SIZE_RESPONSE, -26, 127, ShimmerObject.SET_INTERNAL_EXP_POWER_ENABLE_COMMAND, -42, ShimmerObject.SET_SHIMMERNAME_COMMAND, SensorLSM6DSV.GET_ALT_ACCEL_RANGE_COMMAND, 34, 20, -9, Ascii.RS, 74, 66, ShimmerObject.UPD_CALIB_DUMP_COMMAND, 65, ShimmerObject.SET_TRIAL_CONFIG_COMMAND, ShimmerObject.ALL_CALIBRATION_RESPONSE, -63, 92, -90, ShimmerObject.BT_FW_VERSION_STR_RESPONSE, ShimmerObject.ROUTINE_COMMUNICATION, ShimmerObject.GET_FW_VERSION_COMMAND, -45, ShimmerObject.GET_EMG_CALIBRATION_COMMAND, ByteSourceJsonBootstrapper.UTF8_BOM_2, -55, SensorADXL371.GET_ALT_ACCEL_SAMPLING_RATE_COMMAND, ShimmerObject.SET_BAUD_RATE_COMMAND, -47, 90, ShimmerObject.SET_BLINK_LED, ShimmerObject.RWC_RESPONSE, ShimmerObject.GET_NSHIMMER_COMMAND, -7, SensorLIS3MDL.SET_ALT_MAG_SAMPLING_RATE_COMMAND, 88, -49, ShimmerObject.GET_EXPID_COMMAND, -59, -53, ShimmerObject.STOP_SDBT_COMMAND, -28, 22, ShimmerObject.GET_BAUD_RATE_COMMAND, -6, SensorLIS3MDL.ALT_MAG_CALIBRATION_RESPONSE, ShimmerObject.SET_DERIVED_CHANNEL_BYTES, Ascii.US, 82, ShimmerObject.RSP_CALIB_DUMP_COMMAND, 13, 78, 3, ShimmerObject.GET_RWC_COMMAND, -62, 77, 100, ShimmerObject.CENTER_RESPONSE, ShimmerObject.BMP280_CALIBRATION_COEFFICIENTS_RESPONSE, -35, -60, 73, ShimmerObject.INSTREAM_CMD_RESPONSE, ShimmerObject.GET_CALIB_DUMP_COMMAND, ShimmerObject.GET_SHIMMER_VERSION_COMMAND, 56, -89, 87, ShimmerObject.SET_CONFIGTIME_COMMAND, -57, ShimmerObject.SET_EXPID_COMMAND, ShimmerObject.EXPID_RESPONSE, -25, -10, -73, SensorADXL371.SET_ALT_ACCEL_SAMPLING_RATE_COMMAND, ShimmerObject.EMG_CALIBRATION_RESPONSE, 70, -34, -33, 59, -41, -98, ShimmerObject.GET_ECG_CALIBRATION_COMMAND, 11, -43, 19, ShimmerObject.GET_TRIAL_CONFIG_COMMAND, -16, ShimmerObject.GET_STATUS_COMMAND, -74, -99, 27, 1, ShimmerObject.GET_SHIMMER_VERSION_COMMAND_NEW, 68, -27, ShimmerObject.GET_CONFIGTIME_COMMAND, -3, 7, -15, SensorADXL371.GET_ALT_ACCEL_CALIBRATION_COMMAND, -108, 24, -22, -4, 58, ShimmerObject.SET_NSHIMMER_COMMAND, ShimmerObject.INTERNAL_EXP_POWER_ENABLE_RESPONSE, 5, 84, -37, 0, ShimmerObject.SET_CRC_COMMAND, -29, 72, 12, -54, ShimmerObject.GET_CENTER_COMMAND, ShimmerObject.GET_DIR_COMMAND, 10, -1, 62, ShimmerObject.RESET_CALIBRATION_VALUE_COMMAND, ShimmerObject.GET_MYID_COMMAND, -18, ShimmerObject.STATUS_RESPONSE, -30, -38, 44, -72, -75, -52, ShimmerObject.DERIVED_CHANNEL_BYTES_RESPONSE, ShimmerObject.SET_TEST, ShimmerObject.BAUD_RATE_RESPONSE, SensorADXL371.ALT_ACCEL_SAMPLING_RATE_RESPONSE, ShimmerObject.GET_INTERNAL_EXP_POWER_ENABLE_COMMAND, -58, 8, 4, 2, -24, -11, SensorLSM6DSV.SET_ALT_ACCEL_RANGE_COMMAND, -92, -13, -64, -50, 67, ShimmerObject.GET_SHIMMER_VERSION_RESPONSE, 28, 33, 51, 15, SensorLIS3MDL.SET_ALT_MAG_CALIBRATION_COMMAND, 71, -19, ShimmerObject.GET_DAUGHTER_CARD_ID_COMMAND, ShimmerObject.GET_EXG_REGS_COMMAND, ShimmerObject.STOP_LOGGING_ONLY_COMMAND, SensorADXL371.ALT_ACCEL_CALIBRATION_RESPONSE};
    private static final byte[] T2 = {69, -44, 11, 67, -15, ShimmerObject.GET_STATUS_COMMAND, -19, -92, -62, 56, -26, ShimmerObject.STATUS_RESPONSE, -3, -74, 58, -107, SensorLSM6DSV.ALT_ACCEL_RANGE_RESPONSE, 68, 75, -30, ShimmerObject.TRIAL_CONFIG_RESPONSE, ShimmerObject.BAUD_RATE_RESPONSE, Ascii.RS, 17, 90, -58, SensorLIS3MDL.GET_ALT_MAG_SAMPLING_RATE_COMMAND, -40, -91, ShimmerObject.INSTREAM_CMD_RESPONSE, ShimmerObject.START_SDBT_COMMAND, -93, ShimmerObject.SET_TEST, -6, 5, -39, ShimmerObject.STOP_SDBT_COMMAND, 64, -55, ShimmerObject.RWC_RESPONSE, ShimmerObject.SET_CALIB_DUMP_COMMAND, ShimmerObject.SET_RWC_COMMAND, -36, 18, ShimmerObject.BLINK_LED_RESPONSE, 44, 71, ShimmerObject.SET_BAUD_RATE_COMMAND, ShimmerObject.RSP_CALIB_DUMP_COMMAND, SensorADXL371.GET_ALT_ACCEL_SAMPLING_RATE_COMMAND, -56, 127, -7, SensorLSM6DSV.SET_ALT_ACCEL_RANGE_COMMAND, 93, ShimmerObject.TEST_CONNECTION_COMMAND, ShimmerObject.GET_DERIVED_CHANNEL_BYTES, -12, SensorLIS3MDL.ALT_MAG_SAMPLING_RATE_RESPONSE, 57, 33, -38, ShimmerObject.UPD_SDLOG_CFG_COMMAND, ShimmerObject.SET_CONFIGTIME_COMMAND, -98, 59, -16, ByteSourceJsonBootstrapper.UTF8_BOM_3, ByteSourceJsonBootstrapper.UTF8_BOM_1, 6, -18, -27, ShimmerObject.INTERNAL_EXP_POWER_ENABLE_RESPONSE, 32, 16, -52, 60, 84, 74, 82, -108, 14, -64, ShimmerObject.GET_EMG_CALIBRATION_COMMAND, -10, 86, ShimmerObject.GET_INTERNAL_EXP_POWER_ENABLE_COMMAND, ShimmerObject.BT_FW_VERSION_STR_RESPONSE, -29, 15, -20, -99, ShimmerObject.GET_SHIMMER_VERSION_COMMAND, ShimmerObject.NSHIMMER_RESPONSE, ShimmerObject.GET_EXPID_COMMAND, -43, ShimmerObject.SET_EXPID_COMMAND, -21, 24, -41, -51, -35, ShimmerObject.GET_CENTER_COMMAND, -1, -37, ShimmerObject.GET_BT_FW_VERSION_STR_COMMAND, 9, -48, ShimmerObject.SET_CENTER_COMMAND, ShimmerObject.GET_NSHIMMER_COMMAND, ShimmerObject.GET_TRIAL_CONFIG_COMMAND, ByteSourceJsonBootstrapper.UTF8_BOM_2, Ascii.GS, 26, ShimmerObject.FW_VERSION_RESPONSE, SensorLIS3MDL.ALT_MAG_CALIBRATION_RESPONSE, -2, -42, ShimmerObject.SET_BUFFER_SIZE_COMMAND, ShimmerObject.GET_EXG_REGS_COMMAND, ShimmerObject.BUFFER_SIZE_RESPONSE, -46, ShimmerObject.ECG_CALIBRATION_RESPONSE, 89, ShimmerObject.SET_DERIVED_CHANNEL_BYTES, 77, ShimmerObject.CENTER_RESPONSE, -25, ShimmerObject.GET_INFOMEM_COMMAND, ShimmerObject.SET_EXG_REGS_COMMAND, -49, ShimmerObject.BMP280_CALIBRATION_COEFFICIENTS_RESPONSE, -50, ShimmerObject.EMG_CALIBRATION_RESPONSE, -11, -128, ShimmerObject.CONFIGTIME_RESPONSE, -57, -90, -5, -8, ShimmerObject.GET_CONFIGTIME_COMMAND, SensorADXL371.GET_ALT_ACCEL_CALIBRATION_COMMAND, ShimmerObject.EXG_REGS_RESPONSE, ShimmerObject.GET_SHIMMER_VERSION_COMMAND_NEW, -33, 72, 0, 20, ShimmerObject.GET_CALIB_DUMP_COMMAND, -67, ShimmerObject.RESET_CALIBRATION_VALUE_COMMAND, 4, ShimmerObject.START_LOGGING_ONLY_COMMAND, 2, ShimmerObject.GET_SHIMMER_VERSION_RESPONSE, ShimmerObject.DAUGHTER_CARD_ID_RESPONSE, 76, 83, 12, -14, ShimmerObject.SET_ECG_CALIBRATION_COMMAND, SensorLIS3MDL.SET_ALT_MAG_CALIBRATION_COMMAND, 23, ShimmerObject.GET_BAUD_RATE_COMMAND, 65, ShimmerObject.SET_BLINK_LED, -23, ShimmerObject.STOP_LOGGING_ONLY_COMMAND, 85, -9, SensorADXL371.SET_ALT_ACCEL_SAMPLING_RATE_COMMAND, 104, ShimmerObject.SET_EMG_CALIBRATION_COMMAND, -60, ShimmerObject.EXPID_RESPONSE, -54, ShimmerObject.SHIMMERNAME_RESPONSE, 62, ShimmerObject.GET_BMP280_CALIBRATION_COEFFICIENTS_COMMAND, 55, 3, -63, ShimmerObject.GET_BUFFER_SIZE_COMMAND, 105, ShimmerObject.GET_DAUGHTER_CARD_ID_COMMAND, 8, 22, -89, PSSSigner.TRAILER_IMPLICIT, -59, -45, 34, -73, 19, 70, ShimmerObject.GET_BLINK_LED, -24, 87, ShimmerObject.DIR_RESPONSE, ShimmerObject.GET_ECG_CALIBRATION_COMMAND, ShimmerObject.GET_MYID_COMMAND, SensorLIS3MDL.SET_ALT_MAG_SAMPLING_RATE_COMMAND, 78, 100, 28, SensorADXL371.ALT_ACCEL_CALIBRATION_RESPONSE, ShimmerObject.GET_RWC_COMMAND, 88, ShimmerObject.GET_FW_VERSION_COMMAND, ShimmerObject.UPD_CALIB_DUMP_COMMAND, 92, 27, SensorLSM6DSV.GET_ALT_ACCEL_RANGE_COMMAND, ShimmerObject.SET_TRIAL_CONFIG_COMMAND, 66, 35, 1, ShimmerObject.DERIVED_CHANNEL_BYTES_RESPONSE, -13, 13, -66, 61, 10, ShimmerObject.ALL_CALIBRATION_RESPONSE, Ascii.US, 103, 51, 25, ShimmerObject.GET_SHIMMERNAME_COMMAND, ShimmerObject.SET_INTERNAL_EXP_POWER_ENABLE_COMMAND, -22, -34, ShimmerObject.SET_CRC_COMMAND, -53, SensorADXL371.SET_ALT_ACCEL_CALIBRATION_COMMAND, ShimmerObject.SET_INFOMEM_COMMAND, ShimmerObject.INFOMEM_RESPONSE, SensorADXL371.ALT_ACCEL_SAMPLING_RATE_RESPONSE, 73, ShimmerObject.SET_NSHIMMER_COMMAND, -28, -70, -61, 21, -47, ShimmerObject.ROUTINE_COMMUNICATION, ShimmerObject.GET_DIR_COMMAND, -4, SensorLIS3MDL.GET_ALT_MAG_CALIBRATION_COMMAND, -71, -75, 7, ShimmerObject.SET_SHIMMERNAME_COMMAND, -72, -31};
    private static final byte[] T3 = {SensorLIS3MDL.SET_ALT_MAG_SAMPLING_RATE_COMMAND, -74, 35, 17, -89, ShimmerObject.DIR_RESPONSE, -59, -90, 57, ShimmerObject.SET_RWC_COMMAND, -60, -24, ShimmerObject.SET_TRIAL_CONFIG_COMMAND, 34, 67, -61, ShimmerObject.SET_NSHIMMER_COMMAND, ShimmerObject.EMG_CALIBRATION_RESPONSE, -51, 24, SensorLSM6DSV.GET_ALT_ACCEL_RANGE_COMMAND, ShimmerObject.EXG_REGS_RESPONSE, ShimmerObject.ALL_CALIBRATION_RESPONSE, -9, 92, 14, 59, -3, -54, ShimmerObject.UPD_CALIB_DUMP_COMMAND, 13, 15, ShimmerObject.SET_SHIMMERNAME_COMMAND, ShimmerObject.SET_INFOMEM_COMMAND, 16, 76, ShimmerObject.TRIAL_CONFIG_RESPONSE, 28, 10, ShimmerObject.GET_INFOMEM_COMMAND, ShimmerObject.SET_EXPID_COMMAND, -108, 7, -57, ShimmerObject.SET_INTERNAL_EXP_POWER_ENABLE_COMMAND, 20, ShimmerObject.GET_BT_FW_VERSION_STR_COMMAND, 33, 87, SensorLSM6DSV.ALT_ACCEL_RANGE_RESPONSE, 78, SensorADXL371.SET_ALT_ACCEL_CALIBRATION_COMMAND, -128, -39, ByteSourceJsonBootstrapper.UTF8_BOM_1, 100, 65, -49, 60, -18, ShimmerObject.GET_FW_VERSION_COMMAND, 19, ShimmerObject.SET_ECG_CALIBRATION_COMMAND, -70, ShimmerObject.SET_BUFFER_SIZE_COMMAND, 90, SensorADXL371.GET_ALT_ACCEL_SAMPLING_RATE_COMMAND, ShimmerObject.INSTREAM_CMD_RESPONSE, ShimmerObject.SET_EXG_REGS_COMMAND, 51, 18, -71, 85, ShimmerObject.SET_TEST, 21, 5, -10, 3, 6, 73, -75, ShimmerObject.GET_SHIMMER_VERSION_RESPONSE, 9, 22, 12, ShimmerObject.ECG_CALIBRATION_RESPONSE, 56, -4, 32, -12, -27, 127, -41, ShimmerObject.BLINK_LED_RESPONSE, ShimmerObject.GET_ECG_CALIBRATION_COMMAND, ShimmerObject.GET_DAUGHTER_CARD_ID_COMMAND, ShimmerObject.GET_DERIVED_CHANNEL_BYTES, -1, ShimmerObject.GET_STATUS_COMMAND, ShimmerObject.CONFIGTIME_RESPONSE, -16, -93, ShimmerObject.FW_VERSION_RESPONSE, ShimmerObject.GET_CENTER_COMMAND, 0, PSSSigner.TRAILER_IMPLICIT, -52, -30, SensorLIS3MDL.ALT_MAG_CALIBRATION_RESPONSE, -15, 66, SensorLIS3MDL.GET_ALT_MAG_SAMPLING_RATE_COMMAND, ShimmerObject.SET_BLINK_LED, ShimmerObject.INTERNAL_EXP_POWER_ENABLE_RESPONSE, ShimmerObject.GET_INTERNAL_EXP_POWER_ENABLE_COMMAND, 4, -20, -91, -29, ShimmerObject.SET_CRC_COMMAND, -25, Ascii.GS, ByteSourceJsonBootstrapper.UTF8_BOM_3, ShimmerObject.GET_NSHIMMER_COMMAND, ShimmerObject.GET_SHIMMERNAME_COMMAND, -26, ShimmerObject.GET_MYID_COMMAND, -8, -34, -40, -46, 23, -50, 75, 71, -42, 105, ShimmerObject.GET_BAUD_RATE_COMMAND, 25, ShimmerObject.RSP_CALIB_DUMP_COMMAND, ShimmerObject.GET_CALIB_DUMP_COMMAND, 1, SensorLIS3MDL.ALT_MAG_SAMPLING_RATE_RESPONSE, ShimmerObject.SET_CONFIGTIME_COMMAND, SensorLIS3MDL.GET_ALT_MAG_CALIBRATION_COMMAND, -7, 89, -62, 55, -23, -56, ShimmerObject.GET_BMP280_CALIBRATION_COEFFICIENTS_COMMAND, -19, SensorLSM6DSV.SET_ALT_ACCEL_RANGE_COMMAND, ShimmerObject.GET_DIR_COMMAND, 104, ShimmerObject.SET_DERIVED_CHANNEL_BYTES, -43, ShimmerObject.SET_EMG_CALIBRATION_COMMAND, ShimmerObject.GET_RWC_COMMAND, ShimmerObject.GET_CONFIGTIME_COMMAND, 88, -67, -55, ShimmerObject.SET_CALIB_DUMP_COMMAND, -36, ShimmerObject.GET_TRIAL_CONFIG_COMMAND, -64, ShimmerObject.SET_CENTER_COMMAND, -11, 103, ShimmerObject.BAUD_RATE_RESPONSE, ShimmerObject.GET_EXPID_COMMAND, -21, 82, -53, -47, ShimmerObject.RESET_CALIBRATION_VALUE_COMMAND, ShimmerObject.BMP280_CALIBRATION_COEFFICIENTS_RESPONSE, 11, -37, 64, ShimmerObject.START_LOGGING_ONLY_COMMAND, 26, -6, SensorADXL371.SET_ALT_ACCEL_SAMPLING_RATE_COMMAND, -28, -31, ShimmerObject.STATUS_RESPONSE, Ascii.US, ShimmerObject.DAUGHTER_CARD_ID_RESPONSE, ShimmerObject.INFOMEM_RESPONSE, ShimmerObject.STOP_SDBT_COMMAND, -98, -107, ShimmerObject.RWC_RESPONSE, 93, -73, -63, SensorLIS3MDL.SET_ALT_MAG_CALIBRATION_COMMAND, 84, -5, 2, ShimmerObject.ROUTINE_COMMUNICATION, ShimmerObject.BUFFER_SIZE_RESPONSE, ByteSourceJsonBootstrapper.UTF8_BOM_2, 58, 77, SensorADXL371.ALT_ACCEL_SAMPLING_RATE_RESPONSE, 44, 61, 86, 8, 27, 74, ShimmerObject.STOP_LOGGING_ONLY_COMMAND, ShimmerObject.SET_BAUD_RATE_COMMAND, SensorADXL371.GET_ALT_ACCEL_CALIBRATION_COMMAND, -72, ShimmerObject.SHIMMERNAME_RESPONSE, -14, ShimmerObject.EXPID_RESPONSE, -38, ShimmerObject.GET_SHIMMER_VERSION_COMMAND_NEW, -2, 62, -66, -22, SensorADXL371.ALT_ACCEL_CALIBRATION_RESPONSE, 68, -58, -48, ShimmerObject.GET_BUFFER_SIZE_COMMAND, 72, ShimmerObject.START_SDBT_COMMAND, ShimmerObject.TEST_CONNECTION_COMMAND, ShimmerObject.CENTER_RESPONSE, ShimmerObject.GET_SHIMMER_VERSION_COMMAND, 83, -33, -13, ShimmerObject.NSHIMMER_RESPONSE, ShimmerObject.GET_EMG_CALIBRATION_COMMAND, ShimmerObject.GET_BLINK_LED, 69, Ascii.RS, -92, -45, ShimmerObject.BT_FW_VERSION_STR_RESPONSE, 70, ShimmerObject.DERIVED_CHANNEL_BYTES_RESPONSE, ShimmerObject.UPD_SDLOG_CFG_COMMAND, -35, ShimmerObject.GET_EXG_REGS_COMMAND, -44, -99};
    private boolean forEncryption;
    private long[] internalState;
    private long[][] roundKeys;
    private int roundsAmount;
    private int wordsInBlock;
    private int wordsInKey;
    private long[] workingKey;

    public DSTU7624Engine(int i) throws IllegalArgumentException {
        if (i != 128 && i != 256 && i != 512) {
            throw new IllegalArgumentException("unsupported block length: only 128/256/512 are allowed");
        }
        int i2 = i >>> 6;
        this.wordsInBlock = i2;
        this.internalState = new long[i2];
    }

    private void addRoundKey(int i) {
        long[] jArr = this.roundKeys[i];
        for (int i2 = 0; i2 < this.wordsInBlock; i2++) {
            long[] jArr2 = this.internalState;
            jArr2[i2] = jArr2[i2] + jArr[i2];
        }
    }

    private void decryptBlock_128(byte[] bArr, int i, byte[] bArr2, int i2) {
        long jLittleEndianToLong = Pack.littleEndianToLong(bArr, i);
        long jLittleEndianToLong2 = Pack.littleEndianToLong(bArr, i + 8);
        long[][] jArr = this.roundKeys;
        int i3 = this.roundsAmount;
        long[] jArr2 = jArr[i3];
        long j = jLittleEndianToLong - jArr2[0];
        long j2 = jLittleEndianToLong2 - jArr2[1];
        while (true) {
            long jMixColumnInv = mixColumnInv(j);
            long jMixColumnInv2 = mixColumnInv(j2);
            int i4 = (int) jMixColumnInv;
            int i5 = (int) (jMixColumnInv >>> 32);
            int i6 = (int) jMixColumnInv2;
            int i7 = (int) (jMixColumnInv2 >>> 32);
            byte[] bArr3 = T0;
            byte b = bArr3[i4 & 255];
            byte[] bArr4 = T1;
            byte b2 = bArr4[(i4 >>> 8) & 255];
            byte[] bArr5 = T2;
            byte b3 = bArr5[(i4 >>> 16) & 255];
            byte[] bArr6 = T3;
            int i8 = (bArr6[i4 >>> 24] << 24) | ((b3 & 255) << 16) | (b & 255) | ((b2 & 255) << 8);
            byte b4 = bArr3[i7 & 255];
            byte b5 = bArr4[(i7 >>> 8) & 255];
            byte b6 = bArr5[(i7 >>> 16) & 255];
            long j3 = (((bArr6[i7 >>> 24] << 24) | (((b4 & 255) | ((b5 & 255) << 8)) | ((b6 & 255) << 16))) << 32) | (i8 & 4294967295L);
            int i9 = (bArr6[i6 >>> 24] << 24) | (bArr3[i6 & 255] & 255) | ((bArr4[(i6 >>> 8) & 255] & 255) << 8) | ((bArr5[(i6 >>> 16) & 255] & 255) << 16);
            long j4 = (((bArr6[i5 >>> 24] << 24) | (((bArr3[i5 & 255] & 255) | ((bArr4[(i5 >>> 8) & 255] & 255) << 8)) | ((bArr5[(i5 >>> 16) & 255] & 255) << 16))) << 32) | (i9 & 4294967295L);
            i3--;
            if (i3 == 0) {
                long[] jArr3 = this.roundKeys[0];
                long j5 = j3 - jArr3[0];
                long j6 = j4 - jArr3[1];
                Pack.longToLittleEndian(j5, bArr2, i2);
                Pack.longToLittleEndian(j6, bArr2, i2 + 8);
                return;
            }
            long[] jArr4 = this.roundKeys[i3];
            long j7 = j3 ^ jArr4[0];
            long j8 = j4 ^ jArr4[1];
            j = j7;
            j2 = j8;
        }
    }

    private void encryptBlock_128(byte[] bArr, int i, byte[] bArr2, int i2) {
        long jLittleEndianToLong = Pack.littleEndianToLong(bArr, i);
        long jLittleEndianToLong2 = Pack.littleEndianToLong(bArr, i + 8);
        long[] jArr = this.roundKeys[0];
        long j = jLittleEndianToLong + jArr[0];
        long j2 = jLittleEndianToLong2 + jArr[1];
        int i3 = 0;
        while (true) {
            int i4 = (int) j;
            int i5 = (int) (j >>> 32);
            int i6 = (int) j2;
            int i7 = (int) (j2 >>> 32);
            byte[] bArr3 = S0;
            byte b = bArr3[i4 & 255];
            byte[] bArr4 = S1;
            byte b2 = bArr4[(i4 >>> 8) & 255];
            byte[] bArr5 = S2;
            byte b3 = bArr5[(i4 >>> 16) & 255];
            byte[] bArr6 = S3;
            int i8 = ((b3 & 255) << 16) | (b & 255) | ((b2 & 255) << 8) | (bArr6[i4 >>> 24] << 24);
            byte b4 = bArr3[i7 & 255];
            byte b5 = bArr4[(i7 >>> 8) & 255];
            byte b6 = bArr5[(i7 >>> 16) & 255];
            long j3 = (((bArr6[i7 >>> 24] << 24) | (((b4 & 255) | ((b5 & 255) << 8)) | ((b6 & 255) << 16))) << 32) | (i8 & 4294967295L);
            int i9 = (bArr6[i6 >>> 24] << 24) | (bArr3[i6 & 255] & 255) | ((bArr4[(i6 >>> 8) & 255] & 255) << 8) | ((bArr5[(i6 >>> 16) & 255] & 255) << 16);
            int i10 = (bArr6[i5 >>> 24] << 24) | (bArr3[i5 & 255] & 255) | ((bArr4[(i5 >>> 8) & 255] & 255) << 8) | ((bArr5[(i5 >>> 16) & 255] & 255) << 16);
            long jMixColumn = mixColumn(j3);
            long jMixColumn2 = mixColumn((i10 << 32) | (i9 & 4294967295L));
            i3++;
            int i11 = this.roundsAmount;
            if (i3 == i11) {
                long[] jArr2 = this.roundKeys[i11];
                long j4 = jMixColumn + jArr2[0];
                long j5 = jMixColumn2 + jArr2[1];
                Pack.longToLittleEndian(j4, bArr2, i2);
                Pack.longToLittleEndian(j5, bArr2, i2 + 8);
                return;
            }
            long[] jArr3 = this.roundKeys[i3];
            long j6 = jMixColumn ^ jArr3[0];
            j2 = jMixColumn2 ^ jArr3[1];
            j = j6;
        }
    }

    private void invShiftRows() {
        int i = this.wordsInBlock;
        if (i == 2) {
            long[] jArr = this.internalState;
            long j = jArr[0];
            long j2 = jArr[1];
            long j3 = (-4294967296L) & (j ^ j2);
            jArr[0] = j ^ j3;
            jArr[1] = j3 ^ j2;
            return;
        }
        if (i == 4) {
            long[] jArr2 = this.internalState;
            long j4 = jArr2[0];
            long j5 = jArr2[1];
            long j6 = jArr2[2];
            long j7 = jArr2[3];
            long j8 = (j4 ^ j5) & (-281470681808896L);
            long j9 = j4 ^ j8;
            long j10 = j5 ^ j8;
            long j11 = (j6 ^ j7) & (-281470681808896L);
            long j12 = j6 ^ j11;
            long j13 = j7 ^ j11;
            long j14 = (j9 ^ j12) & (-4294967296L);
            long j15 = j9 ^ j14;
            long j16 = (j10 ^ j13) & 281474976645120L;
            jArr2[0] = j15;
            jArr2[1] = j10 ^ j16;
            jArr2[2] = j12 ^ j14;
            jArr2[3] = j16 ^ j13;
            return;
        }
        if (i != 8) {
            throw new IllegalStateException("unsupported block length: only 128/256/512 are allowed");
        }
        long[] jArr3 = this.internalState;
        long j17 = jArr3[0];
        long j18 = jArr3[1];
        long j19 = jArr3[2];
        long j20 = jArr3[3];
        long j21 = jArr3[4];
        long j22 = jArr3[5];
        long j23 = jArr3[6];
        long j24 = jArr3[7];
        long j25 = (j17 ^ j18) & (-71777214294589696L);
        long j26 = j17 ^ j25;
        long j27 = j18 ^ j25;
        long j28 = (j19 ^ j20) & (-71777214294589696L);
        long j29 = j19 ^ j28;
        long j30 = j20 ^ j28;
        long j31 = (j21 ^ j22) & (-71777214294589696L);
        long j32 = j21 ^ j31;
        long j33 = j22 ^ j31;
        long j34 = (j23 ^ j24) & (-71777214294589696L);
        long j35 = j23 ^ j34;
        long j36 = j24 ^ j34;
        long j37 = (j26 ^ j29) & (-281470681808896L);
        long j38 = j26 ^ j37;
        long j39 = j29 ^ j37;
        long j40 = (j27 ^ j30) & 72056494543077120L;
        long j41 = j27 ^ j40;
        long j42 = j30 ^ j40;
        long j43 = (j32 ^ j35) & (-281470681808896L);
        long j44 = j32 ^ j43;
        long j45 = j35 ^ j43;
        long j46 = (j33 ^ j36) & 72056494543077120L;
        long j47 = j33 ^ j46;
        long j48 = j36 ^ j46;
        long j49 = (j38 ^ j44) & (-4294967296L);
        long j50 = j38 ^ j49;
        long j51 = j44 ^ j49;
        long j52 = (j41 ^ j47) & 72057594021150720L;
        long j53 = j41 ^ j52;
        long j54 = (j39 ^ j45) & 281474976645120L;
        long j55 = j39 ^ j54;
        long j56 = j54 ^ j45;
        long j57 = (j42 ^ j48) & 1099511627520L;
        jArr3[0] = j50;
        jArr3[1] = j53;
        jArr3[2] = j55;
        jArr3[3] = j42 ^ j57;
        jArr3[4] = j51;
        jArr3[5] = j47 ^ j52;
        jArr3[6] = j56;
        jArr3[7] = j48 ^ j57;
    }

    private void invSubBytes() {
        for (int i = 0; i < this.wordsInBlock; i++) {
            long[] jArr = this.internalState;
            long j = jArr[i];
            int i2 = (int) j;
            int i3 = (int) (j >>> 32);
            byte b = T0[i2 & 255];
            byte b2 = T1[(i2 >>> 8) & 255];
            byte b3 = T2[(i2 >>> 16) & 255];
            byte[] bArr = T3;
            jArr[i] = (((bArr[i2 >>> 24] << 24) | (b & 255) | ((b2 & 255) << 8) | ((b3 & 255) << 16)) & 4294967295L) | (((((r2[i3 & 255] & 255) | ((r7[(i3 >>> 8) & 255] & 255) << 8)) | ((r9[(i3 >>> 16) & 255] & 255) << 16)) | (bArr[i3 >>> 24] << 24)) << 32);
        }
    }

    private static long mixColumn(long j) {
        long jMulX = mulX(j);
        long jRotate = rotate(8, j) ^ j;
        long jRotate2 = (jRotate ^ rotate(16, jRotate)) ^ rotate(48, j);
        return ((rotate(32, mulX2((j ^ jRotate2) ^ jMulX)) ^ jRotate2) ^ rotate(40, jMulX)) ^ rotate(48, jMulX);
    }

    private static long mixColumnInv(long j) {
        long jRotate = rotate(8, j) ^ j;
        long jRotate2 = (jRotate ^ rotate(32, jRotate)) ^ rotate(48, j);
        long j2 = jRotate2 ^ j;
        long jRotate3 = rotate(48, j);
        long jRotate4 = rotate(56, j);
        long jMulX = mulX(j2 ^ jRotate4) ^ rotate(56, j2);
        long jMulX2 = mulX(rotate(40, mulX(jMulX) ^ j) ^ (rotate(16, j2) ^ j)) ^ (j2 ^ jRotate3);
        return mulX(rotate(40, ((j ^ rotate(32, j2)) ^ jRotate4) ^ mulX(((jRotate3 ^ (rotate(24, j) ^ j2)) ^ jRotate4) ^ mulX(mulX(jMulX2) ^ rotate(16, jRotate2))))) ^ jRotate2;
    }

    private void mixColumns() {
        for (int i = 0; i < this.wordsInBlock; i++) {
            long[] jArr = this.internalState;
            jArr[i] = mixColumn(jArr[i]);
        }
    }

    private void mixColumnsInv() {
        for (int i = 0; i < this.wordsInBlock; i++) {
            long[] jArr = this.internalState;
            jArr[i] = mixColumnInv(jArr[i]);
        }
    }

    private static long mulX(long j) {
        return (((j & (-9187201950435737472L)) >>> 7) * 29) ^ ((9187201950435737471L & j) << 1);
    }

    private static long mulX2(long j) {
        return (((j & 4629771061636907072L) >>> 6) * 29) ^ (((4557430888798830399L & j) << 2) ^ ((((-9187201950435737472L) & j) >>> 6) * 29));
    }

    private static long rotate(int i, long j) {
        return (j << (-i)) | (j >>> i);
    }

    private void rotateLeft(long[] jArr, long[] jArr2) {
        int i = this.wordsInBlock;
        if (i == 2) {
            long j = jArr[0];
            long j2 = jArr[1];
            jArr2[0] = (j >>> 56) | (j2 << 8);
            jArr2[1] = (j << 8) | (j2 >>> 56);
            return;
        }
        if (i == 4) {
            long j3 = jArr[0];
            long j4 = jArr[1];
            long j5 = jArr[2];
            long j6 = jArr[3];
            jArr2[0] = (j4 >>> 24) | (j5 << 40);
            jArr2[1] = (j5 >>> 24) | (j6 << 40);
            jArr2[2] = (j6 >>> 24) | (j3 << 40);
            jArr2[3] = (j3 >>> 24) | (j4 << 40);
            return;
        }
        if (i != 8) {
            throw new IllegalStateException("unsupported block length: only 128/256/512 are allowed");
        }
        long j7 = jArr[0];
        long j8 = jArr[1];
        long j9 = jArr[2];
        long j10 = jArr[3];
        long j11 = jArr[4];
        long j12 = jArr[5];
        long j13 = jArr[6];
        long j14 = jArr[7];
        jArr2[0] = (j9 >>> 24) | (j10 << 40);
        jArr2[1] = (j10 >>> 24) | (j11 << 40);
        jArr2[2] = (j11 >>> 24) | (j12 << 40);
        jArr2[3] = (j12 >>> 24) | (j13 << 40);
        jArr2[4] = (j13 >>> 24) | (j14 << 40);
        jArr2[5] = (j14 >>> 24) | (j7 << 40);
        jArr2[6] = (j7 >>> 24) | (j8 << 40);
        jArr2[7] = (j8 >>> 24) | (j9 << 40);
    }

    private void shiftRows() {
        int i = this.wordsInBlock;
        if (i == 2) {
            long[] jArr = this.internalState;
            long j = jArr[0];
            long j2 = jArr[1];
            long j3 = (-4294967296L) & (j ^ j2);
            jArr[0] = j ^ j3;
            jArr[1] = j3 ^ j2;
            return;
        }
        if (i == 4) {
            long[] jArr2 = this.internalState;
            long j4 = jArr2[0];
            long j5 = jArr2[1];
            long j6 = jArr2[2];
            long j7 = jArr2[3];
            long j8 = (j4 ^ j6) & (-4294967296L);
            long j9 = j4 ^ j8;
            long j10 = j6 ^ j8;
            long j11 = (j5 ^ j7) & 281474976645120L;
            long j12 = j5 ^ j11;
            long j13 = j7 ^ j11;
            long j14 = (j9 ^ j12) & (-281470681808896L);
            long j15 = (j10 ^ j13) & (-281470681808896L);
            jArr2[0] = j9 ^ j14;
            jArr2[1] = j12 ^ j14;
            jArr2[2] = j10 ^ j15;
            jArr2[3] = j13 ^ j15;
            return;
        }
        if (i != 8) {
            throw new IllegalStateException("unsupported block length: only 128/256/512 are allowed");
        }
        long[] jArr3 = this.internalState;
        long j16 = jArr3[0];
        long j17 = jArr3[1];
        long j18 = jArr3[2];
        long j19 = jArr3[3];
        long j20 = jArr3[4];
        long j21 = jArr3[5];
        long j22 = jArr3[6];
        long j23 = jArr3[7];
        long j24 = (j16 ^ j20) & (-4294967296L);
        long j25 = j16 ^ j24;
        long j26 = j20 ^ j24;
        long j27 = (j17 ^ j21) & 72057594021150720L;
        long j28 = j17 ^ j27;
        long j29 = j21 ^ j27;
        long j30 = (j18 ^ j22) & 281474976645120L;
        long j31 = j18 ^ j30;
        long j32 = j22 ^ j30;
        long j33 = (j19 ^ j23) & 1099511627520L;
        long j34 = j19 ^ j33;
        long j35 = j23 ^ j33;
        long j36 = (j25 ^ j31) & (-281470681808896L);
        long j37 = j25 ^ j36;
        long j38 = j31 ^ j36;
        long j39 = (j28 ^ j34) & 72056494543077120L;
        long j40 = j28 ^ j39;
        long j41 = j34 ^ j39;
        long j42 = (j26 ^ j32) & (-281470681808896L);
        long j43 = j26 ^ j42;
        long j44 = j32 ^ j42;
        long j45 = (j29 ^ j35) & 72056494543077120L;
        long j46 = j29 ^ j45;
        long j47 = j35 ^ j45;
        long j48 = (j37 ^ j40) & (-71777214294589696L);
        long j49 = j37 ^ j48;
        long j50 = j40 ^ j48;
        long j51 = (j38 ^ j41) & (-71777214294589696L);
        long j52 = j38 ^ j51;
        long j53 = j41 ^ j51;
        long j54 = (j43 ^ j46) & (-71777214294589696L);
        long j55 = j43 ^ j54;
        long j56 = j46 ^ j54;
        long j57 = (j44 ^ j47) & (-71777214294589696L);
        jArr3[0] = j49;
        jArr3[1] = j50;
        jArr3[2] = j52;
        jArr3[3] = j53;
        jArr3[4] = j55;
        jArr3[5] = j56;
        jArr3[6] = j44 ^ j57;
        jArr3[7] = j47 ^ j57;
    }

    private void subBytes() {
        for (int i = 0; i < this.wordsInBlock; i++) {
            long[] jArr = this.internalState;
            long j = jArr[i];
            int i2 = (int) j;
            int i3 = (int) (j >>> 32);
            byte b = S0[i2 & 255];
            byte b2 = S1[(i2 >>> 8) & 255];
            byte b3 = S2[(i2 >>> 16) & 255];
            byte[] bArr = S3;
            jArr[i] = (((bArr[i2 >>> 24] << 24) | (b & 255) | ((b2 & 255) << 8) | ((b3 & 255) << 16)) & 4294967295L) | (((((r2[i3 & 255] & 255) | ((r7[(i3 >>> 8) & 255] & 255) << 8)) | ((r9[(i3 >>> 16) & 255] & 255) << 16)) | (bArr[i3 >>> 24] << 24)) << 32);
        }
    }

    private void subRoundKey(int i) {
        long[] jArr = this.roundKeys[i];
        for (int i2 = 0; i2 < this.wordsInBlock; i2++) {
            long[] jArr2 = this.internalState;
            jArr2[i2] = jArr2[i2] - jArr[i2];
        }
    }

    private void workingKeyExpandEven(long[] jArr, long[] jArr2) {
        int i;
        int i2;
        int i3 = this.wordsInKey;
        long[] jArr3 = new long[i3];
        long[] jArr4 = new long[this.wordsInBlock];
        System.arraycopy(jArr, 0, jArr3, 0, i3);
        long j = 281479271743489L;
        int i4 = 0;
        while (true) {
            for (int i5 = 0; i5 < this.wordsInBlock; i5++) {
                jArr4[i5] = jArr2[i5] + j;
            }
            for (int i6 = 0; i6 < this.wordsInBlock; i6++) {
                this.internalState[i6] = jArr3[i6] + jArr4[i6];
            }
            subBytes();
            shiftRows();
            mixColumns();
            for (int i7 = 0; i7 < this.wordsInBlock; i7++) {
                long[] jArr5 = this.internalState;
                jArr5[i7] = jArr5[i7] ^ jArr4[i7];
            }
            subBytes();
            shiftRows();
            mixColumns();
            int i8 = 0;
            while (true) {
                i = this.wordsInBlock;
                if (i8 >= i) {
                    break;
                }
                long[] jArr6 = this.internalState;
                jArr6[i8] = jArr6[i8] + jArr4[i8];
                i8++;
            }
            System.arraycopy(this.internalState, 0, this.roundKeys[i4], 0, i);
            if (this.roundsAmount == i4) {
                return;
            }
            if (this.wordsInBlock != this.wordsInKey) {
                i4 += 2;
                j <<= 1;
                for (int i9 = 0; i9 < this.wordsInBlock; i9++) {
                    jArr4[i9] = jArr2[i9] + j;
                }
                int i10 = 0;
                while (true) {
                    int i11 = this.wordsInBlock;
                    if (i10 >= i11) {
                        break;
                    }
                    this.internalState[i10] = jArr3[i11 + i10] + jArr4[i10];
                    i10++;
                }
                subBytes();
                shiftRows();
                mixColumns();
                for (int i12 = 0; i12 < this.wordsInBlock; i12++) {
                    long[] jArr7 = this.internalState;
                    jArr7[i12] = jArr7[i12] ^ jArr4[i12];
                }
                subBytes();
                shiftRows();
                mixColumns();
                int i13 = 0;
                while (true) {
                    i2 = this.wordsInBlock;
                    if (i13 >= i2) {
                        break;
                    }
                    long[] jArr8 = this.internalState;
                    jArr8[i13] = jArr8[i13] + jArr4[i13];
                    i13++;
                }
                System.arraycopy(this.internalState, 0, this.roundKeys[i4], 0, i2);
                if (this.roundsAmount == i4) {
                    return;
                }
            }
            i4 += 2;
            j <<= 1;
            long j2 = jArr3[0];
            for (int i14 = 1; i14 < i3; i14++) {
                jArr3[i14 - 1] = jArr3[i14];
            }
            jArr3[i3 - 1] = j2;
        }
    }

    private void workingKeyExpandKT(long[] jArr, long[] jArr2) {
        int i = this.wordsInBlock;
        long[] jArr3 = new long[i];
        long[] jArr4 = new long[i];
        long[] jArr5 = new long[i];
        this.internalState = jArr5;
        long j = jArr5[0];
        int i2 = this.wordsInKey;
        jArr5[0] = j + i + i2 + 1;
        System.arraycopy(jArr, 0, jArr3, 0, i);
        if (i == i2) {
            System.arraycopy(jArr, 0, jArr4, 0, i);
        } else {
            int i3 = this.wordsInBlock;
            System.arraycopy(jArr, i3, jArr4, 0, i3);
        }
        int i4 = 0;
        while (true) {
            long[] jArr6 = this.internalState;
            if (i4 >= jArr6.length) {
                break;
            }
            jArr6[i4] = jArr6[i4] + jArr3[i4];
            i4++;
        }
        subBytes();
        shiftRows();
        mixColumns();
        int i5 = 0;
        while (true) {
            long[] jArr7 = this.internalState;
            if (i5 >= jArr7.length) {
                break;
            }
            jArr7[i5] = jArr7[i5] ^ jArr4[i5];
            i5++;
        }
        subBytes();
        shiftRows();
        mixColumns();
        int i6 = 0;
        while (true) {
            long[] jArr8 = this.internalState;
            if (i6 >= jArr8.length) {
                subBytes();
                shiftRows();
                mixColumns();
                System.arraycopy(this.internalState, 0, jArr2, 0, this.wordsInBlock);
                return;
            }
            jArr8[i6] = jArr8[i6] + jArr3[i6];
            i6++;
        }
    }

    private void workingKeyExpandOdd() {
        for (int i = 1; i < this.roundsAmount; i += 2) {
            long[][] jArr = this.roundKeys;
            rotateLeft(jArr[i - 1], jArr[i]);
        }
    }

    private void xorRoundKey(int i) {
        long[] jArr = this.roundKeys[i];
        for (int i2 = 0; i2 < this.wordsInBlock; i2++) {
            long[] jArr2 = this.internalState;
            jArr2[i2] = jArr2[i2] ^ jArr[i2];
        }
    }

    @Override // org.bouncycastle.crypto.BlockCipher
    public String getAlgorithmName() {
        return "DSTU7624";
    }

    @Override // org.bouncycastle.crypto.BlockCipher
    public int getBlockSize() {
        return this.wordsInBlock << 3;
    }

    /* JADX WARN: Removed duplicated region for block: B:28:0x005b A[LOOP:0: B:26:0x0056->B:28:0x005b, LOOP_END] */
    /* JADX WARN: Removed duplicated region for block: B:31:0x006f  */
    /* JADX WARN: Removed duplicated region for block: B:33:0x0084  */
    /* JADX WARN: Removed duplicated region for block: B:37:0x0064 A[EDGE_INSN: B:37:0x0064->B:29:0x0064 BREAK  A[LOOP:0: B:26:0x0056->B:28:0x005b], SYNTHETIC] */
    @Override // org.bouncycastle.crypto.BlockCipher
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    public void init(boolean r5, org.bouncycastle.crypto.CipherParameters r6) throws java.lang.IllegalArgumentException {
        /*
            r4 = this;
            boolean r0 = r6 instanceof org.bouncycastle.crypto.params.KeyParameter
            if (r0 == 0) goto L8c
            r4.forEncryption = r5
            org.bouncycastle.crypto.params.KeyParameter r6 = (org.bouncycastle.crypto.params.KeyParameter) r6
            byte[] r5 = r6.getKey()
            int r6 = r5.length
            int r6 = r6 << 3
            int r0 = r4.wordsInBlock
            int r0 = r0 << 6
            r1 = 512(0x200, float:7.17E-43)
            r2 = 256(0x100, float:3.59E-43)
            r3 = 128(0x80, float:1.8E-43)
            if (r6 == r3) goto L28
            if (r6 == r2) goto L28
            if (r6 != r1) goto L20
            goto L28
        L20:
            java.lang.IllegalArgumentException r5 = new java.lang.IllegalArgumentException
            java.lang.String r6 = "unsupported key length: only 128/256/512 are allowed"
            r5.<init>(r6)
            throw r5
        L28:
            if (r6 == r0) goto L37
            int r0 = r0 * 2
            if (r6 != r0) goto L2f
            goto L37
        L2f:
            java.lang.IllegalArgumentException r5 = new java.lang.IllegalArgumentException
            java.lang.String r6 = "Unsupported key length"
            r5.<init>(r6)
            throw r5
        L37:
            if (r6 == r3) goto L44
            if (r6 == r2) goto L41
            if (r6 == r1) goto L3e
            goto L48
        L3e:
            r0 = 18
            goto L46
        L41:
            r0 = 14
            goto L46
        L44:
            r0 = 10
        L46:
            r4.roundsAmount = r0
        L48:
            int r0 = r6 >>> 6
            r4.wordsInKey = r0
            int r0 = r4.roundsAmount
            int r0 = r0 + 1
            long[][] r0 = new long[r0][]
            r4.roundKeys = r0
            r0 = 0
            r1 = 0
        L56:
            long[][] r2 = r4.roundKeys
            int r3 = r2.length
            if (r1 >= r3) goto L64
            int r3 = r4.wordsInBlock
            long[] r3 = new long[r3]
            r2[r1] = r3
            int r1 = r1 + 1
            goto L56
        L64:
            int r1 = r4.wordsInKey
            long[] r1 = new long[r1]
            r4.workingKey = r1
            int r2 = r5.length
            int r6 = r6 >>> 3
            if (r2 != r6) goto L84
            org.bouncycastle.util.Pack.littleEndianToLong(r5, r0, r1)
            int r5 = r4.wordsInBlock
            long[] r5 = new long[r5]
            long[] r6 = r4.workingKey
            r4.workingKeyExpandKT(r6, r5)
            long[] r6 = r4.workingKey
            r4.workingKeyExpandEven(r6, r5)
            r4.workingKeyExpandOdd()
            return
        L84:
            java.lang.IllegalArgumentException r5 = new java.lang.IllegalArgumentException
            java.lang.String r6 = "Invalid key parameter passed to DSTU7624Engine init"
            r5.<init>(r6)
            throw r5
        L8c:
            java.lang.IllegalArgumentException r5 = new java.lang.IllegalArgumentException
            java.lang.String r6 = "Invalid parameter passed to DSTU7624Engine init"
            r5.<init>(r6)
            throw r5
        */
        throw new UnsupportedOperationException("Method not decompiled: org.bouncycastle.crypto.engines.DSTU7624Engine.init(boolean, org.bouncycastle.crypto.CipherParameters):void");
    }

    @Override // org.bouncycastle.crypto.BlockCipher
    public int processBlock(byte[] bArr, int i, byte[] bArr2, int i2) throws IllegalStateException, DataLengthException {
        int i3;
        if (this.workingKey == null) {
            throw new IllegalStateException("DSTU7624Engine not initialised");
        }
        if (getBlockSize() + i > bArr.length) {
            throw new DataLengthException("Input buffer too short");
        }
        if (getBlockSize() + i2 > bArr2.length) {
            throw new OutputLengthException("Output buffer too short");
        }
        int i4 = 0;
        if (this.forEncryption) {
            if (this.wordsInBlock != 2) {
                Pack.littleEndianToLong(bArr, i, this.internalState);
                addRoundKey(0);
                while (true) {
                    subBytes();
                    shiftRows();
                    mixColumns();
                    i4++;
                    i3 = this.roundsAmount;
                    if (i4 == i3) {
                        break;
                    }
                    xorRoundKey(i4);
                }
                addRoundKey(i3);
                Pack.longToLittleEndian(this.internalState, bArr2, i2);
            } else {
                encryptBlock_128(bArr, i, bArr2, i2);
            }
        } else if (this.wordsInBlock != 2) {
            Pack.littleEndianToLong(bArr, i, this.internalState);
            subRoundKey(this.roundsAmount);
            int i5 = this.roundsAmount;
            while (true) {
                mixColumnsInv();
                invShiftRows();
                invSubBytes();
                i5--;
                if (i5 == 0) {
                    break;
                }
                xorRoundKey(i5);
            }
            subRoundKey(0);
            Pack.longToLittleEndian(this.internalState, bArr2, i2);
        } else {
            decryptBlock_128(bArr, i, bArr2, i2);
        }
        return getBlockSize();
    }

    @Override // org.bouncycastle.crypto.BlockCipher
    public void reset() {
        Arrays.fill(this.internalState, 0L);
    }
}
