// Summary for: /mnt/c/dev/buccancs/external/ShimmerCapturePure/sources/org/bouncycastle/crypto/engines/RijndaelEngine.java
// Size: 37765 bytes
// Modified: 2025-10-21 16:32:04.817438600 +0100

package org.bouncycastle.crypto.engines;

import com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper;
import com.google.common.base.Ascii;
import com.shimmerresearch.driver.ShimmerObject;
import com.shimmerresearch.sensors.adxl371.SensorADXL371;
import com.shimmerresearch.sensors.lisxmdl.SensorLIS3MDL;
import com.shimmerresearch.sensors.lsm6dsv.SensorLSM6DSV;
import java.lang.reflect.Array;
import org.bouncycastle.crypto.BlockCipher;
import org.bouncycastle.crypto.CipherParameters;
import org.bouncycastle.crypto.DataLengthException;
import org.bouncycastle.crypto.OutputLengthException;
import org.bouncycastle.crypto.params.KeyParameter;
import org.bouncycastle.crypto.signers.PSSSigner;
import org.bouncycastle.crypto.tls.CipherSuite;

/* loaded from: classes5.dex */
public class RijndaelEngine implements BlockCipher {
    private static final int MAXKC = 64;
    private static final int MAXROUNDS = 14;
    private long A0;
    private long A1;
    private long A2;
    private long A3;
    private int BC;
    private long BC_MASK;
    private int ROUNDS;
    private int blockBits;
    private boolean forEncryption;
    private byte[] shifts0SC;
    private byte[] shifts1SC;
    private long[][] workingKey;
    private static final byte[] logtable = {0, 0, 25, 1, ShimmerObject.GET_BLINK_LED, 2, 26, -58, 75, -57, 27, 104, 51, -18, -33, 3, 100, 4, ShimmerObject.ROUTINE_COMMUNICATION, 14, ShimmerObject.SET_BUFFER_SIZE_COMMAND, ShimmerObject.INFOMEM_RESPONSE, ShimmerObject.GET_MYID_COMMAND, ByteSourceJsonBootstrapper.UTF8_BOM_1, 76, ShimmerObject.STATUS_RESPONSE, 8, -56, -8, 105, 28, -63, ShimmerObject.EXPID_RESPONSE, -62, Ascii.GS, -75, -7, -71, ShimmerObject.EMG_CALIBRATION_RESPONSE, ShimmerObject.SET_BAUD_RATE_COMMAND, 77, -28, -90, ShimmerObject.GET_STATUS_COMMAND, ShimmerObject.GET_CALIB_DUMP_COMMAND, -55, 9, ShimmerObject.GET_CENTER_COMMAND, ShimmerObject.DAUGHTER_CARD_ID_RESPONSE, ShimmerObject.FW_VERSION_RESPONSE, ShimmerObject.INSTREAM_CMD_RESPONSE, 5, 33, 15, -31, ShimmerObject.GET_SHIMMER_VERSION_COMMAND, 18, -16, ShimmerObject.SET_NSHIMMER_COMMAND, 69, ShimmerObject.BUFFER_SIZE_RESPONSE, ShimmerObject.STOP_LOGGING_ONLY_COMMAND, -38, ShimmerObject.GET_INFOMEM_COMMAND, ShimmerObject.TEST_CONNECTION_COMMAND, ShimmerObject.SET_RWC_COMMAND, -37, -67, ShimmerObject.GET_BUFFER_SIZE_COMMAND, -48, -50, -108, 19, 92, -46, -15, 64, 70, ShimmerObject.NSHIMMER_RESPONSE, 56, ShimmerObject.GET_DAUGHTER_CARD_ID_COMMAND, -35, -3, ShimmerObject.SET_BLINK_LED, ByteSourceJsonBootstrapper.UTF8_BOM_3, 6, ShimmerObject.SET_CRC_COMMAND, ShimmerObject.EXG_REGS_RESPONSE, SensorLIS3MDL.ALT_MAG_SAMPLING_RATE_RESPONSE, ShimmerObject.GET_SHIMMER_VERSION_RESPONSE, -30, ShimmerObject.SET_CALIB_DUMP_COMMAND, 34, ShimmerObject.DIR_RESPONSE, ShimmerObject.GET_RWC_COMMAND, 16, ShimmerObject.GET_EXPID_COMMAND, ShimmerObject.DERIVED_CHANNEL_BYTES_RESPONSE, 72, -61, -93, -74, Ascii.RS, 66, 58, ShimmerObject.BAUD_RATE_RESPONSE, ShimmerObject.GET_EMG_CALIBRATION_COMMAND, 84, -6, ShimmerObject.SET_CONFIGTIME_COMMAND, 61, -70, ShimmerObject.GET_ECG_CALIBRATION_COMMAND, ShimmerObject.SET_SHIMMERNAME_COMMAND, 10, 21, ShimmerObject.UPD_CALIB_DUMP_COMMAND, ShimmerObject.BMP280_CALIBRATION_COEFFICIENTS_RESPONSE, ShimmerObject.SET_INTERNAL_EXP_POWER_ENABLE_COMMAND, -54, 78, -44, SensorADXL371.SET_ALT_ACCEL_SAMPLING_RATE_COMMAND, -27, -13, ShimmerObject.SET_TRIAL_CONFIG_COMMAND, -89, 87, SensorLIS3MDL.SET_ALT_MAG_CALIBRATION_COMMAND, 88, ShimmerObject.SET_TEST, SensorLSM6DSV.ALT_ACCEL_RANGE_RESPONSE, -12, -22, -42, ShimmerObject.TRIAL_CONFIG_RESPONSE, SensorLSM6DSV.SET_ALT_ACCEL_RANGE_COMMAND, SensorADXL371.GET_ALT_ACCEL_SAMPLING_RATE_COMMAND, -23, -43, -25, -26, SensorADXL371.ALT_ACCEL_SAMPLING_RATE_RESPONSE, -24, 44, -41, ShimmerObject.GET_TRIAL_CONFIG_COMMAND, ShimmerObject.SHIMMERNAME_RESPONSE, -21, 22, 11, -11, 89, -53, ShimmerObject.INTERNAL_EXP_POWER_ENABLE_RESPONSE, SensorLIS3MDL.ALT_MAG_CALIBRATION_RESPONSE, ShimmerObject.UPD_SDLOG_CFG_COMMAND, SensorADXL371.SET_ALT_ACCEL_CALIBRATION_COMMAND, SensorLSM6DSV.GET_ALT_ACCEL_RANGE_COMMAND, ShimmerObject.GET_BMP280_CALIBRATION_COEFFICIENTS_COMMAND, 127, 12, -10, ShimmerObject.GET_DERIVED_CHANNEL_BYTES, 23, -60, 73, -20, -40, 67, Ascii.US, ShimmerObject.ALL_CALIBRATION_RESPONSE, -92, ShimmerObject.SET_CENTER_COMMAND, ShimmerObject.GET_SHIMMERNAME_COMMAND, -73, -52, ByteSourceJsonBootstrapper.UTF8_BOM_2, 62, 90, -5, ShimmerObject.GET_INTERNAL_EXP_POWER_ENABLE_COMMAND, SensorLIS3MDL.GET_ALT_MAG_CALIBRATION_COMMAND, ShimmerObject.CONFIGTIME_RESPONSE, 59, 82, ShimmerObject.GET_BT_FW_VERSION_STR_COMMAND, ShimmerObject.GET_BAUD_RATE_COMMAND, SensorADXL371.ALT_ACCEL_CALIBRATION_RESPONSE, 85, ShimmerObject.SET_ECG_CALIBRATION_COMMAND, -99, ShimmerObject.STOP_SDBT_COMMAND, SensorLIS3MDL.SET_ALT_MAG_SAMPLING_RATE_COMMAND, ShimmerObject.GET_CONFIGTIME_COMMAND, ShimmerObject.RWC_RESPONSE, ShimmerObject.SET_EXG_REGS_COMMAND, -66, -36, -4, PSSSigner.TRAILER_IMPLICIT, -107, -49, -51, 55, ShimmerObject.GET_SHIMMER_VERSION_COMMAND_NEW, ShimmerObject.RESET_CALIBRATION_VALUE_COMMAND, -47, 83, 57, ShimmerObject.GET_NSHIMMER_COMMAND, 60, 65, ShimmerObject.BT_FW_VERSION_STR_RESPONSE, ShimmerObject.SET_DERIVED_CHANNEL_BYTES, 71, 20, ShimmerObject.ECG_CALIBRATION_RESPONSE, -98, 93, 86, -14, -45, SensorADXL371.GET_ALT_ACCEL_CALIBRATION_COMMAND, 68, 17, ShimmerObject.START_LOGGING_ONLY_COMMAND, -39, 35, 32, ShimmerObject.GET_FW_VERSION_COMMAND, ShimmerObject.GET_DIR_COMMAND, SensorLIS3MDL.GET_ALT_MAG_SAMPLING_RATE_COMMAND, ShimmerObject.SET_EXPID_COMMAND, -72, ShimmerObject.SET_EMG_CALIBRATION_COMMAND, ShimmerObject.CENTER_RESPONSE, ShimmerObject.RSP_CALIB_DUMP_COMMAND, -29, -91, 103, 74, -19, -34, -59, ShimmerObject.BLINK_LED_RESPONSE, -2, 24, 13, ShimmerObject.GET_EXG_REGS_COMMAND, ShimmerObject.SET_INFOMEM_COMMAND, -128, -64, -9, ShimmerObject.START_SDBT_COMMAND, 7};
    private static final byte[] aLogtable = {0, 3, 5, 15, 17, 51, 85, -1, 26, ShimmerObject.GET_FW_VERSION_COMMAND, ShimmerObject.GET_STATUS_COMMAND, ShimmerObject.TEST_CONNECTION_COMMAND, ShimmerObject.GET_BT_FW_VERSION_STR_COMMAND, -8, 19, ShimmerObject.BUFFER_SIZE_RESPONSE, ShimmerObject.INTERNAL_EXP_POWER_ENABLE_RESPONSE, -31, 56, 72, -40, ShimmerObject.SET_TRIAL_CONFIG_COMMAND, -107, -92, -9, 2, 6, 10, Ascii.RS, 34, ShimmerObject.GET_DAUGHTER_CARD_ID_COMMAND, SensorADXL371.ALT_ACCEL_CALIBRATION_RESPONSE, -27, ShimmerObject.SET_BUFFER_SIZE_COMMAND, 92, -28, 55, 89, -21, ShimmerObject.SET_EMG_CALIBRATION_COMMAND, ShimmerObject.SET_BAUD_RATE_COMMAND, -66, -39, ShimmerObject.START_SDBT_COMMAND, ShimmerObject.RWC_RESPONSE, SensorADXL371.GET_ALT_ACCEL_CALIBRATION_COMMAND, -26, ShimmerObject.BLINK_LED_RESPONSE, 83, -11, 4, 12, 20, 60, 68, -52, SensorLSM6DSV.SET_ALT_ACCEL_RANGE_COMMAND, -47, 104, -72, -45, ShimmerObject.DERIVED_CHANNEL_BYTES_RESPONSE, SensorLIS3MDL.SET_ALT_MAG_SAMPLING_RATE_COMMAND, -51, 76, -44, 103, SensorADXL371.SET_ALT_ACCEL_CALIBRATION_COMMAND, ShimmerObject.ROUTINE_COMMUNICATION, 59, 77, -41, ShimmerObject.EXG_REGS_RESPONSE, -90, -15, 8, 24, ShimmerObject.GET_EMG_CALIBRATION_COMMAND, ShimmerObject.GET_CENTER_COMMAND, ShimmerObject.DIR_RESPONSE, ShimmerObject.NSHIMMER_RESPONSE, -98, -71, -48, ShimmerObject.BAUD_RATE_RESPONSE, -67, -36, 127, ShimmerObject.GET_MYID_COMMAND, ShimmerObject.SET_CALIB_DUMP_COMMAND, SensorLIS3MDL.ALT_MAG_SAMPLING_RATE_RESPONSE, -50, 73, -37, ShimmerObject.SET_CENTER_COMMAND, ShimmerObject.GET_CALIB_DUMP_COMMAND, -75, -60, 87, -7, 16, ShimmerObject.SET_BLINK_LED, SensorLSM6DSV.ALT_ACCEL_RANGE_RESPONSE, -16, 11, Ascii.GS, ShimmerObject.EMG_CALIBRATION_RESPONSE, 105, ByteSourceJsonBootstrapper.UTF8_BOM_2, -42, ShimmerObject.SET_EXG_REGS_COMMAND, -93, -2, 25, ShimmerObject.GET_ECG_CALIBRATION_COMMAND, ShimmerObject.EXPID_RESPONSE, ShimmerObject.GET_CONFIGTIME_COMMAND, ShimmerObject.START_LOGGING_ONLY_COMMAND, SensorADXL371.ALT_ACCEL_SAMPLING_RATE_RESPONSE, -20, ShimmerObject.FW_VERSION_RESPONSE, ShimmerObject.STATUS_RESPONSE, ShimmerObject.STOP_LOGGING_ONLY_COMMAND, SensorADXL371.GET_ALT_ACCEL_SAMPLING_RATE_COMMAND, -23, 32, ShimmerObject.GET_INTERNAL_EXP_POWER_ENABLE_COMMAND, ShimmerObject.GET_BMP280_CALIBRATION_COEFFICIENTS_COMMAND, -5, 22, 58, 78, -46, ShimmerObject.SET_DERIVED_CHANNEL_BYTES, -73, -62, 93, -25, ShimmerObject.GET_BLINK_LED, 86, -6, 21, ShimmerObject.GET_SHIMMER_VERSION_COMMAND_NEW, 65, -61, ShimmerObject.SET_INTERNAL_EXP_POWER_ENABLE_COMMAND, -30, 61, 71, -55, 64, -64, ShimmerObject.RESET_CALIBRATION_VALUE_COMMAND, -19, 44, ShimmerObject.TRIAL_CONFIG_RESPONSE, ShimmerObject.UPD_SDLOG_CFG_COMMAND, ByteSourceJsonBootstrapper.UTF8_BOM_3, -38, ShimmerObject.GET_TRIAL_CONFIG_COMMAND, ShimmerObject.BMP280_CALIBRATION_COEFFICIENTS_RESPONSE, -70, -43, 100, SensorADXL371.SET_ALT_ACCEL_SAMPLING_RATE_COMMAND, ByteSourceJsonBootstrapper.UTF8_BOM_1, ShimmerObject.ECG_CALIBRATION_RESPONSE, ShimmerObject.GET_EXPID_COMMAND, ShimmerObject.SET_NSHIMMER_COMMAND, -99, PSSSigner.TRAILER_IMPLICIT, -33, ShimmerObject.SHIMMERNAME_RESPONSE, ShimmerObject.GET_INFOMEM_COMMAND, ShimmerObject.GET_DIR_COMMAND, -128, ShimmerObject.UPD_CALIB_DUMP_COMMAND, -74, -63, 88, -24, 35, ShimmerObject.DAUGHTER_CARD_ID_RESPONSE, SensorLIS3MDL.SET_ALT_MAG_CALIBRATION_COMMAND, -22, ShimmerObject.GET_SHIMMER_VERSION_RESPONSE, ShimmerObject.GET_DERIVED_CHANNEL_BYTES, SensorLIS3MDL.GET_ALT_MAG_CALIBRATION_COMMAND, -56, 67, -59, 84, -4, Ascii.US, 33, ShimmerObject.GET_EXG_REGS_COMMAND, -91, -12, 7, 9, 27, ShimmerObject.ALL_CALIBRATION_RESPONSE, ShimmerObject.CENTER_RESPONSE, ShimmerObject.RSP_CALIB_DUMP_COMMAND, SensorLIS3MDL.ALT_MAG_CALIBRATION_RESPONSE, -53, 70, -54, 69, -49, 74, -34, ShimmerObject.SET_SHIMMERNAME_COMMAND, ShimmerObject.SET_CRC_COMMAND, ShimmerObject.CONFIGTIME_RESPONSE, ShimmerObject.GET_RWC_COMMAND, ShimmerObject.SET_TEST, -29, 62, 66, -58, SensorLSM6DSV.GET_ALT_ACCEL_RANGE_COMMAND, -13, 14, 18, ShimmerObject.GET_BUFFER_SIZE_COMMAND, 90, -18, ShimmerObject.SET_ECG_CALIBRATION_COMMAND, ShimmerObject.GET_SHIMMERNAME_COMMAND, ShimmerObject.INFOMEM_RESPONSE, ShimmerObject.SET_INFOMEM_COMMAND, ShimmerObject.SET_RWC_COMMAND, ShimmerObject.INSTREAM_CMD_RESPONSE, ShimmerObject.SET_CONFIGTIME_COMMAND, -108, -89, -14, 13, 23, 57, 75, -35, ShimmerObject.SET_EXPID_COMMAND, ShimmerObject.GET_NSHIMMER_COMMAND, ShimmerObject.STOP_SDBT_COMMAND, ShimmerObject.BT_FW_VERSION_STR_RESPONSE, -3, 28, ShimmerObject.GET_SHIMMER_VERSION_COMMAND, ShimmerObject.GET_BAUD_RATE_COMMAND, SensorLIS3MDL.GET_ALT_MAG_SAMPLING_RATE_COMMAND, -57, 82, -10, 1, 3, 5, 15, 17, 51, 85, -1, 26, ShimmerObject.GET_FW_VERSION_COMMAND, ShimmerObject.GET_STATUS_COMMAND, ShimmerObject.TEST_CONNECTION_COMMAND, ShimmerObject.GET_BT_FW_VERSION_STR_COMMAND, -8, 19, ShimmerObject.BUFFER_SIZE_RESPONSE, ShimmerObject.INTERNAL_EXP_POWER_ENABLE_RESPONSE, -31, 56, 72, -40, ShimmerObject.SET_TRIAL_CONFIG_COMMAND, -107, -92, -9, 2, 6, 10, Ascii.RS, 34, ShimmerObject.GET_DAUGHTER_CARD_ID_COMMAND, SensorADXL371.ALT_ACCEL_CALIBRATION_RESPONSE, -27, ShimmerObject.SET_BUFFER_SIZE_COMMAND, 92, -28, 55, 89, -21, ShimmerObject.SET_EMG_CALIBRATION_COMMAND, ShimmerObject.SET_BAUD_RATE_COMMAND, -66, -39, ShimmerObject.START_SDBT_COMMAND, ShimmerObject.RWC_RESPONSE, SensorADXL371.GET_ALT_ACCEL_CALIBRATION_COMMAND, -26, ShimmerObject.BLINK_LED_RESPONSE, 83, -11, 4, 12, 20, 60, 68, -52, SensorLSM6DSV.SET_ALT_ACCEL_RANGE_COMMAND, -47, 104, -72, -45, ShimmerObject.DERIVED_CHANNEL_BYTES_RESPONSE, SensorLIS3MDL.SET_ALT_MAG_SAMPLING_RATE_COMMAND, -51, 76, -44, 103, SensorADXL371.SET_ALT_ACCEL_CALIBRATION_COMMAND, ShimmerObject.ROUTINE_COMMUNICATION, 59, 77, -41, ShimmerObject.EXG_REGS_RESPONSE, -90, -15, 8, 24, ShimmerObject.GET_EMG_CALIBRATION_COMMAND, ShimmerObject.GET_CENTER_COMMAND, ShimmerObject.DIR_RESPONSE, ShimmerObject.NSHIMMER_RESPONSE, -98, -71, -48, ShimmerObject.BAUD_RATE_RESPONSE, -67, -36, 127, ShimmerObject.GET_MYID_COMMAND, ShimmerObject.SET_CALIB_DUMP_COMMAND, SensorLIS3MDL.ALT_MAG_SAMPLING_RATE_RESPONSE, -50, 73, -37, ShimmerObject.SET_CENTER_COMMAND, ShimmerObject.GET_CALIB_DUMP_COMMAND, -75, -60, 87, -7, 16, ShimmerObject.SET_BLINK_LED, SensorLSM6DSV.ALT_ACCEL_RANGE_RESPONSE, -16, 11, Ascii.GS, ShimmerObject.EMG_CALIBRATION_RESPONSE, 105, ByteSourceJsonBootstrapper.UTF8_BOM_2, -42, ShimmerObject.SET_EXG_REGS_COMMAND, -93, -2, 25, ShimmerObject.GET_ECG_CALIBRATION_COMMAND, ShimmerObject.EXPID_RESPONSE, ShimmerObject.GET_CONFIGTIME_COMMAND, ShimmerObject.START_LOGGING_ONLY_COMMAND, SensorADXL371.ALT_ACCEL_SAMPLING_RATE_RESPONSE, -20, ShimmerObject.FW_VERSION_RESPONSE, ShimmerObject.STATUS_RESPONSE, ShimmerObject.STOP_LOGGING_ONLY_COMMAND, SensorADXL371.GET_ALT_ACCEL_SAMPLING_RATE_COMMAND, -23, 32, ShimmerObject.GET_INTERNAL_EXP_POWER_ENABLE_COMMAND, ShimmerObject.GET_BMP280_CALIBRATION_COEFFICIENTS_COMMAND, -5, 22, 58, 78, -46, ShimmerObject.SET_DERIVED_CHANNEL_BYTES, -73, -62, 93, -25, ShimmerObject.GET_BLINK_LED, 86, -6, 21, ShimmerObject.GET_SHIMMER_VERSION_COMMAND_NEW, 65, -61, ShimmerObject.SET_INTERNAL_EXP_POWER_ENABLE_COMMAND, -30, 61, 71, -55, 64, -64, ShimmerObject.RESET_CALIBRATION_VALUE_COMMAND, -19, 44, ShimmerObject.TRIAL_CONFIG_RESPONSE, ShimmerObject.UPD_SDLOG_CFG_COMMAND, ByteSourceJsonBootstrapper.UTF8_BOM_3, -38, ShimmerObject.GET_TRIAL_CONFIG_COMMAND, ShimmerObject.BMP280_CALIBRATION_COEFFICIENTS_RESPONSE, -70, -43, 100, SensorADXL371.SET_ALT_ACCEL_SAMPLING_RATE_COMMAND, ByteSourceJsonBootstrapper.UTF8_BOM_1, ShimmerObject.ECG_CALIBRATION_RESPONSE, ShimmerObject.GET_EXPID_COMMAND, ShimmerObject.SET_NSHIMMER_COMMAND, -99, PSSSigner.TRAILER_IMPLICIT, -33, ShimmerObject.SHIMMERNAME_RESPONSE, ShimmerObject.GET_INFOMEM_COMMAND, ShimmerObject.GET_DIR_COMMAND, -128, ShimmerObject.UPD_CALIB_DUMP_COMMAND, -74, -63, 88, -24, 35, ShimmerObject.DAUGHTER_CARD_ID_RESPONSE, SensorLIS3MDL.SET_ALT_MAG_CALIBRATION_COMMAND, -22, ShimmerObject.GET_SHIMMER_VERSION_RESPONSE, ShimmerObject.GET_DERIVED_CHANNEL_BYTES, SensorLIS3MDL.GET_ALT_MAG_CALIBRATION_COMMAND, -56, 67, -59, 84, -4, Ascii.US, 33, ShimmerObject.GET_EXG_REGS_COMMAND, -91, -12, 7, 9, 27, ShimmerObject.ALL_CALIBRATION_RESPONSE, ShimmerObject.CENTER_RESPONSE, ShimmerObject.RSP_CALIB_DUMP_COMMAND, SensorLIS3MDL.ALT_MAG_CALIBRATION_RESPONSE, -53, 70, -54, 69, -49, 74, -34, ShimmerObject.SET_SHIMMERNAME_COMMAND, ShimmerObject.SET_CRC_COMMAND, ShimmerObject.CONFIGTIME_RESPONSE, ShimmerObject.GET_RWC_COMMAND, ShimmerObject.SET_TEST, -29, 62, 66, -58, SensorLSM6DSV.GET_ALT_ACCEL_RANGE_COMMAND, -13, 14, 18, ShimmerObject.GET_BUFFER_SIZE_COMMAND, 90, -18, ShimmerObject.SET_ECG_CALIBRATION_COMMAND, ShimmerObject.GET_SHIMMERNAME_COMMAND, ShimmerObject.INFOMEM_RESPONSE, ShimmerObject.SET_INFOMEM_COMMAND, ShimmerObject.SET_RWC_COMMAND, ShimmerObject.INSTREAM_CMD_RESPONSE, ShimmerObject.SET_CONFIGTIME_COMMAND, -108, -89, -14, 13, 23, 57, 75, -35, ShimmerObject.SET_EXPID_COMMAND, ShimmerObject.GET_NSHIMMER_COMMAND, ShimmerObject.STOP_SDBT_COMMAND, ShimmerObject.BT_FW_VERSION_STR_RESPONSE, -3, 28, ShimmerObject.GET_SHIMMER_VERSION_COMMAND, ShimmerObject.GET_BAUD_RATE_COMMAND, SensorLIS3MDL.GET_ALT_MAG_SAMPLING_RATE_COMMAND, -57, 82, -10, 1};
    private static final byte[] S = {ShimmerObject.GET_EXG_REGS_COMMAND, ShimmerObject.SET_EXPID_COMMAND, ShimmerObject.CENTER_RESPONSE, ShimmerObject.GET_SHIMMERNAME_COMMAND, -14, ShimmerObject.BAUD_RATE_RESPONSE, ShimmerObject.GET_DERIVED_CHANNEL_BYTES, -59, ShimmerObject.SET_BLINK_LED, 1, 103, ShimmerObject.GET_ECG_CALIBRATION_COMMAND, -2, -41, SensorADXL371.GET_ALT_ACCEL_CALIBRATION_COMMAND, ShimmerObject.SET_CENTER_COMMAND, -54, ShimmerObject.SET_NSHIMMER_COMMAND, -55, ShimmerObject.EXPID_RESPONSE, -6, 89, 71, -16, SensorADXL371.ALT_ACCEL_SAMPLING_RATE_RESPONSE, -44, ShimmerObject.BT_FW_VERSION_STR_RESPONSE, SensorLIS3MDL.SET_ALT_MAG_CALIBRATION_COMMAND, ShimmerObject.UPD_SDLOG_CFG_COMMAND, -92, ShimmerObject.GET_STATUS_COMMAND, -64, -73, -3, ShimmerObject.STOP_LOGGING_ONLY_COMMAND, ShimmerObject.SET_EMG_CALIBRATION_COMMAND, ShimmerObject.GET_BUFFER_SIZE_COMMAND, ShimmerObject.GET_SHIMMER_VERSION_COMMAND_NEW, -9, -52, ShimmerObject.SET_BUFFER_SIZE_COMMAND, -91, -27, -15, ShimmerObject.STATUS_RESPONSE, -40, ShimmerObject.BLINK_LED_RESPONSE, 21, 4, -57, 35, -61, 24, ShimmerObject.TEST_CONNECTION_COMMAND, 5, ShimmerObject.GET_CALIB_DUMP_COMMAND, 7, 18, -128, -30, -21, ShimmerObject.EMG_CALIBRATION_RESPONSE, SensorLIS3MDL.SET_ALT_MAG_SAMPLING_RATE_COMMAND, ShimmerObject.GET_TRIAL_CONFIG_COMMAND, 9, ShimmerObject.NSHIMMER_RESPONSE, 44, 26, 27, ShimmerObject.DERIVED_CHANNEL_BYTES_RESPONSE, 90, ShimmerObject.GET_BMP280_CALIBRATION_COEFFICIENTS_COMMAND, 82, 59, -42, SensorLIS3MDL.ALT_MAG_SAMPLING_RATE_RESPONSE, ShimmerObject.SET_ECG_CALIBRATION_COMMAND, -29, ShimmerObject.FW_VERSION_RESPONSE, ShimmerObject.GET_NSHIMMER_COMMAND, 83, -47, 0, -19, 32, -4, SensorLIS3MDL.GET_ALT_MAG_CALIBRATION_COMMAND, ShimmerObject.RESET_CALIBRATION_VALUE_COMMAND, ShimmerObject.SET_BAUD_RATE_COMMAND, -53, -66, 57, 74, 76, 88, -49, -48, ByteSourceJsonBootstrapper.UTF8_BOM_1, SensorADXL371.ALT_ACCEL_CALIBRATION_RESPONSE, -5, 67, 77, 51, ShimmerObject.SET_CONFIGTIME_COMMAND, 69, -7, 2, 127, SensorLSM6DSV.ALT_ACCEL_RANGE_RESPONSE, 60, ShimmerObject.BMP280_CALIBRATION_COEFFICIENTS_RESPONSE, ShimmerObject.SET_TEST, SensorLSM6DSV.GET_ALT_ACCEL_RANGE_COMMAND, -93, 64, ShimmerObject.SET_RWC_COMMAND, ShimmerObject.START_LOGGING_ONLY_COMMAND, -99, 56, -11, PSSSigner.TRAILER_IMPLICIT, -74, -38, 33, 16, -1, -13, -46, -51, 12, 19, -20, ShimmerObject.INTERNAL_EXP_POWER_ENABLE_RESPONSE, ShimmerObject.STOP_SDBT_COMMAND, 68, 23, -60, -89, ShimmerObject.GET_EXPID_COMMAND, 61, 100, 93, 25, ShimmerObject.SET_TRIAL_CONFIG_COMMAND, ShimmerObject.GET_INTERNAL_EXP_POWER_ENABLE_COMMAND, ShimmerObject.GET_MYID_COMMAND, SensorLSM6DSV.SET_ALT_ACCEL_RANGE_COMMAND, -36, 34, ShimmerObject.ECG_CALIBRATION_RESPONSE, ShimmerObject.RWC_RESPONSE, ShimmerObject.DIR_RESPONSE, 70, -18, -72, 20, -34, ShimmerObject.SET_INTERNAL_EXP_POWER_ENABLE_COMMAND, 11, -37, ShimmerObject.ROUTINE_COMMUNICATION, ShimmerObject.GET_BLINK_LED, 58, 10, 73, 6, ShimmerObject.GET_SHIMMER_VERSION_COMMAND, 92, -62, -45, SensorADXL371.SET_ALT_ACCEL_SAMPLING_RATE_COMMAND, ShimmerObject.EXG_REGS_RESPONSE, ShimmerObject.GET_RWC_COMMAND, -107, -28, ShimmerObject.SET_SHIMMERNAME_COMMAND, -25, -56, 55, ShimmerObject.SET_DERIVED_CHANNEL_BYTES, ShimmerObject.INFOMEM_RESPONSE, -43, 78, SensorADXL371.SET_ALT_ACCEL_CALIBRATION_COMMAND, ShimmerObject.GET_BAUD_RATE_COMMAND, 86, -12, -22, ShimmerObject.DAUGHTER_CARD_ID_RESPONSE, ShimmerObject.SHIMMERNAME_RESPONSE, SensorADXL371.GET_ALT_ACCEL_SAMPLING_RATE_COMMAND, 8, -70, ShimmerObject.GET_CENTER_COMMAND, ShimmerObject.GET_SHIMMER_VERSION_RESPONSE, ShimmerObject.GET_FW_VERSION_COMMAND, 28, -90, SensorLIS3MDL.GET_ALT_MAG_SAMPLING_RATE_COMMAND, -58, -24, -35, ShimmerObject.TRIAL_CONFIG_RESPONSE, Ascii.US, 75, -67, ShimmerObject.SET_CRC_COMMAND, ShimmerObject.INSTREAM_CMD_RESPONSE, ShimmerObject.START_SDBT_COMMAND, 62, -75, ShimmerObject.GET_DAUGHTER_CARD_ID_COMMAND, 72, 3, -10, 14, ShimmerObject.SET_EXG_REGS_COMMAND, ShimmerObject.BUFFER_SIZE_RESPONSE, 87, -71, ShimmerObject.CONFIGTIME_RESPONSE, -63, Ascii.GS, -98, -31, -8, ShimmerObject.SET_CALIB_DUMP_COMMAND, 17, 105, -39, ShimmerObject.GET_INFOMEM_COMMAND, -108, ShimmerObject.UPD_CALIB_DUMP_COMMAND, Ascii.RS, ShimmerObject.GET_CONFIGTIME_COMMAND, -23, -50, 85, ShimmerObject.GET_EMG_CALIBRATION_COMMAND, -33, ShimmerObject.SET_INFOMEM_COMMAND, ShimmerObject.GET_BT_FW_VERSION_STR_COMMAND, ShimmerObject.GET_DIR_COMMAND, 13, ByteSourceJsonBootstrapper.UTF8_BOM_3, -26, 66, 104, 65, ShimmerObject.RSP_CALIB_DUMP_COMMAND, ShimmerObject.ALL_CALIBRATION_RESPONSE, 15, SensorLIS3MDL.ALT_MAG_CALIBRATION_RESPONSE, 84, ByteSourceJsonBootstrapper.UTF8_BOM_2, 22};
    private static final byte[] Si = {82, 9, ShimmerObject.SET_BAUD_RATE_COMMAND, -43, ShimmerObject.SET_BLINK_LED, ShimmerObject.GET_BUFFER_SIZE_COMMAND, -91, 56, ByteSourceJsonBootstrapper.UTF8_BOM_3, 64, -93, -98, ShimmerObject.GET_MYID_COMMAND, -13, -41, -5, ShimmerObject.SET_EXPID_COMMAND, -29, 57, ShimmerObject.SET_NSHIMMER_COMMAND, ShimmerObject.UPD_CALIB_DUMP_COMMAND, ShimmerObject.FW_VERSION_RESPONSE, -1, ShimmerObject.GET_CONFIGTIME_COMMAND, ShimmerObject.SET_BUFFER_SIZE_COMMAND, ShimmerObject.GET_INFOMEM_COMMAND, 67, 68, -60, -34, -23, -53, 84, ShimmerObject.GET_SHIMMERNAME_COMMAND, -108, ShimmerObject.GET_BLINK_LED, -90, -62, 35, 61, -18, 76, -107, 11, 66, -6, -61, 78, 8, ShimmerObject.GET_FW_VERSION_COMMAND, ShimmerObject.GET_BT_FW_VERSION_STR_COMMAND, ShimmerObject.GET_DAUGHTER_CARD_ID_COMMAND, ShimmerObject.GET_EMG_CALIBRATION_COMMAND, -39, ShimmerObject.GET_SHIMMER_VERSION_COMMAND, SensorLIS3MDL.SET_ALT_MAG_SAMPLING_RATE_COMMAND, ShimmerObject.SET_CENTER_COMMAND, ShimmerObject.RESET_CALIBRATION_VALUE_COMMAND, ShimmerObject.BT_FW_VERSION_STR_RESPONSE, 73, ShimmerObject.SET_DERIVED_CHANNEL_BYTES, ShimmerObject.SET_CRC_COMMAND, -47, ShimmerObject.GET_SHIMMER_VERSION_RESPONSE, ShimmerObject.GET_STATUS_COMMAND, -8, -10, 100, ShimmerObject.CONFIGTIME_RESPONSE, 104, ShimmerObject.SET_CALIB_DUMP_COMMAND, 22, -44, -92, 92, -52, 93, ShimmerObject.DAUGHTER_CARD_ID_RESPONSE, -74, ShimmerObject.START_LOGGING_ONLY_COMMAND, ShimmerObject.GET_BAUD_RATE_COMMAND, ShimmerObject.START_SDBT_COMMAND, 72, SensorLSM6DSV.ALT_ACCEL_RANGE_RESPONSE, -3, -19, -71, -38, ShimmerObject.SET_INTERNAL_EXP_POWER_ENABLE_COMMAND, 21, 70, 87, -89, ShimmerObject.INFOMEM_RESPONSE, -99, ShimmerObject.GET_NSHIMMER_COMMAND, ShimmerObject.RWC_RESPONSE, -40, SensorADXL371.GET_ALT_ACCEL_CALIBRATION_COMMAND, 0, ShimmerObject.SET_INFOMEM_COMMAND, PSSSigner.TRAILER_IMPLICIT, -45, 10, -9, -28, 88, 5, -72, SensorLIS3MDL.ALT_MAG_SAMPLING_RATE_RESPONSE, 69, 6, -48, 44, Ascii.RS, ShimmerObject.SET_RWC_COMMAND, -54, ShimmerObject.GET_SHIMMER_VERSION_COMMAND_NEW, 15, 2, -63, SensorLIS3MDL.SET_ALT_MAG_CALIBRATION_COMMAND, -67, 3, 1, 19, ShimmerObject.INSTREAM_CMD_RESPONSE, ShimmerObject.BAUD_RATE_RESPONSE, 58, ShimmerObject.GET_RWC_COMMAND, 17, 65, SensorLSM6DSV.SET_ALT_ACCEL_RANGE_COMMAND, 103, -36, -22, ShimmerObject.STOP_SDBT_COMMAND, -14, -49, -50, -16, SensorLIS3MDL.GET_ALT_MAG_SAMPLING_RATE_COMMAND, -26, ShimmerObject.SET_TRIAL_CONFIG_COMMAND, ShimmerObject.TEST_CONNECTION_COMMAND, SensorADXL371.SET_ALT_ACCEL_SAMPLING_RATE_COMMAND, ShimmerObject.TRIAL_CONFIG_RESPONSE, 34, -25, SensorADXL371.ALT_ACCEL_SAMPLING_RATE_RESPONSE, ShimmerObject.BUFFER_SIZE_RESPONSE, ShimmerObject.SET_CONFIGTIME_COMMAND, -30, -7, 55, -24, 28, ShimmerObject.GET_TRIAL_CONFIG_COMMAND, -33, ShimmerObject.DERIVED_CHANNEL_BYTES_RESPONSE, 71, -15, 26, ShimmerObject.STATUS_RESPONSE, Ascii.GS, ShimmerObject.SET_ECG_CALIBRATION_COMMAND, -59, ShimmerObject.GET_DIR_COMMAND, ShimmerObject.GET_DERIVED_CHANNEL_BYTES, -73, ShimmerObject.EXG_REGS_RESPONSE, 14, SensorADXL371.ALT_ACCEL_CALIBRATION_RESPONSE, 24, -66, 27, -4, 86, 62, 75, -58, -46, ShimmerObject.SET_SHIMMERNAME_COMMAND, 32, ShimmerObject.GET_CALIB_DUMP_COMMAND, -37, -64, -2, ShimmerObject.GET_CENTER_COMMAND, -51, 90, -12, Ascii.US, -35, ShimmerObject.SET_TEST, 51, ShimmerObject.DIR_RESPONSE, 7, -57, ShimmerObject.BLINK_LED_RESPONSE, SensorLIS3MDL.GET_ALT_MAG_CALIBRATION_COMMAND, 18, 16, 89, ShimmerObject.EMG_CALIBRATION_RESPONSE, -128, -20, ShimmerObject.INTERNAL_EXP_POWER_ENABLE_RESPONSE, ShimmerObject.GET_INTERNAL_EXP_POWER_ENABLE_COMMAND, SensorLSM6DSV.GET_ALT_ACCEL_RANGE_COMMAND, 127, SensorADXL371.SET_ALT_ACCEL_CALIBRATION_COMMAND, 25, -75, 74, 13, ShimmerObject.ALL_CALIBRATION_RESPONSE, -27, ShimmerObject.SHIMMERNAME_RESPONSE, ShimmerObject.BMP280_CALIBRATION_COEFFICIENTS_RESPONSE, ShimmerObject.STOP_LOGGING_ONLY_COMMAND, -55, ShimmerObject.UPD_SDLOG_CFG_COMMAND, ByteSourceJsonBootstrapper.UTF8_BOM_1, ShimmerObject.GET_BMP280_CALIBRATION_COEFFICIENTS_COMMAND, ShimmerObject.ROUTINE_COMMUNICATION, 59, 77, SensorADXL371.GET_ALT_ACCEL_SAMPLING_RATE_COMMAND, ShimmerObject.ECG_CALIBRATION_RESPONSE, -11, SensorLIS3MDL.ALT_MAG_CALIBRATION_RESPONSE, -56, -21, ByteSourceJsonBootstrapper.UTF8_BOM_2, 60, ShimmerObject.NSHIMMER_RESPONSE, 83, ShimmerObject.RSP_CALIB_DUMP_COMMAND, ShimmerObject.SET_EXG_REGS_COMMAND, 23, ShimmerObject.GET_ECG_CALIBRATION_COMMAND, 4, ShimmerObject.GET_EXPID_COMMAND, -70, ShimmerObject.CENTER_RESPONSE, -42, ShimmerObject.SET_EMG_CALIBRATION_COMMAND, -31, 105, 20, ShimmerObject.GET_EXG_REGS_COMMAND, 85, 33, 12, ShimmerObject.EXPID_RESPONSE};
    private static final int[] rcon = {1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, CipherSuite.TLS_DHE_PSK_WITH_AES_256_CBC_SHA384, 125, 250, 239, CipherSuite.TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256, 145};
    static byte[][] shifts0 = {new byte[]{0, 8, 16, 24}, new byte[]{0, 8, 16, 24}, new byte[]{0, 8, 16, 24}, new byte[]{0, 8, 16, 32}, new byte[]{0, 8, 24, 32}};
    static byte[][] shifts1 = {new byte[]{0, 24, 16, 8}, new byte[]{0, 32, 24, 16}, new byte[]{0, ShimmerObject.GET_EMG_CALIBRATION_COMMAND, 32, 24}, new byte[]{0, ShimmerObject.SET_BLINK_LED, ShimmerObject.GET_EMG_CALIBRATION_COMMAND, 24}, new byte[]{0, 56, ShimmerObject.GET_EMG_CALIBRATION_COMMAND, 32}};

    public RijndaelEngine() {
        this(128);
    }

    public RijndaelEngine(int i) {
        if (i == 128) {
            this.BC = 32;
            this.BC_MASK = 4294967295L;
            this.shifts0SC = shifts0[0];
            this.shifts1SC = shifts1[0];
        } else if (i == 160) {
            this.BC = 40;
            this.BC_MASK = 1099511627775L;
            this.shifts0SC = shifts0[1];
            this.shifts1SC = shifts1[1];
        } else if (i == 192) {
            this.BC = 48;
            this.BC_MASK = 281474976710655L;
            this.shifts0SC = shifts0[2];
            this.shifts1SC = shifts1[2];
        } else if (i == 224) {
            this.BC = 56;
            this.BC_MASK = 72057594037927935L;
            this.shifts0SC = shifts0[3];
            this.shifts1SC = shifts1[3];
        } else {
            if (i != 256) {
                throw new IllegalArgumentException("unknown blocksize to Rijndael");
            }
            this.BC = 64;
            this.BC_MASK = -1L;
            this.shifts0SC = shifts0[4];
            this.shifts1SC = shifts1[4];
        }
        this.blockBits = i;
    }

    private void InvMixColumn() {
        long jMul0xe = 0;
        long jMul0xe2 = 0;
        long jMul0xe3 = 0;
        long jMul0xe4 = 0;
        for (int i = 0; i < this.BC; i += 8) {
            int i2 = (int) ((this.A0 >> i) & 255);
            int i3 = (int) ((this.A1 >> i) & 255);
            int i4 = (int) ((this.A2 >> i) & 255);
            long j = jMul0xe4;
            int i5 = (int) ((this.A3 >> i) & 255);
            int i6 = -1;
            int i7 = i2 != 0 ? logtable[i2 & 255] & 255 : -1;
            int i8 = i3 != 0 ? logtable[i3 & 255] & 255 : -1;
            int i9 = i4 != 0 ? logtable[i4 & 255] & 255 : -1;
            if (i5 != 0) {
                i6 = logtable[i5 & 255] & 255;
            }
            jMul0xe |= ((((mul0xe(i7) ^ mul0xb(i8)) ^ mul0xd(i9)) ^ mul0x9(i6)) & 255) << i;
            jMul0xe2 |= ((((mul0xe(i8) ^ mul0xb(i9)) ^ mul0xd(i6)) ^ mul0x9(i7)) & 255) << i;
            jMul0xe3 |= ((((mul0xe(i9) ^ mul0xb(i6)) ^ mul0xd(i7)) ^ mul0x9(i8)) & 255) << i;
            jMul0xe4 = j | (((((mul0xe(i6) ^ mul0xb(i7)) ^ mul0xd(i8)) ^ mul0x9(i9)) & 255) << i);
        }
        this.A0 = jMul0xe;
        this.A1 = jMul0xe2;
        this.A2 = jMul0xe3;
        this.A3 = jMul0xe4;
    }

    private void KeyAddition(long[] jArr) {
        this.A0 ^= jArr[0];
        this.A1 ^= jArr[1];
        this.A2 ^= jArr[2];
        this.A3 ^= jArr[3];
    }

    private void MixColumn() {
        long jMul0x2 = 0;
        long jMul0x22 = 0;
        long jMul0x23 = 0;
        long jMul0x24 = 0;
        for (int i = 0; i < this.BC; i += 8) {
            int i2 = (int) ((this.A0 >> i) & 255);
            int i3 = (int) ((this.A1 >> i) & 255);
            int i4 = (int) ((this.A2 >> i) & 255);
            int i5 = (int) ((this.A3 >> i) & 255);
            jMul0x2 |= ((((mul0x2(i2) ^ mul0x3(i3)) ^ i4) ^ i5) & 255) << i;
            jMul0x22 |= ((((mul0x2(i3) ^ mul0x3(i4)) ^ i5) ^ i2) & 255) << i;
            jMul0x23 |= ((((mul0x2(i4) ^ mul0x3(i5)) ^ i2) ^ i3) & 255) << i;
            jMul0x24 |= ((((mul0x2(i5) ^ mul0x3(i2)) ^ i3) ^ i4) & 255) << i;
        }
        this.A0 = jMul0x2;
        this.A1 = jMul0x22;
        this.A2 = jMul0x23;
        this.A3 = jMul0x24;
    }

    private void ShiftRow(byte[] bArr) {
        this.A1 = shift(this.A1, bArr[1]);
        this.A2 = shift(this.A2, bArr[2]);
        this.A3 = shift(this.A3, bArr[3]);
    }

    private void Substitution(byte[] bArr) {
        this.A0 = applyS(this.A0, bArr);
        this.A1 = applyS(this.A1, bArr);
        this.A2 = applyS(this.A2, bArr);
        this.A3 = applyS(this.A3, bArr);
    }

    private long applyS(long j, byte[] bArr) {
        long j2 = 0;
        for (int i = 0; i < this.BC; i += 8) {
            j2 |= (bArr[(int) ((j >> i) & 255)] & 255) << i;
        }
        return j2;
    }

    private void decryptBlock(long[][] jArr) {
        KeyAddition(jArr[this.ROUNDS]);
        Substitution(Si);
        ShiftRow(this.shifts1SC);
        for (int i = this.ROUNDS - 1; i > 0; i--) {
            KeyAddition(jArr[i]);
            InvMixColumn();
            Substitution(Si);
            ShiftRow(this.shifts1SC);
        }
        KeyAddition(jArr[0]);
    }

    private void encryptBlock(long[][] jArr) {
        KeyAddition(jArr[0]);
        for (int i = 1; i < this.ROUNDS; i++) {
            Substitution(S);
            ShiftRow(this.shifts0SC);
            MixColumn();
            KeyAddition(jArr[i]);
        }
        Substitution(S);
        ShiftRow(this.shifts0SC);
        KeyAddition(jArr[this.ROUNDS]);
    }

    private long[][] generateWorkingKey(byte[] bArr) {
        int i;
        int i2;
        int i3 = 8;
        int length = bArr.length * 8;
        int i4 = 4;
        byte[][] bArr2 = (byte[][]) Array.newInstance((Class<?>) Byte.TYPE, 4, 64);
        long[][] jArr = (long[][]) Array.newInstance((Class<?>) Long.TYPE, 15, 4);
        if (length == 128) {
            i = 4;
        } else if (length == 160) {
            i = 5;
        } else if (length == 192) {
            i = 6;
        } else if (length == 224) {
            i = 7;
        } else {
            if (length != 256) {
                throw new IllegalArgumentException("Key length not 128/160/192/224/256 bits.");
            }
            i = 8;
        }
        this.ROUNDS = length >= this.blockBits ? i + 6 : (this.BC / 8) + 6;
        char c = 0;
        int i5 = 0;
        int i6 = 0;
        while (i5 < bArr.length) {
            bArr2[i5 % 4][i5 / 4] = bArr[i6];
            i5++;
            i6++;
        }
        int i7 = 0;
        int i8 = 0;
        while (i7 < i && i8 < (this.ROUNDS + 1) * (this.BC / 8)) {
            int i9 = 0;
            while (i9 < i4) {
                int i10 = this.BC;
                long[] jArr2 = jArr[i8 / (i10 / 8)];
                jArr2[i9] = ((bArr2[i9][i7] & 255) << ((i8 * 8) % i10)) | jArr2[i9];
                i9++;
                jArr = jArr;
                i4 = 4;
            }
            i7++;
            i8++;
            i4 = 4;
        }
        long[][] jArr3 = jArr;
        int i11 = 0;
        while (i8 < (this.ROUNDS + 1) * (this.BC / i3)) {
            int i12 = 0;
            while (i12 < 4) {
                byte[] bArr3 = bArr2[i12];
                i12++;
                bArr3[c] = (byte) (bArr3[c] ^ S[bArr2[i12 % 4][i - 1] & 255]);
            }
            byte[] bArr4 = bArr2[c];
            int i13 = i11 + 1;
            bArr4[c] = (byte) (rcon[i11] ^ bArr4[c]);
            int i14 = 1;
            if (i <= 6) {
                while (i14 < i) {
                    for (int i15 = 0; i15 < 4; i15++) {
                        byte[] bArr5 = bArr2[i15];
                        bArr5[i14] = (byte) (bArr5[i14] ^ bArr5[i14 - 1]);
                    }
                    i14++;
                }
            } else {
                while (true) {
                    i2 = 4;
                    if (i14 >= 4) {
                        break;
                    }
                    int i16 = 0;
                    while (i16 < i2) {
                        byte[] bArr6 = bArr2[i16];
                        bArr6[i14] = (byte) (bArr6[i14] ^ bArr6[i14 - 1]);
                        i16++;
                        i2 = 4;
                    }
                    i14++;
                }
                for (int i17 = 0; i17 < 4; i17++) {
                    byte[] bArr7 = bArr2[i17];
                    bArr7[4] = (byte) (bArr7[4] ^ S[bArr7[3] & 255]);
                }
                int i18 = 5;
                while (i18 < i) {
                    int i19 = 0;
                    while (i19 < i2) {
                        byte[] bArr8 = bArr2[i19];
                        bArr8[i18] = (byte) (bArr8[i18] ^ bArr8[i18 - 1]);
                        i19++;
                        i2 = 4;
                    }
                    i18++;
                    i2 = 4;
                }
            }
            int i20 = 0;
            while (i20 < i && i8 < (this.ROUNDS + 1) * (this.BC / i3)) {
                int i21 = 0;
                while (i21 < 4) {
                    int i22 = this.BC;
                    long[] jArr4 = jArr3[i8 / (i22 / 8)];
                    jArr4[i21] = ((bArr2[i21][i20] & 255) << ((i8 * 8) % i22)) | jArr4[i21];
                    i21++;
                    bArr2 = bArr2;
                }
                i20++;
                i8++;
                i3 = 8;
            }
            i11 = i13;
            bArr2 = bArr2;
            c = 0;
            i3 = 8;
        }
        return jArr3;
    }

    private byte mul0x2(int i) {
        if (i != 0) {
            return aLogtable[(logtable[i] & 255) + 25];
        }
        return (byte) 0;
    }

    private byte mul0x3(int i) {
        if (i != 0) {
            return aLogtable[(logtable[i] & 255) + 1];
        }
        return (byte) 0;
    }

    private byte mul0x9(int i) {
        if (i >= 0) {
            return aLogtable[i + 199];
        }
        return (byte) 0;
    }

    private byte mul0xb(int i) {
        if (i >= 0) {
            return aLogtable[i + 104];
        }
        return (byte) 0;
    }

    private byte mul0xd(int i) {
        if (i >= 0) {
            return aLogtable[i + 238];
        }
        return (byte) 0;
    }

    private byte mul0xe(int i) {
        if (i >= 0) {
            return aLogtable[i + 223];
        }
        return (byte) 0;
    }

    private void packBlock(byte[] bArr, int i) {
        for (int i2 = 0; i2 != this.BC; i2 += 8) {
            bArr[i] = (byte) (this.A0 >> i2);
            bArr[i + 1] = (byte) (this.A1 >> i2);
            int i3 = i + 3;
            bArr[i + 2] = (byte) (this.A2 >> i2);
            i += 4;
            bArr[i3] = (byte) (this.A3 >> i2);
        }
    }

    private long shift(long j, int i) {
        return ((j << (this.BC - i)) | (j >>> i)) & this.BC_MASK;
    }

    private void unpackBlock(byte[] bArr, int i) {
        this.A0 = bArr[i] & 255;
        this.A1 = bArr[i + 1] & 255;
        int i2 = i + 3;
        this.A2 = bArr[i + 2] & 255;
        int i3 = i + 4;
        this.A3 = bArr[i2] & 255;
        for (int i4 = 8; i4 != this.BC; i4 += 8) {
            this.A0 |= (bArr[i3] & 255) << i4;
            this.A1 |= (bArr[i3 + 1] & 255) << i4;
            int i5 = i3 + 3;
            this.A2 |= (bArr[i3 + 2] & 255) << i4;
            i3 += 4;
            this.A3 |= (bArr[i5] & 255) << i4;
        }
    }

    @Override // org.bouncycastle.crypto.BlockCipher
    public String getAlgorithmName() {
        return "Rijndael";
    }

    @Override // org.bouncycastle.crypto.BlockCipher
    public int getBlockSize() {
        return this.BC / 2;
    }

    @Override // org.bouncycastle.crypto.BlockCipher
    public void init(boolean z, CipherParameters cipherParameters) {
        if (cipherParameters instanceof KeyParameter) {
            this.workingKey = generateWorkingKey(((KeyParameter) cipherParameters).getKey());
            this.forEncryption = z;
        } else {
            throw new IllegalArgumentException("invalid parameter passed to Rijndael init - " + cipherParameters.getClass().getName());
        }
    }

    @Override // org.bouncycastle.crypto.BlockCipher
    public int processBlock(byte[] bArr, int i, byte[] bArr2, int i2) {
        if (this.workingKey == null) {
            throw new IllegalStateException("Rijndael engine not initialised");
        }
        int i3 = this.BC;
        if ((i3 / 2) + i > bArr.length) {
            throw new DataLengthException("input buffer too short");
        }
        if ((i3 / 2) + i2 > bArr2.length) {
            throw new OutputLengthException("output buffer too short");
        }
        boolean z = this.forEncryption;
        unpackBlock(bArr, i);
        long[][] jArr = this.workingKey;
        if (z) {
            encryptBlock(jArr);
        } else {
            decryptBlock(jArr);
        }
        packBlock(bArr2, i2);
        return this.BC / 2;
    }

    @Override // org.bouncycastle.crypto.BlockCipher
    public void reset() {
    }
}
