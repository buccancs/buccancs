// Summary for: /mnt/c/dev/buccancs/external/ShimmerCapturePure/sources/org/bouncycastle/crypto/engines/SM4Engine.java
// Size: 11406 bytes
// Modified: 2025-10-21 16:32:05.002650900 +0100

package org.bouncycastle.crypto.engines;

import com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper;
import com.google.common.base.Ascii;
import com.shimmerresearch.driver.ShimmerObject;
import com.shimmerresearch.sensors.adxl371.SensorADXL371;
import com.shimmerresearch.sensors.lisxmdl.SensorLIS3MDL;
import com.shimmerresearch.sensors.lsm6dsv.SensorLSM6DSV;
import org.bouncycastle.crypto.BlockCipher;
import org.bouncycastle.crypto.CipherParameters;
import org.bouncycastle.crypto.DataLengthException;
import org.bouncycastle.crypto.OutputLengthException;
import org.bouncycastle.crypto.params.KeyParameter;
import org.bouncycastle.crypto.signers.PSSSigner;
import org.bouncycastle.util.Pack;

/* loaded from: classes5.dex */
public class SM4Engine implements BlockCipher {
    private static final int BLOCK_SIZE = 16;
    private final int[] X = new int[4];
    private int[] rk;
    private static final byte[] Sbox = {-42, ShimmerObject.RWC_RESPONSE, -23, -2, -52, -31, 61, -73, 22, -74, 20, -62, ShimmerObject.GET_EMG_CALIBRATION_COMMAND, -5, 44, 5, ShimmerObject.GET_ECG_CALIBRATION_COMMAND, 103, ShimmerObject.GET_CALIB_DUMP_COMMAND, ShimmerObject.SET_CENTER_COMMAND, ShimmerObject.ECG_CALIBRATION_RESPONSE, -66, 4, -61, SensorADXL371.ALT_ACCEL_CALIBRATION_RESPONSE, 68, 19, ShimmerObject.SET_EMG_CALIBRATION_COMMAND, 73, ShimmerObject.CONFIGTIME_RESPONSE, 6, ShimmerObject.RSP_CALIB_DUMP_COMMAND, ShimmerObject.UPD_SDLOG_CFG_COMMAND, 66, SensorLSM6DSV.ALT_ACCEL_RANGE_RESPONSE, -12, ShimmerObject.GET_RWC_COMMAND, ByteSourceJsonBootstrapper.UTF8_BOM_1, ShimmerObject.SET_CALIB_DUMP_COMMAND, ShimmerObject.SHIMMERNAME_RESPONSE, 51, 84, 11, 67, -19, -49, SensorADXL371.SET_ALT_ACCEL_SAMPLING_RATE_COMMAND, ShimmerObject.EXG_REGS_RESPONSE, -28, SensorLIS3MDL.ALT_MAG_SAMPLING_RATE_RESPONSE, 28, SensorADXL371.SET_ALT_ACCEL_CALIBRATION_COMMAND, -55, 8, -24, -107, -128, -33, -108, -6, ShimmerObject.GET_TRIAL_CONFIG_COMMAND, ShimmerObject.SET_RWC_COMMAND, ShimmerObject.GET_SHIMMER_VERSION_COMMAND_NEW, -90, 71, 7, -89, -4, -13, ShimmerObject.SET_TRIAL_CONFIG_COMMAND, 23, -70, ShimmerObject.NSHIMMER_RESPONSE, 89, 60, 25, -26, ShimmerObject.SET_CONFIGTIME_COMMAND, SensorLSM6DSV.SET_ALT_ACCEL_RANGE_COMMAND, ShimmerObject.SET_TEST, 104, ShimmerObject.BAUD_RATE_RESPONSE, ShimmerObject.GET_MYID_COMMAND, SensorLIS3MDL.SET_ALT_MAG_SAMPLING_RATE_COMMAND, ShimmerObject.STATUS_RESPONSE, 100, -38, ShimmerObject.SET_CRC_COMMAND, -8, -21, 15, 75, ShimmerObject.START_SDBT_COMMAND, 86, -99, ShimmerObject.BUFFER_SIZE_RESPONSE, Ascii.RS, ShimmerObject.GET_SHIMMER_VERSION_COMMAND, 14, ShimmerObject.SET_INTERNAL_EXP_POWER_ENABLE_COMMAND, ShimmerObject.GET_EXG_REGS_COMMAND, 88, -47, ShimmerObject.BT_FW_VERSION_STR_RESPONSE, ShimmerObject.GET_SHIMMER_VERSION_RESPONSE, 34, ShimmerObject.SET_EXPID_COMMAND, 59, 1, 33, ShimmerObject.GET_CENTER_COMMAND, ShimmerObject.GET_CONFIGTIME_COMMAND, -44, 0, 70, 87, ShimmerObject.BMP280_CALIBRATION_COEFFICIENTS_RESPONSE, -45, ShimmerObject.EMG_CALIBRATION_RESPONSE, 82, 76, ShimmerObject.GET_BUFFER_SIZE_COMMAND, 2, -25, ShimmerObject.GET_BMP280_CALIBRATION_COEFFICIENTS_COMMAND, -60, -56, -98, -22, ByteSourceJsonBootstrapper.UTF8_BOM_3, ShimmerObject.INSTREAM_CMD_RESPONSE, -46, 64, -57, 56, -75, -93, -9, -14, -50, -7, ShimmerObject.SET_EXG_REGS_COMMAND, 21, ShimmerObject.GET_BT_FW_VERSION_STR_COMMAND, ShimmerObject.ROUTINE_COMMUNICATION, SensorADXL371.GET_ALT_ACCEL_SAMPLING_RATE_COMMAND, 93, -92, ShimmerObject.UPD_CALIB_DUMP_COMMAND, ShimmerObject.SET_BUFFER_SIZE_COMMAND, 26, 85, SensorADXL371.ALT_ACCEL_SAMPLING_RATE_RESPONSE, ShimmerObject.STOP_LOGGING_ONLY_COMMAND, ShimmerObject.GET_BLINK_LED, ShimmerObject.SET_BLINK_LED, -11, ShimmerObject.SET_INFOMEM_COMMAND, SensorLIS3MDL.GET_ALT_MAG_CALIBRATION_COMMAND, -29, Ascii.GS, -10, -30, ShimmerObject.GET_FW_VERSION_COMMAND, ShimmerObject.SET_NSHIMMER_COMMAND, ShimmerObject.GET_DAUGHTER_CARD_ID_COMMAND, -54, ShimmerObject.GET_INTERNAL_EXP_POWER_ENABLE_COMMAND, -64, ShimmerObject.SET_ECG_CALIBRATION_COMMAND, 35, SensorADXL371.GET_ALT_ACCEL_CALIBRATION_COMMAND, 13, 83, 78, ShimmerObject.GET_DERIVED_CHANNEL_BYTES, -43, -37, 55, 69, -34, -3, ShimmerObject.GET_INFOMEM_COMMAND, ShimmerObject.FW_VERSION_RESPONSE, 3, -1, ShimmerObject.SET_BAUD_RATE_COMMAND, ShimmerObject.GET_STATUS_COMMAND, ShimmerObject.SET_DERIVED_CHANNEL_BYTES, ShimmerObject.GET_BAUD_RATE_COMMAND, ShimmerObject.RESET_CALIBRATION_VALUE_COMMAND, SensorLSM6DSV.GET_ALT_ACCEL_RANGE_COMMAND, ShimmerObject.INFOMEM_RESPONSE, 27, SensorLIS3MDL.SET_ALT_MAG_CALIBRATION_COMMAND, ShimmerObject.START_LOGGING_ONLY_COMMAND, ByteSourceJsonBootstrapper.UTF8_BOM_2, -35, PSSSigner.TRAILER_IMPLICIT, 127, 17, -39, 92, 65, Ascii.US, 16, 90, -40, 10, -63, ShimmerObject.BLINK_LED_RESPONSE, ShimmerObject.DIR_RESPONSE, -91, -51, ShimmerObject.GET_SHIMMERNAME_COMMAND, -67, ShimmerObject.ALL_CALIBRATION_RESPONSE, ShimmerObject.TRIAL_CONFIG_RESPONSE, -48, 18, -72, -27, SensorLIS3MDL.GET_ALT_MAG_SAMPLING_RATE_COMMAND, SensorLIS3MDL.ALT_MAG_CALIBRATION_RESPONSE, ShimmerObject.GET_DIR_COMMAND, 105, ShimmerObject.STOP_SDBT_COMMAND, 74, 12, ShimmerObject.TEST_CONNECTION_COMMAND, ShimmerObject.CENTER_RESPONSE, ShimmerObject.GET_EXPID_COMMAND, ShimmerObject.DAUGHTER_CARD_ID_RESPONSE, -71, -15, 9, -59, ShimmerObject.DERIVED_CHANNEL_BYTES_RESPONSE, -58, ShimmerObject.GET_NSHIMMER_COMMAND, 24, -16, ShimmerObject.EXPID_RESPONSE, -20, 58, -36, 77, 32, ShimmerObject.SET_SHIMMERNAME_COMMAND, -18, ShimmerObject.INTERNAL_EXP_POWER_ENABLE_RESPONSE, 62, -41, -53, 57, 72};
    private static final int[] CK = {462357, 472066609, 943670861, 1415275113, 1886879365, -1936483679, -1464879427, -993275175, -521670923, -66909679, 404694573, 876298825, 1347903077, 1819507329, -2003855715, -1532251463, -1060647211, -589042959, -117504499, 337322537, 808926789, 1280531041, 1752135293, -2071227751, -1599623499, -1128019247, -656414995, -184876535, 269950501, 741554753, 1213159005, 1684763257};
    private static final int[] FK = {-1548633402, 1453994832, 1736282519, -1301273892};

    private int F0(int[] iArr, int i) {
        return T((iArr[3] ^ (iArr[1] ^ iArr[2])) ^ i) ^ iArr[0];
    }

    private int F1(int[] iArr, int i) {
        return T((iArr[0] ^ (iArr[2] ^ iArr[3])) ^ i) ^ iArr[1];
    }

    private int F2(int[] iArr, int i) {
        return T((iArr[1] ^ (iArr[3] ^ iArr[0])) ^ i) ^ iArr[2];
    }

    private int F3(int[] iArr, int i) {
        return T((iArr[2] ^ (iArr[0] ^ iArr[1])) ^ i) ^ iArr[3];
    }

    private int L(int i) {
        return rotateLeft(i, 24) ^ (((rotateLeft(i, 2) ^ i) ^ rotateLeft(i, 10)) ^ rotateLeft(i, 18));
    }

    private int L_ap(int i) {
        return rotateLeft(i, 23) ^ (rotateLeft(i, 13) ^ i);
    }

    private int T(int i) {
        return L(tau(i));
    }

    private int T_ap(int i) {
        return L_ap(tau(i));
    }

    private int[] expandKey(boolean z, byte[] bArr) {
        int[] iArr = new int[32];
        int[] iArr2 = {Pack.bigEndianToInt(bArr, 0), Pack.bigEndianToInt(bArr, 4), Pack.bigEndianToInt(bArr, 8), Pack.bigEndianToInt(bArr, 12)};
        int i = iArr2[0];
        int[] iArr3 = FK;
        int[] iArr4 = {i ^ iArr3[0], iArr2[1] ^ iArr3[1], iArr2[2] ^ iArr3[2], iArr2[3] ^ iArr3[3]};
        if (z) {
            int i2 = iArr4[0];
            int i3 = (iArr4[1] ^ iArr4[2]) ^ iArr4[3];
            int[] iArr5 = CK;
            int iT_ap = i2 ^ T_ap(i3 ^ iArr5[0]);
            iArr[0] = iT_ap;
            int iT_ap2 = T_ap((iT_ap ^ (iArr4[2] ^ iArr4[3])) ^ iArr5[1]) ^ iArr4[1];
            iArr[1] = iT_ap2;
            int iT_ap3 = T_ap((iT_ap2 ^ (iArr4[3] ^ iArr[0])) ^ iArr5[2]) ^ iArr4[2];
            iArr[2] = iT_ap3;
            iArr[3] = T_ap((iT_ap3 ^ (iArr[0] ^ iArr[1])) ^ iArr5[3]) ^ iArr4[3];
            for (int i4 = 4; i4 < 32; i4++) {
                iArr[i4] = iArr[i4 - 4] ^ T_ap(((iArr[i4 - 3] ^ iArr[i4 - 2]) ^ iArr[i4 - 1]) ^ CK[i4]);
            }
        } else {
            int i5 = iArr4[0];
            int i6 = (iArr4[1] ^ iArr4[2]) ^ iArr4[3];
            int[] iArr6 = CK;
            int iT_ap4 = i5 ^ T_ap(i6 ^ iArr6[0]);
            iArr[31] = iT_ap4;
            int iT_ap5 = T_ap((iT_ap4 ^ (iArr4[2] ^ iArr4[3])) ^ iArr6[1]) ^ iArr4[1];
            iArr[30] = iT_ap5;
            int iT_ap6 = T_ap((iT_ap5 ^ (iArr4[3] ^ iArr[31])) ^ iArr6[2]) ^ iArr4[2];
            iArr[29] = iT_ap6;
            iArr[28] = T_ap((iT_ap6 ^ (iArr[31] ^ iArr[30])) ^ iArr6[3]) ^ iArr4[3];
            for (int i7 = 27; i7 >= 0; i7--) {
                iArr[i7] = iArr[i7 + 4] ^ T_ap(((iArr[i7 + 3] ^ iArr[i7 + 2]) ^ iArr[i7 + 1]) ^ CK[31 - i7]);
            }
        }
        return iArr;
    }

    private int rotateLeft(int i, int i2) {
        return (i >>> (-i2)) | (i << i2);
    }

    private int tau(int i) {
        byte[] bArr = Sbox;
        return (bArr[i & 255] & 255) | ((bArr[(i >> 24) & 255] & 255) << 24) | ((bArr[(i >> 16) & 255] & 255) << 16) | ((bArr[(i >> 8) & 255] & 255) << 8);
    }

    @Override // org.bouncycastle.crypto.BlockCipher
    public String getAlgorithmName() {
        return "SM4";
    }

    @Override // org.bouncycastle.crypto.BlockCipher
    public int getBlockSize() {
        return 16;
    }

    @Override // org.bouncycastle.crypto.BlockCipher
    public void init(boolean z, CipherParameters cipherParameters) throws IllegalArgumentException {
        if (!(cipherParameters instanceof KeyParameter)) {
            throw new IllegalArgumentException("invalid parameter passed to SM4 init - " + cipherParameters.getClass().getName());
        }
        byte[] key = ((KeyParameter) cipherParameters).getKey();
        if (key.length != 16) {
            throw new IllegalArgumentException("SM4 requires a 128 bit key");
        }
        this.rk = expandKey(z, key);
    }

    @Override // org.bouncycastle.crypto.BlockCipher
    public int processBlock(byte[] bArr, int i, byte[] bArr2, int i2) throws IllegalStateException, DataLengthException {
        if (this.rk == null) {
            throw new IllegalStateException("SM4 not initialised");
        }
        if (i + 16 > bArr.length) {
            throw new DataLengthException("input buffer too short");
        }
        if (i2 + 16 > bArr2.length) {
            throw new OutputLengthException("output buffer too short");
        }
        this.X[0] = Pack.bigEndianToInt(bArr, i);
        this.X[1] = Pack.bigEndianToInt(bArr, i + 4);
        this.X[2] = Pack.bigEndianToInt(bArr, i + 8);
        this.X[3] = Pack.bigEndianToInt(bArr, i + 12);
        for (int i3 = 0; i3 < 32; i3 += 4) {
            int[] iArr = this.X;
            iArr[0] = F0(iArr, this.rk[i3]);
            int[] iArr2 = this.X;
            iArr2[1] = F1(iArr2, this.rk[i3 + 1]);
            int[] iArr3 = this.X;
            iArr3[2] = F2(iArr3, this.rk[i3 + 2]);
            int[] iArr4 = this.X;
            iArr4[3] = F3(iArr4, this.rk[i3 + 3]);
        }
        Pack.intToBigEndian(this.X[3], bArr2, i2);
        Pack.intToBigEndian(this.X[2], bArr2, i2 + 4);
        Pack.intToBigEndian(this.X[1], bArr2, i2 + 8);
        Pack.intToBigEndian(this.X[0], bArr2, i2 + 12);
        return 16;
    }

    @Override // org.bouncycastle.crypto.BlockCipher
    public void reset() {
    }
}
