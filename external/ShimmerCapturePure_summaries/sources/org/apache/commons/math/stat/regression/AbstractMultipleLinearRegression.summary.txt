// Summary for: /mnt/c/dev/buccancs/external/ShimmerCapturePure/sources/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java
// Size: 7629 bytes
// Modified: 2025-10-21 16:32:10.359098700 +0100

package org.apache.commons.math.stat.regression;

import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.exception.util.LocalizedFormats;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.apache.commons.math.stat.descriptive.moment.Variance;
import org.apache.commons.math.util.FastMath;

/* JADX WARN: Classes with same name are omitted:
  classes5.dex
 */
/* loaded from: ShimmerCapture_1.3.1_APKPure.apk:libs/commons-math-2.2.jar:org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.class */
public abstract class AbstractMultipleLinearRegression implements MultipleLinearRegression {
    protected RealMatrix X;
    protected RealVector Y;
    private boolean noIntercept = false;

    protected abstract RealVector calculateBeta();

    protected abstract RealMatrix calculateBetaVariance();

    public boolean isNoIntercept() {
        return this.noIntercept;
    }

    public void setNoIntercept(boolean noIntercept) {
        this.noIntercept = noIntercept;
    }

    public void newSampleData(double[] data, int nobs, int nvars) {
        if (data == null) {
            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NULL_NOT_ALLOWED, new Object[0]);
        }
        if (data.length != nobs * (nvars + 1)) {
            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.INVALID_REGRESSION_ARRAY, Integer.valueOf(data.length), Integer.valueOf(nobs), Integer.valueOf(nvars));
        }
        if (nobs <= nvars) {
            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, new Object[0]);
        }
        double[] y = new double[nobs];
        int cols = this.noIntercept ? nvars : nvars + 1;
        double[][] x = new double[nobs][cols];
        int pointer = 0;
        for (int i = 0; i < nobs; i++) {
            int i2 = pointer;
            pointer++;
            y[i] = data[i2];
            if (!this.noIntercept) {
                x[i][0] = 1.0d;
            }
            for (int j = this.noIntercept ? 0 : 1; j < cols; j++) {
                int i3 = pointer;
                pointer++;
                x[i][j] = data[i3];
            }
        }
        this.X = new Array2DRowRealMatrix(x);
        this.Y = new ArrayRealVector(y);
    }

    protected void newYSampleData(double[] y) {
        if (y == null) {
            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NULL_NOT_ALLOWED, new Object[0]);
        }
        if (y.length == 0) {
            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NO_DATA, new Object[0]);
        }
        this.Y = new ArrayRealVector(y);
    }

    protected void newXSampleData(double[][] x) {
        if (x == null) {
            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NULL_NOT_ALLOWED, new Object[0]);
        }
        if (x.length == 0) {
            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NO_DATA, new Object[0]);
        }
        if (this.noIntercept) {
            this.X = new Array2DRowRealMatrix(x, true);
            return;
        }
        int nVars = x[0].length;
        double[][] xAug = new double[x.length][nVars + 1];
        for (int i = 0; i < x.length; i++) {
            if (x[i].length != nVars) {
                throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.DIFFERENT_ROWS_LENGTHS, Integer.valueOf(x[i].length), Integer.valueOf(nVars));
            }
            xAug[i][0] = 1.0d;
            System.arraycopy(x[i], 0, xAug[i], 1, nVars);
        }
        this.X = new Array2DRowRealMatrix(xAug, false);
    }

    protected void validateSampleData(double[][] x, double[] y) {
        if (x == null || y == null || x.length != y.length) {
            LocalizedFormats localizedFormats = LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE;
            Object[] objArr = new Object[2];
            objArr[0] = Integer.valueOf(x == null ? 0 : x.length);
            objArr[1] = Integer.valueOf(y == null ? 0 : y.length);
            throw MathRuntimeException.createIllegalArgumentException(localizedFormats, objArr);
        }
        if (x.length == 0) {
            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NO_DATA, new Object[0]);
        }
        if (x[0].length + 1 > x.length) {
            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, Integer.valueOf(x.length), Integer.valueOf(x[0].length));
        }
    }

    protected void validateCovarianceData(double[][] x, double[][] covariance) {
        if (x.length != covariance.length) {
            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, Integer.valueOf(x.length), Integer.valueOf(covariance.length));
        }
        if (covariance.length > 0 && covariance.length != covariance[0].length) {
            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NON_SQUARE_MATRIX, Integer.valueOf(covariance.length), Integer.valueOf(covariance[0].length));
        }
    }

    @Override // org.apache.commons.math.stat.regression.MultipleLinearRegression
    public double[] estimateRegressionParameters() {
        RealVector b = calculateBeta();
        return b.getData();
    }

    @Override // org.apache.commons.math.stat.regression.MultipleLinearRegression
    public double[] estimateResiduals() {
        RealVector b = calculateBeta();
        RealVector e = this.Y.subtract(this.X.operate(b));
        return e.getData();
    }

    @Override // org.apache.commons.math.stat.regression.MultipleLinearRegression
    public double[][] estimateRegressionParametersVariance() {
        return calculateBetaVariance().getData();
    }

    @Override // org.apache.commons.math.stat.regression.MultipleLinearRegression
    public double[] estimateRegressionParametersStandardErrors() {
        double[][] betaVariance = estimateRegressionParametersVariance();
        double sigma = calculateErrorVariance();
        int length = betaVariance[0].length;
        double[] result = new double[length];
        for (int i = 0; i < length; i++) {
            result[i] = FastMath.sqrt(sigma * betaVariance[i][i]);
        }
        return result;
    }

    @Override // org.apache.commons.math.stat.regression.MultipleLinearRegression
    public double estimateRegressandVariance() {
        return calculateYVariance();
    }

    public double estimateErrorVariance() {
        return calculateErrorVariance();
    }

    public double estimateRegressionStandardError() {
        return Math.sqrt(estimateErrorVariance());
    }

    protected double calculateYVariance() {
        return new Variance().evaluate(this.Y.getData());
    }

    protected double calculateErrorVariance() {
        RealVector residuals = calculateResiduals();
        return residuals.dotProduct(residuals) / (this.X.getRowDimension() - this.X.getColumnDimension());
    }

    protected RealVector calculateResiduals() {
        RealVector b = calculateBeta();
        return this.Y.subtract(this.X.operate(b));
    }
}
