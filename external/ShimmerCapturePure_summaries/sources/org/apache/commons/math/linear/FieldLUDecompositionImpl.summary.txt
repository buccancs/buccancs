// Summary for: /mnt/c/dev/buccancs/external/ShimmerCapturePure/sources/org/apache/commons/math/linear/FieldLUDecompositionImpl.java
// Size: 14076 bytes
// Modified: 2025-10-21 16:32:10.978946100 +0100

package org.apache.commons.math.linear;

import java.lang.reflect.Array;
import org.apache.commons.math.Field;
import org.apache.commons.math.FieldElement;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.exception.util.LocalizedFormats;
import org.apache.commons.math.util.BigReal;

/* JADX WARN: Classes with same name are omitted:
  classes5.dex
 */
/* loaded from: ShimmerCapture_1.3.1_APKPure.apk:libs/commons-math-2.2.jar:org/apache/commons/math/linear/FieldLUDecompositionImpl.class */
public class FieldLUDecompositionImpl<T extends FieldElement<T>> implements FieldLUDecomposition<T> {
    private final Field<T> field;
    private T[][] lu;
    private int[] pivot;
    private boolean even;
    private boolean singular;
    private FieldMatrix<T> cachedL;
    private FieldMatrix<T> cachedU;
    private FieldMatrix<T> cachedP;

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r0v79, types: [org.apache.commons.math.FieldElement] */
    /* JADX WARN: Type inference failed for: r0v90, types: [org.apache.commons.math.FieldElement] */
    public FieldLUDecompositionImpl(FieldMatrix<T> fieldMatrix) throws NonSquareMatrixException {
        if (!fieldMatrix.isSquare()) {
            throw new NonSquareMatrixException(fieldMatrix.getRowDimension(), fieldMatrix.getColumnDimension());
        }
        int columnDimension = fieldMatrix.getColumnDimension();
        this.field = fieldMatrix.getField();
        this.lu = (T[][]) fieldMatrix.getData();
        this.pivot = new int[columnDimension];
        this.cachedL = null;
        this.cachedU = null;
        this.cachedP = null;
        for (int i = 0; i < columnDimension; i++) {
            this.pivot[i] = i;
        }
        this.even = true;
        this.singular = false;
        for (int i2 = 0; i2 < columnDimension; i2++) {
            this.field.getZero();
            for (int i3 = 0; i3 < i2; i3++) {
                T[] tArr = this.lu[i3];
                T t = tArr[i2];
                for (int i4 = 0; i4 < i3; i4++) {
                    t = (FieldElement) t.subtract(tArr[i4].multiply(this.lu[i4][i2]));
                }
                tArr[i2] = t;
            }
            int i5 = i2;
            for (int i6 = i2; i6 < columnDimension; i6++) {
                T[] tArr2 = this.lu[i6];
                T t2 = tArr2[i2];
                for (int i7 = 0; i7 < i2; i7++) {
                    t2 = (FieldElement) t2.subtract(tArr2[i7].multiply(this.lu[i7][i2]));
                }
                tArr2[i2] = t2;
                if (this.lu[i5][i2].equals(this.field.getZero())) {
                    i5++;
                }
            }
            if (i5 >= columnDimension) {
                this.singular = true;
                return;
            }
            if (i5 != i2) {
                this.field.getZero();
                for (int i8 = 0; i8 < columnDimension; i8++) {
                    T t3 = this.lu[i5][i8];
                    this.lu[i5][i8] = this.lu[i2][i8];
                    this.lu[i2][i8] = t3;
                }
                int i9 = this.pivot[i5];
                this.pivot[i5] = this.pivot[i2];
                this.pivot[i2] = i9;
                this.even = !this.even;
            }
            T t4 = this.lu[i2][i2];
            for (int i10 = i2 + 1; i10 < columnDimension; i10++) {
                FieldElement[] fieldElementArr = this.lu[i10];
                fieldElementArr[i2] = (FieldElement) fieldElementArr[i2].divide(t4);
            }
        }
    }

    @Override // org.apache.commons.math.linear.FieldLUDecomposition
    public FieldMatrix<T> getL() throws MatrixIndexException {
        if (this.cachedL == null && !this.singular) {
            int m = this.pivot.length;
            this.cachedL = new Array2DRowFieldMatrix(this.field, m, m);
            for (int i = 0; i < m; i++) {
                T[] luI = this.lu[i];
                for (int j = 0; j < i; j++) {
                    this.cachedL.setEntry(i, j, luI[j]);
                }
                this.cachedL.setEntry(i, i, this.field.getOne());
            }
        }
        return this.cachedL;
    }

    @Override // org.apache.commons.math.linear.FieldLUDecomposition
    public FieldMatrix<T> getU() throws MatrixIndexException {
        if (this.cachedU == null && !this.singular) {
            int m = this.pivot.length;
            this.cachedU = new Array2DRowFieldMatrix(this.field, m, m);
            for (int i = 0; i < m; i++) {
                T[] luI = this.lu[i];
                for (int j = i; j < m; j++) {
                    this.cachedU.setEntry(i, j, luI[j]);
                }
            }
        }
        return this.cachedU;
    }

    @Override // org.apache.commons.math.linear.FieldLUDecomposition
    public FieldMatrix<T> getP() throws MatrixIndexException {
        if (this.cachedP == null && !this.singular) {
            int m = this.pivot.length;
            this.cachedP = new Array2DRowFieldMatrix(this.field, m, m);
            for (int i = 0; i < m; i++) {
                this.cachedP.setEntry(i, this.pivot[i], this.field.getOne());
            }
        }
        return this.cachedP;
    }

    @Override // org.apache.commons.math.linear.FieldLUDecomposition
    public int[] getPivot() {
        return (int[]) this.pivot.clone();
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r0v19, types: [org.apache.commons.math.FieldElement] */
    @Override // org.apache.commons.math.linear.FieldLUDecomposition
    public T getDeterminant() {
        if (this.singular) {
            return this.field.getZero();
        }
        int length = this.pivot.length;
        T one = this.even ? this.field.getOne() : (T) this.field.getZero().subtract(this.field.getOne());
        for (int i = 0; i < length; i++) {
            one = (FieldElement) one.multiply(this.lu[i][i]);
        }
        return one;
    }

    @Override // org.apache.commons.math.linear.FieldLUDecomposition
    public FieldDecompositionSolver<T> getSolver() {
        return new Solver(this.field, this.lu, this.pivot, this.singular);
    }

    /* JADX WARN: Classes with same name are omitted:
  classes5.dex
 */
    /* loaded from: ShimmerCapture_1.3.1_APKPure.apk:libs/commons-math-2.2.jar:org/apache/commons/math/linear/FieldLUDecompositionImpl$Solver.class */
    private static class Solver<T extends FieldElement<T>> implements FieldDecompositionSolver<T> {
        private static final long serialVersionUID = -6353105415121373022L;
        private final Field<T> field;
        private final T[][] lu;
        private final int[] pivot;
        private final boolean singular;

        private Solver(Field<T> field, T[][] lu, int[] pivot, boolean singular) {
            this.field = field;
            this.lu = lu;
            this.pivot = pivot;
            this.singular = singular;
        }

        @Override // org.apache.commons.math.linear.FieldDecompositionSolver
        public boolean isNonSingular() {
            return !this.singular;
        }

        /* JADX WARN: Multi-variable type inference failed */
        @Override // org.apache.commons.math.linear.FieldDecompositionSolver
        public T[] solve(T[] tArr) throws InvalidMatrixException, IllegalArgumentException {
            int length = this.pivot.length;
            if (tArr.length != length) {
                throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.VECTOR_LENGTH_MISMATCH, Integer.valueOf(tArr.length), Integer.valueOf(length));
            }
            if (this.singular) {
                throw new SingularMatrixException();
            }
            T[] tArr2 = (T[]) ((FieldElement[]) Array.newInstance(this.field.getZero().getClass(), length));
            for (int i = 0; i < length; i++) {
                tArr2[i] = tArr[this.pivot[i]];
            }
            for (int i2 = 0; i2 < length; i2++) {
                BigReal bigReal = tArr2[i2];
                for (int i3 = i2 + 1; i3 < length; i3++) {
                    tArr2[i3] = (FieldElement) tArr2[i3].subtract((BigReal) bigReal.multiply((BigReal) this.lu[i3][i2]));
                }
            }
            for (int i4 = length - 1; i4 >= 0; i4--) {
                tArr2[i4] = (FieldElement) tArr2[i4].divide((BigReal) this.lu[i4][i4]);
                BigReal bigReal2 = tArr2[i4];
                for (int i5 = 0; i5 < i4; i5++) {
                    tArr2[i5] = (FieldElement) tArr2[i5].subtract((BigReal) bigReal2.multiply((BigReal) this.lu[i5][i4]));
                }
            }
            return tArr2;
        }

        @Override // org.apache.commons.math.linear.FieldDecompositionSolver
        public FieldVector<T> solve(FieldVector<T> b) throws InvalidMatrixException, IllegalArgumentException {
            try {
                return solve((ArrayFieldVector) b);
            } catch (ClassCastException e) {
                int m = this.pivot.length;
                if (b.getDimension() != m) {
                    throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.VECTOR_LENGTH_MISMATCH, Integer.valueOf(b.getDimension()), Integer.valueOf(m));
                }
                if (this.singular) {
                    throw new SingularMatrixException();
                }
                FieldElement[] fieldElementArr = (FieldElement[]) Array.newInstance(this.field.getZero().getClass(), m);
                for (int row = 0; row < m; row++) {
                    fieldElementArr[row] = b.getEntry(this.pivot[row]);
                }
                for (int col = 0; col < m; col++) {
                    FieldElement fieldElement = fieldElementArr[col];
                    for (int i = col + 1; i < m; i++) {
                        fieldElementArr[i] = (FieldElement) fieldElementArr[i].subtract(fieldElement.multiply(this.lu[i][col]));
                    }
                }
                for (int col2 = m - 1; col2 >= 0; col2--) {
                    fieldElementArr[col2] = (FieldElement) fieldElementArr[col2].divide(this.lu[col2][col2]);
                    FieldElement fieldElement2 = fieldElementArr[col2];
                    for (int i2 = 0; i2 < col2; i2++) {
                        fieldElementArr[i2] = (FieldElement) fieldElementArr[i2].subtract(fieldElement2.multiply(this.lu[i2][col2]));
                    }
                }
                return new ArrayFieldVector(fieldElementArr, false);
            }
        }

        public ArrayFieldVector<T> solve(ArrayFieldVector<T> b) throws InvalidMatrixException, IllegalArgumentException {
            return new ArrayFieldVector<>(solve(b.getDataRef()), false);
        }

        @Override // org.apache.commons.math.linear.FieldDecompositionSolver
        public FieldMatrix<T> solve(FieldMatrix<T> b) throws InvalidMatrixException, IllegalArgumentException {
            int m = this.pivot.length;
            if (b.getRowDimension() != m) {
                throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.DIMENSIONS_MISMATCH_2x2, Integer.valueOf(b.getRowDimension()), Integer.valueOf(b.getColumnDimension()), Integer.valueOf(m), "n");
            }
            if (this.singular) {
                throw new SingularMatrixException();
            }
            int nColB = b.getColumnDimension();
            FieldElement[][] fieldElementArr = (FieldElement[][]) Array.newInstance(this.field.getZero().getClass(), m, nColB);
            for (int row = 0; row < m; row++) {
                FieldElement[] fieldElementArr2 = fieldElementArr[row];
                int pRow = this.pivot[row];
                for (int col = 0; col < nColB; col++) {
                    fieldElementArr2[col] = b.getEntry(pRow, col);
                }
            }
            for (int col2 = 0; col2 < m; col2++) {
                FieldElement[] fieldElementArr3 = fieldElementArr[col2];
                for (int i = col2 + 1; i < m; i++) {
                    FieldElement[] fieldElementArr4 = fieldElementArr[i];
                    T luICol = this.lu[i][col2];
                    for (int j = 0; j < nColB; j++) {
                        fieldElementArr4[j] = (FieldElement) fieldElementArr4[j].subtract(fieldElementArr3[j].multiply(luICol));
                    }
                }
            }
            for (int col3 = m - 1; col3 >= 0; col3--) {
                FieldElement[] fieldElementArr5 = fieldElementArr[col3];
                T luDiag = this.lu[col3][col3];
                for (int j2 = 0; j2 < nColB; j2++) {
                    fieldElementArr5[j2] = (FieldElement) fieldElementArr5[j2].divide(luDiag);
                }
                for (int i2 = 0; i2 < col3; i2++) {
                    FieldElement[] fieldElementArr6 = fieldElementArr[i2];
                    T luICol2 = this.lu[i2][col3];
                    for (int j3 = 0; j3 < nColB; j3++) {
                        fieldElementArr6[j3] = (FieldElement) fieldElementArr6[j3].subtract(fieldElementArr5[j3].multiply(luICol2));
                    }
                }
            }
            return new Array2DRowFieldMatrix(fieldElementArr, false);
        }

        @Override // org.apache.commons.math.linear.FieldDecompositionSolver
        public FieldMatrix<T> getInverse() throws MatrixIndexException, InvalidMatrixException {
            int m = this.pivot.length;
            T one = this.field.getOne();
            FieldMatrix<T> identity = new Array2DRowFieldMatrix<>(this.field, m, m);
            for (int i = 0; i < m; i++) {
                identity.setEntry(i, i, one);
            }
            return solve(identity);
        }
    }
}
