// Summary for: /mnt/c/dev/buccancs/external/ShimmerCapturePure/sources/org/apache/commons/math/linear/ArrayRealVector.java
// Size: 32624 bytes
// Modified: 2025-10-21 16:32:07.681366500 +0100

package org.apache.commons.math.linear;

import java.io.Serializable;
import java.util.Arrays;
import java.util.Iterator;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.exception.util.LocalizedFormats;
import org.apache.commons.math.linear.RealVector;
import org.apache.commons.math.util.FastMath;
import org.apache.commons.math.util.MathUtils;

/* JADX WARN: Classes with same name are omitted:
  classes5.dex
 */
/* loaded from: ShimmerCapture_1.3.1_APKPure.apk:libs/commons-math-2.2.jar:org/apache/commons/math/linear/ArrayRealVector.class */
public class ArrayRealVector extends AbstractRealVector implements Serializable {
    private static final long serialVersionUID = -1097961340710804027L;
    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();
    protected double[] data;

    public ArrayRealVector() {
        this.data = new double[0];
    }

    public ArrayRealVector(int size) {
        this.data = new double[size];
    }

    public ArrayRealVector(int size, double preset) {
        this.data = new double[size];
        Arrays.fill(this.data, preset);
    }

    public ArrayRealVector(double[] d) {
        this.data = (double[]) d.clone();
    }

    public ArrayRealVector(double[] d, boolean copyArray) {
        this.data = copyArray ? (double[]) d.clone() : d;
    }

    public ArrayRealVector(double[] d, int pos, int size) {
        if (d.length < pos + size) {
            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.POSITION_SIZE_MISMATCH_INPUT_ARRAY, Integer.valueOf(pos), Integer.valueOf(size), Integer.valueOf(d.length));
        }
        this.data = new double[size];
        System.arraycopy(d, pos, this.data, 0, size);
    }

    public ArrayRealVector(Double[] d) {
        this.data = new double[d.length];
        for (int i = 0; i < d.length; i++) {
            this.data[i] = d[i].doubleValue();
        }
    }

    public ArrayRealVector(Double[] d, int pos, int size) {
        if (d.length < pos + size) {
            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.POSITION_SIZE_MISMATCH_INPUT_ARRAY, Integer.valueOf(pos), Integer.valueOf(size), Integer.valueOf(d.length));
        }
        this.data = new double[size];
        for (int i = pos; i < pos + size; i++) {
            this.data[i - pos] = d[i].doubleValue();
        }
    }

    public ArrayRealVector(RealVector v) {
        this.data = new double[v.getDimension()];
        for (int i = 0; i < this.data.length; i++) {
            this.data[i] = v.getEntry(i);
        }
    }

    public ArrayRealVector(ArrayRealVector v) {
        this(v, true);
    }

    public ArrayRealVector(ArrayRealVector v, boolean deep) {
        this.data = deep ? (double[]) v.data.clone() : v.data;
    }

    public ArrayRealVector(ArrayRealVector v1, ArrayRealVector v2) {
        this.data = new double[v1.data.length + v2.data.length];
        System.arraycopy(v1.data, 0, this.data, 0, v1.data.length);
        System.arraycopy(v2.data, 0, this.data, v1.data.length, v2.data.length);
    }

    public ArrayRealVector(ArrayRealVector v1, RealVector v2) {
        int l1 = v1.data.length;
        int l2 = v2.getDimension();
        this.data = new double[l1 + l2];
        System.arraycopy(v1.data, 0, this.data, 0, l1);
        for (int i = 0; i < l2; i++) {
            this.data[l1 + i] = v2.getEntry(i);
        }
    }

    public ArrayRealVector(RealVector v1, ArrayRealVector v2) {
        int l1 = v1.getDimension();
        int l2 = v2.data.length;
        this.data = new double[l1 + l2];
        for (int i = 0; i < l1; i++) {
            this.data[i] = v1.getEntry(i);
        }
        System.arraycopy(v2.data, 0, this.data, l1, l2);
    }

    public ArrayRealVector(ArrayRealVector v1, double[] v2) {
        int l1 = v1.getDimension();
        int l2 = v2.length;
        this.data = new double[l1 + l2];
        System.arraycopy(v1.data, 0, this.data, 0, l1);
        System.arraycopy(v2, 0, this.data, l1, l2);
    }

    public ArrayRealVector(double[] v1, ArrayRealVector v2) {
        int l1 = v1.length;
        int l2 = v2.getDimension();
        this.data = new double[l1 + l2];
        System.arraycopy(v1, 0, this.data, 0, l1);
        System.arraycopy(v2.data, 0, this.data, l1, l2);
    }

    public ArrayRealVector(double[] v1, double[] v2) {
        int l1 = v1.length;
        int l2 = v2.length;
        this.data = new double[l1 + l2];
        System.arraycopy(v1, 0, this.data, 0, l1);
        System.arraycopy(v2, 0, this.data, l1, l2);
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public AbstractRealVector copy() {
        return new ArrayRealVector(this, true);
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public RealVector add(RealVector v) throws IllegalArgumentException {
        RealVector.Entry e;
        if (v instanceof ArrayRealVector) {
            return add((ArrayRealVector) v);
        }
        checkVectorDimensions(v);
        double[] out = (double[]) this.data.clone();
        Iterator<RealVector.Entry> it2 = v.sparseIterator();
        while (it2.hasNext() && (e = it2.next()) != null) {
            int index = e.getIndex();
            out[index] = out[index] + e.getValue();
        }
        return new ArrayRealVector(out, false);
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public RealVector add(double[] v) throws IllegalArgumentException {
        checkVectorDimensions(v.length);
        double[] out = (double[]) this.data.clone();
        for (int i = 0; i < this.data.length; i++) {
            int i2 = i;
            out[i2] = out[i2] + v[i];
        }
        return new ArrayRealVector(out, false);
    }

    public ArrayRealVector add(ArrayRealVector v) throws IllegalArgumentException {
        return (ArrayRealVector) add(v.data);
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public RealVector subtract(RealVector v) throws IllegalArgumentException {
        RealVector.Entry e;
        if (v instanceof ArrayRealVector) {
            return subtract((ArrayRealVector) v);
        }
        checkVectorDimensions(v);
        double[] out = (double[]) this.data.clone();
        Iterator<RealVector.Entry> it2 = v.sparseIterator();
        while (it2.hasNext() && (e = it2.next()) != null) {
            int index = e.getIndex();
            out[index] = out[index] - e.getValue();
        }
        return new ArrayRealVector(out, false);
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public RealVector subtract(double[] v) throws IllegalArgumentException {
        checkVectorDimensions(v.length);
        double[] out = (double[]) this.data.clone();
        for (int i = 0; i < this.data.length; i++) {
            int i2 = i;
            out[i2] = out[i2] - v[i];
        }
        return new ArrayRealVector(out, false);
    }

    public ArrayRealVector subtract(ArrayRealVector v) throws IllegalArgumentException {
        return (ArrayRealVector) subtract(v.data);
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public RealVector mapAddToSelf(double d) {
        for (int i = 0; i < this.data.length; i++) {
            this.data[i] = this.data[i] + d;
        }
        return this;
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public RealVector mapSubtractToSelf(double d) {
        for (int i = 0; i < this.data.length; i++) {
            this.data[i] = this.data[i] - d;
        }
        return this;
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public RealVector mapMultiplyToSelf(double d) {
        for (int i = 0; i < this.data.length; i++) {
            this.data[i] = this.data[i] * d;
        }
        return this;
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public RealVector mapDivideToSelf(double d) {
        for (int i = 0; i < this.data.length; i++) {
            this.data[i] = this.data[i] / d;
        }
        return this;
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public RealVector mapPowToSelf(double d) {
        for (int i = 0; i < this.data.length; i++) {
            this.data[i] = FastMath.pow(this.data[i], d);
        }
        return this;
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public RealVector mapExpToSelf() {
        for (int i = 0; i < this.data.length; i++) {
            this.data[i] = FastMath.exp(this.data[i]);
        }
        return this;
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public RealVector mapExpm1ToSelf() {
        for (int i = 0; i < this.data.length; i++) {
            this.data[i] = FastMath.expm1(this.data[i]);
        }
        return this;
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public RealVector mapLogToSelf() {
        for (int i = 0; i < this.data.length; i++) {
            this.data[i] = FastMath.log(this.data[i]);
        }
        return this;
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public RealVector mapLog10ToSelf() {
        for (int i = 0; i < this.data.length; i++) {
            this.data[i] = FastMath.log10(this.data[i]);
        }
        return this;
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public RealVector mapLog1pToSelf() {
        for (int i = 0; i < this.data.length; i++) {
            this.data[i] = FastMath.log1p(this.data[i]);
        }
        return this;
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public RealVector mapCoshToSelf() {
        for (int i = 0; i < this.data.length; i++) {
            this.data[i] = FastMath.cosh(this.data[i]);
        }
        return this;
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public RealVector mapSinhToSelf() {
        for (int i = 0; i < this.data.length; i++) {
            this.data[i] = FastMath.sinh(this.data[i]);
        }
        return this;
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public RealVector mapTanhToSelf() {
        for (int i = 0; i < this.data.length; i++) {
            this.data[i] = FastMath.tanh(this.data[i]);
        }
        return this;
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public RealVector mapCosToSelf() {
        for (int i = 0; i < this.data.length; i++) {
            this.data[i] = FastMath.cos(this.data[i]);
        }
        return this;
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public RealVector mapSinToSelf() {
        for (int i = 0; i < this.data.length; i++) {
            this.data[i] = FastMath.sin(this.data[i]);
        }
        return this;
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public RealVector mapTanToSelf() {
        for (int i = 0; i < this.data.length; i++) {
            this.data[i] = FastMath.tan(this.data[i]);
        }
        return this;
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public RealVector mapAcosToSelf() {
        for (int i = 0; i < this.data.length; i++) {
            this.data[i] = FastMath.acos(this.data[i]);
        }
        return this;
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public RealVector mapAsinToSelf() {
        for (int i = 0; i < this.data.length; i++) {
            this.data[i] = FastMath.asin(this.data[i]);
        }
        return this;
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public RealVector mapAtanToSelf() {
        for (int i = 0; i < this.data.length; i++) {
            this.data[i] = FastMath.atan(this.data[i]);
        }
        return this;
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public RealVector mapInvToSelf() {
        for (int i = 0; i < this.data.length; i++) {
            this.data[i] = 1.0d / this.data[i];
        }
        return this;
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public RealVector mapAbsToSelf() {
        for (int i = 0; i < this.data.length; i++) {
            this.data[i] = FastMath.abs(this.data[i]);
        }
        return this;
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public RealVector mapSqrtToSelf() {
        for (int i = 0; i < this.data.length; i++) {
            this.data[i] = FastMath.sqrt(this.data[i]);
        }
        return this;
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public RealVector mapCbrtToSelf() {
        for (int i = 0; i < this.data.length; i++) {
            this.data[i] = FastMath.cbrt(this.data[i]);
        }
        return this;
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public RealVector mapCeilToSelf() {
        for (int i = 0; i < this.data.length; i++) {
            this.data[i] = FastMath.ceil(this.data[i]);
        }
        return this;
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public RealVector mapFloorToSelf() {
        for (int i = 0; i < this.data.length; i++) {
            this.data[i] = FastMath.floor(this.data[i]);
        }
        return this;
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public RealVector mapRintToSelf() {
        for (int i = 0; i < this.data.length; i++) {
            this.data[i] = FastMath.rint(this.data[i]);
        }
        return this;
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public RealVector mapSignumToSelf() {
        for (int i = 0; i < this.data.length; i++) {
            this.data[i] = FastMath.signum(this.data[i]);
        }
        return this;
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public RealVector mapUlpToSelf() {
        for (int i = 0; i < this.data.length; i++) {
            this.data[i] = FastMath.ulp(this.data[i]);
        }
        return this;
    }

    @Override // org.apache.commons.math.linear.RealVector
    public RealVector ebeMultiply(RealVector v) throws IllegalArgumentException {
        if (v instanceof ArrayRealVector) {
            return ebeMultiply((ArrayRealVector) v);
        }
        checkVectorDimensions(v);
        double[] out = (double[]) this.data.clone();
        for (int i = 0; i < this.data.length; i++) {
            int i2 = i;
            out[i2] = out[i2] * v.getEntry(i);
        }
        return new ArrayRealVector(out, false);
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public RealVector ebeMultiply(double[] v) throws IllegalArgumentException {
        checkVectorDimensions(v.length);
        double[] out = (double[]) this.data.clone();
        for (int i = 0; i < this.data.length; i++) {
            int i2 = i;
            out[i2] = out[i2] * v[i];
        }
        return new ArrayRealVector(out, false);
    }

    public ArrayRealVector ebeMultiply(ArrayRealVector v) throws IllegalArgumentException {
        return (ArrayRealVector) ebeMultiply(v.data);
    }

    @Override // org.apache.commons.math.linear.RealVector
    public RealVector ebeDivide(RealVector v) throws IllegalArgumentException {
        if (v instanceof ArrayRealVector) {
            return ebeDivide((ArrayRealVector) v);
        }
        checkVectorDimensions(v);
        double[] out = (double[]) this.data.clone();
        for (int i = 0; i < this.data.length; i++) {
            int i2 = i;
            out[i2] = out[i2] / v.getEntry(i);
        }
        return new ArrayRealVector(out, false);
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public RealVector ebeDivide(double[] v) throws IllegalArgumentException {
        checkVectorDimensions(v.length);
        double[] out = (double[]) this.data.clone();
        for (int i = 0; i < this.data.length; i++) {
            int i2 = i;
            out[i2] = out[i2] / v[i];
        }
        return new ArrayRealVector(out, false);
    }

    public ArrayRealVector ebeDivide(ArrayRealVector v) throws IllegalArgumentException {
        return (ArrayRealVector) ebeDivide(v.data);
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public double[] getData() {
        return (double[]) this.data.clone();
    }

    public double[] getDataRef() {
        return this.data;
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public double dotProduct(RealVector v) throws IllegalArgumentException {
        RealVector.Entry e;
        if (v instanceof ArrayRealVector) {
            return dotProduct((ArrayRealVector) v);
        }
        checkVectorDimensions(v);
        double dot = 0.0d;
        Iterator<RealVector.Entry> it2 = v.sparseIterator();
        while (it2.hasNext() && (e = it2.next()) != null) {
            dot += this.data[e.getIndex()] * e.getValue();
        }
        return dot;
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public double dotProduct(double[] v) throws IllegalArgumentException {
        checkVectorDimensions(v.length);
        double dot = 0.0d;
        for (int i = 0; i < this.data.length; i++) {
            dot += this.data[i] * v[i];
        }
        return dot;
    }

    public double dotProduct(ArrayRealVector v) throws IllegalArgumentException {
        return dotProduct(v.data);
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public double getNorm() {
        double sum = 0.0d;
        double[] arr$ = this.data;
        for (double a : arr$) {
            sum += a * a;
        }
        return FastMath.sqrt(sum);
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public double getL1Norm() {
        double sum = 0.0d;
        double[] arr$ = this.data;
        for (double a : arr$) {
            sum += FastMath.abs(a);
        }
        return sum;
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public double getLInfNorm() {
        double max = 0.0d;
        double[] arr$ = this.data;
        for (double a : arr$) {
            max = FastMath.max(max, FastMath.abs(a));
        }
        return max;
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public double getDistance(RealVector v) throws IllegalArgumentException {
        if (v instanceof ArrayRealVector) {
            return getDistance((ArrayRealVector) v);
        }
        checkVectorDimensions(v);
        double sum = 0.0d;
        for (int i = 0; i < this.data.length; i++) {
            double delta = this.data[i] - v.getEntry(i);
            sum += delta * delta;
        }
        return FastMath.sqrt(sum);
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public double getDistance(double[] v) throws IllegalArgumentException {
        checkVectorDimensions(v.length);
        double sum = 0.0d;
        for (int i = 0; i < this.data.length; i++) {
            double delta = this.data[i] - v[i];
            sum += delta * delta;
        }
        return FastMath.sqrt(sum);
    }

    public double getDistance(ArrayRealVector v) throws IllegalArgumentException {
        return getDistance(v.data);
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public double getL1Distance(RealVector v) throws IllegalArgumentException {
        if (v instanceof ArrayRealVector) {
            return getL1Distance((ArrayRealVector) v);
        }
        checkVectorDimensions(v);
        double sum = 0.0d;
        for (int i = 0; i < this.data.length; i++) {
            double delta = this.data[i] - v.getEntry(i);
            sum += FastMath.abs(delta);
        }
        return sum;
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public double getL1Distance(double[] v) throws IllegalArgumentException {
        checkVectorDimensions(v.length);
        double sum = 0.0d;
        for (int i = 0; i < this.data.length; i++) {
            double delta = this.data[i] - v[i];
            sum += FastMath.abs(delta);
        }
        return sum;
    }

    public double getL1Distance(ArrayRealVector v) throws IllegalArgumentException {
        return getL1Distance(v.data);
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public double getLInfDistance(RealVector v) throws IllegalArgumentException {
        if (v instanceof ArrayRealVector) {
            return getLInfDistance((ArrayRealVector) v);
        }
        checkVectorDimensions(v);
        double max = 0.0d;
        for (int i = 0; i < this.data.length; i++) {
            double delta = this.data[i] - v.getEntry(i);
            max = FastMath.max(max, FastMath.abs(delta));
        }
        return max;
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public double getLInfDistance(double[] v) throws IllegalArgumentException {
        checkVectorDimensions(v.length);
        double max = 0.0d;
        for (int i = 0; i < this.data.length; i++) {
            double delta = this.data[i] - v[i];
            max = FastMath.max(max, FastMath.abs(delta));
        }
        return max;
    }

    public double getLInfDistance(ArrayRealVector v) throws IllegalArgumentException {
        return getLInfDistance(v.data);
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public RealVector unitVector() throws ArithmeticException {
        double norm = getNorm();
        if (norm == 0.0d) {
            throw MathRuntimeException.createArithmeticException(LocalizedFormats.ZERO_NORM, new Object[0]);
        }
        return mapDivide(norm);
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public void unitize() throws ArithmeticException {
        double norm = getNorm();
        if (norm == 0.0d) {
            throw MathRuntimeException.createArithmeticException(LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR, new Object[0]);
        }
        mapDivideToSelf(norm);
    }

    @Override // org.apache.commons.math.linear.RealVector
    public RealVector projection(RealVector v) {
        return v.mapMultiply(dotProduct(v) / v.dotProduct(v));
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public RealVector projection(double[] v) {
        return projection(new ArrayRealVector(v, false));
    }

    public ArrayRealVector projection(ArrayRealVector v) {
        return (ArrayRealVector) v.mapMultiply(dotProduct(v) / v.dotProduct(v));
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public RealMatrix outerProduct(RealVector v) throws MatrixIndexException, IllegalArgumentException {
        if (v instanceof ArrayRealVector) {
            return outerProduct((ArrayRealVector) v);
        }
        checkVectorDimensions(v);
        int m = this.data.length;
        RealMatrix out = MatrixUtils.createRealMatrix(m, m);
        for (int i = 0; i < this.data.length; i++) {
            for (int j = 0; j < this.data.length; j++) {
                out.setEntry(i, j, this.data[i] * v.getEntry(j));
            }
        }
        return out;
    }

    public RealMatrix outerProduct(ArrayRealVector v) throws IllegalArgumentException {
        return outerProduct(v.data);
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public RealMatrix outerProduct(double[] v) throws MatrixIndexException, IllegalArgumentException {
        checkVectorDimensions(v.length);
        int m = this.data.length;
        RealMatrix out = MatrixUtils.createRealMatrix(m, m);
        for (int i = 0; i < this.data.length; i++) {
            for (int j = 0; j < this.data.length; j++) {
                out.setEntry(i, j, this.data[i] * v[j]);
            }
        }
        return out;
    }

    @Override // org.apache.commons.math.linear.RealVector
    public double getEntry(int index) throws MatrixIndexException {
        return this.data[index];
    }

    @Override // org.apache.commons.math.linear.RealVector
    public int getDimension() {
        return this.data.length;
    }

    @Override // org.apache.commons.math.linear.RealVector
    public RealVector append(RealVector v) {
        try {
            return new ArrayRealVector(this, (ArrayRealVector) v);
        } catch (ClassCastException e) {
            return new ArrayRealVector(this, v);
        }
    }

    public ArrayRealVector append(ArrayRealVector v) {
        return new ArrayRealVector(this, v);
    }

    @Override // org.apache.commons.math.linear.RealVector
    public RealVector append(double in) {
        double[] out = new double[this.data.length + 1];
        System.arraycopy(this.data, 0, out, 0, this.data.length);
        out[this.data.length] = in;
        return new ArrayRealVector(out, false);
    }

    @Override // org.apache.commons.math.linear.RealVector
    public RealVector append(double[] in) {
        return new ArrayRealVector(this, in);
    }

    @Override // org.apache.commons.math.linear.RealVector
    public RealVector getSubVector(int index, int n) {
        ArrayRealVector out = new ArrayRealVector(n);
        try {
            System.arraycopy(this.data, index, out.data, 0, n);
        } catch (IndexOutOfBoundsException e) {
            checkIndex(index);
            checkIndex((index + n) - 1);
        }
        return out;
    }

    @Override // org.apache.commons.math.linear.RealVector
    public void setEntry(int index, double value) {
        try {
            this.data[index] = value;
        } catch (IndexOutOfBoundsException e) {
            checkIndex(index);
        }
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public void setSubVector(int index, RealVector v) throws MatrixIndexException {
        try {
            try {
                set(index, (ArrayRealVector) v);
            } catch (ClassCastException e) {
                for (int i = index; i < index + v.getDimension(); i++) {
                    this.data[i] = v.getEntry(i - index);
                }
            }
        } catch (IndexOutOfBoundsException e2) {
            checkIndex(index);
            checkIndex((index + v.getDimension()) - 1);
        }
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public void setSubVector(int index, double[] v) {
        try {
            System.arraycopy(v, 0, this.data, index, v.length);
        } catch (IndexOutOfBoundsException e) {
            checkIndex(index);
            checkIndex((index + v.length) - 1);
        }
    }

    public void set(int index, ArrayRealVector v) throws MatrixIndexException {
        setSubVector(index, v.data);
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public void set(double value) {
        Arrays.fill(this.data, value);
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector, org.apache.commons.math.linear.RealVector
    public double[] toArray() {
        return (double[]) this.data.clone();
    }

    public String toString() {
        return DEFAULT_FORMAT.format(this);
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector
    protected void checkVectorDimensions(RealVector v) throws IllegalArgumentException {
        checkVectorDimensions(v.getDimension());
    }

    @Override // org.apache.commons.math.linear.AbstractRealVector
    protected void checkVectorDimensions(int n) throws IllegalArgumentException {
        if (this.data.length != n) {
            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.VECTOR_LENGTH_MISMATCH, Integer.valueOf(this.data.length), Integer.valueOf(n));
        }
    }

    @Override // org.apache.commons.math.linear.RealVector
    public boolean isNaN() {
        double[] arr$ = this.data;
        for (double v : arr$) {
            if (Double.isNaN(v)) {
                return true;
            }
        }
        return false;
    }

    @Override // org.apache.commons.math.linear.RealVector
    public boolean isInfinite() {
        if (isNaN()) {
            return false;
        }
        double[] arr$ = this.data;
        for (double v : arr$) {
            if (Double.isInfinite(v)) {
                return true;
            }
        }
        return false;
    }

    public boolean equals(Object other) {
        if (this == other) {
            return true;
        }
        if (other == null || !(other instanceof RealVector)) {
            return false;
        }
        RealVector rhs = (RealVector) other;
        if (this.data.length != rhs.getDimension()) {
            return false;
        }
        if (rhs.isNaN()) {
            return isNaN();
        }
        for (int i = 0; i < this.data.length; i++) {
            if (this.data[i] != rhs.getEntry(i)) {
                return false;
            }
        }
        return true;
    }

    public int hashCode() {
        if (isNaN()) {
            return 9;
        }
        return MathUtils.hash(this.data);
    }
}
