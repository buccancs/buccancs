// Summary for: /mnt/c/dev/buccancs/external/ShimmerCapturePure/sources/org/apache/commons/math/linear/BlockFieldMatrix.java
// Size: 56865 bytes
// Modified: 2025-10-21 16:32:11.099889600 +0100

package org.apache.commons.math.linear;

import java.io.Serializable;
import org.apache.commons.math.Field;
import org.apache.commons.math.FieldElement;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.exception.util.LocalizedFormats;
import org.apache.commons.math.util.FastMath;

/* JADX WARN: Classes with same name are omitted:
  classes5.dex
 */
/* loaded from: ShimmerCapture_1.3.1_APKPure.apk:libs/commons-math-2.2.jar:org/apache/commons/math/linear/BlockFieldMatrix.class */
public class BlockFieldMatrix<T extends FieldElement<T>> extends AbstractFieldMatrix<T> implements Serializable {
    public static final int BLOCK_SIZE = 36;
    private static final long serialVersionUID = -4602336630143123183L;
    private final T[][] blocks;
    private final int rows;
    private final int columns;
    private final int blockRows;
    private final int blockColumns;

    public BlockFieldMatrix(Field<T> field, int i, int i2) throws IllegalArgumentException {
        super(field, i, i2);
        this.rows = i;
        this.columns = i2;
        this.blockRows = ((i + 36) - 1) / 36;
        this.blockColumns = ((i2 + 36) - 1) / 36;
        this.blocks = (T[][]) createBlocksLayout(field, i, i2);
    }

    public BlockFieldMatrix(T[][] rawData) throws IllegalArgumentException {
        this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);
    }

    public BlockFieldMatrix(int i, int i2, T[][] tArr, boolean z) throws IllegalArgumentException {
        super(extractField(tArr), i, i2);
        this.rows = i;
        this.columns = i2;
        this.blockRows = ((i + 36) - 1) / 36;
        this.blockColumns = ((i2 + 36) - 1) / 36;
        if (z) {
            this.blocks = (T[][]) buildArray(getField(), this.blockRows * this.blockColumns, -1);
        } else {
            this.blocks = tArr;
        }
        int i3 = 0;
        for (int i4 = 0; i4 < this.blockRows; i4++) {
            int iBlockHeight = blockHeight(i4);
            int i5 = 0;
            while (i5 < this.blockColumns) {
                if (tArr[i3].length != iBlockHeight * blockWidth(i5)) {
                    throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.WRONG_BLOCK_LENGTH, Integer.valueOf(tArr[i3].length), Integer.valueOf(iBlockHeight * blockWidth(i5)));
                }
                if (z) {
                    ((T[][]) this.blocks)[i3] = (FieldElement[]) tArr[i3].clone();
                }
                i5++;
                i3++;
            }
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    public static <T extends FieldElement<T>> T[][] toBlocksLayout(T[][] tArr) throws IllegalArgumentException {
        int length = tArr.length;
        int length2 = tArr[0].length;
        int i = ((length + 36) - 1) / 36;
        int i2 = ((length2 + 36) - 1) / 36;
        for (T[] tArr2 : tArr) {
            int length3 = tArr2.length;
            if (length3 != length2) {
                throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.DIFFERENT_ROWS_LENGTHS, Integer.valueOf(length2), Integer.valueOf(length3));
            }
        }
        Field fieldExtractField = extractField(tArr);
        T[][] tArr3 = (T[][]) buildArray(fieldExtractField, i * i2, -1);
        int i3 = 0;
        for (int i4 = 0; i4 < i; i4++) {
            int i5 = i4 * 36;
            int iMin = FastMath.min(i5 + 36, length);
            int i6 = iMin - i5;
            for (int i7 = 0; i7 < i2; i7++) {
                int i8 = i7 * 36;
                int iMin2 = FastMath.min(i8 + 36, length2) - i8;
                FieldElement[] fieldElementArrBuildArray = buildArray(fieldExtractField, i6 * iMin2);
                tArr3[i3] = fieldElementArrBuildArray;
                int i9 = 0;
                for (int i10 = i5; i10 < iMin; i10++) {
                    System.arraycopy(tArr[i10], i8, fieldElementArrBuildArray, i9, iMin2);
                    i9 += iMin2;
                }
                i3++;
            }
        }
        return tArr3;
    }

    /* JADX WARN: Multi-variable type inference failed */
    public static <T extends FieldElement<T>> T[][] createBlocksLayout(Field<T> field, int i, int i2) {
        int i3 = ((i + 36) - 1) / 36;
        int i4 = ((i2 + 36) - 1) / 36;
        T[][] tArr = (T[][]) buildArray(field, i3 * i4, -1);
        int i5 = 0;
        for (int i6 = 0; i6 < i3; i6++) {
            int i7 = i6 * 36;
            int iMin = FastMath.min(i7 + 36, i) - i7;
            for (int i8 = 0; i8 < i4; i8++) {
                int i9 = i8 * 36;
                tArr[i5] = buildArray(field, iMin * (FastMath.min(i9 + 36, i2) - i9));
                i5++;
            }
        }
        return tArr;
    }

    @Override // org.apache.commons.math.linear.AbstractFieldMatrix, org.apache.commons.math.linear.FieldMatrix
    public FieldMatrix<T> createMatrix(int rowDimension, int columnDimension) throws IllegalArgumentException {
        return new BlockFieldMatrix(getField(), rowDimension, columnDimension);
    }

    @Override // org.apache.commons.math.linear.AbstractFieldMatrix, org.apache.commons.math.linear.FieldMatrix
    public FieldMatrix<T> copy() {
        BlockFieldMatrix<T> copied = new BlockFieldMatrix<>(getField(), this.rows, this.columns);
        for (int i = 0; i < this.blocks.length; i++) {
            System.arraycopy(this.blocks[i], 0, copied.blocks[i], 0, this.blocks[i].length);
        }
        return copied;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @Override // org.apache.commons.math.linear.AbstractFieldMatrix, org.apache.commons.math.linear.FieldMatrix
    public FieldMatrix<T> add(FieldMatrix<T> fieldMatrix) throws IllegalArgumentException {
        try {
            return add((BlockFieldMatrix) fieldMatrix);
        } catch (ClassCastException e) {
            checkAdditionCompatible(fieldMatrix);
            BlockFieldMatrix blockFieldMatrix = new BlockFieldMatrix(getField(), this.rows, this.columns);
            int i = 0;
            for (int i2 = 0; i2 < blockFieldMatrix.blockRows; i2++) {
                for (int i3 = 0; i3 < blockFieldMatrix.blockColumns; i3++) {
                    FieldElement[] fieldElementArr = ((T[][]) blockFieldMatrix.blocks)[i];
                    T[] tArr = this.blocks[i];
                    int i4 = i2 * 36;
                    int iMin = FastMath.min(i4 + 36, this.rows);
                    int i5 = i3 * 36;
                    int iMin2 = FastMath.min(i5 + 36, this.columns);
                    int i6 = 0;
                    for (int i7 = i4; i7 < iMin; i7++) {
                        for (int i8 = i5; i8 < iMin2; i8++) {
                            fieldElementArr[i6] = (FieldElement) tArr[i6].add(fieldMatrix.getEntry(i7, i8));
                            i6++;
                        }
                    }
                    i++;
                }
            }
            return blockFieldMatrix;
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    public BlockFieldMatrix<T> add(BlockFieldMatrix<T> blockFieldMatrix) throws IllegalArgumentException {
        checkAdditionCompatible(blockFieldMatrix);
        BlockFieldMatrix<T> blockFieldMatrix2 = new BlockFieldMatrix<>(getField(), this.rows, this.columns);
        for (int i = 0; i < blockFieldMatrix2.blocks.length; i++) {
            FieldElement[] fieldElementArr = ((T[][]) blockFieldMatrix2.blocks)[i];
            T[] tArr = this.blocks[i];
            T[] tArr2 = blockFieldMatrix.blocks[i];
            for (int i2 = 0; i2 < fieldElementArr.length; i2++) {
                fieldElementArr[i2] = (FieldElement) tArr[i2].add(tArr2[i2]);
            }
        }
        return blockFieldMatrix2;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @Override // org.apache.commons.math.linear.AbstractFieldMatrix, org.apache.commons.math.linear.FieldMatrix
    public FieldMatrix<T> subtract(FieldMatrix<T> fieldMatrix) throws IllegalArgumentException {
        try {
            return subtract((BlockFieldMatrix) fieldMatrix);
        } catch (ClassCastException e) {
            checkSubtractionCompatible(fieldMatrix);
            BlockFieldMatrix blockFieldMatrix = new BlockFieldMatrix(getField(), this.rows, this.columns);
            int i = 0;
            for (int i2 = 0; i2 < blockFieldMatrix.blockRows; i2++) {
                for (int i3 = 0; i3 < blockFieldMatrix.blockColumns; i3++) {
                    FieldElement[] fieldElementArr = ((T[][]) blockFieldMatrix.blocks)[i];
                    T[] tArr = this.blocks[i];
                    int i4 = i2 * 36;
                    int iMin = FastMath.min(i4 + 36, this.rows);
                    int i5 = i3 * 36;
                    int iMin2 = FastMath.min(i5 + 36, this.columns);
                    int i6 = 0;
                    for (int i7 = i4; i7 < iMin; i7++) {
                        for (int i8 = i5; i8 < iMin2; i8++) {
                            fieldElementArr[i6] = (FieldElement) tArr[i6].subtract(fieldMatrix.getEntry(i7, i8));
                            i6++;
                        }
                    }
                    i++;
                }
            }
            return blockFieldMatrix;
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    public BlockFieldMatrix<T> subtract(BlockFieldMatrix<T> blockFieldMatrix) throws IllegalArgumentException {
        checkSubtractionCompatible(blockFieldMatrix);
        BlockFieldMatrix<T> blockFieldMatrix2 = new BlockFieldMatrix<>(getField(), this.rows, this.columns);
        for (int i = 0; i < blockFieldMatrix2.blocks.length; i++) {
            FieldElement[] fieldElementArr = ((T[][]) blockFieldMatrix2.blocks)[i];
            T[] tArr = this.blocks[i];
            T[] tArr2 = blockFieldMatrix.blocks[i];
            for (int i2 = 0; i2 < fieldElementArr.length; i2++) {
                fieldElementArr[i2] = (FieldElement) tArr[i2].subtract(tArr2[i2]);
            }
        }
        return blockFieldMatrix2;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @Override // org.apache.commons.math.linear.AbstractFieldMatrix, org.apache.commons.math.linear.FieldMatrix
    public FieldMatrix<T> scalarAdd(T t) throws IllegalArgumentException {
        BlockFieldMatrix blockFieldMatrix = new BlockFieldMatrix(getField(), this.rows, this.columns);
        for (int i = 0; i < blockFieldMatrix.blocks.length; i++) {
            FieldElement[] fieldElementArr = ((T[][]) blockFieldMatrix.blocks)[i];
            T[] tArr = this.blocks[i];
            for (int i2 = 0; i2 < fieldElementArr.length; i2++) {
                fieldElementArr[i2] = (FieldElement) tArr[i2].add(t);
            }
        }
        return blockFieldMatrix;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @Override // org.apache.commons.math.linear.AbstractFieldMatrix, org.apache.commons.math.linear.FieldMatrix
    public FieldMatrix<T> scalarMultiply(T t) throws IllegalArgumentException {
        BlockFieldMatrix blockFieldMatrix = new BlockFieldMatrix(getField(), this.rows, this.columns);
        for (int i = 0; i < blockFieldMatrix.blocks.length; i++) {
            FieldElement[] fieldElementArr = ((T[][]) blockFieldMatrix.blocks)[i];
            T[] tArr = this.blocks[i];
            for (int i2 = 0; i2 < fieldElementArr.length; i2++) {
                fieldElementArr[i2] = (FieldElement) tArr[i2].multiply(t);
            }
        }
        return blockFieldMatrix;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r0v51, types: [org.apache.commons.math.FieldElement] */
    @Override // org.apache.commons.math.linear.AbstractFieldMatrix, org.apache.commons.math.linear.FieldMatrix
    public FieldMatrix<T> multiply(FieldMatrix<T> m) throws IllegalArgumentException {
        try {
            return multiply((BlockFieldMatrix) m);
        } catch (ClassCastException e) {
            checkMultiplicationCompatible(m);
            BlockFieldMatrix<T> out = new BlockFieldMatrix<>(getField(), this.rows, m.getColumnDimension());
            T zero = getField().getZero();
            int blockIndex = 0;
            for (int iBlock = 0; iBlock < out.blockRows; iBlock++) {
                int pStart = iBlock * 36;
                int pEnd = FastMath.min(pStart + 36, this.rows);
                for (int jBlock = 0; jBlock < out.blockColumns; jBlock++) {
                    int qStart = jBlock * 36;
                    int qEnd = FastMath.min(qStart + 36, m.getColumnDimension());
                    FieldElement[] fieldElementArr = out.blocks[blockIndex];
                    for (int kBlock = 0; kBlock < this.blockColumns; kBlock++) {
                        int kWidth = blockWidth(kBlock);
                        T[] tBlock = this.blocks[(iBlock * this.blockColumns) + kBlock];
                        int rStart = kBlock * 36;
                        int k = 0;
                        for (int p = pStart; p < pEnd; p++) {
                            int lStart = (p - pStart) * kWidth;
                            int lEnd = lStart + kWidth;
                            for (int q = qStart; q < qEnd; q++) {
                                T sum = zero;
                                int r = rStart;
                                for (int l = lStart; l < lEnd; l++) {
                                    sum = (FieldElement) sum.add(tBlock[l].multiply(m.getEntry(r, q)));
                                    r++;
                                }
                                fieldElementArr[k] = (FieldElement) fieldElementArr[k].add(sum);
                                k++;
                            }
                        }
                    }
                    blockIndex++;
                }
            }
            return out;
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r0v57, types: [org.apache.commons.math.FieldElement] */
    /* JADX WARN: Type inference failed for: r0v68, types: [org.apache.commons.math.FieldElement] */
    public BlockFieldMatrix<T> multiply(BlockFieldMatrix<T> m) throws IllegalArgumentException {
        int n;
        checkMultiplicationCompatible(m);
        BlockFieldMatrix<T> out = new BlockFieldMatrix<>(getField(), this.rows, m.columns);
        T zero = getField().getZero();
        int blockIndex = 0;
        for (int iBlock = 0; iBlock < out.blockRows; iBlock++) {
            int pStart = iBlock * 36;
            int pEnd = FastMath.min(pStart + 36, this.rows);
            for (int jBlock = 0; jBlock < out.blockColumns; jBlock++) {
                int jWidth = out.blockWidth(jBlock);
                int jWidth2 = jWidth + jWidth;
                int jWidth3 = jWidth2 + jWidth;
                int jWidth4 = jWidth3 + jWidth;
                FieldElement[] fieldElementArr = out.blocks[blockIndex];
                for (int kBlock = 0; kBlock < this.blockColumns; kBlock++) {
                    int kWidth = blockWidth(kBlock);
                    T[] tBlock = this.blocks[(iBlock * this.blockColumns) + kBlock];
                    T[] mBlock = m.blocks[(kBlock * m.blockColumns) + jBlock];
                    int k = 0;
                    for (int p = pStart; p < pEnd; p++) {
                        int lStart = (p - pStart) * kWidth;
                        int lEnd = lStart + kWidth;
                        for (int nStart = 0; nStart < jWidth; nStart++) {
                            T sum = zero;
                            int l = lStart;
                            int i = nStart;
                            while (true) {
                                n = i;
                                if (l >= lEnd - 3) {
                                    break;
                                }
                                sum = (FieldElement) ((FieldElement) ((FieldElement) ((FieldElement) sum.add(tBlock[l].multiply(mBlock[n]))).add(tBlock[l + 1].multiply(mBlock[n + jWidth]))).add(tBlock[l + 2].multiply(mBlock[n + jWidth2]))).add(tBlock[l + 3].multiply(mBlock[n + jWidth3]));
                                l += 4;
                                i = n + jWidth4;
                            }
                            while (l < lEnd) {
                                int i2 = l;
                                l++;
                                sum = (FieldElement) sum.add(tBlock[i2].multiply(mBlock[n]));
                                n += jWidth;
                            }
                            fieldElementArr[k] = (FieldElement) fieldElementArr[k].add(sum);
                            k++;
                        }
                    }
                }
                blockIndex++;
            }
        }
        return out;
    }

    @Override // org.apache.commons.math.linear.AbstractFieldMatrix, org.apache.commons.math.linear.FieldMatrix
    public T[][] getData() {
        T[][] tArr = (T[][]) buildArray(getField(), getRowDimension(), getColumnDimension());
        int i = this.columns - ((this.blockColumns - 1) * 36);
        for (int i2 = 0; i2 < this.blockRows; i2++) {
            int i3 = i2 * 36;
            int iMin = FastMath.min(i3 + 36, this.rows);
            int i4 = 0;
            int i5 = 0;
            for (int i6 = i3; i6 < iMin; i6++) {
                T[] tArr2 = tArr[i6];
                int i7 = i2 * this.blockColumns;
                int i8 = 0;
                for (int i9 = 0; i9 < this.blockColumns - 1; i9++) {
                    int i10 = i7;
                    i7++;
                    System.arraycopy(this.blocks[i10], i4, tArr2, i8, 36);
                    i8 += 36;
                }
                System.arraycopy(this.blocks[i7], i5, tArr2, i8, i);
                i4 += 36;
                i5 += i;
            }
        }
        return tArr;
    }

    @Override // org.apache.commons.math.linear.AbstractFieldMatrix, org.apache.commons.math.linear.FieldMatrix
    public FieldMatrix<T> getSubMatrix(int startRow, int endRow, int startColumn, int endColumn) throws MatrixIndexException {
        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);
        BlockFieldMatrix<T> out = new BlockFieldMatrix<>(getField(), (endRow - startRow) + 1, (endColumn - startColumn) + 1);
        int blockStartRow = startRow / 36;
        int rowsShift = startRow % 36;
        int blockStartColumn = startColumn / 36;
        int columnsShift = startColumn % 36;
        int pBlock = blockStartRow;
        for (int iBlock = 0; iBlock < out.blockRows; iBlock++) {
            int iHeight = out.blockHeight(iBlock);
            int qBlock = blockStartColumn;
            for (int jBlock = 0; jBlock < out.blockColumns; jBlock++) {
                int jWidth = out.blockWidth(jBlock);
                int outIndex = (iBlock * out.blockColumns) + jBlock;
                T[] outBlock = out.blocks[outIndex];
                int index = (pBlock * this.blockColumns) + qBlock;
                int width = blockWidth(qBlock);
                int heightExcess = (iHeight + rowsShift) - 36;
                int widthExcess = (jWidth + columnsShift) - 36;
                if (heightExcess > 0) {
                    if (widthExcess > 0) {
                        int width2 = blockWidth(qBlock + 1);
                        copyBlockPart(this.blocks[index], width, rowsShift, 36, columnsShift, 36, outBlock, jWidth, 0, 0);
                        copyBlockPart(this.blocks[index + 1], width2, rowsShift, 36, 0, widthExcess, outBlock, jWidth, 0, jWidth - widthExcess);
                        copyBlockPart(this.blocks[index + this.blockColumns], width, 0, heightExcess, columnsShift, 36, outBlock, jWidth, iHeight - heightExcess, 0);
                        copyBlockPart(this.blocks[index + this.blockColumns + 1], width2, 0, heightExcess, 0, widthExcess, outBlock, jWidth, iHeight - heightExcess, jWidth - widthExcess);
                    } else {
                        copyBlockPart(this.blocks[index], width, rowsShift, 36, columnsShift, jWidth + columnsShift, outBlock, jWidth, 0, 0);
                        copyBlockPart(this.blocks[index + this.blockColumns], width, 0, heightExcess, columnsShift, jWidth + columnsShift, outBlock, jWidth, iHeight - heightExcess, 0);
                    }
                } else if (widthExcess > 0) {
                    int width22 = blockWidth(qBlock + 1);
                    copyBlockPart(this.blocks[index], width, rowsShift, iHeight + rowsShift, columnsShift, 36, outBlock, jWidth, 0, 0);
                    copyBlockPart(this.blocks[index + 1], width22, rowsShift, iHeight + rowsShift, 0, widthExcess, outBlock, jWidth, 0, jWidth - widthExcess);
                } else {
                    copyBlockPart(this.blocks[index], width, rowsShift, iHeight + rowsShift, columnsShift, jWidth + columnsShift, outBlock, jWidth, 0, 0);
                }
                qBlock++;
            }
            pBlock++;
        }
        return out;
    }

    private void copyBlockPart(T[] srcBlock, int srcWidth, int srcStartRow, int srcEndRow, int srcStartColumn, int srcEndColumn, T[] dstBlock, int dstWidth, int dstStartRow, int dstStartColumn) {
        int length = srcEndColumn - srcStartColumn;
        int srcPos = (srcStartRow * srcWidth) + srcStartColumn;
        int dstPos = (dstStartRow * dstWidth) + dstStartColumn;
        for (int srcRow = srcStartRow; srcRow < srcEndRow; srcRow++) {
            System.arraycopy(srcBlock, srcPos, dstBlock, dstPos, length);
            srcPos += srcWidth;
            dstPos += dstWidth;
        }
    }

    @Override // org.apache.commons.math.linear.AbstractFieldMatrix, org.apache.commons.math.linear.FieldMatrix
    public void setSubMatrix(T[][] subMatrix, int row, int column) throws MatrixIndexException {
        int refLength = subMatrix[0].length;
        if (refLength < 1) {
            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.AT_LEAST_ONE_COLUMN, new Object[0]);
        }
        int endRow = (row + subMatrix.length) - 1;
        int endColumn = (column + refLength) - 1;
        checkSubMatrixIndex(row, endRow, column, endColumn);
        for (T[] subRow : subMatrix) {
            if (subRow.length != refLength) {
                throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.DIFFERENT_ROWS_LENGTHS, Integer.valueOf(refLength), Integer.valueOf(subRow.length));
            }
        }
        int blockStartRow = row / 36;
        int blockEndRow = (endRow + 36) / 36;
        int blockStartColumn = column / 36;
        int blockEndColumn = (endColumn + 36) / 36;
        for (int iBlock = blockStartRow; iBlock < blockEndRow; iBlock++) {
            int iHeight = blockHeight(iBlock);
            int firstRow = iBlock * 36;
            int iStart = FastMath.max(row, firstRow);
            int iEnd = FastMath.min(endRow + 1, firstRow + iHeight);
            for (int jBlock = blockStartColumn; jBlock < blockEndColumn; jBlock++) {
                int jWidth = blockWidth(jBlock);
                int firstColumn = jBlock * 36;
                int jStart = FastMath.max(column, firstColumn);
                int jEnd = FastMath.min(endColumn + 1, firstColumn + jWidth);
                int jLength = jEnd - jStart;
                T[] block = this.blocks[(iBlock * this.blockColumns) + jBlock];
                for (int i = iStart; i < iEnd; i++) {
                    System.arraycopy(subMatrix[i - row], jStart - column, block, ((i - firstRow) * jWidth) + (jStart - firstColumn), jLength);
                }
            }
        }
    }

    @Override // org.apache.commons.math.linear.AbstractFieldMatrix, org.apache.commons.math.linear.FieldMatrix
    public FieldMatrix<T> getRowMatrix(int row) throws MatrixIndexException {
        int i;
        checkRowIndex(row);
        BlockFieldMatrix<T> out = new BlockFieldMatrix<>(getField(), 1, this.columns);
        int iBlock = row / 36;
        int iRow = row - (iBlock * 36);
        int outBlockIndex = 0;
        int outIndex = 0;
        T[] outBlock = out.blocks[0];
        for (int jBlock = 0; jBlock < this.blockColumns; jBlock++) {
            int jWidth = blockWidth(jBlock);
            T[] block = this.blocks[(iBlock * this.blockColumns) + jBlock];
            int available = outBlock.length - outIndex;
            if (jWidth > available) {
                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, available);
                outBlockIndex++;
                outBlock = out.blocks[outBlockIndex];
                System.arraycopy(block, iRow * jWidth, outBlock, 0, jWidth - available);
                i = jWidth - available;
            } else {
                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, jWidth);
                i = outIndex + jWidth;
            }
            outIndex = i;
        }
        return out;
    }

    @Override // org.apache.commons.math.linear.AbstractFieldMatrix, org.apache.commons.math.linear.FieldMatrix
    public void setRowMatrix(int row, FieldMatrix<T> matrix) throws MatrixIndexException, InvalidMatrixException {
        try {
            setRowMatrix(row, (BlockFieldMatrix) matrix);
        } catch (ClassCastException e) {
            super.setRowMatrix(row, matrix);
        }
    }

    public void setRowMatrix(int row, BlockFieldMatrix<T> matrix) throws MatrixIndexException, InvalidMatrixException {
        int i;
        checkRowIndex(row);
        int nCols = getColumnDimension();
        if (matrix.getRowDimension() != 1 || matrix.getColumnDimension() != nCols) {
            throw new InvalidMatrixException(LocalizedFormats.DIMENSIONS_MISMATCH_2x2, Integer.valueOf(matrix.getRowDimension()), Integer.valueOf(matrix.getColumnDimension()), 1, Integer.valueOf(nCols));
        }
        int iBlock = row / 36;
        int iRow = row - (iBlock * 36);
        int mBlockIndex = 0;
        int mIndex = 0;
        T[] mBlock = matrix.blocks[0];
        for (int jBlock = 0; jBlock < this.blockColumns; jBlock++) {
            int jWidth = blockWidth(jBlock);
            T[] block = this.blocks[(iBlock * this.blockColumns) + jBlock];
            int available = mBlock.length - mIndex;
            if (jWidth > available) {
                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, available);
                mBlockIndex++;
                mBlock = matrix.blocks[mBlockIndex];
                System.arraycopy(mBlock, 0, block, iRow * jWidth, jWidth - available);
                i = jWidth - available;
            } else {
                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, jWidth);
                i = mIndex + jWidth;
            }
            mIndex = i;
        }
    }

    @Override // org.apache.commons.math.linear.AbstractFieldMatrix, org.apache.commons.math.linear.FieldMatrix
    public FieldMatrix<T> getColumnMatrix(int column) throws MatrixIndexException {
        checkColumnIndex(column);
        BlockFieldMatrix<T> out = new BlockFieldMatrix<>(getField(), this.rows, 1);
        int jBlock = column / 36;
        int jColumn = column - (jBlock * 36);
        int jWidth = blockWidth(jBlock);
        int outBlockIndex = 0;
        int outIndex = 0;
        T[] outBlock = out.blocks[0];
        for (int iBlock = 0; iBlock < this.blockRows; iBlock++) {
            int iHeight = blockHeight(iBlock);
            T[] block = this.blocks[(iBlock * this.blockColumns) + jBlock];
            for (int i = 0; i < iHeight; i++) {
                if (outIndex >= outBlock.length) {
                    outBlockIndex++;
                    outBlock = out.blocks[outBlockIndex];
                    outIndex = 0;
                }
                int i2 = outIndex;
                outIndex++;
                outBlock[i2] = block[(i * jWidth) + jColumn];
            }
        }
        return out;
    }

    @Override // org.apache.commons.math.linear.AbstractFieldMatrix, org.apache.commons.math.linear.FieldMatrix
    public void setColumnMatrix(int column, FieldMatrix<T> matrix) throws MatrixIndexException, InvalidMatrixException {
        try {
            setColumnMatrix(column, (BlockFieldMatrix) matrix);
        } catch (ClassCastException e) {
            super.setColumnMatrix(column, matrix);
        }
    }

    void setColumnMatrix(int column, BlockFieldMatrix<T> matrix) throws MatrixIndexException, InvalidMatrixException {
        checkColumnIndex(column);
        int nRows = getRowDimension();
        if (matrix.getRowDimension() != nRows || matrix.getColumnDimension() != 1) {
            throw new InvalidMatrixException(LocalizedFormats.DIMENSIONS_MISMATCH_2x2, Integer.valueOf(matrix.getRowDimension()), Integer.valueOf(matrix.getColumnDimension()), Integer.valueOf(nRows), 1);
        }
        int jBlock = column / 36;
        int jColumn = column - (jBlock * 36);
        int jWidth = blockWidth(jBlock);
        int mBlockIndex = 0;
        int mIndex = 0;
        T[] mBlock = matrix.blocks[0];
        for (int iBlock = 0; iBlock < this.blockRows; iBlock++) {
            int iHeight = blockHeight(iBlock);
            T[] block = this.blocks[(iBlock * this.blockColumns) + jBlock];
            for (int i = 0; i < iHeight; i++) {
                if (mIndex >= mBlock.length) {
                    mBlockIndex++;
                    mBlock = matrix.blocks[mBlockIndex];
                    mIndex = 0;
                }
                int i2 = mIndex;
                mIndex++;
                block[(i * jWidth) + jColumn] = mBlock[i2];
            }
        }
    }

    @Override // org.apache.commons.math.linear.AbstractFieldMatrix, org.apache.commons.math.linear.FieldMatrix
    public FieldVector<T> getRowVector(int row) throws MatrixIndexException {
        checkRowIndex(row);
        FieldElement[] fieldElementArrBuildArray = buildArray(getField(), this.columns);
        int iBlock = row / 36;
        int iRow = row - (iBlock * 36);
        int outIndex = 0;
        for (int jBlock = 0; jBlock < this.blockColumns; jBlock++) {
            int jWidth = blockWidth(jBlock);
            T[] block = this.blocks[(iBlock * this.blockColumns) + jBlock];
            System.arraycopy(block, iRow * jWidth, fieldElementArrBuildArray, outIndex, jWidth);
            outIndex += jWidth;
        }
        return new ArrayFieldVector(fieldElementArrBuildArray, false);
    }

    @Override // org.apache.commons.math.linear.AbstractFieldMatrix, org.apache.commons.math.linear.FieldMatrix
    public void setRowVector(int row, FieldVector<T> vector) throws MatrixIndexException, InvalidMatrixException {
        try {
            setRow(row, ((ArrayFieldVector) vector).getDataRef());
        } catch (ClassCastException e) {
            super.setRowVector(row, vector);
        }
    }

    @Override // org.apache.commons.math.linear.AbstractFieldMatrix, org.apache.commons.math.linear.FieldMatrix
    public FieldVector<T> getColumnVector(int column) throws MatrixIndexException {
        checkColumnIndex(column);
        FieldElement[] fieldElementArrBuildArray = buildArray(getField(), this.rows);
        int jBlock = column / 36;
        int jColumn = column - (jBlock * 36);
        int jWidth = blockWidth(jBlock);
        int outIndex = 0;
        for (int iBlock = 0; iBlock < this.blockRows; iBlock++) {
            int iHeight = blockHeight(iBlock);
            T[] block = this.blocks[(iBlock * this.blockColumns) + jBlock];
            for (int i = 0; i < iHeight; i++) {
                int i2 = outIndex;
                outIndex++;
                fieldElementArrBuildArray[i2] = block[(i * jWidth) + jColumn];
            }
        }
        return new ArrayFieldVector(fieldElementArrBuildArray, false);
    }

    @Override // org.apache.commons.math.linear.AbstractFieldMatrix, org.apache.commons.math.linear.FieldMatrix
    public void setColumnVector(int column, FieldVector<T> vector) throws MatrixIndexException, InvalidMatrixException {
        try {
            setColumn(column, ((ArrayFieldVector) vector).getDataRef());
        } catch (ClassCastException e) {
            super.setColumnVector(column, vector);
        }
    }

    @Override // org.apache.commons.math.linear.AbstractFieldMatrix, org.apache.commons.math.linear.FieldMatrix
    public T[] getRow(int i) throws MatrixIndexException {
        checkRowIndex(i);
        T[] tArr = (T[]) buildArray(getField(), this.columns);
        int i2 = i / 36;
        int i3 = i - (i2 * 36);
        int i4 = 0;
        for (int i5 = 0; i5 < this.blockColumns; i5++) {
            int iBlockWidth = blockWidth(i5);
            System.arraycopy(this.blocks[(i2 * this.blockColumns) + i5], i3 * iBlockWidth, tArr, i4, iBlockWidth);
            i4 += iBlockWidth;
        }
        return tArr;
    }

    @Override // org.apache.commons.math.linear.AbstractFieldMatrix, org.apache.commons.math.linear.FieldMatrix
    public void setRow(int row, T[] array) throws MatrixIndexException, InvalidMatrixException {
        checkRowIndex(row);
        int nCols = getColumnDimension();
        if (array.length != nCols) {
            throw new InvalidMatrixException(LocalizedFormats.DIMENSIONS_MISMATCH_2x2, 1, Integer.valueOf(array.length), 1, Integer.valueOf(nCols));
        }
        int iBlock = row / 36;
        int iRow = row - (iBlock * 36);
        int outIndex = 0;
        for (int jBlock = 0; jBlock < this.blockColumns; jBlock++) {
            int jWidth = blockWidth(jBlock);
            T[] block = this.blocks[(iBlock * this.blockColumns) + jBlock];
            System.arraycopy(array, outIndex, block, iRow * jWidth, jWidth);
            outIndex += jWidth;
        }
    }

    @Override // org.apache.commons.math.linear.AbstractFieldMatrix, org.apache.commons.math.linear.FieldMatrix
    public T[] getColumn(int i) throws MatrixIndexException {
        checkColumnIndex(i);
        T[] tArr = (T[]) buildArray(getField(), this.rows);
        int i2 = i / 36;
        int i3 = i - (i2 * 36);
        int iBlockWidth = blockWidth(i2);
        int i4 = 0;
        for (int i5 = 0; i5 < this.blockRows; i5++) {
            int iBlockHeight = blockHeight(i5);
            T[] tArr2 = this.blocks[(i5 * this.blockColumns) + i2];
            for (int i6 = 0; i6 < iBlockHeight; i6++) {
                int i7 = i4;
                i4++;
                tArr[i7] = tArr2[(i6 * iBlockWidth) + i3];
            }
        }
        return tArr;
    }

    @Override // org.apache.commons.math.linear.AbstractFieldMatrix, org.apache.commons.math.linear.FieldMatrix
    public void setColumn(int column, T[] array) throws MatrixIndexException, InvalidMatrixException {
        checkColumnIndex(column);
        int nRows = getRowDimension();
        if (array.length != nRows) {
            throw new InvalidMatrixException(LocalizedFormats.DIMENSIONS_MISMATCH_2x2, Integer.valueOf(array.length), 1, Integer.valueOf(nRows), 1);
        }
        int jBlock = column / 36;
        int jColumn = column - (jBlock * 36);
        int jWidth = blockWidth(jBlock);
        int outIndex = 0;
        for (int iBlock = 0; iBlock < this.blockRows; iBlock++) {
            int iHeight = blockHeight(iBlock);
            T[] block = this.blocks[(iBlock * this.blockColumns) + jBlock];
            for (int i = 0; i < iHeight; i++) {
                int i2 = outIndex;
                outIndex++;
                block[(i * jWidth) + jColumn] = array[i2];
            }
        }
    }

    @Override // org.apache.commons.math.linear.AbstractFieldMatrix, org.apache.commons.math.linear.FieldMatrix
    public T getEntry(int row, int column) throws MatrixIndexException {
        try {
            int iBlock = row / 36;
            int jBlock = column / 36;
            int k = ((row - (iBlock * 36)) * blockWidth(jBlock)) + (column - (jBlock * 36));
            return this.blocks[(iBlock * this.blockColumns) + jBlock][k];
        } catch (ArrayIndexOutOfBoundsException e) {
            throw new MatrixIndexException(LocalizedFormats.NO_SUCH_MATRIX_ENTRY, Integer.valueOf(row), Integer.valueOf(column), Integer.valueOf(getRowDimension()), Integer.valueOf(getColumnDimension()));
        }
    }

    @Override // org.apache.commons.math.linear.AbstractFieldMatrix, org.apache.commons.math.linear.FieldMatrix
    public void setEntry(int row, int column, T value) throws MatrixIndexException {
        try {
            int iBlock = row / 36;
            int jBlock = column / 36;
            int k = ((row - (iBlock * 36)) * blockWidth(jBlock)) + (column - (jBlock * 36));
            this.blocks[(iBlock * this.blockColumns) + jBlock][k] = value;
        } catch (ArrayIndexOutOfBoundsException e) {
            throw new MatrixIndexException(LocalizedFormats.NO_SUCH_MATRIX_ENTRY, Integer.valueOf(row), Integer.valueOf(column), Integer.valueOf(getRowDimension()), Integer.valueOf(getColumnDimension()));
        }
    }

    @Override // org.apache.commons.math.linear.AbstractFieldMatrix, org.apache.commons.math.linear.FieldMatrix
    public void addToEntry(int row, int column, T increment) throws MatrixIndexException {
        try {
            int iBlock = row / 36;
            int jBlock = column / 36;
            int k = ((row - (iBlock * 36)) * blockWidth(jBlock)) + (column - (jBlock * 36));
            FieldElement[] fieldElementArr = this.blocks[(iBlock * this.blockColumns) + jBlock];
            fieldElementArr[k] = (FieldElement) fieldElementArr[k].add(increment);
        } catch (ArrayIndexOutOfBoundsException e) {
            throw new MatrixIndexException(LocalizedFormats.NO_SUCH_MATRIX_ENTRY, Integer.valueOf(row), Integer.valueOf(column), Integer.valueOf(getRowDimension()), Integer.valueOf(getColumnDimension()));
        }
    }

    @Override // org.apache.commons.math.linear.AbstractFieldMatrix, org.apache.commons.math.linear.FieldMatrix
    public void multiplyEntry(int row, int column, T factor) throws MatrixIndexException {
        try {
            int iBlock = row / 36;
            int jBlock = column / 36;
            int k = ((row - (iBlock * 36)) * blockWidth(jBlock)) + (column - (jBlock * 36));
            FieldElement[] fieldElementArr = this.blocks[(iBlock * this.blockColumns) + jBlock];
            fieldElementArr[k] = (FieldElement) fieldElementArr[k].multiply(factor);
        } catch (ArrayIndexOutOfBoundsException e) {
            throw new MatrixIndexException(LocalizedFormats.NO_SUCH_MATRIX_ENTRY, Integer.valueOf(row), Integer.valueOf(column), Integer.valueOf(getRowDimension()), Integer.valueOf(getColumnDimension()));
        }
    }

    @Override // org.apache.commons.math.linear.AbstractFieldMatrix, org.apache.commons.math.linear.FieldMatrix
    public FieldMatrix<T> transpose() {
        int nRows = getRowDimension();
        int nCols = getColumnDimension();
        BlockFieldMatrix<T> out = new BlockFieldMatrix<>(getField(), nCols, nRows);
        int blockIndex = 0;
        for (int iBlock = 0; iBlock < this.blockColumns; iBlock++) {
            for (int jBlock = 0; jBlock < this.blockRows; jBlock++) {
                T[] outBlock = out.blocks[blockIndex];
                T[] tBlock = this.blocks[(jBlock * this.blockColumns) + iBlock];
                int pStart = iBlock * 36;
                int pEnd = FastMath.min(pStart + 36, this.columns);
                int qStart = jBlock * 36;
                int qEnd = FastMath.min(qStart + 36, this.rows);
                int k = 0;
                for (int p = pStart; p < pEnd; p++) {
                    int lInc = pEnd - pStart;
                    int l = p - pStart;
                    for (int q = qStart; q < qEnd; q++) {
                        outBlock[k] = tBlock[l];
                        k++;
                        l += lInc;
                    }
                }
                blockIndex++;
            }
        }
        return out;
    }

    @Override // org.apache.commons.math.linear.AbstractFieldMatrix, org.apache.commons.math.linear.AnyMatrix
    public int getRowDimension() {
        return this.rows;
    }

    @Override // org.apache.commons.math.linear.AbstractFieldMatrix, org.apache.commons.math.linear.AnyMatrix
    public int getColumnDimension() {
        return this.columns;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r0v37, types: [org.apache.commons.math.FieldElement] */
    /* JADX WARN: Type inference failed for: r0v4, types: [T extends org.apache.commons.math.FieldElement<T>[], org.apache.commons.math.FieldElement[]] */
    /* JADX WARN: Type inference failed for: r0v46, types: [org.apache.commons.math.FieldElement] */
    /* JADX WARN: Type inference failed for: r2v5, types: [org.apache.commons.math.FieldElement] */
    @Override // org.apache.commons.math.linear.AbstractFieldMatrix, org.apache.commons.math.linear.FieldMatrix
    public T[] operate(T[] tArr) throws IllegalArgumentException {
        if (tArr.length != this.columns) {
            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.VECTOR_LENGTH_MISMATCH, Integer.valueOf(tArr.length), Integer.valueOf(this.columns));
        }
        ?? r0 = (T[]) buildArray(getField(), this.rows);
        T zero = getField().getZero();
        for (int i = 0; i < this.blockRows; i++) {
            int i2 = i * 36;
            int iMin = FastMath.min(i2 + 36, this.rows);
            for (int i3 = 0; i3 < this.blockColumns; i3++) {
                T[] tArr2 = this.blocks[(i * this.blockColumns) + i3];
                int i4 = i3 * 36;
                int iMin2 = FastMath.min(i4 + 36, this.columns);
                int i5 = 0;
                for (int i6 = i2; i6 < iMin; i6++) {
                    T t = zero;
                    int i7 = i4;
                    while (i7 < iMin2 - 3) {
                        t = (FieldElement) ((FieldElement) ((FieldElement) ((FieldElement) t.add(tArr2[i5].multiply(tArr[i7]))).add(tArr2[i5 + 1].multiply(tArr[i7 + 1]))).add(tArr2[i5 + 2].multiply(tArr[i7 + 2]))).add(tArr2[i5 + 3].multiply(tArr[i7 + 3]));
                        i5 += 4;
                        i7 += 4;
                    }
                    while (i7 < iMin2) {
                        int i8 = i5;
                        i5++;
                        int i9 = i7;
                        i7++;
                        t = (FieldElement) t.add(tArr2[i8].multiply(tArr[i9]));
                    }
                    r0[i6] = (FieldElement) r0[i6].add(t);
                }
            }
        }
        return r0;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r0v4, types: [T extends org.apache.commons.math.FieldElement<T>[], org.apache.commons.math.FieldElement[]] */
    /* JADX WARN: Type inference failed for: r0v46, types: [org.apache.commons.math.FieldElement] */
    /* JADX WARN: Type inference failed for: r0v57, types: [org.apache.commons.math.FieldElement] */
    /* JADX WARN: Type inference failed for: r2v5, types: [org.apache.commons.math.FieldElement] */
    @Override // org.apache.commons.math.linear.AbstractFieldMatrix, org.apache.commons.math.linear.FieldMatrix
    public T[] preMultiply(T[] tArr) throws IllegalArgumentException {
        if (tArr.length != this.rows) {
            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.VECTOR_LENGTH_MISMATCH, Integer.valueOf(tArr.length), Integer.valueOf(this.rows));
        }
        ?? r0 = (T[]) buildArray(getField(), this.columns);
        T zero = getField().getZero();
        for (int i = 0; i < this.blockColumns; i++) {
            int iBlockWidth = blockWidth(i);
            int i2 = iBlockWidth + iBlockWidth;
            int i3 = i2 + iBlockWidth;
            int i4 = i3 + iBlockWidth;
            int i5 = i * 36;
            int iMin = FastMath.min(i5 + 36, this.columns);
            for (int i6 = 0; i6 < this.blockRows; i6++) {
                T[] tArr2 = this.blocks[(i6 * this.blockColumns) + i];
                int i7 = i6 * 36;
                int iMin2 = FastMath.min(i7 + 36, this.rows);
                for (int i8 = i5; i8 < iMin; i8++) {
                    int i9 = i8 - i5;
                    T t = zero;
                    int i10 = i7;
                    while (i10 < iMin2 - 3) {
                        t = (FieldElement) ((FieldElement) ((FieldElement) ((FieldElement) t.add(tArr2[i9].multiply(tArr[i10]))).add(tArr2[i9 + iBlockWidth].multiply(tArr[i10 + 1]))).add(tArr2[i9 + i2].multiply(tArr[i10 + 2]))).add(tArr2[i9 + i3].multiply(tArr[i10 + 3]));
                        i9 += i4;
                        i10 += 4;
                    }
                    while (i10 < iMin2) {
                        int i11 = i10;
                        i10++;
                        t = (FieldElement) t.add(tArr2[i9].multiply(tArr[i11]));
                        i9 += iBlockWidth;
                    }
                    r0[i8] = (FieldElement) r0[i8].add(t);
                }
            }
        }
        return r0;
    }

    @Override // org.apache.commons.math.linear.AbstractFieldMatrix, org.apache.commons.math.linear.FieldMatrix
    public T walkInRowOrder(FieldMatrixChangingVisitor<T> fieldMatrixChangingVisitor) throws MatrixVisitorException {
        fieldMatrixChangingVisitor.start(this.rows, this.columns, 0, this.rows - 1, 0, this.columns - 1);
        for (int i = 0; i < this.blockRows; i++) {
            int i2 = i * 36;
            int iMin = FastMath.min(i2 + 36, this.rows);
            for (int i3 = i2; i3 < iMin; i3++) {
                for (int i4 = 0; i4 < this.blockColumns; i4++) {
                    int iBlockWidth = blockWidth(i4);
                    int i5 = i4 * 36;
                    int iMin2 = FastMath.min(i5 + 36, this.columns);
                    Object[] objArr = this.blocks[(i * this.blockColumns) + i4];
                    int i6 = (i3 - i2) * iBlockWidth;
                    for (int i7 = i5; i7 < iMin2; i7++) {
                        objArr[i6] = fieldMatrixChangingVisitor.visit(i3, i7, objArr[i6]);
                        i6++;
                    }
                }
            }
        }
        return (T) fieldMatrixChangingVisitor.end();
    }

    @Override // org.apache.commons.math.linear.AbstractFieldMatrix, org.apache.commons.math.linear.FieldMatrix
    public T walkInRowOrder(FieldMatrixPreservingVisitor<T> fieldMatrixPreservingVisitor) throws MatrixVisitorException {
        fieldMatrixPreservingVisitor.start(this.rows, this.columns, 0, this.rows - 1, 0, this.columns - 1);
        for (int i = 0; i < this.blockRows; i++) {
            int i2 = i * 36;
            int iMin = FastMath.min(i2 + 36, this.rows);
            for (int i3 = i2; i3 < iMin; i3++) {
                for (int i4 = 0; i4 < this.blockColumns; i4++) {
                    int iBlockWidth = blockWidth(i4);
                    int i5 = i4 * 36;
                    int iMin2 = FastMath.min(i5 + 36, this.columns);
                    T[] tArr = this.blocks[(i * this.blockColumns) + i4];
                    int i6 = (i3 - i2) * iBlockWidth;
                    for (int i7 = i5; i7 < iMin2; i7++) {
                        fieldMatrixPreservingVisitor.visit(i3, i7, tArr[i6]);
                        i6++;
                    }
                }
            }
        }
        return (T) fieldMatrixPreservingVisitor.end();
    }

    @Override // org.apache.commons.math.linear.AbstractFieldMatrix, org.apache.commons.math.linear.FieldMatrix
    public T walkInRowOrder(FieldMatrixChangingVisitor<T> fieldMatrixChangingVisitor, int i, int i2, int i3, int i4) throws MatrixVisitorException, MatrixIndexException {
        checkSubMatrixIndex(i, i2, i3, i4);
        fieldMatrixChangingVisitor.start(this.rows, this.columns, i, i2, i3, i4);
        for (int i5 = i / 36; i5 < 1 + (i2 / 36); i5++) {
            int i6 = i5 * 36;
            int iMax = FastMath.max(i, i6);
            int iMin = FastMath.min((i5 + 1) * 36, 1 + i2);
            for (int i7 = iMax; i7 < iMin; i7++) {
                for (int i8 = i3 / 36; i8 < 1 + (i4 / 36); i8++) {
                    int iBlockWidth = blockWidth(i8);
                    int i9 = i8 * 36;
                    int iMax2 = FastMath.max(i3, i9);
                    int iMin2 = FastMath.min((i8 + 1) * 36, 1 + i4);
                    Object[] objArr = this.blocks[(i5 * this.blockColumns) + i8];
                    int i10 = (((i7 - i6) * iBlockWidth) + iMax2) - i9;
                    for (int i11 = iMax2; i11 < iMin2; i11++) {
                        objArr[i10] = fieldMatrixChangingVisitor.visit(i7, i11, objArr[i10]);
                        i10++;
                    }
                }
            }
        }
        return (T) fieldMatrixChangingVisitor.end();
    }

    @Override // org.apache.commons.math.linear.AbstractFieldMatrix, org.apache.commons.math.linear.FieldMatrix
    public T walkInRowOrder(FieldMatrixPreservingVisitor<T> fieldMatrixPreservingVisitor, int i, int i2, int i3, int i4) throws MatrixVisitorException, MatrixIndexException {
        checkSubMatrixIndex(i, i2, i3, i4);
        fieldMatrixPreservingVisitor.start(this.rows, this.columns, i, i2, i3, i4);
        for (int i5 = i / 36; i5 < 1 + (i2 / 36); i5++) {
            int i6 = i5 * 36;
            int iMax = FastMath.max(i, i6);
            int iMin = FastMath.min((i5 + 1) * 36, 1 + i2);
            for (int i7 = iMax; i7 < iMin; i7++) {
                for (int i8 = i3 / 36; i8 < 1 + (i4 / 36); i8++) {
                    int iBlockWidth = blockWidth(i8);
                    int i9 = i8 * 36;
                    int iMax2 = FastMath.max(i3, i9);
                    int iMin2 = FastMath.min((i8 + 1) * 36, 1 + i4);
                    T[] tArr = this.blocks[(i5 * this.blockColumns) + i8];
                    int i10 = (((i7 - i6) * iBlockWidth) + iMax2) - i9;
                    for (int i11 = iMax2; i11 < iMin2; i11++) {
                        fieldMatrixPreservingVisitor.visit(i7, i11, tArr[i10]);
                        i10++;
                    }
                }
            }
        }
        return (T) fieldMatrixPreservingVisitor.end();
    }

    @Override // org.apache.commons.math.linear.AbstractFieldMatrix, org.apache.commons.math.linear.FieldMatrix
    public T walkInOptimizedOrder(FieldMatrixChangingVisitor<T> fieldMatrixChangingVisitor) throws MatrixVisitorException {
        fieldMatrixChangingVisitor.start(this.rows, this.columns, 0, this.rows - 1, 0, this.columns - 1);
        int i = 0;
        for (int i2 = 0; i2 < this.blockRows; i2++) {
            int i3 = i2 * 36;
            int iMin = FastMath.min(i3 + 36, this.rows);
            for (int i4 = 0; i4 < this.blockColumns; i4++) {
                int i5 = i4 * 36;
                int iMin2 = FastMath.min(i5 + 36, this.columns);
                Object[] objArr = this.blocks[i];
                int i6 = 0;
                for (int i7 = i3; i7 < iMin; i7++) {
                    for (int i8 = i5; i8 < iMin2; i8++) {
                        objArr[i6] = fieldMatrixChangingVisitor.visit(i7, i8, objArr[i6]);
                        i6++;
                    }
                }
                i++;
            }
        }
        return (T) fieldMatrixChangingVisitor.end();
    }

    @Override // org.apache.commons.math.linear.AbstractFieldMatrix, org.apache.commons.math.linear.FieldMatrix
    public T walkInOptimizedOrder(FieldMatrixPreservingVisitor<T> fieldMatrixPreservingVisitor) throws MatrixVisitorException {
        fieldMatrixPreservingVisitor.start(this.rows, this.columns, 0, this.rows - 1, 0, this.columns - 1);
        int i = 0;
        for (int i2 = 0; i2 < this.blockRows; i2++) {
            int i3 = i2 * 36;
            int iMin = FastMath.min(i3 + 36, this.rows);
            for (int i4 = 0; i4 < this.blockColumns; i4++) {
                int i5 = i4 * 36;
                int iMin2 = FastMath.min(i5 + 36, this.columns);
                T[] tArr = this.blocks[i];
                int i6 = 0;
                for (int i7 = i3; i7 < iMin; i7++) {
                    for (int i8 = i5; i8 < iMin2; i8++) {
                        fieldMatrixPreservingVisitor.visit(i7, i8, tArr[i6]);
                        i6++;
                    }
                }
                i++;
            }
        }
        return (T) fieldMatrixPreservingVisitor.end();
    }

    @Override // org.apache.commons.math.linear.AbstractFieldMatrix, org.apache.commons.math.linear.FieldMatrix
    public T walkInOptimizedOrder(FieldMatrixChangingVisitor<T> fieldMatrixChangingVisitor, int i, int i2, int i3, int i4) throws MatrixVisitorException, MatrixIndexException {
        checkSubMatrixIndex(i, i2, i3, i4);
        fieldMatrixChangingVisitor.start(this.rows, this.columns, i, i2, i3, i4);
        for (int i5 = i / 36; i5 < 1 + (i2 / 36); i5++) {
            int i6 = i5 * 36;
            int iMax = FastMath.max(i, i6);
            int iMin = FastMath.min((i5 + 1) * 36, 1 + i2);
            for (int i7 = i3 / 36; i7 < 1 + (i4 / 36); i7++) {
                int iBlockWidth = blockWidth(i7);
                int i8 = i7 * 36;
                int iMax2 = FastMath.max(i3, i8);
                int iMin2 = FastMath.min((i7 + 1) * 36, 1 + i4);
                Object[] objArr = this.blocks[(i5 * this.blockColumns) + i7];
                for (int i9 = iMax; i9 < iMin; i9++) {
                    int i10 = (((i9 - i6) * iBlockWidth) + iMax2) - i8;
                    for (int i11 = iMax2; i11 < iMin2; i11++) {
                        objArr[i10] = fieldMatrixChangingVisitor.visit(i9, i11, objArr[i10]);
                        i10++;
                    }
                }
            }
        }
        return (T) fieldMatrixChangingVisitor.end();
    }

    @Override // org.apache.commons.math.linear.AbstractFieldMatrix, org.apache.commons.math.linear.FieldMatrix
    public T walkInOptimizedOrder(FieldMatrixPreservingVisitor<T> fieldMatrixPreservingVisitor, int i, int i2, int i3, int i4) throws MatrixVisitorException, MatrixIndexException {
        checkSubMatrixIndex(i, i2, i3, i4);
        fieldMatrixPreservingVisitor.start(this.rows, this.columns, i, i2, i3, i4);
        for (int i5 = i / 36; i5 < 1 + (i2 / 36); i5++) {
            int i6 = i5 * 36;
            int iMax = FastMath.max(i, i6);
            int iMin = FastMath.min((i5 + 1) * 36, 1 + i2);
            for (int i7 = i3 / 36; i7 < 1 + (i4 / 36); i7++) {
                int iBlockWidth = blockWidth(i7);
                int i8 = i7 * 36;
                int iMax2 = FastMath.max(i3, i8);
                int iMin2 = FastMath.min((i7 + 1) * 36, 1 + i4);
                T[] tArr = this.blocks[(i5 * this.blockColumns) + i7];
                for (int i9 = iMax; i9 < iMin; i9++) {
                    int i10 = (((i9 - i6) * iBlockWidth) + iMax2) - i8;
                    for (int i11 = iMax2; i11 < iMin2; i11++) {
                        fieldMatrixPreservingVisitor.visit(i9, i11, tArr[i10]);
                        i10++;
                    }
                }
            }
        }
        return (T) fieldMatrixPreservingVisitor.end();
    }

    private int blockHeight(int blockRow) {
        if (blockRow == this.blockRows - 1) {
            return this.rows - (blockRow * 36);
        }
        return 36;
    }

    private int blockWidth(int blockColumn) {
        if (blockColumn == this.blockColumns - 1) {
            return this.columns - (blockColumn * 36);
        }
        return 36;
    }
}
