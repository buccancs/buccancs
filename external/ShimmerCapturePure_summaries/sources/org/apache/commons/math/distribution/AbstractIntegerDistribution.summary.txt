// Summary for: /mnt/c/dev/buccancs/external/ShimmerCapturePure/sources/org/apache/commons/math/distribution/AbstractIntegerDistribution.java
// Size: 7551 bytes
// Modified: 2025-10-21 16:32:06.957084200 +0100

package org.apache.commons.math.distribution;

import java.io.Serializable;
import org.apache.commons.math.MathException;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.exception.util.LocalizedFormats;
import org.apache.commons.math.random.RandomDataImpl;
import org.apache.commons.math.util.FastMath;

/* JADX WARN: Classes with same name are omitted:
  classes5.dex
 */
/* loaded from: ShimmerCapture_1.3.1_APKPure.apk:libs/commons-math-2.2.jar:org/apache/commons/math/distribution/AbstractIntegerDistribution.class */
public abstract class AbstractIntegerDistribution extends AbstractDistribution implements IntegerDistribution, Serializable {
    private static final long serialVersionUID = -1146319659338487221L;
    protected final RandomDataImpl randomData = new RandomDataImpl();

    @Override // org.apache.commons.math.distribution.IntegerDistribution
    public abstract double cumulativeProbability(int i) throws MathException;

    protected abstract int getDomainLowerBound(double d);

    protected abstract int getDomainUpperBound(double d);

    protected AbstractIntegerDistribution() {
    }

    @Override // org.apache.commons.math.distribution.Distribution
    public double cumulativeProbability(double x) throws MathException {
        return cumulativeProbability((int) FastMath.floor(x));
    }

    @Override // org.apache.commons.math.distribution.AbstractDistribution, org.apache.commons.math.distribution.Distribution
    public double cumulativeProbability(double x0, double x1) throws MathException {
        if (x0 > x1) {
            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, Double.valueOf(x0), Double.valueOf(x1));
        }
        if (FastMath.floor(x0) < x0) {
            return cumulativeProbability(((int) FastMath.floor(x0)) + 1, (int) FastMath.floor(x1));
        }
        return cumulativeProbability((int) FastMath.floor(x0), (int) FastMath.floor(x1));
    }

    @Override // org.apache.commons.math.distribution.DiscreteDistribution
    public double probability(double x) {
        double fl = FastMath.floor(x);
        if (fl == x) {
            return probability((int) x);
        }
        return 0.0d;
    }

    @Override // org.apache.commons.math.distribution.IntegerDistribution
    public double cumulativeProbability(int x0, int x1) throws MathException {
        if (x0 > x1) {
            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, Integer.valueOf(x0), Integer.valueOf(x1));
        }
        return cumulativeProbability(x1) - cumulativeProbability(x0 - 1);
    }

    /* JADX WARN: Incorrect condition in loop: B:24:0x0089 */
    @Override // org.apache.commons.math.distribution.IntegerDistribution
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    public int inverseCumulativeProbability(double r8) throws org.apache.commons.math.MathException {
        /*
            r7 = this;
            r0 = r8
            r1 = 0
            int r0 = (r0 > r1 ? 1 : (r0 == r1 ? 0 : -1))
            if (r0 < 0) goto Lc
            r0 = r8
            r1 = 4607182418800017408(0x3ff0000000000000, double:1.0)
            int r0 = (r0 > r1 ? 1 : (r0 == r1 ? 0 : -1))
            if (r0 <= 0) goto L2c
        Lc:
            org.apache.commons.math.exception.util.LocalizedFormats r0 = org.apache.commons.math.exception.util.LocalizedFormats.OUT_OF_RANGE_SIMPLE
            r1 = 3
            java.lang.Object[] r1 = new java.lang.Object[r1]
            r2 = r1
            r3 = 0
            r4 = r8
            java.lang.Double r4 = java.lang.Double.valueOf(r4)
            r2[r3] = r4
            r2 = r1
            r3 = 1
            r4 = 0
            java.lang.Double r4 = java.lang.Double.valueOf(r4)
            r2[r3] = r4
            r2 = r1
            r3 = 2
            r4 = 4607182418800017408(0x3ff0000000000000, double:1.0)
            java.lang.Double r4 = java.lang.Double.valueOf(r4)
            r2[r3] = r4
            java.lang.IllegalArgumentException r0 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(r0, r1)
            throw r0
        L2c:
            r0 = r7
            r1 = r8
            int r0 = r0.getDomainLowerBound(r1)
            r10 = r0
            r0 = r7
            r1 = r8
            int r0 = r0.getDomainUpperBound(r1)
            r11 = r0
        L39:
            r0 = r10
            r1 = r11
            if (r0 >= r1) goto L7e
            r0 = r10
            r1 = r11
            r2 = r10
            int r1 = r1 - r2
            r2 = 2
            int r1 = r1 / r2
            int r0 = r0 + r1
            r14 = r0
            r0 = r7
            r1 = r14
            double r0 = r0.checkedCumulativeProbability(r1)
            r12 = r0
            r0 = r12
            r1 = r8
            int r0 = (r0 > r1 ? 1 : (r0 == r1 ? 0 : -1))
            if (r0 <= 0) goto L6c
            r0 = r14
            r1 = r11
            if (r0 != r1) goto L65
            int r11 = r11 + (-1)
            goto L7b
        L65:
            r0 = r14
            r11 = r0
            goto L7b
        L6c:
            r0 = r14
            r1 = r10
            if (r0 != r1) goto L78
            int r10 = r10 + 1
            goto L7b
        L78:
            r0 = r14
            r10 = r0
        L7b:
            goto L39
        L7e:
            r0 = r7
            r1 = r10
            double r0 = r0.checkedCumulativeProbability(r1)
            r12 = r0
        L85:
            r0 = r12
            r1 = r8
            int r0 = (r0 > r1 ? 1 : (r0 == r1 ? 0 : -1))
            if (r0 <= 0) goto L99
            int r10 = r10 + (-1)
            r0 = r7
            r1 = r10
            double r0 = r0.checkedCumulativeProbability(r1)
            r12 = r0
            goto L85
        L99:
            r0 = r10
            return r0
        */
        throw new UnsupportedOperationException("Method not decompiled: org.apache.commons.math.distribution.AbstractIntegerDistribution.inverseCumulativeProbability(double):int");
    }

    public void reseedRandomGenerator(long seed) {
        this.randomData.reSeed(seed);
    }

    public int sample() throws MathException {
        return this.randomData.nextInversionDeviate(this);
    }

    public int[] sample(int sampleSize) throws MathException {
        if (sampleSize <= 0) {
            MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_SAMPLE_SIZE, Integer.valueOf(sampleSize));
        }
        int[] out = new int[sampleSize];
        for (int i = 0; i < sampleSize; i++) {
            out[i] = sample();
        }
        return out;
    }

    private double checkedCumulativeProbability(int argument) throws MathException {
        double result = cumulativeProbability(argument);
        if (Double.isNaN(result)) {
            throw new MathException(LocalizedFormats.DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN, Integer.valueOf(argument));
        }
        return result;
    }

    public boolean isSupportLowerBoundInclusive() {
        return true;
    }

    public boolean isSupportUpperBoundInclusive() {
        return true;
    }
}
