// Summary for: /mnt/c/dev/buccancs/external/ShimmerCapturePure/sources/org/apache/commons/math/distribution/WeibullDistributionImpl.java
// Size: 6459 bytes
// Modified: 2025-10-21 16:32:08.230918700 +0100

package org.apache.commons.math.distribution;

import java.io.Serializable;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.exception.util.LocalizedFormats;
import org.apache.commons.math.special.Gamma;
import org.apache.commons.math.util.FastMath;

/* JADX WARN: Classes with same name are omitted:
  classes5.dex
 */
/* loaded from: ShimmerCapture_1.3.1_APKPure.apk:libs/commons-math-2.2.jar:org/apache/commons/math/distribution/WeibullDistributionImpl.class */
public class WeibullDistributionImpl extends AbstractContinuousDistribution implements WeibullDistribution, Serializable {
    public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1.0E-9d;
    private static final long serialVersionUID = 8589540077390120676L;
    private double shape;
    private double scale;
    private final double solverAbsoluteAccuracy;
    private double numericalMean;
    private boolean numericalMeanIsCalculated;
    private double numericalVariance;
    private boolean numericalVarianceIsCalculated;

    public WeibullDistributionImpl(double alpha, double beta) {
        this(alpha, beta, 1.0E-9d);
    }

    public WeibullDistributionImpl(double alpha, double beta, double inverseCumAccuracy) {
        this.numericalMean = Double.NaN;
        this.numericalMeanIsCalculated = false;
        this.numericalVariance = Double.NaN;
        this.numericalVarianceIsCalculated = false;
        setShapeInternal(alpha);
        setScaleInternal(beta);
        this.solverAbsoluteAccuracy = inverseCumAccuracy;
    }

    @Override // org.apache.commons.math.distribution.Distribution
    public double cumulativeProbability(double x) {
        double ret;
        if (x <= 0.0d) {
            ret = 0.0d;
        } else {
            ret = 1.0d - FastMath.exp(-FastMath.pow(x / this.scale, this.shape));
        }
        return ret;
    }

    @Override // org.apache.commons.math.distribution.WeibullDistribution
    public double getShape() {
        return this.shape;
    }

    @Override // org.apache.commons.math.distribution.WeibullDistribution
    public double getScale() {
        return this.scale;
    }

    @Override // org.apache.commons.math.distribution.AbstractContinuousDistribution
    public double density(double x) {
        if (x < 0.0d) {
            return 0.0d;
        }
        double xscale = x / this.scale;
        double xscalepow = FastMath.pow(xscale, this.shape - 1.0d);
        double xscalepowshape = xscalepow * xscale;
        return (this.shape / this.scale) * xscalepow * FastMath.exp(-xscalepowshape);
    }

    @Override // org.apache.commons.math.distribution.AbstractContinuousDistribution, org.apache.commons.math.distribution.ContinuousDistribution
    public double inverseCumulativeProbability(double p) {
        double ret;
        if (p < 0.0d || p > 1.0d) {
            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.OUT_OF_RANGE_SIMPLE, Double.valueOf(p), Double.valueOf(0.0d), Double.valueOf(1.0d));
        }
        if (p == 0.0d) {
            ret = 0.0d;
        } else if (p == 1.0d) {
            ret = Double.POSITIVE_INFINITY;
        } else {
            ret = this.scale * FastMath.pow(-FastMath.log(1.0d - p), 1.0d / this.shape);
        }
        return ret;
    }

    @Override // org.apache.commons.math.distribution.WeibullDistribution
    @Deprecated
    public void setShape(double alpha) {
        setShapeInternal(alpha);
        invalidateParameterDependentMoments();
    }

    private void setShapeInternal(double alpha) {
        if (alpha <= 0.0d) {
            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_SHAPE, Double.valueOf(alpha));
        }
        this.shape = alpha;
    }

    @Override // org.apache.commons.math.distribution.WeibullDistribution
    @Deprecated
    public void setScale(double beta) {
        setScaleInternal(beta);
        invalidateParameterDependentMoments();
    }

    private void setScaleInternal(double beta) {
        if (beta <= 0.0d) {
            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_SCALE, Double.valueOf(beta));
        }
        this.scale = beta;
    }

    @Override // org.apache.commons.math.distribution.AbstractContinuousDistribution
    protected double getDomainLowerBound(double p) {
        return 0.0d;
    }

    @Override // org.apache.commons.math.distribution.AbstractContinuousDistribution
    protected double getDomainUpperBound(double p) {
        return Double.MAX_VALUE;
    }

    @Override // org.apache.commons.math.distribution.AbstractContinuousDistribution
    protected double getInitialDomain(double p) {
        return FastMath.pow(this.scale * FastMath.log(2.0d), 1.0d / this.shape);
    }

    @Override // org.apache.commons.math.distribution.AbstractContinuousDistribution
    protected double getSolverAbsoluteAccuracy() {
        return this.solverAbsoluteAccuracy;
    }

    public double getSupportLowerBound() {
        return 0.0d;
    }

    public double getSupportUpperBound() {
        return Double.POSITIVE_INFINITY;
    }

    protected double calculateNumericalMean() {
        double sh = getShape();
        double sc = getScale();
        return sc * FastMath.exp(Gamma.logGamma(1.0d + (1.0d / sh)));
    }

    private double calculateNumericalVariance() {
        double sh = getShape();
        double sc = getScale();
        double mn = getNumericalMean();
        return ((sc * sc) * FastMath.exp(Gamma.logGamma(1.0d + (2.0d / sh)))) - (mn * mn);
    }

    public double getNumericalMean() {
        if (!this.numericalMeanIsCalculated) {
            this.numericalMean = calculateNumericalMean();
            this.numericalMeanIsCalculated = true;
        }
        return this.numericalMean;
    }

    public double getNumericalVariance() {
        if (!this.numericalVarianceIsCalculated) {
            this.numericalVariance = calculateNumericalVariance();
            this.numericalVarianceIsCalculated = true;
        }
        return this.numericalVariance;
    }

    private void invalidateParameterDependentMoments() {
        this.numericalMeanIsCalculated = false;
        this.numericalVarianceIsCalculated = false;
    }
}
