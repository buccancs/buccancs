// Summary for: /mnt/c/dev/buccancs/external/ShimmerCapturePure/sources/org/apache/commons/math/distribution/PoissonDistributionImpl.java
// Size: 4862 bytes
// Modified: 2025-10-21 16:32:11.140094100 +0100

package org.apache.commons.math.distribution;

import java.io.Serializable;
import org.apache.commons.math.MathException;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.exception.util.LocalizedFormats;
import org.apache.commons.math.special.Gamma;
import org.apache.commons.math.util.FastMath;

/* JADX WARN: Classes with same name are omitted:
  classes5.dex
 */
/* loaded from: ShimmerCapture_1.3.1_APKPure.apk:libs/commons-math-2.2.jar:org/apache/commons/math/distribution/PoissonDistributionImpl.class */
public class PoissonDistributionImpl extends AbstractIntegerDistribution implements PoissonDistribution, Serializable {
    public static final int DEFAULT_MAX_ITERATIONS = 10000000;
    public static final double DEFAULT_EPSILON = 1.0E-12d;
    private static final long serialVersionUID = -3349935121172596109L;
    private NormalDistribution normal;
    private double mean;
    private int maxIterations;
    private double epsilon;

    public PoissonDistributionImpl(double p) {
        this(p, new NormalDistributionImpl());
    }

    public PoissonDistributionImpl(double p, double epsilon, int maxIterations) {
        this.maxIterations = 10000000;
        this.epsilon = 1.0E-12d;
        setMean(p);
        this.epsilon = epsilon;
        this.maxIterations = maxIterations;
    }

    public PoissonDistributionImpl(double p, double epsilon) {
        this.maxIterations = 10000000;
        this.epsilon = 1.0E-12d;
        setMean(p);
        this.epsilon = epsilon;
    }

    public PoissonDistributionImpl(double p, int maxIterations) {
        this.maxIterations = 10000000;
        this.epsilon = 1.0E-12d;
        setMean(p);
        this.maxIterations = maxIterations;
    }

    @Deprecated
    public PoissonDistributionImpl(double p, NormalDistribution z) {
        this.maxIterations = 10000000;
        this.epsilon = 1.0E-12d;
        setNormalAndMeanInternal(z, p);
    }

    @Override // org.apache.commons.math.distribution.PoissonDistribution
    public double getMean() {
        return this.mean;
    }

    @Override // org.apache.commons.math.distribution.PoissonDistribution
    @Deprecated
    public void setMean(double p) {
        setNormalAndMeanInternal(this.normal, p);
    }

    private void setNormalAndMeanInternal(NormalDistribution z, double p) {
        if (p <= 0.0d) {
            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN, Double.valueOf(p));
        }
        this.mean = p;
        this.normal = z;
        this.normal.setMean(p);
        this.normal.setStandardDeviation(FastMath.sqrt(p));
    }

    @Override // org.apache.commons.math.distribution.IntegerDistribution
    public double probability(int x) {
        double ret;
        if (x < 0 || x == Integer.MAX_VALUE) {
            ret = 0.0d;
        } else if (x == 0) {
            ret = FastMath.exp(-this.mean);
        } else {
            ret = FastMath.exp((-SaddlePointExpansion.getStirlingError(x)) - SaddlePointExpansion.getDeviancePart(x, this.mean)) / FastMath.sqrt(6.283185307179586d * x);
        }
        return ret;
    }

    @Override // org.apache.commons.math.distribution.AbstractIntegerDistribution, org.apache.commons.math.distribution.IntegerDistribution
    public double cumulativeProbability(int x) throws MathException {
        if (x < 0) {
            return 0.0d;
        }
        if (x == Integer.MAX_VALUE) {
            return 1.0d;
        }
        return Gamma.regularizedGammaQ(x + 1.0d, this.mean, this.epsilon, this.maxIterations);
    }

    @Override // org.apache.commons.math.distribution.PoissonDistribution
    public double normalApproximateProbability(int x) throws MathException {
        return this.normal.cumulativeProbability(x + 0.5d);
    }

    @Override // org.apache.commons.math.distribution.AbstractIntegerDistribution
    public int sample() throws MathException {
        return (int) FastMath.min(this.randomData.nextPoisson(this.mean), 2147483647L);
    }

    @Override // org.apache.commons.math.distribution.AbstractIntegerDistribution
    protected int getDomainLowerBound(double p) {
        return 0;
    }

    @Override // org.apache.commons.math.distribution.AbstractIntegerDistribution
    protected int getDomainUpperBound(double p) {
        return Integer.MAX_VALUE;
    }

    @Deprecated
    public void setNormal(NormalDistribution value) {
        setNormalAndMeanInternal(value, this.mean);
    }

    public int getSupportLowerBound() {
        return 0;
    }

    public int getSupportUpperBound() {
        return Integer.MAX_VALUE;
    }

    public double getNumericalVariance() {
        return getMean();
    }
}
