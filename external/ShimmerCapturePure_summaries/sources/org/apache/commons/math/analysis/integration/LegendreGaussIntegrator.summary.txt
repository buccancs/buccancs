// Summary for: /mnt/c/dev/buccancs/external/ShimmerCapturePure/sources/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java
// Size: 5334 bytes
// Modified: 2025-10-21 16:32:07.952088000 +0100

package org.apache.commons.math.analysis.integration;

import org.apache.commons.math.ConvergenceException;
import org.apache.commons.math.FunctionEvaluationException;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.MaxIterationsExceededException;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.exception.util.LocalizedFormats;
import org.apache.commons.math.util.FastMath;

/* JADX WARN: Classes with same name are omitted:
  classes5.dex
 */
/* loaded from: ShimmerCapture_1.3.1_APKPure.apk:libs/commons-math-2.2.jar:org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.class */
public class LegendreGaussIntegrator extends UnivariateRealIntegratorImpl {
    private static final double[] ABSCISSAS_2 = {(-1.0d) / FastMath.sqrt(3.0d), 1.0d / FastMath.sqrt(3.0d)};
    private static final double[] WEIGHTS_2 = {1.0d, 1.0d};
    private static final double[] ABSCISSAS_3 = {-FastMath.sqrt(0.6d), 0.0d, FastMath.sqrt(0.6d)};
    private static final double[] WEIGHTS_3 = {0.5555555555555556d, 0.8888888888888888d, 0.5555555555555556d};
    private static final double[] ABSCISSAS_4 = {-FastMath.sqrt((15.0d + (2.0d * FastMath.sqrt(30.0d))) / 35.0d), -FastMath.sqrt((15.0d - (2.0d * FastMath.sqrt(30.0d))) / 35.0d), FastMath.sqrt((15.0d - (2.0d * FastMath.sqrt(30.0d))) / 35.0d), FastMath.sqrt((15.0d + (2.0d * FastMath.sqrt(30.0d))) / 35.0d)};
    private static final double[] WEIGHTS_4 = {(90.0d - (5.0d * FastMath.sqrt(30.0d))) / 180.0d, (90.0d + (5.0d * FastMath.sqrt(30.0d))) / 180.0d, (90.0d + (5.0d * FastMath.sqrt(30.0d))) / 180.0d, (90.0d - (5.0d * FastMath.sqrt(30.0d))) / 180.0d};
    private static final double[] ABSCISSAS_5 = {-FastMath.sqrt((35.0d + (2.0d * FastMath.sqrt(70.0d))) / 63.0d), -FastMath.sqrt((35.0d - (2.0d * FastMath.sqrt(70.0d))) / 63.0d), 0.0d, FastMath.sqrt((35.0d - (2.0d * FastMath.sqrt(70.0d))) / 63.0d), FastMath.sqrt((35.0d + (2.0d * FastMath.sqrt(70.0d))) / 63.0d)};
    private static final double[] WEIGHTS_5 = {(322.0d - (13.0d * FastMath.sqrt(70.0d))) / 900.0d, (322.0d + (13.0d * FastMath.sqrt(70.0d))) / 900.0d, 0.5688888888888889d, (322.0d + (13.0d * FastMath.sqrt(70.0d))) / 900.0d, (322.0d - (13.0d * FastMath.sqrt(70.0d))) / 900.0d};
    private final double[] abscissas;
    private final double[] weights;

    public LegendreGaussIntegrator(int n, int defaultMaximalIterationCount) throws IllegalArgumentException {
        super(defaultMaximalIterationCount);
        switch (n) {
            case 2:
                this.abscissas = ABSCISSAS_2;
                this.weights = WEIGHTS_2;
                return;
            case 3:
                this.abscissas = ABSCISSAS_3;
                this.weights = WEIGHTS_3;
                return;
            case 4:
                this.abscissas = ABSCISSAS_4;
                this.weights = WEIGHTS_4;
                return;
            case 5:
                this.abscissas = ABSCISSAS_5;
                this.weights = WEIGHTS_5;
                return;
            default:
                throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED, Integer.valueOf(n), 2, 5);
        }
    }

    @Override // org.apache.commons.math.analysis.integration.UnivariateRealIntegrator
    @Deprecated
    public double integrate(double min, double max) throws FunctionEvaluationException, IllegalArgumentException, ConvergenceException {
        return integrate(this.f, min, max);
    }

    @Override // org.apache.commons.math.analysis.integration.UnivariateRealIntegrator
    public double integrate(UnivariateRealFunction f, double min, double max) throws FunctionEvaluationException, IllegalArgumentException, ConvergenceException {
        clearResult();
        verifyInterval(min, max);
        verifyIterationCount();
        double oldt = stage(f, min, max, 1);
        int n = 2;
        for (int i = 0; i < this.maximalIterationCount; i++) {
            double t = stage(f, min, max, n);
            double delta = FastMath.abs(t - oldt);
            double limit = FastMath.max(this.absoluteAccuracy, this.relativeAccuracy * (FastMath.abs(oldt) + FastMath.abs(t)) * 0.5d);
            if (i + 1 >= this.minimalIterationCount && delta <= limit) {
                setResult(t, i);
                return this.result;
            }
            double ratio = FastMath.min(4.0d, FastMath.pow(delta / limit, 0.5d / this.abscissas.length));
            n = FastMath.max((int) (ratio * n), n + 1);
            oldt = t;
        }
        throw new MaxIterationsExceededException(this.maximalIterationCount);
    }

    private double stage(UnivariateRealFunction f, double min, double max, int n) throws FunctionEvaluationException {
        double step = (max - min) / n;
        double halfStep = step / 2.0d;
        double midPoint = min + halfStep;
        double sum = 0.0d;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < this.abscissas.length; j++) {
                sum += this.weights[j] * f.value(midPoint + (halfStep * this.abscissas[j]));
            }
            midPoint += step;
        }
        return halfStep * sum;
    }
}
