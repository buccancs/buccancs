// Summary for: /mnt/c/dev/buccancs/external/ShimmerCapturePure/sources/org/apache/commons/math/analysis/solvers/MullerSolver.java
// Size: 8179 bytes
// Modified: 2025-10-21 16:32:07.397648700 +0100

package org.apache.commons.math.analysis.solvers;

import org.apache.commons.math.ConvergenceException;
import org.apache.commons.math.FunctionEvaluationException;
import org.apache.commons.math.MaxIterationsExceededException;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.util.FastMath;
import org.apache.commons.math.util.MathUtils;

/* JADX WARN: Classes with same name are omitted:
  classes5.dex
 */
/* loaded from: ShimmerCapture_1.3.1_APKPure.apk:libs/commons-math-2.2.jar:org/apache/commons/math/analysis/solvers/MullerSolver.class */
public class MullerSolver extends UnivariateRealSolverImpl {
    @Deprecated
    public MullerSolver(UnivariateRealFunction f) {
        super(f, 100, 1.0E-6d);
    }

    @Deprecated
    public MullerSolver() {
        super(100, 1.0E-6d);
    }

    @Override // org.apache.commons.math.analysis.solvers.UnivariateRealSolver
    @Deprecated
    public double solve(double min, double max) throws FunctionEvaluationException, ConvergenceException {
        return solve(this.f, min, max);
    }

    @Override // org.apache.commons.math.analysis.solvers.UnivariateRealSolver
    @Deprecated
    public double solve(double min, double max, double initial) throws FunctionEvaluationException, ConvergenceException {
        return solve(this.f, min, max, initial);
    }

    @Override // org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
    public double solve(int maxEval, UnivariateRealFunction f, double min, double max, double initial) throws FunctionEvaluationException, MaxIterationsExceededException {
        setMaximalIterationCount(maxEval);
        return solve(f, min, max, initial);
    }

    @Override // org.apache.commons.math.analysis.solvers.UnivariateRealSolver
    @Deprecated
    public double solve(UnivariateRealFunction f, double min, double max, double initial) throws FunctionEvaluationException, MaxIterationsExceededException {
        if (f.value(min) == 0.0d) {
            return min;
        }
        if (f.value(max) == 0.0d) {
            return max;
        }
        if (f.value(initial) == 0.0d) {
            return initial;
        }
        verifyBracketing(min, max, f);
        verifySequence(min, initial, max);
        if (isBracketing(min, initial, f)) {
            return solve(f, min, initial);
        }
        return solve(f, initial, max);
    }

    @Override // org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
    public double solve(int maxEval, UnivariateRealFunction f, double min, double max) throws FunctionEvaluationException, MaxIterationsExceededException {
        setMaximalIterationCount(maxEval);
        return solve(f, min, max);
    }

    @Override // org.apache.commons.math.analysis.solvers.UnivariateRealSolver
    @Deprecated
    public double solve(UnivariateRealFunction f, double min, double max) throws FunctionEvaluationException, MaxIterationsExceededException {
        double d;
        double x0 = min;
        double y0 = f.value(x0);
        double x2 = max;
        double y2 = f.value(x2);
        double x1 = 0.5d * (x0 + x2);
        double y1 = f.value(x1);
        if (y0 == 0.0d) {
            return min;
        }
        if (y2 == 0.0d) {
            return max;
        }
        verifyBracketing(min, max, f);
        double oldx = Double.POSITIVE_INFINITY;
        for (int i = 1; i <= this.maximalIterationCount; i++) {
            double d01 = (y1 - y0) / (x1 - x0);
            double d12 = (y2 - y1) / (x2 - x1);
            double d012 = (d12 - d01) / (x2 - x0);
            double c1 = d01 + ((x1 - x0) * d012);
            double delta = (c1 * c1) - ((4.0d * y1) * d012);
            double xplus = x1 + (((-2.0d) * y1) / (c1 + FastMath.sqrt(delta)));
            double xminus = x1 + (((-2.0d) * y1) / (c1 - FastMath.sqrt(delta)));
            double x = isSequence(x0, xplus, x2) ? xplus : xminus;
            double y = f.value(x);
            double tolerance = FastMath.max(this.relativeAccuracy * FastMath.abs(x), this.absoluteAccuracy);
            if (FastMath.abs(x - oldx) <= tolerance) {
                setResult(x, i);
                return this.result;
            }
            if (FastMath.abs(y) <= this.functionValueAccuracy) {
                setResult(x, i);
                return this.result;
            }
            boolean bisect = (x < x1 && x1 - x0 > 0.95d * (x2 - x0)) || (x > x1 && x2 - x1 > 0.95d * (x2 - x0)) || x == x1;
            if (!bisect) {
                x0 = x < x1 ? x0 : x1;
                y0 = x < x1 ? y0 : y1;
                x2 = x > x1 ? x2 : x1;
                y2 = x > x1 ? y2 : y1;
                x1 = x;
                y1 = y;
                d = x;
            } else {
                double xm = 0.5d * (x0 + x2);
                double ym = f.value(xm);
                if (MathUtils.sign(y0) + MathUtils.sign(ym) == 0.0d) {
                    x2 = xm;
                    y2 = ym;
                } else {
                    x0 = xm;
                    y0 = ym;
                }
                x1 = 0.5d * (x0 + x2);
                y1 = f.value(x1);
                d = Double.POSITIVE_INFINITY;
            }
            oldx = d;
        }
        throw new MaxIterationsExceededException(this.maximalIterationCount);
    }

    @Deprecated
    public double solve2(double min, double max) throws FunctionEvaluationException, MaxIterationsExceededException {
        return solve2(this.f, min, max);
    }

    @Deprecated
    public double solve2(UnivariateRealFunction f, double min, double max) throws FunctionEvaluationException, MaxIterationsExceededException {
        double denominator;
        double x;
        double x0 = min;
        double y0 = f.value(x0);
        double x1 = max;
        double y1 = f.value(x1);
        double x2 = 0.5d * (x0 + x1);
        double y2 = f.value(x2);
        if (y0 == 0.0d) {
            return min;
        }
        if (y1 == 0.0d) {
            return max;
        }
        verifyBracketing(min, max, f);
        double oldx = Double.POSITIVE_INFINITY;
        for (int i = 1; i <= this.maximalIterationCount; i++) {
            double q = (x2 - x1) / (x1 - x0);
            double a = q * ((y2 - ((1.0d + q) * y1)) + (q * y0));
            double b = ((((2.0d * q) + 1.0d) * y2) - (((1.0d + q) * (1.0d + q)) * y1)) + (q * q * y0);
            double c = (1.0d + q) * y2;
            double delta = (b * b) - ((4.0d * a) * c);
            if (delta >= 0.0d) {
                double dplus = b + FastMath.sqrt(delta);
                double dminus = b - FastMath.sqrt(delta);
                denominator = FastMath.abs(dplus) > FastMath.abs(dminus) ? dplus : dminus;
            } else {
                denominator = FastMath.sqrt((b * b) - delta);
            }
            if (denominator != 0.0d) {
                double d = x2 - (((2.0d * c) * (x2 - x1)) / denominator);
                while (true) {
                    x = d;
                    if (x != x1 && x != x2) {
                        break;
                    }
                    d = x + this.absoluteAccuracy;
                }
            } else {
                x = min + (FastMath.random() * (max - min));
                oldx = Double.POSITIVE_INFINITY;
            }
            double y = f.value(x);
            double tolerance = FastMath.max(this.relativeAccuracy * FastMath.abs(x), this.absoluteAccuracy);
            if (FastMath.abs(x - oldx) <= tolerance) {
                setResult(x, i);
                return this.result;
            }
            if (FastMath.abs(y) <= this.functionValueAccuracy) {
                setResult(x, i);
                return this.result;
            }
            x0 = x1;
            y0 = y1;
            x1 = x2;
            y1 = y2;
            x2 = x;
            y2 = y;
            oldx = x;
        }
        throw new MaxIterationsExceededException(this.maximalIterationCount);
    }
}
