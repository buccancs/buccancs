// Summary for: /mnt/c/dev/buccancs/external/ShimmerCapturePure/sources/org/apache/commons/math/optimization/SimpleScalarValueChecker.java
// Size: 1532 bytes
// Modified: 2025-10-21 16:32:03.260113000 +0100

package org.apache.commons.math.optimization;

import org.apache.commons.math.util.FastMath;

/* JADX WARN: Classes with same name are omitted:
  classes5.dex
 */
/* loaded from: ShimmerCapture_1.3.1_APKPure.apk:libs/commons-math-2.2.jar:org/apache/commons/math/optimization/SimpleScalarValueChecker.class */
public class SimpleScalarValueChecker implements RealConvergenceChecker {
    private static final double DEFAULT_RELATIVE_THRESHOLD = 1.1102230246251565E-14d;
    private static final double DEFAULT_ABSOLUTE_THRESHOLD = 2.2250738585072014E-306d;
    private final double relativeThreshold;
    private final double absoluteThreshold;

    public SimpleScalarValueChecker() {
        this.relativeThreshold = DEFAULT_RELATIVE_THRESHOLD;
        this.absoluteThreshold = DEFAULT_ABSOLUTE_THRESHOLD;
    }

    public SimpleScalarValueChecker(double relativeThreshold, double absoluteThreshold) {
        this.relativeThreshold = relativeThreshold;
        this.absoluteThreshold = absoluteThreshold;
    }

    @Override // org.apache.commons.math.optimization.RealConvergenceChecker
    public boolean converged(int iteration, RealPointValuePair previous, RealPointValuePair current) {
        double p = previous.getValue();
        double c = current.getValue();
        double difference = FastMath.abs(p - c);
        double size = FastMath.max(FastMath.abs(p), FastMath.abs(c));
        return difference <= size * this.relativeThreshold || difference <= this.absoluteThreshold;
    }
}
