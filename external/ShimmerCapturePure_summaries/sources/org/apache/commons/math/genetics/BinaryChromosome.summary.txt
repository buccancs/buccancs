// Summary for: /mnt/c/dev/buccancs/external/ShimmerCapturePure/sources/org/apache/commons/math/genetics/BinaryChromosome.java
// Size: 2017 bytes
// Modified: 2025-10-21 16:32:06.376050100 +0100

package org.apache.commons.math.genetics;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

/* JADX WARN: Classes with same name are omitted:
  classes5.dex
 */
/* loaded from: ShimmerCapture_1.3.1_APKPure.apk:libs/commons-math-2.2.jar:org/apache/commons/math/genetics/BinaryChromosome.class */
public abstract class BinaryChromosome extends AbstractListChromosome<Integer> {
    public BinaryChromosome(List<Integer> representation) {
        super(representation);
    }

    public BinaryChromosome(Integer[] representation) {
        super(representation);
    }

    @Override // org.apache.commons.math.genetics.AbstractListChromosome
    protected void checkValidity(List<Integer> chromosomeRepresentation) throws InvalidRepresentationException {
        Iterator i$ = chromosomeRepresentation.iterator();
        while (i$.hasNext()) {
            int i = i$.next().intValue();
            if (i < 0 || i > 1) {
                throw new InvalidRepresentationException("Elements can be only 0 or 1.");
            }
        }
    }

    public static List<Integer> randomBinaryRepresentation(int length) {
        List<Integer> rList = new ArrayList<>(length);
        for (int j = 0; j < length; j++) {
            rList.add(Integer.valueOf(GeneticAlgorithm.getRandomGenerator().nextInt(2)));
        }
        return rList;
    }

    @Override // org.apache.commons.math.genetics.Chromosome
    protected boolean isSame(Chromosome another) {
        if (!(another instanceof BinaryChromosome)) {
            return false;
        }
        BinaryChromosome anotherBc = (BinaryChromosome) another;
        if (getLength() != anotherBc.getLength()) {
            return false;
        }
        for (int i = 0; i < getRepresentation().size(); i++) {
            if (!getRepresentation().get(i).equals(anotherBc.getRepresentation().get(i))) {
                return false;
            }
        }
        return true;
    }
}
