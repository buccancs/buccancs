// Summary for: /mnt/c/dev/buccancs/external/ShimmerCapturePure/sources/org/apache/commons/math/genetics/TournamentSelection.java
// Size: 1864 bytes
// Modified: 2025-10-21 16:32:08.158992800 +0100

package org.apache.commons.math.genetics;

import java.util.ArrayList;
import java.util.List;

/* JADX WARN: Classes with same name are omitted:
  classes5.dex
 */
/* loaded from: ShimmerCapture_1.3.1_APKPure.apk:libs/commons-math-2.2.jar:org/apache/commons/math/genetics/TournamentSelection.class */
public class TournamentSelection implements SelectionPolicy {
    private int arity;

    public TournamentSelection(int arity) {
        this.arity = arity;
    }

    @Override // org.apache.commons.math.genetics.SelectionPolicy
    public ChromosomePair select(Population population) {
        return new ChromosomePair(tournament((ListPopulation) population), tournament((ListPopulation) population));
    }

    private Chromosome tournament(ListPopulation population) {
        if (population.getPopulationSize() < this.arity) {
            throw new IllegalArgumentException("Tournament arity cannot be bigger than population size.");
        }
        ListPopulation tournamentPopulation = new ListPopulation(this.arity) { // from class: org.apache.commons.math.genetics.TournamentSelection.1
            @Override // org.apache.commons.math.genetics.Population
            public Population nextGeneration() {
                return null;
            }
        };
        List<Chromosome> chromosomes = new ArrayList<>(population.getChromosomes());
        for (int i = 0; i < this.arity; i++) {
            int rind = GeneticAlgorithm.getRandomGenerator().nextInt(chromosomes.size());
            tournamentPopulation.addChromosome(chromosomes.get(rind));
            chromosomes.remove(rind);
        }
        return tournamentPopulation.getFittestChromosome();
    }

    public int getArity() {
        return this.arity;
    }

    public void setArity(int arity) {
        this.arity = arity;
    }
}
