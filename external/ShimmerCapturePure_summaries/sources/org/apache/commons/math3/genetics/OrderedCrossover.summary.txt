// Summary for: /mnt/c/dev/buccancs/external/ShimmerCapturePure/sources/org/apache/commons/math3/genetics/OrderedCrossover.java
// Size: 3189 bytes
// Modified: 2025-10-21 16:32:09.749949700 +0100

package org.apache.commons.math3.genetics;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import org.apache.commons.math3.exception.DimensionMismatchException;
import org.apache.commons.math3.exception.MathIllegalArgumentException;
import org.apache.commons.math3.exception.util.LocalizedFormats;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.util.FastMath;

/* loaded from: classes5.dex */
public class OrderedCrossover<T> implements CrossoverPolicy {
    @Override // org.apache.commons.math3.genetics.CrossoverPolicy
    public ChromosomePair crossover(Chromosome chromosome, Chromosome chromosome2) throws MathIllegalArgumentException {
        if (!(chromosome instanceof AbstractListChromosome) || !(chromosome2 instanceof AbstractListChromosome)) {
            throw new MathIllegalArgumentException(LocalizedFormats.INVALID_FIXED_LENGTH_CHROMOSOME, new Object[0]);
        }
        return mate((AbstractListChromosome) chromosome, (AbstractListChromosome) chromosome2);
    }

    protected ChromosomePair mate(AbstractListChromosome<T> abstractListChromosome, AbstractListChromosome<T> abstractListChromosome2) throws DimensionMismatchException {
        int iNextInt;
        int length = abstractListChromosome.getLength();
        if (length != abstractListChromosome2.getLength()) {
            throw new DimensionMismatchException(abstractListChromosome2.getLength(), length);
        }
        List<T> representation = abstractListChromosome.getRepresentation();
        List<T> representation2 = abstractListChromosome2.getRepresentation();
        ArrayList arrayList = new ArrayList(length);
        ArrayList arrayList2 = new ArrayList(length);
        HashSet hashSet = new HashSet(length);
        HashSet hashSet2 = new HashSet(length);
        RandomGenerator randomGenerator = GeneticAlgorithm.getRandomGenerator();
        int iNextInt2 = randomGenerator.nextInt(length);
        do {
            iNextInt = randomGenerator.nextInt(length);
        } while (iNextInt2 == iNextInt);
        int iMin = FastMath.min(iNextInt2, iNextInt);
        int iMax = FastMath.max(iNextInt2, iNextInt);
        int i = iMax + 1;
        arrayList.addAll(representation.subList(iMin, i));
        hashSet.addAll(arrayList);
        arrayList2.addAll(representation2.subList(iMin, i));
        hashSet2.addAll(arrayList2);
        for (int i2 = 1; i2 <= length; i2++) {
            int i3 = (iMax + i2) % length;
            T t = representation.get(i3);
            T t2 = representation2.get(i3);
            if (!hashSet.contains(t2)) {
                arrayList.add(t2);
                hashSet.add(t2);
            }
            if (!hashSet2.contains(t)) {
                arrayList2.add(t);
                hashSet2.add(t);
            }
        }
        Collections.rotate(arrayList, iMin);
        Collections.rotate(arrayList2, iMin);
        return new ChromosomePair(abstractListChromosome.newFixedLengthChromosome(arrayList), abstractListChromosome2.newFixedLengthChromosome(arrayList2));
    }
}
