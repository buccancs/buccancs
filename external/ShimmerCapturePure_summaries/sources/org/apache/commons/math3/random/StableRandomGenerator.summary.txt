// Summary for: /mnt/c/dev/buccancs/external/ShimmerCapturePure/sources/org/apache/commons/math3/random/StableRandomGenerator.java
// Size: 2976 bytes
// Modified: 2025-10-21 16:32:06.766960300 +0100

package org.apache.commons.math3.random;

import org.apache.commons.math3.exception.NullArgumentException;
import org.apache.commons.math3.exception.OutOfRangeException;
import org.apache.commons.math3.exception.util.LocalizedFormats;
import org.apache.commons.math3.util.FastMath;

/* loaded from: classes5.dex */
public class StableRandomGenerator implements NormalizedRandomGenerator {
    private final double alpha;
    private final double beta;
    private final RandomGenerator generator;
    private final double zeta;

    public StableRandomGenerator(RandomGenerator randomGenerator, double d, double d2) throws OutOfRangeException, NullArgumentException {
        if (randomGenerator == null) {
            throw new NullArgumentException();
        }
        if (d <= 0.0d || d > 2.0d) {
            throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_LEFT, Double.valueOf(d), 0, 2);
        }
        if (d2 < -1.0d || d2 > 1.0d) {
            throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_SIMPLE, Double.valueOf(d2), -1, 1);
        }
        this.generator = randomGenerator;
        this.alpha = d;
        this.beta = d2;
        if (d >= 2.0d || d2 == 0.0d) {
            this.zeta = 0.0d;
        } else {
            this.zeta = d2 * FastMath.tan((d * 3.141592653589793d) / 2.0d);
        }
    }

    @Override // org.apache.commons.math3.random.NormalizedRandomGenerator
    public double nextNormalizedDouble() {
        double d = -FastMath.log(this.generator.nextDouble());
        double dNextDouble = (this.generator.nextDouble() - 0.5d) * 3.141592653589793d;
        double d2 = this.alpha;
        if (d2 == 2.0d) {
            return FastMath.sqrt(d * 2.0d) * FastMath.sin(dNextDouble);
        }
        if (this.beta == 0.0d) {
            if (d2 == 1.0d) {
                return FastMath.tan(dNextDouble);
            }
            return (FastMath.pow(d * FastMath.cos((1.0d - d2) * dNextDouble), (1.0d / this.alpha) - 1.0d) * FastMath.sin(this.alpha * dNextDouble)) / FastMath.pow(FastMath.cos(dNextDouble), 1.0d / this.alpha);
        }
        double dCos = FastMath.cos(dNextDouble);
        if (FastMath.abs(this.alpha - 1.0d) > 1.0E-8d) {
            double d3 = this.alpha * dNextDouble;
            double d4 = dNextDouble - d3;
            double dSin = ((FastMath.sin(d3) + (this.zeta * FastMath.cos(d3))) / dCos) * (FastMath.cos(d4) + (this.zeta * FastMath.sin(d4)));
            double d5 = this.alpha;
            return dSin / FastMath.pow(d * dCos, (1.0d - d5) / d5);
        }
        double d6 = (this.beta * dNextDouble) + 1.5707963267948966d;
        double dTan = 0.6366197723675814d * ((FastMath.tan(dNextDouble) * d6) - (this.beta * FastMath.log(((d * 1.5707963267948966d) * dCos) / d6)));
        double d7 = this.alpha;
        return d7 != 1.0d ? dTan + (this.beta * FastMath.tan((d7 * 3.141592653589793d) / 2.0d)) : dTan;
    }
}
