// Summary for: /mnt/c/dev/buccancs/external/ShimmerCapturePure/sources/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java
// Size: 6557 bytes
// Modified: 2025-10-21 16:32:04.243743900 +0100

package org.apache.commons.math3.analysis.integration.gauss;

import java.math.BigDecimal;
import java.math.MathContext;
import org.apache.commons.math3.exception.DimensionMismatchException;
import org.apache.commons.math3.util.Pair;

/* loaded from: classes5.dex */
public class LegendreHighPrecisionRuleFactory extends BaseRuleFactory<BigDecimal> {
    private final MathContext mContext;
    private final BigDecimal minusOne;
    private final BigDecimal oneHalf;
    private final BigDecimal two;

    public LegendreHighPrecisionRuleFactory() {
        this(MathContext.DECIMAL128);
    }

    public LegendreHighPrecisionRuleFactory(MathContext mathContext) {
        this.mContext = mathContext;
        this.two = new BigDecimal("2", mathContext);
        this.minusOne = new BigDecimal("-1", mathContext);
        this.oneHalf = new BigDecimal("0.5", mathContext);
    }

    @Override // org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory
    protected Pair<BigDecimal[], BigDecimal[]> computeRule(int i) throws DimensionMismatchException {
        int i2 = 1;
        if (i == 1) {
            return new Pair<>(new BigDecimal[]{BigDecimal.ZERO}, new BigDecimal[]{this.two});
        }
        BigDecimal[] first = getRuleInternal(i - 1).getFirst();
        BigDecimal[] bigDecimalArr = new BigDecimal[i];
        BigDecimal[] bigDecimalArr2 = new BigDecimal[i];
        int i3 = i / 2;
        int i4 = 0;
        while (i4 < i3) {
            BigDecimal bigDecimal = i4 == 0 ? this.minusOne : first[i4 - 1];
            BigDecimal bigDecimal2 = i3 == i2 ? BigDecimal.ONE : first[i4];
            BigDecimal bigDecimal3 = BigDecimal.ONE;
            BigDecimal bigDecimal4 = bigDecimal2;
            BigDecimal bigDecimal5 = BigDecimal.ONE;
            int i5 = 1;
            BigDecimal bigDecimal6 = bigDecimal3;
            BigDecimal bigDecimal7 = bigDecimal;
            while (i5 < i) {
                BigDecimal[] bigDecimalArr3 = first;
                BigDecimal bigDecimal8 = new BigDecimal((i5 * 2) + 1, this.mContext);
                BigDecimal bigDecimal9 = new BigDecimal(i5, this.mContext);
                int i6 = i5 + 1;
                BigDecimal bigDecimal10 = new BigDecimal(i6, this.mContext);
                BigDecimal bigDecimalDivide = bigDecimal7.multiply(bigDecimal.multiply(bigDecimal8, this.mContext), this.mContext).subtract(bigDecimal6.multiply(bigDecimal9, this.mContext), this.mContext).divide(bigDecimal10, this.mContext);
                BigDecimal bigDecimalDivide2 = bigDecimal4.multiply(bigDecimal2.multiply(bigDecimal8, this.mContext), this.mContext).subtract(bigDecimal5.multiply(bigDecimal9, this.mContext), this.mContext).divide(bigDecimal10, this.mContext);
                bigDecimal6 = bigDecimal7;
                bigDecimal5 = bigDecimal4;
                first = bigDecimalArr3;
                i3 = i3;
                bigDecimal7 = bigDecimalDivide;
                bigDecimal4 = bigDecimalDivide2;
                i5 = i6;
            }
            BigDecimal[] bigDecimalArr4 = first;
            int i7 = i3;
            BigDecimal bigDecimalMultiply = bigDecimal.add(bigDecimal2, this.mContext).multiply(this.oneHalf, this.mContext);
            BigDecimal bigDecimal11 = BigDecimal.ONE;
            boolean z = false;
            BigDecimal bigDecimal12 = bigDecimalMultiply;
            while (!z) {
                z = bigDecimal2.subtract(bigDecimal, this.mContext).compareTo(bigDecimalMultiply.ulp().multiply(BigDecimal.TEN, this.mContext)) <= 0;
                bigDecimal11 = BigDecimal.ONE;
                int i8 = 1;
                bigDecimal12 = bigDecimalMultiply;
                while (i8 < i) {
                    BigDecimal bigDecimal13 = new BigDecimal((i8 * 2) + 1, this.mContext);
                    BigDecimal bigDecimal14 = new BigDecimal(i8, this.mContext);
                    i8++;
                    BigDecimal bigDecimalDivide3 = bigDecimal12.multiply(bigDecimalMultiply.multiply(bigDecimal13, this.mContext), this.mContext).subtract(bigDecimal11.multiply(bigDecimal14, this.mContext), this.mContext).divide(new BigDecimal(i8, this.mContext), this.mContext);
                    bigDecimal = bigDecimal;
                    bigDecimal11 = bigDecimal12;
                    bigDecimal12 = bigDecimalDivide3;
                }
                BigDecimal bigDecimal15 = bigDecimal;
                if (z) {
                    bigDecimal = bigDecimal15;
                } else {
                    if (bigDecimal7.signum() * bigDecimal12.signum() <= 0) {
                        bigDecimal2 = bigDecimalMultiply;
                        bigDecimalMultiply = bigDecimal15;
                    } else {
                        bigDecimal7 = bigDecimal12;
                    }
                    bigDecimal = bigDecimalMultiply;
                    bigDecimalMultiply = bigDecimalMultiply.add(bigDecimal2, this.mContext).multiply(this.oneHalf, this.mContext);
                }
            }
            BigDecimal bigDecimalDivide4 = BigDecimal.ONE.subtract(bigDecimalMultiply.pow(2, this.mContext), this.mContext).multiply(this.two, this.mContext).divide(bigDecimal11.subtract(bigDecimalMultiply.multiply(bigDecimal12, this.mContext), this.mContext).multiply(new BigDecimal(i, this.mContext)).pow(2, this.mContext), this.mContext);
            bigDecimalArr[i4] = bigDecimalMultiply;
            bigDecimalArr2[i4] = bigDecimalDivide4;
            int i9 = (i - i4) - 1;
            bigDecimalArr[i9] = bigDecimalMultiply.negate(this.mContext);
            bigDecimalArr2[i9] = bigDecimalDivide4;
            i4++;
            first = bigDecimalArr4;
            i3 = i7;
            i2 = 1;
        }
        int i10 = i3;
        if (i % 2 != 0) {
            BigDecimal bigDecimalNegate = BigDecimal.ONE;
            for (int i11 = 1; i11 < i; i11 += 2) {
                bigDecimalNegate = bigDecimalNegate.multiply(new BigDecimal(i11, this.mContext), this.mContext).divide(new BigDecimal(i11 + 1, this.mContext), this.mContext).negate(this.mContext);
            }
            BigDecimal bigDecimalDivide5 = this.two.divide(bigDecimalNegate.multiply(new BigDecimal(i, this.mContext), this.mContext).pow(2, this.mContext), this.mContext);
            bigDecimalArr[i10] = BigDecimal.ZERO;
            bigDecimalArr2[i10] = bigDecimalDivide5;
        }
        return new Pair<>(bigDecimalArr, bigDecimalArr2);
    }
}
