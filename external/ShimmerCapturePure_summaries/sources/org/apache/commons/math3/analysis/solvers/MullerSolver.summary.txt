// Summary for: /mnt/c/dev/buccancs/external/ShimmerCapturePure/sources/org/apache/commons/math3/analysis/solvers/MullerSolver.java
// Size: 4923 bytes
// Modified: 2025-10-21 16:32:06.599699200 +0100

package org.apache.commons.math3.analysis.solvers;

import org.apache.commons.math3.exception.NoBracketingException;
import org.apache.commons.math3.exception.NumberIsTooLargeException;
import org.apache.commons.math3.exception.TooManyEvaluationsException;
import org.apache.commons.math3.util.FastMath;

/* loaded from: classes5.dex */
public class MullerSolver extends AbstractUnivariateSolver {
    private static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0E-6d;

    public MullerSolver() {
        this(1.0E-6d);
    }

    public MullerSolver(double d) {
        super(d);
    }

    public MullerSolver(double d, double d2) {
        super(d, d2);
    }

    @Override // org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver
    protected double doSolve() throws TooManyEvaluationsException, NumberIsTooLargeException, NoBracketingException {
        double min = getMin();
        double max = getMax();
        double startValue = getStartValue();
        double functionValueAccuracy = getFunctionValueAccuracy();
        verifySequence(min, startValue, max);
        double dComputeObjectiveValue = computeObjectiveValue(min);
        if (FastMath.abs(dComputeObjectiveValue) < functionValueAccuracy) {
            return min;
        }
        double dComputeObjectiveValue2 = computeObjectiveValue(max);
        if (FastMath.abs(dComputeObjectiveValue2) < functionValueAccuracy) {
            return max;
        }
        double dComputeObjectiveValue3 = computeObjectiveValue(startValue);
        if (FastMath.abs(dComputeObjectiveValue3) < functionValueAccuracy) {
            return startValue;
        }
        verifyBracketing(min, max);
        if (isBracketing(min, startValue)) {
            return solve(min, startValue, dComputeObjectiveValue, dComputeObjectiveValue3);
        }
        return solve(startValue, max, dComputeObjectiveValue3, dComputeObjectiveValue2);
    }

    private double solve(double d, double d2, double d3, double d4) throws TooManyEvaluationsException {
        double dSqrt;
        long j;
        double relativeAccuracy = getRelativeAccuracy();
        double absoluteAccuracy = getAbsoluteAccuracy();
        double functionValueAccuracy = getFunctionValueAccuracy();
        double d5 = (d + d2) * 0.5d;
        double d6 = d3;
        double d7 = d4;
        double d8 = d5;
        double dComputeObjectiveValue = computeObjectiveValue(d5);
        double d9 = Double.POSITIVE_INFINITY;
        double d10 = d;
        double d11 = d2;
        while (true) {
            double d12 = d8 - d10;
            double d13 = (dComputeObjectiveValue - d6) / d12;
            double d14 = d11 - d8;
            double d15 = d11 - d10;
            double d16 = (((d7 - dComputeObjectiveValue) / d14) - d13) / d15;
            double d17 = d13 + (d12 * d16);
            double d18 = (d17 * d17) - ((4.0d * dComputeObjectiveValue) * d16);
            double d19 = (-2.0d) * dComputeObjectiveValue;
            double dSqrt2 = d8 + (d19 / (d17 + FastMath.sqrt(d18)));
            dSqrt = isSequence(d10, dSqrt2, d11) ? dSqrt2 : d8 + (d19 / (d17 - FastMath.sqrt(d18)));
            double dComputeObjectiveValue2 = computeObjectiveValue(dSqrt);
            if (FastMath.abs(dSqrt - d9) <= FastMath.max(relativeAccuracy * FastMath.abs(dSqrt), absoluteAccuracy) || FastMath.abs(dComputeObjectiveValue2) <= functionValueAccuracy) {
                break;
            }
            if ((dSqrt >= d8 || d12 <= d15 * 0.95d) && ((dSqrt <= d8 || d14 <= d15 * 0.95d) && dSqrt != d8)) {
                j = 4602678819172646912L;
                if (dSqrt >= d8) {
                    d10 = d8;
                }
                if (dSqrt >= d8) {
                    d6 = dComputeObjectiveValue;
                }
                if (dSqrt <= d8) {
                    d11 = d8;
                }
                if (dSqrt <= d8) {
                    d7 = dComputeObjectiveValue;
                }
                d8 = dSqrt;
                d9 = d8;
                dComputeObjectiveValue = dComputeObjectiveValue2;
            } else {
                j = 4602678819172646912L;
                double d20 = (d10 + d11) * 0.5d;
                double dComputeObjectiveValue3 = computeObjectiveValue(d20);
                if (FastMath.signum(d6) + FastMath.signum(dComputeObjectiveValue3) == 0.0d) {
                    d11 = d20;
                    d7 = dComputeObjectiveValue3;
                } else {
                    d10 = d20;
                    d6 = dComputeObjectiveValue3;
                }
                double d21 = (d10 + d11) * 0.5d;
                d8 = d21;
                dComputeObjectiveValue = computeObjectiveValue(d21);
                d9 = Double.POSITIVE_INFINITY;
            }
        }
        return dSqrt;
    }
}
