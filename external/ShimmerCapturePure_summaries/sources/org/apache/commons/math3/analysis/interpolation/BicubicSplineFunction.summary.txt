// Summary for: /mnt/c/dev/buccancs/external/ShimmerCapturePure/sources/org/apache/commons/math3/analysis/interpolation/BicubicSplineFunction.java
// Size: 6385 bytes
// Modified: 2025-10-21 16:32:03.545044800 +0100

package org.apache.commons.math3.analysis.interpolation;

import java.lang.reflect.Array;
import org.apache.commons.math3.analysis.BivariateFunction;
import org.apache.commons.math3.exception.OutOfRangeException;

/* compiled from: BicubicSplineInterpolatingFunction.java */
/* loaded from: classes5.dex */
class BicubicSplineFunction implements BivariateFunction {
    private static final short N = 4;
    private final double[][] a;
    private final BivariateFunction partialDerivativeX;
    private final BivariateFunction partialDerivativeXX;
    private final BivariateFunction partialDerivativeXY;
    private final BivariateFunction partialDerivativeY;
    private final BivariateFunction partialDerivativeYY;

    public BivariateFunction partialDerivativeX() {
        return this.partialDerivativeX;
    }

    public BivariateFunction partialDerivativeXX() {
        return this.partialDerivativeXX;
    }

    public BivariateFunction partialDerivativeXY() {
        return this.partialDerivativeXY;
    }

    public BivariateFunction partialDerivativeY() {
        return this.partialDerivativeY;
    }

    public BivariateFunction partialDerivativeYY() {
        return this.partialDerivativeYY;
    }

    BicubicSplineFunction(double[] dArr) {
        this(dArr, false);
    }

    BicubicSplineFunction(double[] dArr, boolean z) {
        int i = 4;
        this.a = (double[][]) Array.newInstance((Class<?>) Double.TYPE, 4, 4);
        for (int i2 = 0; i2 < 4; i2++) {
            for (int i3 = 0; i3 < 4; i3++) {
                this.a[i2][i3] = dArr[(i2 * 4) + i3];
            }
        }
        if (!z) {
            this.partialDerivativeX = null;
            this.partialDerivativeY = null;
            this.partialDerivativeXX = null;
            this.partialDerivativeYY = null;
            this.partialDerivativeXY = null;
            return;
        }
        final double[][] dArr2 = (double[][]) Array.newInstance((Class<?>) Double.TYPE, 4, 4);
        final double[][] dArr3 = (double[][]) Array.newInstance((Class<?>) Double.TYPE, 4, 4);
        final double[][] dArr4 = (double[][]) Array.newInstance((Class<?>) Double.TYPE, 4, 4);
        final double[][] dArr5 = (double[][]) Array.newInstance((Class<?>) Double.TYPE, 4, 4);
        final double[][] dArr6 = (double[][]) Array.newInstance((Class<?>) Double.TYPE, 4, 4);
        int i4 = 0;
        while (i4 < i) {
            int i5 = 0;
            while (i5 < i) {
                double d = this.a[i4][i5];
                double[] dArr7 = dArr2[i4];
                dArr7[i5] = i4 * d;
                double[] dArr8 = dArr3[i4];
                double d2 = i5;
                dArr8[i5] = d * d2;
                dArr4[i4][i5] = (i4 - 1) * dArr7[i5];
                dArr5[i4][i5] = (i5 - 1) * dArr8[i5];
                dArr6[i4][i5] = d2 * dArr7[i5];
                i5++;
                i = 4;
            }
            i4++;
            i = 4;
        }
        this.partialDerivativeX = new BivariateFunction() { // from class: org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.1
            @Override // org.apache.commons.math3.analysis.BivariateFunction
            public double value(double d3, double d4) {
                double d5 = d4 * d4;
                return BicubicSplineFunction.this.apply(new double[]{0.0d, 1.0d, d3, d3 * d3}, new double[]{1.0d, d4, d5, d5 * d4}, dArr2);
            }
        };
        this.partialDerivativeY = new BivariateFunction() { // from class: org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.2
            @Override // org.apache.commons.math3.analysis.BivariateFunction
            public double value(double d3, double d4) {
                double d5 = d3 * d3;
                return BicubicSplineFunction.this.apply(new double[]{1.0d, d3, d5, d5 * d3}, new double[]{0.0d, 1.0d, d4, d4 * d4}, dArr3);
            }
        };
        this.partialDerivativeXX = new BivariateFunction() { // from class: org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.3
            @Override // org.apache.commons.math3.analysis.BivariateFunction
            public double value(double d3, double d4) {
                double[] dArr9 = {0.0d, 0.0d, 1.0d, d3};
                double d5 = d4 * d4;
                return BicubicSplineFunction.this.apply(dArr9, new double[]{1.0d, d4, d5, d5 * d4}, dArr4);
            }
        };
        this.partialDerivativeYY = new BivariateFunction() { // from class: org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.4
            @Override // org.apache.commons.math3.analysis.BivariateFunction
            public double value(double d3, double d4) {
                double d5 = d3 * d3;
                return BicubicSplineFunction.this.apply(new double[]{1.0d, d3, d5, d5 * d3}, new double[]{0.0d, 0.0d, 1.0d, d4}, dArr5);
            }
        };
        this.partialDerivativeXY = new BivariateFunction() { // from class: org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.5
            @Override // org.apache.commons.math3.analysis.BivariateFunction
            public double value(double d3, double d4) {
                return BicubicSplineFunction.this.apply(new double[]{0.0d, 1.0d, d3, d3 * d3}, new double[]{0.0d, 1.0d, d4, d4 * d4}, dArr6);
            }
        };
    }

    @Override // org.apache.commons.math3.analysis.BivariateFunction
    public double value(double d, double d2) {
        if (d < 0.0d || d > 1.0d) {
            throw new OutOfRangeException(Double.valueOf(d), 0, 1);
        }
        if (d2 < 0.0d || d2 > 1.0d) {
            throw new OutOfRangeException(Double.valueOf(d2), 0, 1);
        }
        double d3 = d * d;
        double[] dArr = {1.0d, d, d3, d3 * d};
        double d4 = d2 * d2;
        return apply(dArr, new double[]{1.0d, d2, d4, d4 * d2}, this.a);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public double apply(double[] dArr, double[] dArr2, double[][] dArr3) {
        double d = 0.0d;
        for (int i = 0; i < 4; i++) {
            for (int i2 = 0; i2 < 4; i2++) {
                d += dArr3[i][i2] * dArr[i] * dArr2[i2];
            }
        }
        return d;
    }
}
