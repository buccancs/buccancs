// Summary for: /mnt/c/dev/buccancs/external/ShimmerCapturePure/sources/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java
// Size: 3480 bytes
// Modified: 2025-10-21 16:32:04.241743900 +0100

package org.apache.commons.math3.analysis.integration.gauss;

import org.apache.commons.math3.exception.DimensionMismatchException;
import org.apache.commons.math3.util.Pair;

/* loaded from: classes5.dex */
public class LegendreRuleFactory extends BaseRuleFactory<Double> {
    @Override // org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory
    protected Pair<Double[], Double[]> computeRule(int i) throws DimensionMismatchException {
        Double dValueOf = Double.valueOf(0.0d);
        int i2 = 1;
        if (i == 1) {
            return new Pair<>(new Double[]{dValueOf}, new Double[]{Double.valueOf(2.0d)});
        }
        Double[] first = getRuleInternal(i - 1).getFirst();
        Double[] dArr = new Double[i];
        Double[] dArr2 = new Double[i];
        int i3 = i / 2;
        int i4 = 0;
        while (i4 < i3) {
            double dDoubleValue = i4 == 0 ? -1.0d : first[i4 - 1].doubleValue();
            double dDoubleValue2 = i3 == i2 ? 1.0d : first[i4].doubleValue();
            double d = dDoubleValue;
            int i5 = 1;
            double d2 = 1.0d;
            while (i5 < i) {
                int i6 = i5 + 1;
                double d3 = (((((i5 * 2) + 1) * dDoubleValue) * d) - (i5 * d2)) / i6;
                i5 = i6;
                d2 = d;
                d = d3;
            }
            double d4 = (dDoubleValue + dDoubleValue2) * 0.5d;
            double d5 = d4;
            boolean z = false;
            double d6 = 1.0d;
            while (!z) {
                z = dDoubleValue2 - dDoubleValue <= Math.ulp(d4);
                d5 = d4;
                int i7 = 1;
                d6 = 1.0d;
                while (i7 < i) {
                    double d7 = ((((i7 * 2) + i2) * d4) * d5) - (i7 * d6);
                    i7++;
                    d6 = d5;
                    dValueOf = dValueOf;
                    d5 = d7 / i7;
                    first = first;
                    i2 = 1;
                }
                Double d8 = dValueOf;
                Double[] dArr3 = first;
                if (z) {
                    first = dArr3;
                    dValueOf = d8;
                } else {
                    if (d * d5 <= 0.0d) {
                        dDoubleValue2 = d4;
                    } else {
                        dDoubleValue = d4;
                        d = d5;
                    }
                    d4 = (dDoubleValue + dDoubleValue2) * 0.5d;
                    first = dArr3;
                    dValueOf = d8;
                }
                i2 = 1;
            }
            double d9 = i * (d6 - (d5 * d4));
            double d10 = ((1.0d - (d4 * d4)) * 2.0d) / (d9 * d9);
            dArr[i4] = Double.valueOf(d4);
            dArr2[i4] = Double.valueOf(d10);
            int i8 = (i - i4) - 1;
            dArr[i8] = Double.valueOf(-d4);
            dArr2[i8] = Double.valueOf(d10);
            i4++;
            first = first;
            dValueOf = dValueOf;
            i2 = 1;
        }
        Double d11 = dValueOf;
        double d12 = 1.0d;
        if (i % 2 != 0) {
            for (int i9 = 1; i9 < i; i9 += 2) {
                d12 = ((-i9) * d12) / (i9 + 1);
            }
            double d13 = i * d12;
            dArr[i3] = d11;
            dArr2[i3] = Double.valueOf(2.0d / (d13 * d13));
        }
        return new Pair<>(dArr, dArr2);
    }
}
