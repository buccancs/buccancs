// Summary for: /mnt/c/dev/buccancs/external/ShimmerCapturePure/sources/org/apache/commons/math3/optim/nonlinear/scalar/LeastSquaresConverter.java
// Size: 3261 bytes
// Modified: 2025-10-21 16:32:05.270740800 +0100

package org.apache.commons.math3.optim.nonlinear.scalar;

import org.apache.commons.math3.analysis.MultivariateFunction;
import org.apache.commons.math3.analysis.MultivariateVectorFunction;
import org.apache.commons.math3.exception.DimensionMismatchException;
import org.apache.commons.math3.linear.RealMatrix;

/* loaded from: classes5.dex */
public class LeastSquaresConverter implements MultivariateFunction {
    private final MultivariateVectorFunction function;
    private final double[] observations;
    private final RealMatrix scale;
    private final double[] weights;

    public LeastSquaresConverter(MultivariateVectorFunction multivariateVectorFunction, double[] dArr) {
        this.function = multivariateVectorFunction;
        this.observations = (double[]) dArr.clone();
        this.weights = null;
        this.scale = null;
    }

    public LeastSquaresConverter(MultivariateVectorFunction multivariateVectorFunction, double[] dArr, double[] dArr2) {
        if (dArr.length != dArr2.length) {
            throw new DimensionMismatchException(dArr.length, dArr2.length);
        }
        this.function = multivariateVectorFunction;
        this.observations = (double[]) dArr.clone();
        this.weights = (double[]) dArr2.clone();
        this.scale = null;
    }

    public LeastSquaresConverter(MultivariateVectorFunction multivariateVectorFunction, double[] dArr, RealMatrix realMatrix) {
        if (dArr.length != realMatrix.getColumnDimension()) {
            throw new DimensionMismatchException(dArr.length, realMatrix.getColumnDimension());
        }
        this.function = multivariateVectorFunction;
        this.observations = (double[]) dArr.clone();
        this.weights = null;
        this.scale = realMatrix.copy();
    }

    @Override // org.apache.commons.math3.analysis.MultivariateFunction
    public double value(double[] dArr) throws IllegalArgumentException {
        double[] dArrValue = this.function.value(dArr);
        if (dArrValue.length != this.observations.length) {
            throw new DimensionMismatchException(dArrValue.length, this.observations.length);
        }
        int i = 0;
        for (int i2 = 0; i2 < dArrValue.length; i2++) {
            dArrValue[i2] = dArrValue[i2] - this.observations[i2];
        }
        double d = 0.0d;
        if (this.weights != null) {
            while (i < dArrValue.length) {
                double d2 = dArrValue[i];
                d += this.weights[i] * d2 * d2;
                i++;
            }
        } else {
            RealMatrix realMatrix = this.scale;
            if (realMatrix != null) {
                double[] dArrOperate = realMatrix.operate(dArrValue);
                int length = dArrOperate.length;
                while (i < length) {
                    double d3 = dArrOperate[i];
                    d += d3 * d3;
                    i++;
                }
            } else {
                int length2 = dArrValue.length;
                while (i < length2) {
                    double d4 = dArrValue[i];
                    d += d4 * d4;
                    i++;
                }
            }
        }
        return d;
    }
}
