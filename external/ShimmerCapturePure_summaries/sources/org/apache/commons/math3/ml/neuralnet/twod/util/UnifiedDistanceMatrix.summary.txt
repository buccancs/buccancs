// Summary for: /mnt/c/dev/buccancs/external/ShimmerCapturePure/sources/org/apache/commons/math3/ml/neuralnet/twod/util/UnifiedDistanceMatrix.java
// Size: 4907 bytes
// Modified: 2025-10-21 16:32:06.769112300 +0100

package org.apache.commons.math3.ml.neuralnet.twod.util;

import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Iterator;
import org.apache.commons.math3.ml.distance.DistanceMeasure;
import org.apache.commons.math3.ml.neuralnet.Network;
import org.apache.commons.math3.ml.neuralnet.Neuron;
import org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D;

/* loaded from: classes5.dex */
public class UnifiedDistanceMatrix implements MapVisualization {
    private final DistanceMeasure distance;
    private final boolean individualDistances;

    public UnifiedDistanceMatrix(boolean z, DistanceMeasure distanceMeasure) {
        this.individualDistances = z;
        this.distance = distanceMeasure;
    }

    @Override // org.apache.commons.math3.ml.neuralnet.twod.util.MapVisualization
    public double[][] computeImage(NeuronSquareMesh2D neuronSquareMesh2D) {
        if (this.individualDistances) {
            return individualDistances(neuronSquareMesh2D);
        }
        return averageDistances(neuronSquareMesh2D);
    }

    private double[][] individualDistances(NeuronSquareMesh2D neuronSquareMesh2D) {
        int numberOfRows = neuronSquareMesh2D.getNumberOfRows();
        int numberOfColumns = neuronSquareMesh2D.getNumberOfColumns();
        double[][] dArr = (double[][]) Array.newInstance((Class<?>) Double.TYPE, (numberOfRows * 2) + 1, (numberOfColumns * 2) + 1);
        for (int i = 0; i < numberOfRows; i++) {
            int i2 = i * 2;
            int i3 = i2 + 1;
            for (int i4 = 0; i4 < numberOfColumns; i4++) {
                int i5 = i4 * 2;
                int i6 = i5 + 1;
                double[] features = neuronSquareMesh2D.getNeuron(i, i4).getFeatures();
                Neuron neuron = neuronSquareMesh2D.getNeuron(i, i4, NeuronSquareMesh2D.HorizontalDirection.RIGHT, NeuronSquareMesh2D.VerticalDirection.CENTER);
                if (neuron != null) {
                    dArr[i3][i5 + 2] = this.distance.compute(features, neuron.getFeatures());
                }
                Neuron neuron2 = neuronSquareMesh2D.getNeuron(i, i4, NeuronSquareMesh2D.HorizontalDirection.CENTER, NeuronSquareMesh2D.VerticalDirection.DOWN);
                if (neuron2 != null) {
                    dArr[i2 + 2][i6] = this.distance.compute(features, neuron2.getFeatures());
                }
            }
        }
        for (int i7 = 0; i7 < numberOfRows; i7++) {
            int i8 = i7 * 2;
            for (int i9 = 0; i9 < numberOfColumns; i9++) {
                int i10 = i9 * 2;
                Neuron neuron3 = neuronSquareMesh2D.getNeuron(i7, i9);
                Neuron neuron4 = neuronSquareMesh2D.getNeuron(i7, i9, NeuronSquareMesh2D.HorizontalDirection.RIGHT, NeuronSquareMesh2D.VerticalDirection.CENTER);
                Neuron neuron5 = neuronSquareMesh2D.getNeuron(i7, i9, NeuronSquareMesh2D.HorizontalDirection.CENTER, NeuronSquareMesh2D.VerticalDirection.DOWN);
                Neuron neuron6 = neuronSquareMesh2D.getNeuron(i7, i9, NeuronSquareMesh2D.HorizontalDirection.RIGHT, NeuronSquareMesh2D.VerticalDirection.DOWN);
                dArr[i8 + 2][i10 + 2] = ((neuron6 == null ? 0.0d : this.distance.compute(neuron3.getFeatures(), neuron6.getFeatures())) + ((neuron4 == null || neuron5 == null) ? 0.0d : this.distance.compute(neuron4.getFeatures(), neuron5.getFeatures()))) * 0.5d;
            }
        }
        int length = dArr.length - 1;
        double[] dArr2 = dArr[length];
        dArr[0] = dArr2;
        int length2 = dArr2.length - 1;
        for (int i11 = 0; i11 < length; i11++) {
            double[] dArr3 = dArr[i11];
            dArr3[0] = dArr3[length2];
        }
        return dArr;
    }

    private double[][] averageDistances(NeuronSquareMesh2D neuronSquareMesh2D) {
        int numberOfRows = neuronSquareMesh2D.getNumberOfRows();
        int numberOfColumns = neuronSquareMesh2D.getNumberOfColumns();
        double[][] dArr = (double[][]) Array.newInstance((Class<?>) Double.TYPE, numberOfRows, numberOfColumns);
        Network network = neuronSquareMesh2D.getNetwork();
        for (int i = 0; i < numberOfRows; i++) {
            for (int i2 = 0; i2 < numberOfColumns; i2++) {
                Neuron neuron = neuronSquareMesh2D.getNeuron(i, i2);
                Collection<Neuron> neighbours = network.getNeighbours(neuron);
                double[] features = neuron.getFeatures();
                Iterator<Neuron> it2 = neighbours.iterator();
                double dCompute = 0.0d;
                int i3 = 0;
                while (it2.hasNext()) {
                    i3++;
                    dCompute += this.distance.compute(features, it2.next().getFeatures());
                }
                dArr[i][i2] = dCompute / i3;
            }
        }
        return dArr;
    }
}
