// Summary for: /mnt/c/dev/buccancs/external/ShimmerCapturePure/sources/org/apache/commons/math3/geometry/euclidean/twod/hull/AbstractConvexHullGenerator2D.java
// Size: 2234 bytes
// Modified: 2025-10-21 16:32:10.591675700 +0100

package org.apache.commons.math3.geometry.euclidean.twod.hull;

import java.util.Collection;
import org.apache.commons.math3.exception.ConvergenceException;
import org.apache.commons.math3.exception.MathIllegalArgumentException;
import org.apache.commons.math3.exception.NullArgumentException;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.hull.ConvexHull;
import org.apache.commons.math3.util.MathUtils;

/* loaded from: classes5.dex */
abstract class AbstractConvexHullGenerator2D implements ConvexHullGenerator2D {
    private static final double DEFAULT_TOLERANCE = 1.0E-10d;
    private final boolean includeCollinearPoints;
    private final double tolerance;

    protected abstract Collection<Vector2D> findHullVertices(Collection<Vector2D> collection);

    public double getTolerance() {
        return this.tolerance;
    }

    public boolean isIncludeCollinearPoints() {
        return this.includeCollinearPoints;
    }

    @Override // org.apache.commons.math3.geometry.hull.ConvexHullGenerator
    public /* bridge */ /* synthetic */ ConvexHull generate(Collection collection) throws NullArgumentException, ConvergenceException {
        return generate((Collection<Vector2D>) collection);
    }

    protected AbstractConvexHullGenerator2D(boolean z) {
        this(z, 1.0E-10d);
    }

    protected AbstractConvexHullGenerator2D(boolean z, double d) {
        this.includeCollinearPoints = z;
        this.tolerance = d;
    }

    @Override // org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHullGenerator2D, org.apache.commons.math3.geometry.hull.ConvexHullGenerator
    public ConvexHull2D generate(Collection<Vector2D> collection) throws NullArgumentException, ConvergenceException {
        MathUtils.checkNotNull(collection);
        if (collection.size() >= 2) {
            collection = findHullVertices(collection);
        }
        try {
            return new ConvexHull2D((Vector2D[]) collection.toArray(new Vector2D[collection.size()]), this.tolerance);
        } catch (MathIllegalArgumentException unused) {
            throw new ConvergenceException();
        }
    }
}
