// Summary for: /mnt/c/dev/buccancs/external/ShimmerCapturePure/sources/org/apache/commons/math3/geometry/partitioning/SubHyperplane.java
// Size: 1684 bytes
// Modified: 2025-10-21 16:32:04.249793900 +0100

package org.apache.commons.math3.geometry.partitioning;

import org.apache.commons.math3.geometry.Space;

/* loaded from: classes5.dex */
public interface SubHyperplane<S extends Space> {
    SubHyperplane<S> copySelf();

    Hyperplane<S> getHyperplane();

    double getSize();

    boolean isEmpty();

    SubHyperplane<S> reunite(SubHyperplane<S> subHyperplane);

    @Deprecated
    Side side(Hyperplane<S> hyperplane);

    SplitSubHyperplane<S> split(Hyperplane<S> hyperplane);

    public static class SplitSubHyperplane<U extends Space> {
        private final SubHyperplane<U> minus;
        private final SubHyperplane<U> plus;

        public SubHyperplane<U> getMinus() {
            return this.minus;
        }

        public SubHyperplane<U> getPlus() {
            return this.plus;
        }

        public SplitSubHyperplane(SubHyperplane<U> subHyperplane, SubHyperplane<U> subHyperplane2) {
            this.plus = subHyperplane;
            this.minus = subHyperplane2;
        }

        public Side getSide() {
            SubHyperplane<U> subHyperplane = this.plus;
            if (subHyperplane != null && !subHyperplane.isEmpty()) {
                SubHyperplane<U> subHyperplane2 = this.minus;
                if (subHyperplane2 != null && !subHyperplane2.isEmpty()) {
                    return Side.BOTH;
                }
                return Side.PLUS;
            }
            SubHyperplane<U> subHyperplane3 = this.minus;
            if (subHyperplane3 != null && !subHyperplane3.isEmpty()) {
                return Side.MINUS;
            }
            return Side.HYPER;
        }
    }
}
