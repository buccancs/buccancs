// Summary for: /mnt/c/dev/buccancs/external/ShimmerCapturePure/sources/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java
// Size: 3268 bytes
// Modified: 2025-10-21 16:32:12.569813100 +0100

package org.apache.commons.math3.geometry.euclidean.threed;

import java.util.ArrayList;
import java.util.List;
import org.apache.commons.math3.exception.MathIllegalArgumentException;
import org.apache.commons.math3.geometry.Point;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.Interval;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.partitioning.Region;

/* loaded from: classes5.dex */
public class SubLine {
    private static final double DEFAULT_TOLERANCE = 1.0E-10d;
    private final Line line;
    private final IntervalsSet remainingRegion;

    public SubLine(Line line, IntervalsSet intervalsSet) {
        this.line = line;
        this.remainingRegion = intervalsSet;
    }

    public SubLine(Vector3D vector3D, Vector3D vector3D2, double d) throws MathIllegalArgumentException {
        this(new Line(vector3D, vector3D2, d), buildIntervalSet(vector3D, vector3D2, d));
    }

    public SubLine(Vector3D vector3D, Vector3D vector3D2) throws MathIllegalArgumentException {
        this(vector3D, vector3D2, 1.0E-10d);
    }

    public SubLine(Segment segment) throws MathIllegalArgumentException {
        this(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd(), segment.getLine().getTolerance()));
    }

    public List<Segment> getSegments() {
        List<Interval> listAsList = this.remainingRegion.asList();
        ArrayList arrayList = new ArrayList(listAsList.size());
        for (Interval interval : listAsList) {
            arrayList.add(new Segment(this.line.toSpace((Point<Euclidean1D>) new Vector1D(interval.getInf())), this.line.toSpace((Point<Euclidean1D>) new Vector1D(interval.getSup())), this.line));
        }
        return arrayList;
    }

    public Vector3D intersection(SubLine subLine, boolean z) {
        Vector3D vector3DIntersection = this.line.intersection(subLine.line);
        if (vector3DIntersection == null) {
            return null;
        }
        Region.Location locationCheckPoint = this.remainingRegion.checkPoint((Point) this.line.toSubSpace((Point<Euclidean3D>) vector3DIntersection));
        Region.Location locationCheckPoint2 = subLine.remainingRegion.checkPoint((Point) subLine.line.toSubSpace((Point<Euclidean3D>) vector3DIntersection));
        if (z) {
            if (locationCheckPoint == Region.Location.OUTSIDE || locationCheckPoint2 == Region.Location.OUTSIDE) {
                return null;
            }
            return vector3DIntersection;
        }
        if (locationCheckPoint == Region.Location.INSIDE && locationCheckPoint2 == Region.Location.INSIDE) {
            return vector3DIntersection;
        }
        return null;
    }

    private static IntervalsSet buildIntervalSet(Vector3D vector3D, Vector3D vector3D2, double d) throws MathIllegalArgumentException {
        Line line = new Line(vector3D, vector3D2, d);
        return new IntervalsSet(line.toSubSpace((Point<Euclidean3D>) vector3D).getX(), line.toSubSpace((Point<Euclidean3D>) vector3D2).getX(), d);
    }
}
