// Summary for: /mnt/c/dev/buccancs/external/ShimmerCapturePure/sources/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java
// Size: 38060 bytes
// Modified: 2025-10-21 16:32:11.231683900 +0100

package org.apache.commons.math3.geometry.euclidean.threed;

import java.io.Serializable;
import java.lang.reflect.Array;
import org.apache.commons.math3.exception.MathArithmeticException;
import org.apache.commons.math3.exception.MathIllegalArgumentException;
import org.apache.commons.math3.exception.util.LocalizedFormats;
import org.apache.commons.math3.util.FastMath;
import org.apache.commons.math3.util.MathArrays;

/* loaded from: classes5.dex */
public class Rotation implements Serializable {
    public static final Rotation IDENTITY = new Rotation(1.0d, 0.0d, 0.0d, 0.0d, false);
    private static final long serialVersionUID = -2153622329907944313L;
    private final double q0;
    private final double q1;
    private final double q2;
    private final double q3;

    public double[][] getMatrix() {
        double d = this.q0;
        double d2 = d * d;
        double d3 = this.q1;
        double d4 = d * d3;
        double d5 = this.q2;
        double d6 = d * d5;
        double d7 = this.q3;
        double d8 = d * d7;
        double d9 = d3 * d3;
        double d10 = d3 * d5;
        double d11 = d3 * d7;
        double d12 = d5 * d5;
        double d13 = d5 * d7;
        return new double[][]{new double[]{((d9 + d2) * 2.0d) - 1.0d, (d10 + d8) * 2.0d, (d11 - d6) * 2.0d}, new double[]{(d10 - d8) * 2.0d, ((d2 + d12) * 2.0d) - 1.0d, (d13 + d4) * 2.0d}, new double[]{(d11 + d6) * 2.0d, (d13 - d4) * 2.0d, ((d2 + (d7 * d7)) * 2.0d) - 1.0d}};
    }

    public double getQ0() {
        return this.q0;
    }

    public double getQ1() {
        return this.q1;
    }

    public double getQ2() {
        return this.q2;
    }

    public double getQ3() {
        return this.q3;
    }

    public Rotation(double d, double d2, double d3, double d4, boolean z) {
        if (z) {
            double dSqrt = 1.0d / FastMath.sqrt((((d * d) + (d2 * d2)) + (d3 * d3)) + (d4 * d4));
            d *= dSqrt;
            d2 *= dSqrt;
            d3 *= dSqrt;
            d4 *= dSqrt;
        }
        this.q0 = d;
        this.q1 = d2;
        this.q2 = d3;
        this.q3 = d4;
    }

    @Deprecated
    public Rotation(Vector3D vector3D, double d) throws MathIllegalArgumentException {
        this(vector3D, d, RotationConvention.VECTOR_OPERATOR);
    }

    public Rotation(Vector3D vector3D, double d, RotationConvention rotationConvention) throws MathIllegalArgumentException {
        double norm = vector3D.getNorm();
        if (norm == 0.0d) {
            throw new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_AXIS, new Object[0]);
        }
        double d2 = d * (rotationConvention == RotationConvention.VECTOR_OPERATOR ? -0.5d : 0.5d);
        double dSin = FastMath.sin(d2) / norm;
        this.q0 = FastMath.cos(d2);
        this.q1 = vector3D.getX() * dSin;
        this.q2 = vector3D.getY() * dSin;
        this.q3 = dSin * vector3D.getZ();
    }

    public Rotation(double[][] dArr, double d) throws NotARotationMatrixException {
        if (dArr.length != 3 || dArr[0].length != 3 || dArr[1].length != 3 || dArr[2].length != 3) {
            throw new NotARotationMatrixException(LocalizedFormats.ROTATION_MATRIX_DIMENSIONS, Integer.valueOf(dArr.length), Integer.valueOf(dArr[0].length));
        }
        double[][] dArrOrthogonalizeMatrix = orthogonalizeMatrix(dArr, d);
        double[] dArr2 = dArrOrthogonalizeMatrix[0];
        double d2 = dArr2[0];
        double[] dArr3 = dArrOrthogonalizeMatrix[1];
        double d3 = dArr3[1];
        double[] dArr4 = dArrOrthogonalizeMatrix[2];
        double d4 = dArr4[2];
        double d5 = dArr4[1];
        double d6 = dArr3[2];
        double d7 = dArr3[0];
        double d8 = dArr2[1];
        double d9 = dArr2[2];
        double d10 = ((d2 * ((d3 * d4) - (d5 * d6))) - (d7 * ((d4 * d8) - (d5 * d9)))) + (dArr4[0] * ((d8 * d6) - (d3 * d9)));
        if (d10 < 0.0d) {
            throw new NotARotationMatrixException(LocalizedFormats.CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT, Double.valueOf(d10));
        }
        double[] dArrMat2quat = mat2quat(dArrOrthogonalizeMatrix);
        this.q0 = dArrMat2quat[0];
        this.q1 = dArrMat2quat[1];
        this.q2 = dArrMat2quat[2];
        this.q3 = dArrMat2quat[3];
    }

    public Rotation(Vector3D vector3D, Vector3D vector3D2, Vector3D vector3D3, Vector3D vector3D4) throws MathArithmeticException {
        Vector3D vector3DNormalize = vector3D.crossProduct(vector3D2).normalize();
        Vector3D vector3DNormalize2 = vector3DNormalize.crossProduct(vector3D).normalize();
        Vector3D vector3DNormalize3 = vector3D.normalize();
        Vector3D vector3DNormalize4 = vector3D3.crossProduct(vector3D4).normalize();
        Vector3D vector3DNormalize5 = vector3DNormalize4.crossProduct(vector3D3).normalize();
        Vector3D vector3DNormalize6 = vector3D3.normalize();
        double[] dArrMat2quat = mat2quat(new double[][]{new double[]{MathArrays.linearCombination(vector3DNormalize3.getX(), vector3DNormalize6.getX(), vector3DNormalize2.getX(), vector3DNormalize5.getX(), vector3DNormalize.getX(), vector3DNormalize4.getX()), MathArrays.linearCombination(vector3DNormalize3.getY(), vector3DNormalize6.getX(), vector3DNormalize2.getY(), vector3DNormalize5.getX(), vector3DNormalize.getY(), vector3DNormalize4.getX()), MathArrays.linearCombination(vector3DNormalize3.getZ(), vector3DNormalize6.getX(), vector3DNormalize2.getZ(), vector3DNormalize5.getX(), vector3DNormalize.getZ(), vector3DNormalize4.getX())}, new double[]{MathArrays.linearCombination(vector3DNormalize3.getX(), vector3DNormalize6.getY(), vector3DNormalize2.getX(), vector3DNormalize5.getY(), vector3DNormalize.getX(), vector3DNormalize4.getY()), MathArrays.linearCombination(vector3DNormalize3.getY(), vector3DNormalize6.getY(), vector3DNormalize2.getY(), vector3DNormalize5.getY(), vector3DNormalize.getY(), vector3DNormalize4.getY()), MathArrays.linearCombination(vector3DNormalize3.getZ(), vector3DNormalize6.getY(), vector3DNormalize2.getZ(), vector3DNormalize5.getY(), vector3DNormalize.getZ(), vector3DNormalize4.getY())}, new double[]{MathArrays.linearCombination(vector3DNormalize3.getX(), vector3DNormalize6.getZ(), vector3DNormalize2.getX(), vector3DNormalize5.getZ(), vector3DNormalize.getX(), vector3DNormalize4.getZ()), MathArrays.linearCombination(vector3DNormalize3.getY(), vector3DNormalize6.getZ(), vector3DNormalize2.getY(), vector3DNormalize5.getZ(), vector3DNormalize.getY(), vector3DNormalize4.getZ()), MathArrays.linearCombination(vector3DNormalize3.getZ(), vector3DNormalize6.getZ(), vector3DNormalize2.getZ(), vector3DNormalize5.getZ(), vector3DNormalize.getZ(), vector3DNormalize4.getZ())}});
        this.q0 = dArrMat2quat[0];
        this.q1 = dArrMat2quat[1];
        this.q2 = dArrMat2quat[2];
        this.q3 = dArrMat2quat[3];
    }

    public Rotation(Vector3D vector3D, Vector3D vector3D2) throws MathArithmeticException {
        double norm = vector3D.getNorm() * vector3D2.getNorm();
        if (norm == 0.0d) {
            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR, new Object[0]);
        }
        double dDotProduct = vector3D.dotProduct(vector3D2);
        if (dDotProduct < (-0.999999999999998d) * norm) {
            Vector3D vector3DOrthogonal = vector3D.orthogonal();
            this.q0 = 0.0d;
            this.q1 = -vector3DOrthogonal.getX();
            this.q2 = -vector3DOrthogonal.getY();
            this.q3 = -vector3DOrthogonal.getZ();
            return;
        }
        double dSqrt = FastMath.sqrt(((dDotProduct / norm) + 1.0d) * 0.5d);
        this.q0 = dSqrt;
        double d = 1.0d / ((dSqrt * 2.0d) * norm);
        Vector3D vector3DCrossProduct = vector3D2.crossProduct(vector3D);
        this.q1 = vector3DCrossProduct.getX() * d;
        this.q2 = vector3DCrossProduct.getY() * d;
        this.q3 = d * vector3DCrossProduct.getZ();
    }

    @Deprecated
    public Rotation(RotationOrder rotationOrder, double d, double d2, double d3) {
        this(rotationOrder, RotationConvention.VECTOR_OPERATOR, d, d2, d3);
    }

    public Rotation(RotationOrder rotationOrder, RotationConvention rotationConvention, double d, double d2, double d3) {
        Rotation rotationCompose = new Rotation(rotationOrder.getA1(), d, rotationConvention).compose(new Rotation(rotationOrder.getA2(), d2, rotationConvention).compose(new Rotation(rotationOrder.getA3(), d3, rotationConvention), rotationConvention), rotationConvention);
        this.q0 = rotationCompose.q0;
        this.q1 = rotationCompose.q1;
        this.q2 = rotationCompose.q2;
        this.q3 = rotationCompose.q3;
    }

    private static double[] mat2quat(double[][] dArr) {
        double[] dArr2 = new double[4];
        double d = dArr[0][0];
        double d2 = dArr[1][1];
        double d3 = dArr[2][2];
        double d4 = d + d2 + d3;
        if (d4 > -0.19d) {
            double dSqrt = FastMath.sqrt(d4 + 1.0d) * 0.5d;
            dArr2[0] = dSqrt;
            double d5 = 0.25d / dSqrt;
            double[] dArr3 = dArr[1];
            double d6 = dArr3[2];
            double[] dArr4 = dArr[2];
            dArr2[1] = (d6 - dArr4[1]) * d5;
            double d7 = dArr4[0];
            double[] dArr5 = dArr[0];
            dArr2[2] = (d7 - dArr5[2]) * d5;
            dArr2[3] = d5 * (dArr5[1] - dArr3[0]);
        } else {
            double d8 = (d - d2) - d3;
            if (d8 > -0.19d) {
                double dSqrt2 = FastMath.sqrt(d8 + 1.0d) * 0.5d;
                dArr2[1] = dSqrt2;
                double d9 = 0.25d / dSqrt2;
                double[] dArr6 = dArr[1];
                double d10 = dArr6[2];
                double[] dArr7 = dArr[2];
                dArr2[0] = (d10 - dArr7[1]) * d9;
                double[] dArr8 = dArr[0];
                dArr2[2] = (dArr8[1] + dArr6[0]) * d9;
                dArr2[3] = d9 * (dArr8[2] + dArr7[0]);
            } else {
                double d11 = (d2 - d) - d3;
                if (d11 > -0.19d) {
                    double dSqrt3 = FastMath.sqrt(d11 + 1.0d) * 0.5d;
                    dArr2[2] = dSqrt3;
                    double d12 = 0.25d / dSqrt3;
                    double[] dArr9 = dArr[2];
                    double d13 = dArr9[0];
                    double[] dArr10 = dArr[0];
                    dArr2[0] = (d13 - dArr10[2]) * d12;
                    double d14 = dArr10[1];
                    double[] dArr11 = dArr[1];
                    dArr2[1] = (d14 + dArr11[0]) * d12;
                    dArr2[3] = d12 * (dArr9[1] + dArr11[2]);
                } else {
                    double dSqrt4 = FastMath.sqrt(((d3 - d) - d2) + 1.0d) * 0.5d;
                    dArr2[3] = dSqrt4;
                    double d15 = 0.25d / dSqrt4;
                    double[] dArr12 = dArr[0];
                    double d16 = dArr12[1];
                    double[] dArr13 = dArr[1];
                    dArr2[0] = (d16 - dArr13[0]) * d15;
                    double d17 = dArr12[2];
                    double[] dArr14 = dArr[2];
                    dArr2[1] = (d17 + dArr14[0]) * d15;
                    dArr2[2] = d15 * (dArr14[1] + dArr13[2]);
                }
            }
        }
        return dArr2;
    }

    public Rotation revert() {
        return new Rotation(-this.q0, this.q1, this.q2, this.q3, false);
    }

    @Deprecated
    public Vector3D getAxis() {
        return getAxis(RotationConvention.VECTOR_OPERATOR);
    }

    public Vector3D getAxis(RotationConvention rotationConvention) {
        double d = this.q1;
        double d2 = this.q2;
        double d3 = (d * d) + (d2 * d2);
        double d4 = this.q3;
        double d5 = d3 + (d4 * d4);
        if (d5 == 0.0d) {
            return rotationConvention == RotationConvention.VECTOR_OPERATOR ? Vector3D.PLUS_I : Vector3D.MINUS_I;
        }
        double d6 = rotationConvention == RotationConvention.VECTOR_OPERATOR ? 1.0d : -1.0d;
        if (this.q0 < 0.0d) {
            double dSqrt = d6 / FastMath.sqrt(d5);
            return new Vector3D(this.q1 * dSqrt, this.q2 * dSqrt, this.q3 * dSqrt);
        }
        double dSqrt2 = (-d6) / FastMath.sqrt(d5);
        return new Vector3D(this.q1 * dSqrt2, this.q2 * dSqrt2, this.q3 * dSqrt2);
    }

    public double getAngle() {
        double dAsin;
        double d = this.q0;
        if (d < -0.1d || d > 0.1d) {
            double d2 = this.q1;
            double d3 = this.q2;
            double d4 = (d2 * d2) + (d3 * d3);
            double d5 = this.q3;
            dAsin = FastMath.asin(FastMath.sqrt(d4 + (d5 * d5)));
        } else if (d < 0.0d) {
            dAsin = FastMath.acos(-d);
        } else {
            dAsin = FastMath.acos(d);
        }
        return dAsin * 2.0d;
    }

    @Deprecated
    public double[] getAngles(RotationOrder rotationOrder) throws CardanEulerSingularityException {
        return getAngles(rotationOrder, RotationConvention.VECTOR_OPERATOR);
    }

    public double[] getAngles(RotationOrder rotationOrder, RotationConvention rotationConvention) throws CardanEulerSingularityException {
        if (rotationConvention == RotationConvention.VECTOR_OPERATOR) {
            if (rotationOrder == RotationOrder.XYZ) {
                Vector3D vector3DApplyTo = applyTo(Vector3D.PLUS_K);
                Vector3D vector3DApplyInverseTo = applyInverseTo(Vector3D.PLUS_I);
                if (vector3DApplyInverseTo.getZ() < -0.9999999999d || vector3DApplyInverseTo.getZ() > 0.9999999999d) {
                    throw new CardanEulerSingularityException(true);
                }
                return new double[]{FastMath.atan2(-vector3DApplyTo.getY(), vector3DApplyTo.getZ()), FastMath.asin(vector3DApplyInverseTo.getZ()), FastMath.atan2(-vector3DApplyInverseTo.getY(), vector3DApplyInverseTo.getX())};
            }
            if (rotationOrder == RotationOrder.XZY) {
                Vector3D vector3DApplyTo2 = applyTo(Vector3D.PLUS_J);
                Vector3D vector3DApplyInverseTo2 = applyInverseTo(Vector3D.PLUS_I);
                if (vector3DApplyInverseTo2.getY() < -0.9999999999d || vector3DApplyInverseTo2.getY() > 0.9999999999d) {
                    throw new CardanEulerSingularityException(true);
                }
                return new double[]{FastMath.atan2(vector3DApplyTo2.getZ(), vector3DApplyTo2.getY()), -FastMath.asin(vector3DApplyInverseTo2.getY()), FastMath.atan2(vector3DApplyInverseTo2.getZ(), vector3DApplyInverseTo2.getX())};
            }
            if (rotationOrder == RotationOrder.YXZ) {
                Vector3D vector3DApplyTo3 = applyTo(Vector3D.PLUS_K);
                Vector3D vector3DApplyInverseTo3 = applyInverseTo(Vector3D.PLUS_J);
                if (vector3DApplyInverseTo3.getZ() < -0.9999999999d || vector3DApplyInverseTo3.getZ() > 0.9999999999d) {
                    throw new CardanEulerSingularityException(true);
                }
                return new double[]{FastMath.atan2(vector3DApplyTo3.getX(), vector3DApplyTo3.getZ()), -FastMath.asin(vector3DApplyInverseTo3.getZ()), FastMath.atan2(vector3DApplyInverseTo3.getX(), vector3DApplyInverseTo3.getY())};
            }
            if (rotationOrder == RotationOrder.YZX) {
                Vector3D vector3DApplyTo4 = applyTo(Vector3D.PLUS_I);
                Vector3D vector3DApplyInverseTo4 = applyInverseTo(Vector3D.PLUS_J);
                if (vector3DApplyInverseTo4.getX() < -0.9999999999d || vector3DApplyInverseTo4.getX() > 0.9999999999d) {
                    throw new CardanEulerSingularityException(true);
                }
                return new double[]{FastMath.atan2(-vector3DApplyTo4.getZ(), vector3DApplyTo4.getX()), FastMath.asin(vector3DApplyInverseTo4.getX()), FastMath.atan2(-vector3DApplyInverseTo4.getZ(), vector3DApplyInverseTo4.getY())};
            }
            if (rotationOrder == RotationOrder.ZXY) {
                Vector3D vector3DApplyTo5 = applyTo(Vector3D.PLUS_J);
                Vector3D vector3DApplyInverseTo5 = applyInverseTo(Vector3D.PLUS_K);
                if (vector3DApplyInverseTo5.getY() < -0.9999999999d || vector3DApplyInverseTo5.getY() > 0.9999999999d) {
                    throw new CardanEulerSingularityException(true);
                }
                return new double[]{FastMath.atan2(-vector3DApplyTo5.getX(), vector3DApplyTo5.getY()), FastMath.asin(vector3DApplyInverseTo5.getY()), FastMath.atan2(-vector3DApplyInverseTo5.getX(), vector3DApplyInverseTo5.getZ())};
            }
            if (rotationOrder == RotationOrder.ZYX) {
                Vector3D vector3DApplyTo6 = applyTo(Vector3D.PLUS_I);
                Vector3D vector3DApplyInverseTo6 = applyInverseTo(Vector3D.PLUS_K);
                if (vector3DApplyInverseTo6.getX() < -0.9999999999d || vector3DApplyInverseTo6.getX() > 0.9999999999d) {
                    throw new CardanEulerSingularityException(true);
                }
                return new double[]{FastMath.atan2(vector3DApplyTo6.getY(), vector3DApplyTo6.getX()), -FastMath.asin(vector3DApplyInverseTo6.getX()), FastMath.atan2(vector3DApplyInverseTo6.getY(), vector3DApplyInverseTo6.getZ())};
            }
            if (rotationOrder == RotationOrder.XYX) {
                Vector3D vector3DApplyTo7 = applyTo(Vector3D.PLUS_I);
                Vector3D vector3DApplyInverseTo7 = applyInverseTo(Vector3D.PLUS_I);
                if (vector3DApplyInverseTo7.getX() < -0.9999999999d || vector3DApplyInverseTo7.getX() > 0.9999999999d) {
                    throw new CardanEulerSingularityException(false);
                }
                return new double[]{FastMath.atan2(vector3DApplyTo7.getY(), -vector3DApplyTo7.getZ()), FastMath.acos(vector3DApplyInverseTo7.getX()), FastMath.atan2(vector3DApplyInverseTo7.getY(), vector3DApplyInverseTo7.getZ())};
            }
            if (rotationOrder == RotationOrder.XZX) {
                Vector3D vector3DApplyTo8 = applyTo(Vector3D.PLUS_I);
                Vector3D vector3DApplyInverseTo8 = applyInverseTo(Vector3D.PLUS_I);
                if (vector3DApplyInverseTo8.getX() < -0.9999999999d || vector3DApplyInverseTo8.getX() > 0.9999999999d) {
                    throw new CardanEulerSingularityException(false);
                }
                return new double[]{FastMath.atan2(vector3DApplyTo8.getZ(), vector3DApplyTo8.getY()), FastMath.acos(vector3DApplyInverseTo8.getX()), FastMath.atan2(vector3DApplyInverseTo8.getZ(), -vector3DApplyInverseTo8.getY())};
            }
            if (rotationOrder == RotationOrder.YXY) {
                Vector3D vector3DApplyTo9 = applyTo(Vector3D.PLUS_J);
                Vector3D vector3DApplyInverseTo9 = applyInverseTo(Vector3D.PLUS_J);
                if (vector3DApplyInverseTo9.getY() < -0.9999999999d || vector3DApplyInverseTo9.getY() > 0.9999999999d) {
                    throw new CardanEulerSingularityException(false);
                }
                return new double[]{FastMath.atan2(vector3DApplyTo9.getX(), vector3DApplyTo9.getZ()), FastMath.acos(vector3DApplyInverseTo9.getY()), FastMath.atan2(vector3DApplyInverseTo9.getX(), -vector3DApplyInverseTo9.getZ())};
            }
            if (rotationOrder == RotationOrder.YZY) {
                Vector3D vector3DApplyTo10 = applyTo(Vector3D.PLUS_J);
                Vector3D vector3DApplyInverseTo10 = applyInverseTo(Vector3D.PLUS_J);
                if (vector3DApplyInverseTo10.getY() < -0.9999999999d || vector3DApplyInverseTo10.getY() > 0.9999999999d) {
                    throw new CardanEulerSingularityException(false);
                }
                return new double[]{FastMath.atan2(vector3DApplyTo10.getZ(), -vector3DApplyTo10.getX()), FastMath.acos(vector3DApplyInverseTo10.getY()), FastMath.atan2(vector3DApplyInverseTo10.getZ(), vector3DApplyInverseTo10.getX())};
            }
            if (rotationOrder == RotationOrder.ZXZ) {
                Vector3D vector3DApplyTo11 = applyTo(Vector3D.PLUS_K);
                Vector3D vector3DApplyInverseTo11 = applyInverseTo(Vector3D.PLUS_K);
                if (vector3DApplyInverseTo11.getZ() < -0.9999999999d || vector3DApplyInverseTo11.getZ() > 0.9999999999d) {
                    throw new CardanEulerSingularityException(false);
                }
                return new double[]{FastMath.atan2(vector3DApplyTo11.getX(), -vector3DApplyTo11.getY()), FastMath.acos(vector3DApplyInverseTo11.getZ()), FastMath.atan2(vector3DApplyInverseTo11.getX(), vector3DApplyInverseTo11.getY())};
            }
            Vector3D vector3DApplyTo12 = applyTo(Vector3D.PLUS_K);
            Vector3D vector3DApplyInverseTo12 = applyInverseTo(Vector3D.PLUS_K);
            if (vector3DApplyInverseTo12.getZ() < -0.9999999999d || vector3DApplyInverseTo12.getZ() > 0.9999999999d) {
                throw new CardanEulerSingularityException(false);
            }
            return new double[]{FastMath.atan2(vector3DApplyTo12.getY(), vector3DApplyTo12.getX()), FastMath.acos(vector3DApplyInverseTo12.getZ()), FastMath.atan2(vector3DApplyInverseTo12.getY(), -vector3DApplyInverseTo12.getX())};
        }
        if (rotationOrder == RotationOrder.XYZ) {
            Vector3D vector3DApplyTo13 = applyTo(Vector3D.PLUS_I);
            Vector3D vector3DApplyInverseTo13 = applyInverseTo(Vector3D.PLUS_K);
            if (vector3DApplyInverseTo13.getX() < -0.9999999999d || vector3DApplyInverseTo13.getX() > 0.9999999999d) {
                throw new CardanEulerSingularityException(true);
            }
            return new double[]{FastMath.atan2(-vector3DApplyInverseTo13.getY(), vector3DApplyInverseTo13.getZ()), FastMath.asin(vector3DApplyInverseTo13.getX()), FastMath.atan2(-vector3DApplyTo13.getY(), vector3DApplyTo13.getX())};
        }
        if (rotationOrder == RotationOrder.XZY) {
            Vector3D vector3DApplyTo14 = applyTo(Vector3D.PLUS_I);
            Vector3D vector3DApplyInverseTo14 = applyInverseTo(Vector3D.PLUS_J);
            if (vector3DApplyInverseTo14.getX() < -0.9999999999d || vector3DApplyInverseTo14.getX() > 0.9999999999d) {
                throw new CardanEulerSingularityException(true);
            }
            return new double[]{FastMath.atan2(vector3DApplyInverseTo14.getZ(), vector3DApplyInverseTo14.getY()), -FastMath.asin(vector3DApplyInverseTo14.getX()), FastMath.atan2(vector3DApplyTo14.getZ(), vector3DApplyTo14.getX())};
        }
        if (rotationOrder == RotationOrder.YXZ) {
            Vector3D vector3DApplyTo15 = applyTo(Vector3D.PLUS_J);
            Vector3D vector3DApplyInverseTo15 = applyInverseTo(Vector3D.PLUS_K);
            if (vector3DApplyInverseTo15.getY() < -0.9999999999d || vector3DApplyInverseTo15.getY() > 0.9999999999d) {
                throw new CardanEulerSingularityException(true);
            }
            return new double[]{FastMath.atan2(vector3DApplyInverseTo15.getX(), vector3DApplyInverseTo15.getZ()), -FastMath.asin(vector3DApplyInverseTo15.getY()), FastMath.atan2(vector3DApplyTo15.getX(), vector3DApplyTo15.getY())};
        }
        if (rotationOrder == RotationOrder.YZX) {
            Vector3D vector3DApplyTo16 = applyTo(Vector3D.PLUS_J);
            Vector3D vector3DApplyInverseTo16 = applyInverseTo(Vector3D.PLUS_I);
            if (vector3DApplyInverseTo16.getY() < -0.9999999999d || vector3DApplyInverseTo16.getY() > 0.9999999999d) {
                throw new CardanEulerSingularityException(true);
            }
            return new double[]{FastMath.atan2(-vector3DApplyInverseTo16.getZ(), vector3DApplyInverseTo16.getX()), FastMath.asin(vector3DApplyInverseTo16.getY()), FastMath.atan2(-vector3DApplyTo16.getZ(), vector3DApplyTo16.getY())};
        }
        if (rotationOrder == RotationOrder.ZXY) {
            Vector3D vector3DApplyTo17 = applyTo(Vector3D.PLUS_K);
            Vector3D vector3DApplyInverseTo17 = applyInverseTo(Vector3D.PLUS_J);
            if (vector3DApplyInverseTo17.getZ() < -0.9999999999d || vector3DApplyInverseTo17.getZ() > 0.9999999999d) {
                throw new CardanEulerSingularityException(true);
            }
            return new double[]{FastMath.atan2(-vector3DApplyInverseTo17.getX(), vector3DApplyInverseTo17.getY()), FastMath.asin(vector3DApplyInverseTo17.getZ()), FastMath.atan2(-vector3DApplyTo17.getX(), vector3DApplyTo17.getZ())};
        }
        if (rotationOrder == RotationOrder.ZYX) {
            Vector3D vector3DApplyTo18 = applyTo(Vector3D.PLUS_K);
            Vector3D vector3DApplyInverseTo18 = applyInverseTo(Vector3D.PLUS_I);
            if (vector3DApplyInverseTo18.getZ() < -0.9999999999d || vector3DApplyInverseTo18.getZ() > 0.9999999999d) {
                throw new CardanEulerSingularityException(true);
            }
            return new double[]{FastMath.atan2(vector3DApplyInverseTo18.getY(), vector3DApplyInverseTo18.getX()), -FastMath.asin(vector3DApplyInverseTo18.getZ()), FastMath.atan2(vector3DApplyTo18.getY(), vector3DApplyTo18.getZ())};
        }
        if (rotationOrder == RotationOrder.XYX) {
            Vector3D vector3DApplyTo19 = applyTo(Vector3D.PLUS_I);
            Vector3D vector3DApplyInverseTo19 = applyInverseTo(Vector3D.PLUS_I);
            if (vector3DApplyInverseTo19.getX() < -0.9999999999d || vector3DApplyInverseTo19.getX() > 0.9999999999d) {
                throw new CardanEulerSingularityException(false);
            }
            return new double[]{FastMath.atan2(vector3DApplyInverseTo19.getY(), -vector3DApplyInverseTo19.getZ()), FastMath.acos(vector3DApplyInverseTo19.getX()), FastMath.atan2(vector3DApplyTo19.getY(), vector3DApplyTo19.getZ())};
        }
        if (rotationOrder == RotationOrder.XZX) {
            Vector3D vector3DApplyTo20 = applyTo(Vector3D.PLUS_I);
            Vector3D vector3DApplyInverseTo20 = applyInverseTo(Vector3D.PLUS_I);
            if (vector3DApplyInverseTo20.getX() < -0.9999999999d || vector3DApplyInverseTo20.getX() > 0.9999999999d) {
                throw new CardanEulerSingularityException(false);
            }
            return new double[]{FastMath.atan2(vector3DApplyInverseTo20.getZ(), vector3DApplyInverseTo20.getY()), FastMath.acos(vector3DApplyInverseTo20.getX()), FastMath.atan2(vector3DApplyTo20.getZ(), -vector3DApplyTo20.getY())};
        }
        if (rotationOrder == RotationOrder.YXY) {
            Vector3D vector3DApplyTo21 = applyTo(Vector3D.PLUS_J);
            Vector3D vector3DApplyInverseTo21 = applyInverseTo(Vector3D.PLUS_J);
            if (vector3DApplyInverseTo21.getY() < -0.9999999999d || vector3DApplyInverseTo21.getY() > 0.9999999999d) {
                throw new CardanEulerSingularityException(false);
            }
            return new double[]{FastMath.atan2(vector3DApplyInverseTo21.getX(), vector3DApplyInverseTo21.getZ()), FastMath.acos(vector3DApplyInverseTo21.getY()), FastMath.atan2(vector3DApplyTo21.getX(), -vector3DApplyTo21.getZ())};
        }
        if (rotationOrder == RotationOrder.YZY) {
            Vector3D vector3DApplyTo22 = applyTo(Vector3D.PLUS_J);
            Vector3D vector3DApplyInverseTo22 = applyInverseTo(Vector3D.PLUS_J);
            if (vector3DApplyInverseTo22.getY() < -0.9999999999d || vector3DApplyInverseTo22.getY() > 0.9999999999d) {
                throw new CardanEulerSingularityException(false);
            }
            return new double[]{FastMath.atan2(vector3DApplyInverseTo22.getZ(), -vector3DApplyInverseTo22.getX()), FastMath.acos(vector3DApplyInverseTo22.getY()), FastMath.atan2(vector3DApplyTo22.getZ(), vector3DApplyTo22.getX())};
        }
        if (rotationOrder == RotationOrder.ZXZ) {
            Vector3D vector3DApplyTo23 = applyTo(Vector3D.PLUS_K);
            Vector3D vector3DApplyInverseTo23 = applyInverseTo(Vector3D.PLUS_K);
            if (vector3DApplyInverseTo23.getZ() < -0.9999999999d || vector3DApplyInverseTo23.getZ() > 0.9999999999d) {
                throw new CardanEulerSingularityException(false);
            }
            return new double[]{FastMath.atan2(vector3DApplyInverseTo23.getX(), -vector3DApplyInverseTo23.getY()), FastMath.acos(vector3DApplyInverseTo23.getZ()), FastMath.atan2(vector3DApplyTo23.getX(), vector3DApplyTo23.getY())};
        }
        Vector3D vector3DApplyTo24 = applyTo(Vector3D.PLUS_K);
        Vector3D vector3DApplyInverseTo24 = applyInverseTo(Vector3D.PLUS_K);
        if (vector3DApplyInverseTo24.getZ() < -0.9999999999d || vector3DApplyInverseTo24.getZ() > 0.9999999999d) {
            throw new CardanEulerSingularityException(false);
        }
        return new double[]{FastMath.atan2(vector3DApplyInverseTo24.getY(), vector3DApplyInverseTo24.getX()), FastMath.acos(vector3DApplyInverseTo24.getZ()), FastMath.atan2(vector3DApplyTo24.getY(), -vector3DApplyTo24.getX())};
    }

    public Vector3D applyTo(Vector3D vector3D) {
        double x = vector3D.getX();
        double y = vector3D.getY();
        double z = vector3D.getZ();
        double d = (this.q1 * x) + (this.q2 * y) + (this.q3 * z);
        double d2 = this.q0;
        double d3 = this.q2;
        double d4 = d3 * z;
        double d5 = this.q3;
        double d6 = this.q1;
        return new Vector3D((((((x * d2) - (d4 - (d5 * y))) * d2) + (d * d6)) * 2.0d) - x, (((((y * d2) - ((d5 * x) - (d6 * z))) * d2) + (d * d3)) * 2.0d) - y, (((d2 * ((z * d2) - ((d6 * y) - (x * d3)))) + (d * d5)) * 2.0d) - z);
    }

    public void applyTo(double[] dArr, double[] dArr2) {
        double d = dArr[0];
        double d2 = dArr[1];
        double d3 = dArr[2];
        double d4 = this.q1;
        double d5 = this.q2;
        double d6 = this.q3;
        double d7 = (d4 * d) + (d5 * d2) + (d6 * d3);
        double d8 = this.q0;
        dArr2[0] = (((((d * d8) - ((d5 * d3) - (d6 * d2))) * d8) + (d7 * d4)) * 2.0d) - d;
        dArr2[1] = (((((d2 * d8) - ((d6 * d) - (d4 * d3))) * d8) + (d7 * d5)) * 2.0d) - d2;
        dArr2[2] = (((d8 * ((d3 * d8) - ((d4 * d2) - (d5 * d)))) + (d7 * d6)) * 2.0d) - d3;
    }

    public Vector3D applyInverseTo(Vector3D vector3D) {
        double x = vector3D.getX();
        double y = vector3D.getY();
        double z = vector3D.getZ();
        double d = (this.q1 * x) + (this.q2 * y) + (this.q3 * z);
        double d2 = -this.q0;
        double d3 = this.q2;
        double d4 = d3 * z;
        double d5 = this.q3;
        double d6 = this.q1;
        return new Vector3D((((((x * d2) - (d4 - (d5 * y))) * d2) + (d * d6)) * 2.0d) - x, (((((y * d2) - ((d5 * x) - (d6 * z))) * d2) + (d * d3)) * 2.0d) - y, (((d2 * ((z * d2) - ((d6 * y) - (x * d3)))) + (d * d5)) * 2.0d) - z);
    }

    public void applyInverseTo(double[] dArr, double[] dArr2) {
        double d = dArr[0];
        double d2 = dArr[1];
        double d3 = dArr[2];
        double d4 = this.q1;
        double d5 = this.q2;
        double d6 = this.q3;
        double d7 = (d4 * d) + (d5 * d2) + (d6 * d3);
        double d8 = -this.q0;
        dArr2[0] = (((((d * d8) - ((d5 * d3) - (d6 * d2))) * d8) + (d7 * d4)) * 2.0d) - d;
        dArr2[1] = (((((d2 * d8) - ((d6 * d) - (d4 * d3))) * d8) + (d7 * d5)) * 2.0d) - d2;
        dArr2[2] = (((d8 * ((d3 * d8) - ((d4 * d2) - (d5 * d)))) + (d7 * d6)) * 2.0d) - d3;
    }

    public Rotation applyTo(Rotation rotation) {
        return compose(rotation, RotationConvention.VECTOR_OPERATOR);
    }

    public Rotation compose(Rotation rotation, RotationConvention rotationConvention) {
        return rotationConvention == RotationConvention.VECTOR_OPERATOR ? composeInternal(rotation) : rotation.composeInternal(this);
    }

    private Rotation composeInternal(Rotation rotation) {
        double d = rotation.q0;
        double d2 = this.q0;
        double d3 = d * d2;
        double d4 = rotation.q1;
        double d5 = this.q1;
        double d6 = rotation.q2;
        double d7 = this.q2;
        double d8 = (d4 * d5) + (d6 * d7);
        double d9 = rotation.q3;
        double d10 = this.q3;
        return new Rotation(d3 - (d8 + (d9 * d10)), (d4 * d2) + (d * d5) + ((d6 * d10) - (d9 * d7)), (d6 * d2) + (d * d7) + ((d9 * d5) - (d4 * d10)), ((d4 * d7) - (d6 * d5)) + (d9 * d2) + (d * d10), false);
    }

    public Rotation applyInverseTo(Rotation rotation) {
        return composeInverse(rotation, RotationConvention.VECTOR_OPERATOR);
    }

    public Rotation composeInverse(Rotation rotation, RotationConvention rotationConvention) {
        return rotationConvention == RotationConvention.VECTOR_OPERATOR ? composeInverseInternal(rotation) : rotation.composeInternal(revert());
    }

    private Rotation composeInverseInternal(Rotation rotation) {
        double d = rotation.q0;
        double d2 = this.q0;
        double d3 = (-d) * d2;
        double d4 = rotation.q1;
        double d5 = this.q1;
        double d6 = rotation.q2;
        double d7 = this.q2;
        double d8 = (d4 * d5) + (d6 * d7);
        double d9 = rotation.q3;
        double d10 = this.q3;
        return new Rotation(d3 - (d8 + (d9 * d10)), ((-d4) * d2) + (d * d5) + ((d6 * d10) - (d9 * d7)), ((-d6) * d2) + (d * d7) + ((d9 * d5) - (d4 * d10)), ((d4 * d7) - (d6 * d5)) + ((-d9) * d2) + (d * d10), false);
    }

    private double[][] orthogonalizeMatrix(double[][] dArr, double d) throws NotARotationMatrixException {
        double[] dArr2 = dArr[0];
        double[] dArr3 = dArr[1];
        double[] dArr4 = dArr[2];
        double d2 = dArr2[0];
        double d3 = dArr2[1];
        double d4 = dArr2[2];
        double d5 = dArr3[0];
        double d6 = dArr3[1];
        double d7 = dArr3[2];
        double d8 = dArr4[0];
        double d9 = dArr4[1];
        double d10 = dArr4[2];
        double[][] dArr5 = (double[][]) Array.newInstance((Class<?>) Double.TYPE, 3, 3);
        double[] dArr6 = dArr5[0];
        double[] dArr7 = dArr5[1];
        double[] dArr8 = dArr5[2];
        double d11 = 0.0d;
        int i = 0;
        while (true) {
            int i2 = i + 1;
            double[][] dArr9 = dArr5;
            if (i2 < 11) {
                double d12 = dArr2[0];
                double d13 = dArr3[0];
                double d14 = dArr4[0];
                double d15 = (d12 * d2) + (d13 * d5) + (d14 * d8);
                double d16 = dArr2[1];
                double d17 = dArr3[1];
                double d18 = dArr4[1];
                double d19 = (d16 * d2) + (d17 * d5) + (d18 * d8);
                double d20 = dArr2[2];
                double d21 = dArr3[2];
                double d22 = dArr4[2];
                double d23 = (d20 * d2) + (d21 * d5) + (d22 * d8);
                double d24 = (d12 * d3) + (d13 * d6) + (d14 * d9);
                double d25 = (d16 * d3) + (d17 * d6) + (d18 * d9);
                double d26 = (d20 * d3) + (d21 * d6) + (d22 * d9);
                double d27 = (d12 * d4) + (d13 * d7) + (d14 * d10);
                double d28 = (d16 * d4) + (d17 * d7) + (d18 * d10);
                double d29 = (d20 * d4) + (d21 * d7) + (d22 * d10);
                dArr6[0] = d2 - (((((d2 * d15) + (d3 * d19)) + (d4 * d23)) - d12) * 0.5d);
                dArr6[1] = d3 - (((((d2 * d24) + (d3 * d25)) + (d4 * d26)) - d16) * 0.5d);
                dArr6[2] = d4 - (((((d2 * d27) + (d3 * d28)) + (d4 * d29)) - d20) * 0.5d);
                dArr7[0] = d5 - (((((d5 * d15) + (d6 * d19)) + (d7 * d23)) - dArr3[0]) * 0.5d);
                dArr7[1] = d6 - (((((d5 * d24) + (d6 * d25)) + (d7 * d26)) - dArr3[1]) * 0.5d);
                dArr7[2] = d7 - (((((d5 * d27) + (d6 * d28)) + (d7 * d29)) - dArr3[2]) * 0.5d);
                double d30 = d8 - (((((d15 * d8) + (d19 * d9)) + (d23 * d10)) - dArr4[0]) * 0.5d);
                dArr8[0] = d30;
                double d31 = d9 - (((((d24 * d8) + (d25 * d9)) + (d26 * d10)) - dArr4[1]) * 0.5d);
                dArr8[1] = d31;
                double d32 = d10 - (((((d8 * d27) + (d9 * d28)) + (d29 * d10)) - dArr4[2]) * 0.5d);
                dArr8[2] = d32;
                double d33 = dArr6[0] - dArr2[0];
                double d34 = dArr6[1] - dArr2[1];
                double d35 = dArr6[2] - dArr2[2];
                double d36 = dArr7[0] - dArr3[0];
                double d37 = dArr7[1] - dArr3[1];
                double d38 = dArr7[2] - dArr3[2];
                double d39 = d30 - dArr4[0];
                double d40 = d31 - dArr4[1];
                double d41 = d32 - dArr4[2];
                double d42 = (d33 * d33) + (d34 * d34) + (d35 * d35) + (d36 * d36) + (d37 * d37) + (d38 * d38) + (d39 * d39) + (d40 * d40) + (d41 * d41);
                if (FastMath.abs(d42 - d11) <= d) {
                    return dArr9;
                }
                double d43 = dArr6[0];
                double d44 = dArr6[1];
                double d45 = dArr6[2];
                double d46 = dArr7[0];
                double d47 = dArr7[1];
                double d48 = dArr7[2];
                double d49 = dArr8[0];
                double d50 = dArr8[1];
                dArr5 = dArr9;
                i = i2;
                d10 = dArr8[2];
                d11 = d42;
                d2 = d43;
                d3 = d44;
                d4 = d45;
                d5 = d46;
                d6 = d47;
                d7 = d48;
                d8 = d49;
                d9 = d50;
            } else {
                throw new NotARotationMatrixException(LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX, Integer.valueOf(i));
            }
        }
    }

    public static double distance(Rotation rotation, Rotation rotation2) {
        return rotation.composeInverseInternal(rotation2).getAngle();
    }
}
