// Summary for: /mnt/c/dev/buccancs/external/ShimmerCapturePure/sources/org/apache/commons/math3/distribution/BetaDistribution.java
// Size: 11593 bytes
// Modified: 2025-10-21 16:32:10.117912500 +0100

package org.apache.commons.math3.distribution;

import org.apache.commons.math3.exception.NumberIsTooSmallException;
import org.apache.commons.math3.exception.util.LocalizedFormats;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.special.Beta;
import org.apache.commons.math3.special.Gamma;
import org.apache.commons.math3.util.FastMath;
import org.apache.commons.math3.util.Precision;

/* loaded from: classes5.dex */
public class BetaDistribution extends AbstractRealDistribution {
    public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1.0E-9d;
    private static final long serialVersionUID = -1221965979403477668L;
    private final double alpha;
    private final double beta;
    private final double solverAbsoluteAccuracy;
    private double z;

    public double getAlpha() {
        return this.alpha;
    }

    public double getBeta() {
        return this.beta;
    }

    @Override // org.apache.commons.math3.distribution.AbstractRealDistribution
    protected double getSolverAbsoluteAccuracy() {
        return this.solverAbsoluteAccuracy;
    }

    @Override // org.apache.commons.math3.distribution.RealDistribution
    public double getSupportLowerBound() {
        return 0.0d;
    }

    @Override // org.apache.commons.math3.distribution.RealDistribution
    public double getSupportUpperBound() {
        return 1.0d;
    }

    @Override // org.apache.commons.math3.distribution.RealDistribution
    public boolean isSupportConnected() {
        return true;
    }

    @Override // org.apache.commons.math3.distribution.RealDistribution
    public boolean isSupportLowerBoundInclusive() {
        return false;
    }

    @Override // org.apache.commons.math3.distribution.RealDistribution
    public boolean isSupportUpperBoundInclusive() {
        return false;
    }

    public BetaDistribution(double d, double d2) {
        this(d, d2, 1.0E-9d);
    }

    public BetaDistribution(double d, double d2, double d3) {
        this(new Well19937c(), d, d2, d3);
    }

    public BetaDistribution(RandomGenerator randomGenerator, double d, double d2) {
        this(randomGenerator, d, d2, 1.0E-9d);
    }

    public BetaDistribution(RandomGenerator randomGenerator, double d, double d2, double d3) {
        super(randomGenerator);
        this.alpha = d;
        this.beta = d2;
        this.z = Double.NaN;
        this.solverAbsoluteAccuracy = d3;
    }

    private void recomputeZ() {
        if (Double.isNaN(this.z)) {
            this.z = (Gamma.logGamma(this.alpha) + Gamma.logGamma(this.beta)) - Gamma.logGamma(this.alpha + this.beta);
        }
    }

    @Override // org.apache.commons.math3.distribution.RealDistribution
    public double density(double d) {
        double dLogDensity = logDensity(d);
        if (dLogDensity == Double.NEGATIVE_INFINITY) {
            return 0.0d;
        }
        return FastMath.exp(dLogDensity);
    }

    @Override // org.apache.commons.math3.distribution.AbstractRealDistribution
    public double logDensity(double d) {
        recomputeZ();
        if (d < 0.0d || d > 1.0d) {
            return Double.NEGATIVE_INFINITY;
        }
        if (d == 0.0d) {
            if (this.alpha >= 1.0d) {
                return Double.NEGATIVE_INFINITY;
            }
            throw new NumberIsTooSmallException(LocalizedFormats.CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA, Double.valueOf(this.alpha), 1, false);
        }
        if (d == 1.0d) {
            if (this.beta >= 1.0d) {
                return Double.NEGATIVE_INFINITY;
            }
            throw new NumberIsTooSmallException(LocalizedFormats.CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA, Double.valueOf(this.beta), 1, false);
        }
        return (((this.alpha - 1.0d) * FastMath.log(d)) + ((this.beta - 1.0d) * FastMath.log1p(-d))) - this.z;
    }

    @Override // org.apache.commons.math3.distribution.RealDistribution
    public double cumulativeProbability(double d) {
        if (d <= 0.0d) {
            return 0.0d;
        }
        if (d >= 1.0d) {
            return 1.0d;
        }
        return Beta.regularizedBeta(d, this.alpha, this.beta);
    }

    @Override // org.apache.commons.math3.distribution.RealDistribution
    public double getNumericalMean() {
        double alpha = getAlpha();
        return alpha / (getBeta() + alpha);
    }

    @Override // org.apache.commons.math3.distribution.RealDistribution
    public double getNumericalVariance() {
        double alpha = getAlpha();
        double beta = getBeta();
        double d = alpha + beta;
        return (alpha * beta) / ((d * d) * (d + 1.0d));
    }

    @Override // org.apache.commons.math3.distribution.AbstractRealDistribution, org.apache.commons.math3.distribution.RealDistribution
    public double sample() {
        return ChengBetaSampler.sample(this.random, this.alpha, this.beta);
    }

    private static final class ChengBetaSampler {
        private ChengBetaSampler() {
        }

        static double sample(RandomGenerator randomGenerator, double d, double d2) {
            double dMin = FastMath.min(d, d2);
            double dMax = FastMath.max(d, d2);
            if (dMin > 1.0d) {
                return algorithmBB(randomGenerator, d, dMin, dMax);
            }
            return algorithmBC(randomGenerator, d, dMax, dMin);
        }

        private static double algorithmBB(RandomGenerator randomGenerator, double d, double d2, double d3) {
            double dExp;
            double d4;
            double dLog;
            double d5 = d2 + d3;
            double dSqrt = FastMath.sqrt((d5 - 2.0d) / (((2.0d * d2) * d3) - d5));
            double d6 = (1.0d / dSqrt) + d2;
            do {
                double dNextDouble = randomGenerator.nextDouble();
                double dNextDouble2 = randomGenerator.nextDouble();
                double dLog2 = (FastMath.log(dNextDouble) - FastMath.log1p(-dNextDouble)) * dSqrt;
                dExp = FastMath.exp(dLog2) * d2;
                double d7 = dNextDouble * dNextDouble * dNextDouble2;
                d4 = (dLog2 * d6) - 1.3862944d;
                double d8 = (d2 + d4) - dExp;
                if (d8 + 2.609438d >= 5.0d * d7) {
                    break;
                }
                dLog = FastMath.log(d7);
                if (d8 >= dLog) {
                    break;
                }
            } while (d4 + ((FastMath.log(d5) - FastMath.log(d3 + dExp)) * d5) < dLog);
            double dMin = FastMath.min(dExp, Double.MAX_VALUE);
            return Precision.equals(d2, d) ? dMin / (d3 + dMin) : d3 / (d3 + dMin);
        }

        /* JADX WARN: Removed duplicated region for block: B:22:0x00b1  */
        /* JADX WARN: Removed duplicated region for block: B:26:0x0096 A[SYNTHETIC] */
        /*
            Code decompiled incorrectly, please refer to instructions dump.
            To view partially-correct add '--show-bad-code' argument
        */
        private static double algorithmBC(org.apache.commons.math3.random.RandomGenerator r24, double r25, double r27, double r29) {
            /*
                r0 = r27
                double r2 = r0 + r29
                r4 = 4607182418800017408(0x3ff0000000000000, double:1.0)
                double r6 = r4 / r29
                double r4 = r4 + r0
                double r4 = r4 - r29
                r8 = 4586165625342794696(0x3fa5555673aa1bc8, double:0.0416667)
                double r8 = r8 * r29
                r10 = 4579160027523720458(0x3f8c71c89a38250a, double:0.0138889)
                double r8 = r8 + r10
                double r8 = r8 * r4
                double r10 = r0 * r6
                r12 = 4605180820967230355(0x3fe8e38eb0318b93, double:0.777778)
                double r10 = r10 - r12
                double r8 = r8 / r10
                r10 = 4598175219545276416(0x3fd0000000000000, double:0.25)
                double r4 = r10 / r4
                r12 = 4602678819172646912(0x3fe0000000000000, double:0.5)
                double r4 = r4 + r12
                double r4 = r4 * r29
                double r4 = r4 + r10
            L2d:
                double r14 = r24.nextDouble()
                double r16 = r24.nextDouble()
                double r18 = r14 * r16
                double r20 = r14 * r18
                int r22 = (r14 > r12 ? 1 : (r14 == r12 ? 0 : -1))
                if (r22 >= 0) goto L48
                double r16 = r16 * r10
                double r16 = r16 + r20
                double r16 = r16 - r18
                int r18 = (r16 > r8 ? 1 : (r16 == r8 ? 0 : -1))
                if (r18 < 0) goto L64
                goto L2d
            L48:
                int r16 = (r20 > r10 ? 1 : (r20 == r10 ? 0 : -1))
                if (r16 > 0) goto L5f
                double r2 = org.apache.commons.math3.util.FastMath.log(r14)
                double r4 = -r14
                double r4 = org.apache.commons.math3.util.FastMath.log1p(r4)
                double r2 = r2 - r4
                double r6 = r6 * r2
                double r2 = org.apache.commons.math3.util.FastMath.exp(r6)
                double r2 = r2 * r0
                goto L97
            L5f:
                int r16 = (r20 > r4 ? 1 : (r20 == r4 ? 0 : -1))
                if (r16 < 0) goto L64
                goto L2d
            L64:
                double r16 = org.apache.commons.math3.util.FastMath.log(r14)
                double r14 = -r14
                double r14 = org.apache.commons.math3.util.FastMath.log1p(r14)
                double r16 = r16 - r14
                double r16 = r16 * r6
                double r14 = org.apache.commons.math3.util.FastMath.exp(r16)
                double r14 = r14 * r0
                double r18 = org.apache.commons.math3.util.FastMath.log(r2)
                double r22 = r29 + r14
                double r22 = org.apache.commons.math3.util.FastMath.log(r22)
                double r18 = r18 - r22
                double r18 = r18 + r16
                double r18 = r18 * r2
                r16 = 4608922134115912717(0x3ff62e43096a0c0d, double:1.3862944)
                double r18 = r18 - r16
                double r16 = org.apache.commons.math3.util.FastMath.log(r20)
                int r20 = (r18 > r16 ? 1 : (r18 == r16 ? 0 : -1))
                if (r20 < 0) goto Lb1
                r2 = r14
            L97:
                r4 = 9218868437227405311(0x7fefffffffffffff, double:1.7976931348623157E308)
                double r2 = org.apache.commons.math3.util.FastMath.min(r2, r4)
                r14 = r25
                boolean r0 = org.apache.commons.math3.util.Precision.equals(r0, r14)
                if (r0 == 0) goto Lac
                double r0 = r29 + r2
                double r2 = r2 / r0
                goto Lb0
            Lac:
                double r0 = r29 + r2
                double r2 = r29 / r0
            Lb0:
                return r2
            Lb1:
                r14 = r25
                goto L2d
            */
            throw new UnsupportedOperationException("Method not decompiled: org.apache.commons.math3.distribution.BetaDistribution.ChengBetaSampler.algorithmBC(org.apache.commons.math3.random.RandomGenerator, double, double, double):double");
        }
    }
}
