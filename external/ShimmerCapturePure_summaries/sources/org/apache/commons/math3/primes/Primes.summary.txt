// Summary for: /mnt/c/dev/buccancs/external/ShimmerCapturePure/sources/org/apache/commons/math3/primes/Primes.java
// Size: 1645 bytes
// Modified: 2025-10-21 16:32:04.775009400 +0100

package org.apache.commons.math3.primes;

import java.util.List;
import org.apache.commons.math3.exception.MathIllegalArgumentException;
import org.apache.commons.math3.exception.util.LocalizedFormats;

/* loaded from: classes5.dex */
public class Primes {
    private Primes() {
    }

    public static boolean isPrime(int i) {
        if (i < 2) {
            return false;
        }
        int[] iArr = SmallPrimes.PRIMES;
        int length = iArr.length;
        for (int i2 = 0; i2 < length; i2++) {
            int i3 = iArr[i2];
            if (i % i3 == 0) {
                return i == i3;
            }
        }
        return SmallPrimes.millerRabinPrimeTest(i);
    }

    public static int nextPrime(int i) {
        int i2;
        if (i < 0) {
            throw new MathIllegalArgumentException(LocalizedFormats.NUMBER_TOO_SMALL, Integer.valueOf(i), 0);
        }
        if (i == 2 || (i2 = i | 1) == 1) {
            return 2;
        }
        if (isPrime(i2)) {
            return i2;
        }
        int i3 = i2 % 3;
        if (i3 == 0) {
            i2 += 2;
        } else if (1 == i3) {
            i2 += 4;
        }
        while (!isPrime(i2)) {
            int i4 = i2 + 2;
            if (isPrime(i4)) {
                return i4;
            }
            i2 += 6;
        }
        return i2;
    }

    public static List<Integer> primeFactors(int i) {
        if (i < 2) {
            throw new MathIllegalArgumentException(LocalizedFormats.NUMBER_TOO_SMALL, Integer.valueOf(i), 2);
        }
        return SmallPrimes.trialDivision(i);
    }
}
