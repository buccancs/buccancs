// Summary for: /mnt/c/dev/buccancs/external/ShimmerCapturePure/sources/org/apache/commons/math3/stat/inference/OneWayAnova.java
// Size: 4548 bytes
// Modified: 2025-10-21 16:32:10.365100200 +0100

package org.apache.commons.math3.stat.inference;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import org.apache.commons.math3.distribution.FDistribution;
import org.apache.commons.math3.exception.ConvergenceException;
import org.apache.commons.math3.exception.DimensionMismatchException;
import org.apache.commons.math3.exception.MaxCountExceededException;
import org.apache.commons.math3.exception.NullArgumentException;
import org.apache.commons.math3.exception.OutOfRangeException;
import org.apache.commons.math3.exception.util.LocalizedFormats;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.stat.descriptive.SummaryStatistics;
import org.apache.commons.math3.util.MathUtils;

/* loaded from: classes5.dex */
public class OneWayAnova {
    public double anovaFValue(Collection<double[]> collection) throws NullArgumentException, DimensionMismatchException {
        return anovaStats(collection).F;
    }

    public double anovaPValue(Collection<double[]> collection) throws NullArgumentException, ConvergenceException, DimensionMismatchException, MaxCountExceededException {
        return 1.0d - new FDistribution((RandomGenerator) null, r8.dfbg, r8.dfwg).cumulativeProbability(anovaStats(collection).F);
    }

    public double anovaPValue(Collection<SummaryStatistics> collection, boolean z) throws NullArgumentException, ConvergenceException, DimensionMismatchException, MaxCountExceededException {
        return 1.0d - new FDistribution((RandomGenerator) null, r7.dfbg, r7.dfwg).cumulativeProbability(anovaStats(collection, z).F);
    }

    private AnovaStats anovaStats(Collection<double[]> collection) throws NullArgumentException, DimensionMismatchException {
        MathUtils.checkNotNull(collection);
        ArrayList arrayList = new ArrayList(collection.size());
        Iterator<double[]> it2 = collection.iterator();
        while (true) {
            if (it2.hasNext()) {
                double[] next = it2.next();
                SummaryStatistics summaryStatistics = new SummaryStatistics();
                arrayList.add(summaryStatistics);
                for (double d : next) {
                    summaryStatistics.addValue(d);
                }
            } else {
                return anovaStats(arrayList, false);
            }
        }
    }

    public boolean anovaTest(Collection<double[]> collection, double d) throws OutOfRangeException, NullArgumentException, ConvergenceException, DimensionMismatchException, MaxCountExceededException {
        if (d <= 0.0d || d > 0.5d) {
            throw new OutOfRangeException(LocalizedFormats.OUT_OF_BOUND_SIGNIFICANCE_LEVEL, Double.valueOf(d), 0, Double.valueOf(0.5d));
        }
        return anovaPValue(collection) < d;
    }

    private AnovaStats anovaStats(Collection<SummaryStatistics> collection, boolean z) throws NullArgumentException, DimensionMismatchException {
        MathUtils.checkNotNull(collection);
        if (!z) {
            if (collection.size() < 2) {
                throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED, collection.size(), 2);
            }
            for (SummaryStatistics summaryStatistics : collection) {
                if (summaryStatistics.getN() <= 1) {
                    throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED, (int) summaryStatistics.getN(), 2);
                }
            }
        }
        int i = 0;
        double d = 0.0d;
        double d2 = 0.0d;
        double d3 = 0.0d;
        int i2 = 0;
        for (SummaryStatistics summaryStatistics2 : collection) {
            double sum = summaryStatistics2.getSum();
            double sumsq = summaryStatistics2.getSumsq();
            int n = (int) summaryStatistics2.getN();
            i += n;
            d2 += sum;
            d += sumsq;
            i2 += n - 1;
            d3 += sumsq - ((sum * sum) / n);
        }
        double d4 = (d - ((d2 * d2) / i)) - d3;
        int size = collection.size() - 1;
        return new AnovaStats(size, i2, (d4 / size) / (d3 / i2));
    }

    private static class AnovaStats {
        private final double F;
        private final int dfbg;
        private final int dfwg;

        private AnovaStats(int i, int i2, double d) {
            this.dfbg = i;
            this.dfwg = i2;
            this.F = d;
        }
    }
}
