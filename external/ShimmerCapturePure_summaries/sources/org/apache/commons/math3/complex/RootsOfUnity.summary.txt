// Summary for: /mnt/c/dev/buccancs/external/ShimmerCapturePure/sources/org/apache/commons/math3/complex/RootsOfUnity.java
// Size: 3706 bytes
// Modified: 2025-10-21 16:32:07.402664400 +0100

package org.apache.commons.math3.complex;

import java.io.Serializable;
import org.apache.commons.math3.exception.MathIllegalArgumentException;
import org.apache.commons.math3.exception.MathIllegalStateException;
import org.apache.commons.math3.exception.OutOfRangeException;
import org.apache.commons.math3.exception.ZeroException;
import org.apache.commons.math3.exception.util.LocalizedFormats;
import org.apache.commons.math3.util.FastMath;

/* loaded from: classes5.dex */
public class RootsOfUnity implements Serializable {
    private static final long serialVersionUID = 20120201;
    private int omegaCount = 0;
    private double[] omegaReal = null;
    private double[] omegaImaginaryCounterClockwise = null;
    private double[] omegaImaginaryClockwise = null;
    private boolean isCounterClockWise = true;

    public synchronized boolean isCounterClockWise() throws MathIllegalStateException {
        if (this.omegaCount == 0) {
            throw new MathIllegalStateException(LocalizedFormats.ROOTS_OF_UNITY_NOT_COMPUTED_YET, new Object[0]);
        }
        return this.isCounterClockWise;
    }

    public synchronized void computeRoots(int i) throws ZeroException {
        if (i == 0) {
            throw new ZeroException(LocalizedFormats.CANNOT_COMPUTE_0TH_ROOT_OF_UNITY, new Object[0]);
        }
        this.isCounterClockWise = i > 0;
        int iAbs = FastMath.abs(i);
        if (iAbs == this.omegaCount) {
            return;
        }
        double d = 6.283185307179586d / iAbs;
        double dCos = FastMath.cos(d);
        double dSin = FastMath.sin(d);
        double[] dArr = new double[iAbs];
        this.omegaReal = dArr;
        double[] dArr2 = new double[iAbs];
        this.omegaImaginaryCounterClockwise = dArr2;
        double[] dArr3 = new double[iAbs];
        this.omegaImaginaryClockwise = dArr3;
        dArr[0] = 1.0d;
        dArr2[0] = 0.0d;
        dArr3[0] = 0.0d;
        for (int i2 = 1; i2 < iAbs; i2++) {
            double[] dArr4 = this.omegaReal;
            int i3 = i2 - 1;
            double d2 = dArr4[i3] * dCos;
            double[] dArr5 = this.omegaImaginaryCounterClockwise;
            dArr4[i2] = d2 - (dArr5[i3] * dSin);
            double d3 = (dArr4[i3] * dSin) + (dArr5[i3] * dCos);
            dArr5[i2] = d3;
            this.omegaImaginaryClockwise[i2] = -d3;
        }
        this.omegaCount = iAbs;
    }

    public synchronized double getReal(int i) throws MathIllegalStateException, MathIllegalArgumentException {
        int i2 = this.omegaCount;
        if (i2 == 0) {
            throw new MathIllegalStateException(LocalizedFormats.ROOTS_OF_UNITY_NOT_COMPUTED_YET, new Object[0]);
        }
        if (i < 0 || i >= i2) {
            throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, Integer.valueOf(i), 0, Integer.valueOf(this.omegaCount - 1));
        }
        return this.omegaReal[i];
    }

    public synchronized double getImaginary(int i) throws OutOfRangeException, MathIllegalStateException {
        int i2 = this.omegaCount;
        if (i2 == 0) {
            throw new MathIllegalStateException(LocalizedFormats.ROOTS_OF_UNITY_NOT_COMPUTED_YET, new Object[0]);
        }
        if (i < 0 || i >= i2) {
            throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, Integer.valueOf(i), 0, Integer.valueOf(this.omegaCount - 1));
        }
        return this.isCounterClockWise ? this.omegaImaginaryCounterClockwise[i] : this.omegaImaginaryClockwise[i];
    }

    public synchronized int getNumberOfRoots() {
        return this.omegaCount;
    }
}
