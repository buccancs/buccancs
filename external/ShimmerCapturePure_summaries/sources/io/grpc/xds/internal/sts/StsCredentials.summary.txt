// Summary for: /mnt/c/dev/buccancs/external/ShimmerCapturePure/sources/io/grpc/xds/internal/sts/StsCredentials.java
// Size: 6043 bytes
// Modified: 2025-10-21 16:32:12.522047900 +0100

package io.grpc.xds.internal.sts;

import com.google.api.client.http.GenericUrl;
import com.google.api.client.http.HttpRequest;
import com.google.api.client.http.HttpRequestFactory;
import com.google.api.client.http.HttpResponse;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.http.json.JsonHttpContent;
import com.google.api.client.json.JsonObjectParser;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.client.util.GenericData;
import com.google.auth.http.HttpTransportFactory;
import com.google.auth.oauth2.AccessToken;
import com.google.auth.oauth2.GoogleCredentials;
import com.google.common.io.Files;
import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.nio.charset.StandardCharsets;
import java.util.Date;
import java.util.HashMap;

/* loaded from: classes3.dex */
public final class StsCredentials extends GoogleCredentials {
    private static final String CLOUD_PLATFORM_SCOPE = "https://www.googleapis.com/auth/cloud-platform";
    static final HttpTransportFactory defaultHttpTransportFactory = new DefaultHttpTransportFactory();
    private static final long serialVersionUID = 6647041424685484932L;
    final String audience;
    final String identityTokenEndpoint;
    final String sourceCredentialsFileLocation;
    transient HttpTransportFactory transportFactory;

    private StsCredentials(String str, String str2, String str3, HttpTransportFactory httpTransportFactory) {
        this.identityTokenEndpoint = str;
        this.audience = str2;
        this.sourceCredentialsFileLocation = str3;
        this.transportFactory = httpTransportFactory;
    }

    @Override // com.google.auth.oauth2.OAuth2Credentials
    public AccessToken refreshAccessToken() throws IOException {
        AccessToken sourceAccessTokenFromFileLocation = getSourceAccessTokenFromFileLocation();
        HttpTransport httpTransportCreate = this.transportFactory.create();
        JsonObjectParser jsonObjectParser = new JsonObjectParser(JacksonFactory.getDefaultInstance());
        HttpRequestFactory httpRequestFactoryCreateRequestFactory = httpTransportCreate.createRequestFactory();
        GenericUrl genericUrl = new GenericUrl(this.identityTokenEndpoint);
        HashMap map = new HashMap();
        map.put("grant_type", "urn:ietf:params:oauth:grant-type:token-exchange");
        map.put("subject_token_type", "urn:ietf:params:oauth:token-type:jwt");
        map.put("requested_token_type", "urn:ietf:params:oauth:token-type:access_token");
        map.put("subject_token", sourceAccessTokenFromFileLocation.getTokenValue());
        map.put("scope", CLOUD_PLATFORM_SCOPE);
        map.put("audience", this.audience);
        HttpRequest httpRequestBuildPostRequest = httpRequestFactoryCreateRequestFactory.buildPostRequest(genericUrl, new JsonHttpContent(jsonObjectParser.getJsonFactory(), map));
        httpRequestBuildPostRequest.setParser(jsonObjectParser);
        try {
            HttpResponse httpResponseExecute = httpRequestBuildPostRequest.execute();
            if (httpResponseExecute.getStatusCode() != 200) {
                throw new IOException("Error getting access token: " + getStatusString(httpResponseExecute));
            }
            try {
                GenericData genericData = (GenericData) httpResponseExecute.parseAs(GenericData.class);
                httpResponseExecute.disconnect();
                return new AccessToken((String) genericData.get("access_token"), genericData.containsKey("expires_in") ? new Date(System.currentTimeMillis() + (((BigDecimal) genericData.get("expires_in")).longValue() * 1000)) : null);
            } catch (Throwable th) {
                httpResponseExecute.disconnect();
                throw th;
            }
        } catch (IOException e) {
            throw new IOException("Error requesting access token", e);
        }
    }

    private AccessToken getSourceAccessTokenFromFileLocation() throws IOException {
        return new AccessToken(Files.asCharSource(new File(this.sourceCredentialsFileLocation), StandardCharsets.UTF_8).read(), null);
    }

    private static String getStatusString(HttpResponse httpResponse) {
        return httpResponse.getStatusCode() + " : " + httpResponse.getStatusMessage();
    }

    @Override // com.google.auth.oauth2.GoogleCredentials, com.google.auth.oauth2.OAuth2Credentials
    public GoogleCredentials.Builder toBuilder() {
        throw new UnsupportedOperationException("toBuilder not supported");
    }

    public static abstract class Factory {
        private static final Factory DEFAULT_INSTANCE = new Factory() { // from class: io.grpc.xds.internal.sts.StsCredentials.Factory.1
            @Override // io.grpc.xds.internal.sts.StsCredentials.Factory
            public StsCredentials create(String str, String str2, String str3) {
                return create(str, str2, str3, (HttpTransportFactory) StsCredentials.getFromServiceLoader(HttpTransportFactory.class, StsCredentials.defaultHttpTransportFactory));
            }
        };

        public static Factory getInstance() {
            return DEFAULT_INSTANCE;
        }

        public abstract StsCredentials create(String str, String str2, String str3);

        static StsCredentials create(String str, String str2, String str3, HttpTransportFactory httpTransportFactory) {
            return new StsCredentials(str, str2, str3, httpTransportFactory);
        }
    }

    private static class DefaultHttpTransportFactory implements HttpTransportFactory {
        private static final HttpTransport netHttpTransport = new NetHttpTransport();

        @Override // com.google.auth.http.HttpTransportFactory
        public HttpTransport create() {
            return netHttpTransport;
        }

        private DefaultHttpTransportFactory() {
        }
    }
}
