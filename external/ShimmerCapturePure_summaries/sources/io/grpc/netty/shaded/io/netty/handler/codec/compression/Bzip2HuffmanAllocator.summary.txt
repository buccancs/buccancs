// Summary for: /mnt/c/dev/buccancs/external/ShimmerCapturePure/sources/io/grpc/netty/shaded/io/netty/handler/codec/compression/Bzip2HuffmanAllocator.java
// Size: 5135 bytes
// Modified: 2025-10-21 16:32:00.467683900 +0100

package io.grpc.netty.shaded.io.netty.handler.codec.compression;

/* loaded from: classes3.dex */
final class Bzip2HuffmanAllocator {
    private static int first(int[] iArr, int i, int i2) {
        int length = iArr.length;
        int length2 = iArr.length - 2;
        int i3 = i;
        while (i3 >= i2 && iArr[i3] % length > i) {
            length2 = i3;
            i3 -= (i - i3) + 1;
        }
        int iMax = Math.max(i2 - 1, i3);
        while (length2 > iMax + 1) {
            int i4 = (iMax + length2) >>> 1;
            if (iArr[i4] % length > i) {
                length2 = i4;
            } else {
                iMax = i4;
            }
        }
        return length2;
    }

    /* JADX WARN: Removed duplicated region for block: B:10:0x001b  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    private static void setExtendedParentPointers(int[] r7) {
        /*
            int r0 = r7.length
            r1 = 0
            r2 = r7[r1]
            r3 = 1
            r4 = r7[r3]
            int r2 = r2 + r4
            r7[r1] = r2
            r2 = 2
        Lb:
            int r4 = r0 + (-1)
            if (r3 >= r4) goto L43
            if (r2 >= r0) goto L1b
            r4 = r7[r1]
            r5 = r7[r2]
            if (r4 >= r5) goto L18
            goto L1b
        L18:
            int r2 = r2 + 1
            goto L22
        L1b:
            r5 = r7[r1]
            int r4 = r1 + 1
            r7[r1] = r3
            r1 = r4
        L22:
            if (r2 >= r0) goto L34
            if (r1 >= r3) goto L2d
            r4 = r7[r1]
            r6 = r7[r2]
            if (r4 >= r6) goto L2d
            goto L34
        L2d:
            int r4 = r2 + 1
            r2 = r7[r2]
            int r5 = r5 + r2
            r2 = r4
            goto L3e
        L34:
            r4 = r7[r1]
            int r5 = r5 + r4
            int r4 = r1 + 1
            int r6 = r3 + r0
            r7[r1] = r6
            r1 = r4
        L3e:
            r7[r3] = r5
            int r3 = r3 + 1
            goto Lb
        L43:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: io.grpc.netty.shaded.io.netty.handler.codec.compression.Bzip2HuffmanAllocator.setExtendedParentPointers(int[]):void");
    }

    private static int findNodesToRelocate(int[] iArr, int i) {
        int length = iArr.length - 2;
        for (int i2 = 1; i2 < i - 1 && length > 1; i2++) {
            length = first(iArr, length - 1, 0);
        }
        return length;
    }

    private static void allocateNodeLengths(int[] iArr) {
        int i = 2;
        int length = iArr.length - 2;
        int i2 = 1;
        int length2 = iArr.length - 1;
        while (i > 0) {
            int iFirst = first(iArr, length - 1, 0);
            int i3 = length - iFirst;
            int i4 = i - i3;
            while (i4 > 0) {
                iArr[length2] = i2;
                i4--;
                length2--;
            }
            i = i3 << 1;
            i2++;
            length = iFirst;
        }
    }

    private static void allocateNodeLengthsWithRelocation(int[] iArr, int i, int i2) {
        int iMin;
        int length = iArr.length - 2;
        int length2 = iArr.length - 1;
        int i3 = i2 != 1 ? 1 : 2;
        int i4 = i2 == 1 ? i - 2 : i;
        int i5 = i3 << 1;
        while (i5 > 0) {
            int iFirst = length <= i ? length : first(iArr, length - 1, i);
            if (i3 >= i2) {
                iMin = Math.min(i4, 1 << (i3 - i2));
            } else if (i3 == i2 - 1) {
                if (iArr[iFirst] == length) {
                    iFirst++;
                }
                iMin = 1;
            } else {
                iMin = 0;
            }
            int i6 = (length - iFirst) + iMin;
            int i7 = i5 - i6;
            while (i7 > 0) {
                iArr[length2] = i3;
                i7--;
                length2--;
            }
            i4 -= iMin;
            i5 = i6 << 1;
            i3++;
            length = iFirst;
        }
    }

    static void allocateHuffmanCodeLengths(int[] iArr, int i) {
        int length = iArr.length;
        if (length != 1) {
            if (length == 2) {
                iArr[1] = 1;
            } else {
                setExtendedParentPointers(iArr);
                int iFindNodesToRelocate = findNodesToRelocate(iArr, i);
                if (iArr[0] % iArr.length >= iFindNodesToRelocate) {
                    allocateNodeLengths(iArr);
                    return;
                } else {
                    allocateNodeLengthsWithRelocation(iArr, iFindNodesToRelocate, i - (32 - Integer.numberOfLeadingZeros(iFindNodesToRelocate - 1)));
                    return;
                }
            }
        }
        iArr[0] = 1;
    }

    private Bzip2HuffmanAllocator() {
    }
}
