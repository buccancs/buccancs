// Summary for: /mnt/c/dev/buccancs/external/ShimmerCapturePure/sources/io/grpc/netty/shaded/io/netty/channel/epoll/Native.java
// Size: 9523 bytes
// Modified: 2025-10-21 16:32:06.859878900 +0100

package io.grpc.netty.shaded.io.netty.channel.epoll;

import io.grpc.netty.shaded.io.netty.channel.epoll.NativeDatagramPacketArray;
import io.grpc.netty.shaded.io.netty.channel.unix.Errors;
import io.grpc.netty.shaded.io.netty.channel.unix.FileDescriptor;
import io.grpc.netty.shaded.io.netty.channel.unix.Socket;
import io.grpc.netty.shaded.io.netty.util.internal.NativeLibraryLoader;
import io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent;
import io.grpc.netty.shaded.io.netty.util.internal.SystemPropertyUtil;
import io.grpc.netty.shaded.io.netty.util.internal.ThrowableUtil;
import io.grpc.netty.shaded.io.netty.util.internal.logging.InternalLogger;
import io.grpc.netty.shaded.io.netty.util.internal.logging.InternalLoggerFactory;
import java.io.IOException;
import java.nio.channels.Selector;
import java.util.Locale;

/* loaded from: classes3.dex */
public final class Native {
    public static final int EPOLLERR;
    public static final int EPOLLET;
    public static final int EPOLLIN;
    public static final int EPOLLOUT;
    public static final int EPOLLRDHUP;
    static final boolean IS_SUPPORTING_RECVMMSG;
    public static final boolean IS_SUPPORTING_SENDMMSG;
    public static final boolean IS_SUPPORTING_TCP_FASTOPEN;
    public static final String KERNEL_VERSION;
    public static final int TCP_MD5SIG_MAXKEYLEN;
    private static final InternalLogger logger = InternalLoggerFactory.getInstance((Class<?>) Native.class);

    private static native int epollBusyWait0(int i, long j, int i2);

    private static native int epollCreate();

    private static native int epollCtlAdd0(int i, int i2, int i3);

    private static native int epollCtlDel0(int i, int i2);

    private static native int epollCtlMod0(int i, int i2, int i3);

    private static native int epollWait(int i, long j, int i2, int i3);

    private static native int epollWait0(int i, long j, int i2, int i3, int i4, int i5);

    private static native int eventFd();

    public static native void eventFdRead(int i);

    public static native void eventFdWrite(int i, long j);

    public static native int offsetofEpollData();

    private static native int recvmmsg0(int i, boolean z, NativeDatagramPacketArray.NativeDatagramPacket[] nativeDatagramPacketArr, int i2, int i3);

    private static native int sendmmsg0(int i, boolean z, NativeDatagramPacketArray.NativeDatagramPacket[] nativeDatagramPacketArr, int i2, int i3);

    public static native int sizeofEpollEvent();

    private static native int splice0(int i, long j, int i2, long j2, long j3);

    private static native int timerFd();

    static native void timerFdRead(int i);

    static native void timerFdSetTime(int i, int i2, int i3) throws IOException;

    static {
        Selector selectorOpen;
        try {
            selectorOpen = Selector.open();
        } catch (IOException unused) {
            selectorOpen = null;
        }
        try {
            try {
                offsetofEpollData();
            } catch (UnsatisfiedLinkError unused2) {
                loadNativeLibrary();
                if (selectorOpen != null) {
                }
            }
            if (selectorOpen != null) {
                try {
                    selectorOpen.close();
                } catch (IOException unused3) {
                }
            }
            Socket.initialize();
            EPOLLIN = NativeStaticallyReferencedJniMethods.epollin();
            EPOLLOUT = NativeStaticallyReferencedJniMethods.epollout();
            EPOLLRDHUP = NativeStaticallyReferencedJniMethods.epollrdhup();
            EPOLLET = NativeStaticallyReferencedJniMethods.epollet();
            EPOLLERR = NativeStaticallyReferencedJniMethods.epollerr();
            IS_SUPPORTING_SENDMMSG = NativeStaticallyReferencedJniMethods.isSupportingSendmmsg();
            IS_SUPPORTING_RECVMMSG = NativeStaticallyReferencedJniMethods.isSupportingRecvmmsg();
            IS_SUPPORTING_TCP_FASTOPEN = NativeStaticallyReferencedJniMethods.isSupportingTcpFastopen();
            TCP_MD5SIG_MAXKEYLEN = NativeStaticallyReferencedJniMethods.tcpMd5SigMaxKeyLen();
            KERNEL_VERSION = NativeStaticallyReferencedJniMethods.kernelVersion();
        } catch (Throwable th) {
            if (selectorOpen != null) {
                try {
                    selectorOpen.close();
                } catch (IOException unused4) {
                }
            }
            throw th;
        }
    }

    public static FileDescriptor newEventFd() {
        return new FileDescriptor(eventFd());
    }

    public static FileDescriptor newTimerFd() {
        return new FileDescriptor(timerFd());
    }

    public static FileDescriptor newEpollCreate() {
        return new FileDescriptor(epollCreate());
    }

    @Deprecated
    public static int epollWait(FileDescriptor fileDescriptor, EpollEventArray epollEventArray, FileDescriptor fileDescriptor2, int i, int i2) throws IOException {
        int i3;
        int i4;
        if (i == 0 && i2 == 0) {
            return epollWait(fileDescriptor, epollEventArray, 0);
        }
        if (i == Integer.MAX_VALUE) {
            i3 = 0;
            i4 = 0;
        } else {
            i3 = i;
            i4 = i2;
        }
        int iEpollWait0 = epollWait0(fileDescriptor.intValue(), epollEventArray.memoryAddress(), epollEventArray.length(), fileDescriptor2.intValue(), i3, i4);
        if (iEpollWait0 >= 0) {
            return iEpollWait0;
        }
        throw Errors.newIOException("epoll_wait", iEpollWait0);
    }

    static int epollWait(FileDescriptor fileDescriptor, EpollEventArray epollEventArray, boolean z) throws IOException {
        return epollWait(fileDescriptor, epollEventArray, z ? 0 : -1);
    }

    static int epollWait(FileDescriptor fileDescriptor, EpollEventArray epollEventArray, int i) throws IOException {
        int iEpollWait = epollWait(fileDescriptor.intValue(), epollEventArray.memoryAddress(), epollEventArray.length(), i);
        if (iEpollWait >= 0) {
            return iEpollWait;
        }
        throw Errors.newIOException("epoll_wait", iEpollWait);
    }

    public static int epollBusyWait(FileDescriptor fileDescriptor, EpollEventArray epollEventArray) throws IOException {
        int iEpollBusyWait0 = epollBusyWait0(fileDescriptor.intValue(), epollEventArray.memoryAddress(), epollEventArray.length());
        if (iEpollBusyWait0 >= 0) {
            return iEpollBusyWait0;
        }
        throw Errors.newIOException("epoll_wait", iEpollBusyWait0);
    }

    public static void epollCtlAdd(int i, int i2, int i3) throws IOException {
        int iEpollCtlAdd0 = epollCtlAdd0(i, i2, i3);
        if (iEpollCtlAdd0 < 0) {
            throw Errors.newIOException("epoll_ctl", iEpollCtlAdd0);
        }
    }

    public static void epollCtlMod(int i, int i2, int i3) throws IOException {
        int iEpollCtlMod0 = epollCtlMod0(i, i2, i3);
        if (iEpollCtlMod0 < 0) {
            throw Errors.newIOException("epoll_ctl", iEpollCtlMod0);
        }
    }

    public static void epollCtlDel(int i, int i2) throws IOException {
        int iEpollCtlDel0 = epollCtlDel0(i, i2);
        if (iEpollCtlDel0 < 0) {
            throw Errors.newIOException("epoll_ctl", iEpollCtlDel0);
        }
    }

    public static int splice(int i, long j, int i2, long j2, long j3) throws IOException {
        int iSplice0 = splice0(i, j, i2, j2, j3);
        return iSplice0 >= 0 ? iSplice0 : Errors.ioResult("splice", iSplice0);
    }

    @Deprecated
    public static int sendmmsg(int i, NativeDatagramPacketArray.NativeDatagramPacket[] nativeDatagramPacketArr, int i2, int i3) throws IOException {
        return sendmmsg(i, Socket.isIPv6Preferred(), nativeDatagramPacketArr, i2, i3);
    }

    static int sendmmsg(int i, boolean z, NativeDatagramPacketArray.NativeDatagramPacket[] nativeDatagramPacketArr, int i2, int i3) throws IOException {
        int iSendmmsg0 = sendmmsg0(i, z, nativeDatagramPacketArr, i2, i3);
        return iSendmmsg0 >= 0 ? iSendmmsg0 : Errors.ioResult("sendmmsg", iSendmmsg0);
    }

    static int recvmmsg(int i, boolean z, NativeDatagramPacketArray.NativeDatagramPacket[] nativeDatagramPacketArr, int i2, int i3) throws IOException {
        int iRecvmmsg0 = recvmmsg0(i, z, nativeDatagramPacketArr, i2, i3);
        return iRecvmmsg0 >= 0 ? iRecvmmsg0 : Errors.ioResult("recvmmsg", iRecvmmsg0);
    }

    private static void loadNativeLibrary() throws Throwable {
        if (!SystemPropertyUtil.get("os.name").toLowerCase(Locale.UK).trim().startsWith("linux")) {
            throw new IllegalStateException("Only supported on Linux");
        }
        String str = "netty_transport_native_epoll_" + PlatformDependent.normalizedArch();
        ClassLoader classLoader = PlatformDependent.getClassLoader(Native.class);
        try {
            NativeLibraryLoader.load(str, classLoader);
        } catch (UnsatisfiedLinkError e) {
            try {
                NativeLibraryLoader.load("netty_transport_native_epoll", classLoader);
                logger.debug("Failed to load {}", str, e);
            } catch (UnsatisfiedLinkError e2) {
                ThrowableUtil.addSuppressed(e, e2);
                throw e;
            }
        }
    }

    private Native() {
    }
}
