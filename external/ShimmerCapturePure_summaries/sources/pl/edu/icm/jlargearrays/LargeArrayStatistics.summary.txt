// Summary for: /mnt/c/dev/buccancs/external/ShimmerCapturePure/sources/pl/edu/icm/jlargearrays/LargeArrayStatistics.java
// Size: 26789 bytes
// Modified: 2025-10-21 16:32:06.237698600 +0100

package pl.edu.icm.jlargearrays;

import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import org.apache.commons.math3.util.FastMath;

/* loaded from: classes2.dex */
public class LargeArrayStatistics {
    private LargeArrayStatistics() {
    }

    public static double min(final LargeArray largeArray) {
        if (largeArray == null || !largeArray.isNumeric() || largeArray.getType() == LargeArrayType.COMPLEX_FLOAT || largeArray.getType() == LargeArrayType.COMPLEX_DOUBLE) {
            throw new IllegalArgumentException("a == null || !a.isNumeric() || a.getType() == LargeArrayType.COMPLEX_FLOAT || a.getType() == LargeArrayType.COMPLEX_DOUBLE");
        }
        if (largeArray.isConstant()) {
            return largeArray.getDouble(0L);
        }
        double d = largeArray.getDouble(0L);
        long length = largeArray.length();
        int iMin = (int) FastMath.min(length, ConcurrencyUtils.getNumberOfThreads());
        if (iMin < 2 || length < ConcurrencyUtils.getConcurrentThreshold()) {
            for (long j = 1; j < length; j++) {
                double d2 = largeArray.getDouble(j);
                if (d2 < d) {
                    d = d2;
                }
            }
        } else {
            long j2 = length / iMin;
            Future[] futureArr = new Future[iMin];
            int i = 0;
            while (i < iMin) {
                final long j3 = i * j2;
                Future[] futureArr2 = futureArr;
                int i2 = i;
                final long j4 = i == iMin + (-1) ? length : j3 + j2;
                futureArr2[i2] = ConcurrencyUtils.submit(new Callable<Double>() { // from class: pl.edu.icm.jlargearrays.LargeArrayStatistics.1
                    /* JADX WARN: Can't rename method to resolve collision */
                    @Override // java.util.concurrent.Callable
                    public Double call() {
                        double d3 = largeArray.getDouble(j3);
                        long j5 = j3;
                        while (true) {
                            j5++;
                            if (j5 < j4) {
                                double d4 = largeArray.getDouble(j5);
                                if (d4 < d3) {
                                    d3 = d4;
                                }
                            } else {
                                return Double.valueOf(d3);
                            }
                        }
                    }
                });
                i = i2 + 1;
                futureArr = futureArr2;
            }
            Future[] futureArr3 = futureArr;
            try {
                ConcurrencyUtils.waitForCompletion(futureArr3);
                for (int i3 = 0; i3 < iMin; i3++) {
                    double dDoubleValue = ((Double) futureArr3[i3].get()).doubleValue();
                    if (dDoubleValue < d) {
                        d = dDoubleValue;
                    }
                }
            } catch (InterruptedException | ExecutionException unused) {
                for (long j5 = 1; j5 < length; j5++) {
                    double d3 = largeArray.getDouble(j5);
                    if (d3 < d) {
                        d = d3;
                    }
                }
            }
        }
        return d;
    }

    public static double max(final LargeArray largeArray) {
        if (largeArray == null || !largeArray.isNumeric() || largeArray.getType() == LargeArrayType.COMPLEX_FLOAT || largeArray.getType() == LargeArrayType.COMPLEX_DOUBLE) {
            throw new IllegalArgumentException("a == null || !a.isNumeric() || a.getType() == LargeArrayType.COMPLEX_FLOAT || a.getType() == LargeArrayType.COMPLEX_DOUBLE");
        }
        if (largeArray.isConstant()) {
            return largeArray.getDouble(0L);
        }
        double d = largeArray.getDouble(0L);
        long length = largeArray.length();
        int iMin = (int) FastMath.min(length, ConcurrencyUtils.getNumberOfThreads());
        if (iMin < 2 || length < ConcurrencyUtils.getConcurrentThreshold()) {
            for (long j = 1; j < length; j++) {
                double d2 = largeArray.getDouble(j);
                if (d2 > d) {
                    d = d2;
                }
            }
        } else {
            long j2 = length / iMin;
            Future[] futureArr = new Future[iMin];
            int i = 0;
            while (i < iMin) {
                final long j3 = i * j2;
                Future[] futureArr2 = futureArr;
                int i2 = i;
                final long j4 = i == iMin + (-1) ? length : j3 + j2;
                futureArr2[i2] = ConcurrencyUtils.submit(new Callable<Double>() { // from class: pl.edu.icm.jlargearrays.LargeArrayStatistics.2
                    /* JADX WARN: Can't rename method to resolve collision */
                    @Override // java.util.concurrent.Callable
                    public Double call() {
                        double d3 = largeArray.getDouble(j3);
                        long j5 = j3;
                        while (true) {
                            j5++;
                            if (j5 < j4) {
                                double d4 = largeArray.getDouble(j5);
                                if (d4 > d3) {
                                    d3 = d4;
                                }
                            } else {
                                return Double.valueOf(d3);
                            }
                        }
                    }
                });
                i = i2 + 1;
                futureArr = futureArr2;
            }
            Future[] futureArr3 = futureArr;
            try {
                ConcurrencyUtils.waitForCompletion(futureArr3);
                for (int i3 = 0; i3 < iMin; i3++) {
                    double dDoubleValue = ((Double) futureArr3[i3].get()).doubleValue();
                    if (dDoubleValue > d) {
                        d = dDoubleValue;
                    }
                }
            } catch (InterruptedException | ExecutionException unused) {
                for (long j5 = 1; j5 < length; j5++) {
                    double d3 = largeArray.getDouble(j5);
                    if (d3 > d) {
                        d = d3;
                    }
                }
            }
        }
        return d;
    }

    public static double sum(final LargeArray largeArray) {
        if (largeArray == null || !largeArray.isNumeric() || largeArray.getType() == LargeArrayType.COMPLEX_FLOAT || largeArray.getType() == LargeArrayType.COMPLEX_DOUBLE) {
            throw new IllegalArgumentException("a == null || !a.isNumeric() || a.getType() == LargeArrayType.COMPLEX_FLOAT || a.getType() == LargeArrayType.COMPLEX_DOUBLE");
        }
        long j = 0;
        if (largeArray.isConstant()) {
            return largeArray.length() * largeArray.getDouble(0L);
        }
        long length = largeArray.length();
        int iMin = (int) FastMath.min(length, ConcurrencyUtils.getNumberOfThreads());
        double dDoubleValue = 0.0d;
        if (iMin < 2 || length < ConcurrencyUtils.getConcurrentThreshold()) {
            while (j < length) {
                dDoubleValue += largeArray.getDouble(j);
                j++;
            }
        } else {
            long j2 = length / iMin;
            Future[] futureArr = new Future[iMin];
            int i = 0;
            while (i < iMin) {
                final long j3 = i * j2;
                int i2 = i;
                final long j4 = i == iMin + (-1) ? length : j3 + j2;
                Future[] futureArr2 = futureArr;
                futureArr2[i2] = ConcurrencyUtils.submit(new Callable<Double>() { // from class: pl.edu.icm.jlargearrays.LargeArrayStatistics.3
                    /* JADX WARN: Can't rename method to resolve collision */
                    @Override // java.util.concurrent.Callable
                    public Double call() {
                        double d = 0.0d;
                        for (long j5 = j3; j5 < j4; j5++) {
                            d += largeArray.getDouble(j5);
                        }
                        return Double.valueOf(d);
                    }
                });
                i = i2 + 1;
                futureArr = futureArr2;
            }
            Future[] futureArr3 = futureArr;
            try {
                ConcurrencyUtils.waitForCompletion(futureArr3);
                for (int i3 = 0; i3 < iMin; i3++) {
                    dDoubleValue += ((Double) futureArr3[i3].get()).doubleValue();
                }
            } catch (InterruptedException | ExecutionException unused) {
                while (j < length) {
                    dDoubleValue += largeArray.getDouble(j);
                    j++;
                }
            }
        }
        return dDoubleValue;
    }

    public static double sumKahan(final LargeArray largeArray) {
        double dDoubleValue;
        if (largeArray == null || !largeArray.isNumeric() || largeArray.getType() == LargeArrayType.COMPLEX_FLOAT || largeArray.getType() == LargeArrayType.COMPLEX_DOUBLE) {
            throw new IllegalArgumentException("a == null || !a.isNumeric() || a.getType() == LargeArrayType.COMPLEX_FLOAT || a.getType() == LargeArrayType.COMPLEX_DOUBLE");
        }
        long j = 0;
        if (largeArray.isConstant()) {
            return largeArray.length() * largeArray.getDouble(0L);
        }
        long length = largeArray.length();
        int iMin = (int) FastMath.min(length, ConcurrencyUtils.getNumberOfThreads());
        double d = 0.0d;
        if (iMin < 2 || length < ConcurrencyUtils.getConcurrentThreshold()) {
            double d2 = 0.0d;
            while (j < length) {
                double d3 = largeArray.getDouble(j) - d;
                double d4 = d2 + d3;
                double d5 = (d4 - d2) - d3;
                j++;
                d2 = d4;
                d = d5;
            }
            return d2;
        }
        long j2 = length / iMin;
        Future[] futureArr = new Future[iMin];
        int i = 0;
        while (i < iMin) {
            final long j3 = i * j2;
            int i2 = i;
            final long j4 = i == iMin + (-1) ? length : j3 + j2;
            Future[] futureArr2 = futureArr;
            futureArr2[i2] = ConcurrencyUtils.submit(new Callable<Double>() { // from class: pl.edu.icm.jlargearrays.LargeArrayStatistics.4
                /* JADX WARN: Can't rename method to resolve collision */
                @Override // java.util.concurrent.Callable
                public Double call() {
                    long j5 = j3;
                    double d6 = 0.0d;
                    double d7 = 0.0d;
                    while (j5 < j4) {
                        double d8 = largeArray.getDouble(j5) - d7;
                        double d9 = d6 + d8;
                        double d10 = (d9 - d6) - d8;
                        j5++;
                        d6 = d9;
                        d7 = d10;
                    }
                    return Double.valueOf(d6);
                }
            });
            i = i2 + 1;
            futureArr = futureArr2;
        }
        Future[] futureArr3 = futureArr;
        try {
            ConcurrencyUtils.waitForCompletion(futureArr3);
            dDoubleValue = 0.0d;
            for (int i3 = 0; i3 < iMin; i3++) {
                try {
                    dDoubleValue += ((Double) futureArr3[i3].get()).doubleValue();
                } catch (InterruptedException | ExecutionException unused) {
                    while (j < length) {
                        double d6 = largeArray.getDouble(j) - d;
                        double d7 = dDoubleValue + d6;
                        double d8 = (d7 - dDoubleValue) - d6;
                        j++;
                        dDoubleValue = d7;
                        d = d8;
                    }
                    return dDoubleValue;
                }
            }
            return dDoubleValue;
        } catch (InterruptedException | ExecutionException unused2) {
            dDoubleValue = 0.0d;
        }
    }

    public static double avg(final LargeArray largeArray) {
        if (largeArray == null || !largeArray.isNumeric() || largeArray.getType() == LargeArrayType.COMPLEX_FLOAT || largeArray.getType() == LargeArrayType.COMPLEX_DOUBLE) {
            throw new IllegalArgumentException("a == null || !a.isNumeric() || a.getType() == LargeArrayType.COMPLEX_FLOAT || a.getType() == LargeArrayType.COMPLEX_DOUBLE");
        }
        long j = 0;
        if (largeArray.isConstant()) {
            return largeArray.getDouble(0L);
        }
        long length = largeArray.length();
        int iMin = (int) FastMath.min(length, ConcurrencyUtils.getNumberOfThreads());
        double dDoubleValue = 0.0d;
        if (iMin < 2 || length < ConcurrencyUtils.getConcurrentThreshold()) {
            while (j < length) {
                dDoubleValue += largeArray.getDouble(j);
                j++;
            }
        } else {
            long j2 = length / iMin;
            Future[] futureArr = new Future[iMin];
            int i = 0;
            while (i < iMin) {
                final long j3 = i * j2;
                int i2 = i;
                final long j4 = i == iMin + (-1) ? length : j3 + j2;
                Future[] futureArr2 = futureArr;
                futureArr2[i2] = ConcurrencyUtils.submit(new Callable<Double>() { // from class: pl.edu.icm.jlargearrays.LargeArrayStatistics.5
                    /* JADX WARN: Can't rename method to resolve collision */
                    @Override // java.util.concurrent.Callable
                    public Double call() {
                        double d = 0.0d;
                        for (long j5 = j3; j5 < j4; j5++) {
                            d += largeArray.getDouble(j5);
                        }
                        return Double.valueOf(d);
                    }
                });
                i = i2 + 1;
                futureArr = futureArr2;
            }
            Future[] futureArr3 = futureArr;
            try {
                ConcurrencyUtils.waitForCompletion(futureArr3);
                for (int i3 = 0; i3 < iMin; i3++) {
                    dDoubleValue += ((Double) futureArr3[i3].get()).doubleValue();
                }
            } catch (InterruptedException | ExecutionException unused) {
                while (j < length) {
                    dDoubleValue += largeArray.getDouble(j);
                    j++;
                }
            }
        }
        return dDoubleValue / length;
    }

    public static double avgKahan(final LargeArray largeArray) {
        double dDoubleValue;
        if (largeArray == null || !largeArray.isNumeric() || largeArray.getType() == LargeArrayType.COMPLEX_FLOAT || largeArray.getType() == LargeArrayType.COMPLEX_DOUBLE) {
            throw new IllegalArgumentException("a == null || !a.isNumeric() || a.getType() == LargeArrayType.COMPLEX_FLOAT || a.getType() == LargeArrayType.COMPLEX_DOUBLE");
        }
        long j = 0;
        if (largeArray.isConstant()) {
            return largeArray.getDouble(0L);
        }
        long length = largeArray.length();
        int iMin = (int) FastMath.min(length, ConcurrencyUtils.getNumberOfThreads());
        double d = 0.0d;
        if (iMin < 2 || length < ConcurrencyUtils.getConcurrentThreshold()) {
            double d2 = 0.0d;
            while (j < length) {
                double d3 = largeArray.getDouble(j) - d;
                double d4 = d2 + d3;
                double d5 = (d4 - d2) - d3;
                j++;
                d2 = d4;
                d = d5;
            }
            dDoubleValue = d2;
        } else {
            long j2 = length / iMin;
            Future[] futureArr = new Future[iMin];
            int i = 0;
            while (i < iMin) {
                final long j3 = i * j2;
                int i2 = i;
                final long j4 = i == iMin + (-1) ? length : j3 + j2;
                Future[] futureArr2 = futureArr;
                futureArr2[i2] = ConcurrencyUtils.submit(new Callable<Double>() { // from class: pl.edu.icm.jlargearrays.LargeArrayStatistics.6
                    /* JADX WARN: Can't rename method to resolve collision */
                    @Override // java.util.concurrent.Callable
                    public Double call() {
                        long j5 = j3;
                        double d6 = 0.0d;
                        double d7 = 0.0d;
                        while (j5 < j4) {
                            double d8 = largeArray.getDouble(j5) - d7;
                            double d9 = d6 + d8;
                            double d10 = (d9 - d6) - d8;
                            j5++;
                            d6 = d9;
                            d7 = d10;
                        }
                        return Double.valueOf(d6);
                    }
                });
                i = i2 + 1;
                futureArr = futureArr2;
            }
            Future[] futureArr3 = futureArr;
            try {
                ConcurrencyUtils.waitForCompletion(futureArr3);
                dDoubleValue = 0.0d;
                for (int i3 = 0; i3 < iMin; i3++) {
                    try {
                        dDoubleValue += ((Double) futureArr3[i3].get()).doubleValue();
                    } catch (InterruptedException | ExecutionException unused) {
                        while (j < length) {
                            double d6 = largeArray.getDouble(j) - d;
                            double d7 = dDoubleValue + d6;
                            double d8 = (d7 - dDoubleValue) - d6;
                            j++;
                            dDoubleValue = d7;
                            d = d8;
                        }
                        return dDoubleValue / length;
                    }
                }
            } catch (InterruptedException | ExecutionException unused2) {
                dDoubleValue = 0.0d;
            }
        }
        return dDoubleValue / length;
    }

    public static double std(final LargeArray largeArray) {
        double d;
        double d2;
        if (largeArray == null || !largeArray.isNumeric() || largeArray.getType() == LargeArrayType.COMPLEX_FLOAT || largeArray.getType() == LargeArrayType.COMPLEX_DOUBLE) {
            throw new IllegalArgumentException("a == null || !a.isNumeric() || a.getType() == LargeArrayType.COMPLEX_FLOAT || a.getType() == LargeArrayType.COMPLEX_DOUBLE");
        }
        if (largeArray.isConstant()) {
            return 0.0d;
        }
        long length = largeArray.length();
        if (length < 2) {
            return Double.NaN;
        }
        int iMin = (int) FastMath.min(length, ConcurrencyUtils.getNumberOfThreads());
        long j = 0;
        if (iMin < 2 || length < ConcurrencyUtils.getConcurrentThreshold()) {
            d = 0.0d;
            d2 = 0.0d;
            double d3 = 0.0d;
            double d4 = 0.0d;
            while (j < length) {
                double d5 = largeArray.getDouble(j);
                double d6 = d5 - d3;
                double d7 = d + d6;
                d3 = (d7 - d) - d6;
                double d8 = (d5 * d5) - d4;
                double d9 = d2 + d8;
                d4 = (d9 - d2) - d8;
                j++;
                d2 = d9;
                d = d7;
            }
        } else {
            long j2 = length / iMin;
            Future[] futureArr = new Future[iMin];
            int i = 0;
            while (i < iMin) {
                final long j3 = i * j2;
                int i2 = i;
                final long j4 = i == iMin + (-1) ? length : j3 + j2;
                Future[] futureArr2 = futureArr;
                futureArr2[i2] = ConcurrencyUtils.submit(new Callable<double[]>() { // from class: pl.edu.icm.jlargearrays.LargeArrayStatistics.7
                    @Override // java.util.concurrent.Callable
                    public double[] call() {
                        double[] dArr = new double[2];
                        long j5 = j3;
                        double d10 = 0.0d;
                        double d11 = 0.0d;
                        while (j5 < j4) {
                            double d12 = largeArray.getDouble(j5);
                            double d13 = d12 - d10;
                            double d14 = dArr[0];
                            double d15 = d14 + d13;
                            d10 = (d15 - d14) - d13;
                            dArr[0] = d15;
                            double d16 = (d12 * d12) - d11;
                            double d17 = dArr[1];
                            double d18 = d17 + d16;
                            dArr[1] = d18;
                            j5++;
                            d11 = (d18 - d17) - d16;
                        }
                        return dArr;
                    }
                });
                i = i2 + 1;
                futureArr = futureArr2;
            }
            Future[] futureArr3 = futureArr;
            try {
                ConcurrencyUtils.waitForCompletion(futureArr3);
                d = 0.0d;
                d2 = 0.0d;
                for (int i3 = 0; i3 < iMin; i3++) {
                    try {
                        double[] dArr = (double[]) futureArr3[i3].get();
                        d += dArr[0];
                        d2 += dArr[1];
                    } catch (InterruptedException | ExecutionException unused) {
                        double d10 = 0.0d;
                        double d11 = 0.0d;
                        while (j < length) {
                            double d12 = largeArray.getDouble(j);
                            double d13 = d12 - d10;
                            double d14 = d + d13;
                            d10 = (d14 - d) - d13;
                            double d15 = (d12 * d12) - d11;
                            double d16 = d2 + d15;
                            d11 = (d16 - d2) - d15;
                            j++;
                            d2 = d16;
                            d = d14;
                        }
                        double d17 = length;
                        double d18 = d / d17;
                        return FastMath.sqrt(FastMath.max(0.0d, (d2 / d17) - (d18 * d18)));
                    }
                }
            } catch (InterruptedException | ExecutionException unused2) {
                d = 0.0d;
                d2 = 0.0d;
            }
        }
        double d172 = length;
        double d182 = d / d172;
        return FastMath.sqrt(FastMath.max(0.0d, (d2 / d172) - (d182 * d182)));
    }

    public static double stdKahan(final LargeArray largeArray) {
        double d;
        double d2;
        if (largeArray == null || !largeArray.isNumeric() || largeArray.getType() == LargeArrayType.COMPLEX_FLOAT || largeArray.getType() == LargeArrayType.COMPLEX_DOUBLE) {
            throw new IllegalArgumentException("a == null || !a.isNumeric() || a.getType() == LargeArrayType.COMPLEX_FLOAT || a.getType() == LargeArrayType.COMPLEX_DOUBLE");
        }
        if (largeArray.isConstant()) {
            return 0.0d;
        }
        long length = largeArray.length();
        if (length < 2) {
            return Double.NaN;
        }
        int iMin = (int) FastMath.min(length, ConcurrencyUtils.getNumberOfThreads());
        long j = 0;
        if (iMin < 2 || length < ConcurrencyUtils.getConcurrentThreshold()) {
            d = 0.0d;
            d2 = 0.0d;
            while (j < length) {
                double d3 = largeArray.getDouble(j);
                d += d3;
                d2 += d3 * d3;
                j++;
            }
        } else {
            long j2 = length / iMin;
            Future[] futureArr = new Future[iMin];
            int i = 0;
            while (i < iMin) {
                final long j3 = i * j2;
                int i2 = i;
                final long j4 = i == iMin + (-1) ? length : j3 + j2;
                Future[] futureArr2 = futureArr;
                futureArr2[i2] = ConcurrencyUtils.submit(new Callable<double[]>() { // from class: pl.edu.icm.jlargearrays.LargeArrayStatistics.8
                    @Override // java.util.concurrent.Callable
                    public double[] call() {
                        double[] dArr = new double[2];
                        for (long j5 = j3; j5 < j4; j5++) {
                            double d4 = largeArray.getDouble(j5);
                            dArr[0] = dArr[0] + d4;
                            dArr[1] = dArr[1] + (d4 * d4);
                        }
                        return dArr;
                    }
                });
                i = i2 + 1;
                futureArr = futureArr2;
            }
            Future[] futureArr3 = futureArr;
            try {
                ConcurrencyUtils.waitForCompletion(futureArr3);
                d = 0.0d;
                d2 = 0.0d;
                for (int i3 = 0; i3 < iMin; i3++) {
                    try {
                        double[] dArr = (double[]) futureArr3[i3].get();
                        d += dArr[0];
                        d2 += dArr[1];
                    } catch (InterruptedException | ExecutionException unused) {
                        while (j < length) {
                            double d4 = largeArray.getDouble(j);
                            d += d4;
                            d2 += d4 * d4;
                            j++;
                        }
                        double d5 = length;
                        double d6 = d / d5;
                        return FastMath.sqrt(FastMath.max(0.0d, (d2 / d5) - (d6 * d6)));
                    }
                }
            } catch (InterruptedException | ExecutionException unused2) {
                d = 0.0d;
                d2 = 0.0d;
            }
        }
        double d52 = length;
        double d62 = d / d52;
        return FastMath.sqrt(FastMath.max(0.0d, (d2 / d52) - (d62 * d62)));
    }
}
