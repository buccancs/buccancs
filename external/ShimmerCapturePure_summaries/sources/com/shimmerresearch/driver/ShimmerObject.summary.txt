// Summary for: /mnt/c/dev/buccancs/external/ShimmerCapturePure/sources/com/shimmerresearch/driver/ShimmerObject.java
// Size: 344048 bytes
// Modified: 2025-10-21 16:32:14.640821200 +0100

package com.shimmerresearch.driver;

import com.google.common.collect.BiMap;
import com.google.common.collect.ImmutableBiMap;
import com.shimmerresearch.algorithms.AbstractAlgorithm;
import com.shimmerresearch.algorithms.gyroOnTheFlyCal.GyroOnTheFlyCalModule;
import com.shimmerresearch.algorithms.gyroOnTheFlyCal.OnTheFlyGyroOffsetCal;
import com.shimmerresearch.algorithms.orientation.GradDes3DOrientation;
import com.shimmerresearch.algorithms.orientation.OrientationModule6DOF;
import com.shimmerresearch.comms.wiredProtocol.UartComponentPropertyDetails;
import com.shimmerresearch.comms.wiredProtocol.UartPacketDetails;
import com.shimmerresearch.driver.Configuration;
import com.shimmerresearch.driver.ShimmerDevice;
import com.shimmerresearch.driver.calibration.CalibDetails;
import com.shimmerresearch.driver.calibration.CalibDetailsKinematic;
import com.shimmerresearch.driver.shimmer2r3.BluetoothModuleVersionDetails;
import com.shimmerresearch.driver.shimmer2r3.ConfigByteLayoutShimmer3;
import com.shimmerresearch.driver.shimmerGq.ConfigByteLayoutShimmerGq802154;
import com.shimmerresearch.driverUtilities.ChannelDetails;
import com.shimmerresearch.driverUtilities.ConfigOptionDetailsSensor;
import com.shimmerresearch.driverUtilities.ExpansionBoardDetails;
import com.shimmerresearch.driverUtilities.SensorDetails;
import com.shimmerresearch.driverUtilities.SensorDetailsRef;
import com.shimmerresearch.driverUtilities.SensorGroupingDetails;
import com.shimmerresearch.driverUtilities.ShimmerSDCardDetails;
import com.shimmerresearch.driverUtilities.ShimmerVerObject;
import com.shimmerresearch.driverUtilities.UtilShimmer;
import com.shimmerresearch.exceptions.ShimmerException;
import com.shimmerresearch.exgConfig.ExGConfigBytesDetails;
import com.shimmerresearch.exgConfig.ExGConfigOption;
import com.shimmerresearch.exgConfig.ExGConfigOptionDetails;
import com.shimmerresearch.sensors.AbstractSensor;
import com.shimmerresearch.sensors.SensorECGToHRFw;
import com.shimmerresearch.sensors.SensorEXG;
import com.shimmerresearch.sensors.SensorGSR;
import com.shimmerresearch.sensors.SensorPPG;
import com.shimmerresearch.sensors.SensorShimmerClock;
import com.shimmerresearch.sensors.adxl371.SensorADXL371;
import com.shimmerresearch.sensors.bmpX80.SensorBMP180;
import com.shimmerresearch.sensors.bmpX80.SensorBMP280;
import com.shimmerresearch.sensors.bmpX80.SensorBMP390;
import com.shimmerresearch.sensors.bmpX80.SensorBMPX80;
import com.shimmerresearch.sensors.kionix.SensorKionixAccel;
import com.shimmerresearch.sensors.kionix.SensorKionixKXRB52042;
import com.shimmerresearch.sensors.kionix.SensorKionixKXTC92050;
import com.shimmerresearch.sensors.lis2dw12.SensorLIS2DW12;
import com.shimmerresearch.sensors.lisxmdl.SensorLIS2MDL;
import com.shimmerresearch.sensors.lisxmdl.SensorLIS3MDL;
import com.shimmerresearch.sensors.lsm303.SensorLSM303;
import com.shimmerresearch.sensors.lsm303.SensorLSM303AH;
import com.shimmerresearch.sensors.lsm303.SensorLSM303DLHC;
import com.shimmerresearch.sensors.lsm6dsv.SensorLSM6DSV;
import com.shimmerresearch.sensors.mpu9x50.SensorMPU9150;
import com.shimmerresearch.sensors.mpu9x50.SensorMPU9250;
import com.shimmerresearch.sensors.mpu9x50.SensorMPU9X50;
import com.shimmerresearch.sensors.shimmer2.SensorMMA736x;
import com.shimmerresearch.sensors.shimmer2.SensorShimmer2Gyro;
import com.shimmerresearch.sensors.shimmer2.SensorShimmer2Mag;
import io.grpc.netty.shaded.io.netty.handler.codec.http.multipart.DefaultHttpDataFactory;
import io.grpc.netty.shaded.io.netty.handler.codec.http2.Http2CodecUtil;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import javax.vecmath.Quat4d;
import kotlin.text.Typography;
import org.apache.commons.math.stat.descriptive.DescriptiveStatistics;

/* loaded from: classes2.dex */
public abstract class ShimmerObject extends ShimmerDevice implements Serializable {
    public static final byte ACCEL_CALIBRATION_RESPONSE = 18;
    public static final byte ACCEL_SAMPLING_RATE_RESPONSE = 65;
    public static final byte ACCEL_SENSITIVITY_RESPONSE = 10;
    public static final byte ACK_COMMAND_PROCESSED = -1;
    public static final byte ALL_CALIBRATION_RESPONSE = 45;
    public static final byte BAUD_RATE_RESPONSE = 107;
    public static final byte BLINK_LED_RESPONSE = 49;
    public static final byte BMP180_CALIBRATION_COEFFICIENTS_RESPONSE = 88;
    public static final byte BMP180_PRES_CALIBRATION_RESPONSE = 86;
    public static final byte BMP180_PRES_RESOLUTION_RESPONSE = 83;
    public static final byte BMP280_CALIBRATION_COEFFICIENTS_RESPONSE = -97;
    public static final byte BT_FW_VERSION_STR_RESPONSE = -94;
    public static final byte BUFFER_SIZE_RESPONSE = 53;
    public static final byte CENTER_RESPONSE = 119;
    public static final byte CONFIGTIME_RESPONSE = -122;
    public static final byte CONFIG_BYTE0_RESPONSE = 15;
    public static final byte DATA_PACKET = 0;
    public static final byte DAUGHTER_CARD_ID_RESPONSE = 101;
    public static final byte DERIVED_CHANNEL_BYTES_RESPONSE = 110;
    public static final byte DIR_RESPONSE = -120;
    public static final byte ECG_CALIBRATION_RESPONSE = 42;
    public static final byte EMG_CALIBRATION_RESPONSE = 39;
    public static final byte EXG_REGS_RESPONSE = 98;
    public static final byte EXPID_RESPONSE = 125;
    public static final byte FW_VERSION_RESPONSE = 47;
    public static final byte GET_ACCEL_CALIBRATION_COMMAND = 19;
    public static final byte GET_ACCEL_SAMPLING_RATE_COMMAND = 66;
    public static final byte GET_ACCEL_SENSITIVITY_COMMAND = 11;
    public static final byte GET_ALL_CALIBRATION_COMMAND = 44;
    public static final byte GET_BAUD_RATE_COMMAND = 108;
    public static final byte GET_BLINK_LED = 50;
    public static final byte GET_BMP180_CALIBRATION_COEFFICIENTS_COMMAND = 89;
    public static final byte GET_BMP180_PRES_CALIBRATION_COMMAND = 87;
    public static final byte GET_BMP180_PRES_RESOLUTION_COMMAND = 84;
    public static final byte GET_BMP280_CALIBRATION_COEFFICIENTS_COMMAND = -96;
    public static final byte GET_BT_FW_VERSION_STR_COMMAND = -95;
    public static final byte GET_BUFFER_SIZE_COMMAND = 54;
    public static final byte GET_CALIB_DUMP_COMMAND = -102;
    public static final byte GET_CENTER_COMMAND = 120;
    public static final byte GET_CONFIGTIME_COMMAND = -121;
    public static final byte GET_CONFIG_BYTE0_COMMAND = 16;
    public static final byte GET_DAUGHTER_CARD_ID_COMMAND = 102;
    public static final byte GET_DERIVED_CHANNEL_BYTES = 111;
    public static final byte GET_DIR_COMMAND = -119;
    public static final byte GET_ECG_CALIBRATION_COMMAND = 43;
    public static final byte GET_EMG_CALIBRATION_COMMAND = 40;
    public static final byte GET_EXG_REGS_COMMAND = 99;
    public static final byte GET_EXPID_COMMAND = 126;
    public static final byte GET_FW_VERSION_COMMAND = 46;
    public static final byte GET_GSR_RANGE_COMMAND = 35;
    public static final byte GET_GYRO_CALIBRATION_COMMAND = 22;
    public static final byte GET_INFOMEM_COMMAND = -114;
    public static final byte GET_INTERNAL_EXP_POWER_ENABLE_COMMAND = 96;
    public static final byte GET_LSM303DLHC_ACCEL_CALIBRATION_COMMAND = 28;
    public static final byte GET_LSM303DLHC_ACCEL_HRMODE_COMMAND = 72;
    public static final byte GET_LSM303DLHC_ACCEL_LPMODE_COMMAND = 69;
    public static final byte GET_MAG_CALIBRATION_COMMAND = 25;
    public static final byte GET_MAG_GAIN_COMMAND = 57;
    public static final byte GET_MAG_SAMPLING_RATE_COMMAND = 60;
    public static final byte GET_MPU9150_GYRO_RANGE_COMMAND = 75;
    public static final byte GET_MPU9150_MAG_SENS_ADJ_VALS_COMMAND = 93;
    public static final byte GET_MPU9150_SAMPLING_RATE_COMMAND = 78;
    public static final byte GET_MYID_COMMAND = -127;
    public static final byte GET_NSHIMMER_COMMAND = -124;
    public static final byte GET_PRESSURE_CALIBRATION_COEFFICIENTS_COMMAND = -89;
    public static final byte GET_PRESSURE_OVERSAMPLING_RATIO_COMMAND = 84;
    public static final byte GET_PRESSURE_SAMPLING_RATE_COMMAND = -73;
    public static final byte GET_RWC_COMMAND = -111;
    public static final byte GET_SAMPLING_RATE_COMMAND = 3;
    public static final byte GET_SHIMMERNAME_COMMAND = 123;
    public static final byte GET_SHIMMER_VERSION_COMMAND = 36;
    public static final byte GET_SHIMMER_VERSION_COMMAND_NEW = 63;
    public static final byte GET_SHIMMER_VERSION_RESPONSE = 37;
    public static final byte GET_STATUS_COMMAND = 114;
    public static final byte GET_TRIAL_CONFIG_COMMAND = 117;
    public static final byte GET_VBATT_COMMAND = -107;
    public static final byte GSR_RANGE_RESPONSE = 34;
    public static final byte GYRO_CALIBRATION_RESPONSE = 21;
    public static final byte INFOMEM_RESPONSE = -115;
    public static final byte INQUIRY_COMMAND = 1;
    public static final byte INQUIRY_RESPONSE = 2;
    public static final byte INSTREAM_CMD_RESPONSE = -118;
    public static final byte INTERNAL_EXP_POWER_ENABLE_RESPONSE = 95;
    public static final byte LSM303DLHC_ACCEL_CALIBRATION_RESPONSE = 27;
    public static final byte LSM303DLHC_ACCEL_HRMODE_RESPONSE = 71;
    public static final byte LSM303DLHC_ACCEL_LPMODE_RESPONSE = 68;
    public static final byte MAG_CALIBRATION_RESPONSE = 24;
    public static final byte MAG_GAIN_RESPONSE = 56;
    public static final byte MAG_SAMPLING_RATE_RESPONSE = 59;
    public static final int MAX_INQUIRY_PACKET_SIZE = 47;
    public static final int MAX_NUMBER_OF_SIGNALS = 77;
    public static final byte MPU9150_GYRO_RANGE_RESPONSE = 74;
    public static final byte MPU9150_MAG_SENS_ADJ_VALS_RESPONSE = 92;
    public static final byte MPU9150_SAMPLING_RATE_RESPONSE = 77;
    public static final byte MYID_RESPONSE = -128;
    public static final byte NSHIMMER_RESPONSE = -125;
    public static final byte PRESSURE_CALIBRATION_COEFFICIENTS_RESPONSE = -90;
    public static final byte PRESSURE_OVERSAMPLING_RATIO_RESPONSE = 83;
    public static final byte PRESSURE_SAMPLING_RATE_RESPONSE = -74;
    public static final byte RESET_CALIBRATION_VALUE_COMMAND = 91;
    public static final byte RESET_TO_DEFAULT_CONFIGURATION_COMMAND = 90;
    public static final byte ROUTINE_COMMUNICATION = -32;
    public static final byte RSP_CALIB_DUMP_COMMAND = -103;
    public static final byte RWC_RESPONSE = -112;
    public static final byte SAMPLING_RATE_RESPONSE = 4;
    public static final int SENSOR_ACCEL = 128;
    public static final int SENSOR_ALL_ADC_SHIMMER3 = 8392451;
    public static final int SENSOR_ALT_ACCEL = 4194304;
    public static final int SENSOR_ALT_MAG = 2097152;
    public static final int SENSOR_BATT = 8192;
    public static final int SENSOR_BMPX80 = 262144;
    public static final int SENSOR_BRIDGE_AMP = 32768;
    public static final int SENSOR_DACCEL = 4096;
    public static final int SENSOR_ECG = 16;
    public static final int SENSOR_EMG = 8;
    public static final int SENSOR_EXG1_16BIT = 1048576;
    public static final int SENSOR_EXG1_24BIT = 16;
    public static final int SENSOR_EXG2_16BIT = 524288;
    public static final int SENSOR_EXG2_24BIT = 8;
    public static final int SENSOR_EXP_BOARD = 3;
    public static final int SENSOR_EXP_BOARD_A0 = 1;
    public static final int SENSOR_EXP_BOARD_A7 = 2;
    public static final int SENSOR_EXT_ADC_A15 = 2048;
    public static final int SENSOR_EXT_ADC_A6 = 1;
    public static final int SENSOR_EXT_ADC_A7 = 2;
    public static final int SENSOR_GSR = 4;
    public static final int SENSOR_GYRO = 64;
    public static final int SENSOR_HEART = 16384;
    public static final int SENSOR_INT_ADC_A1 = 1024;
    public static final int SENSOR_INT_ADC_A12 = 512;
    public static final int SENSOR_INT_ADC_A13 = 256;
    public static final int SENSOR_INT_ADC_A14 = 8388608;
    public static final int SENSOR_MAG = 32;
    public static final byte SET_5V_REGULATOR_COMMAND = 12;
    public static final byte SET_ACCEL_CALIBRATION_COMMAND = 17;
    public static final byte SET_ACCEL_SAMPLING_RATE_COMMAND = 64;
    public static final byte SET_ACCEL_SENSITIVITY_COMMAND = 9;
    public static final byte SET_BAUD_RATE_COMMAND = 106;
    public static final byte SET_BLINK_LED = 48;
    public static final byte SET_BMP180_PRES_CALIBRATION_COMMAND = 85;
    public static final byte SET_BMP180_PRES_RESOLUTION_COMMAND = 82;
    public static final byte SET_BUFFER_SIZE_COMMAND = 52;
    public static final byte SET_CALIB_DUMP_COMMAND = -104;
    public static final byte SET_CENTER_COMMAND = 118;
    public static final byte SET_CONFIGTIME_COMMAND = -123;
    public static final byte SET_CONFIG_BYTE0_COMMAND = 14;
    public static final byte SET_CRC_COMMAND = -117;
    public static final byte SET_DERIVED_CHANNEL_BYTES = 109;
    public static final byte SET_ECG_CALIBRATION_COMMAND = 41;
    public static final byte SET_EMG_CALIBRATION_COMMAND = 38;
    public static final byte SET_EXG_REGS_COMMAND = 97;
    public static final byte SET_EXPID_COMMAND = 124;
    public static final byte SET_GSR_RANGE_COMMAND = 33;
    public static final byte SET_GYRO_CALIBRATION_COMMAND = 20;
    public static final byte SET_GYRO_TEMP_VREF_COMMAND = 51;
    public static final byte SET_INFOMEM_COMMAND = -116;
    public static final byte SET_INTERNAL_EXP_POWER_ENABLE_COMMAND = 94;
    public static final byte SET_LSM303DLHC_ACCEL_CALIBRATION_COMMAND = 26;
    public static final byte SET_LSM303DLHC_ACCEL_HRMODE_COMMAND = 70;
    public static final byte SET_LSM303DLHC_ACCEL_LPMODE_COMMAND = 67;
    public static final byte SET_MAG_CALIBRATION_COMMAND = 23;
    public static final byte SET_MAG_GAIN_COMMAND = 55;
    public static final byte SET_MAG_SAMPLING_RATE_COMMAND = 58;
    public static final byte SET_MPU9150_GYRO_RANGE_COMMAND = 73;
    public static final byte SET_MPU9150_SAMPLING_RATE_COMMAND = 76;
    public static final byte SET_MYID_COMMAND = 127;
    public static final byte SET_NSHIMMER_COMMAND = -126;
    public static final byte SET_PMUX_COMMAND = 13;
    public static final byte SET_PRESSURE_OVERSAMPLING_RATIO_COMMAND = 82;
    public static final byte SET_PRESSURE_SAMPLING_RATE_COMMAND = -75;
    public static final byte SET_RWC_COMMAND = -113;
    public static final byte SET_SAMPLING_RATE_COMMAND = 5;
    public static final byte SET_SENSORS_COMMAND = 8;
    public static final byte SET_SHIMMERNAME_COMMAND = 121;
    public static final byte SET_TEST = -88;
    public static final byte SET_TRIAL_CONFIG_COMMAND = 115;
    public static final int SHIMMER3_SENSOR_ECG = 24;
    public static final int SHIMMER3_SENSOR_EMG = 16;
    public static final byte SHIMMERNAME_RESPONSE = 122;
    public static final byte START_LOGGING_ONLY_COMMAND = -110;
    public static final byte START_SDBT_COMMAND = 112;
    public static final byte START_STREAMING_COMMAND = 7;
    public static final byte STATUS_RESPONSE = 113;
    public static final byte STOP_LOGGING_ONLY_COMMAND = -109;
    public static final byte STOP_SDBT_COMMAND = -105;
    public static final byte STOP_STREAMING_COMMAND = 32;
    public static final byte TEST_CONNECTION_COMMAND = -106;
    public static final byte TOGGLE_LED_COMMAND = 6;
    public static final byte TRIAL_CONFIG_RESPONSE = 116;
    public static final byte UPD_CALIB_DUMP_COMMAND = -101;
    public static final byte UPD_SDLOG_CFG_COMMAND = -100;
    public static final byte VBATT_RESPONSE = -108;
    public static final Map<String, TEST_MODE> mMapOfBluetoothDeviceTest;
    private static final long serialVersionUID = -1364568867018921219L;
    protected int mBufferSize;
    protected long mConfigByte0;
    protected String mDirectoryName;

    @Deprecated
    private int mEXG1CH1GainSetting;

    @Deprecated
    private int mEXG1CH1GainValue;

    @Deprecated
    private int mEXG1CH2GainSetting;

    @Deprecated
    private int mEXG1CH2GainValue;

    @Deprecated
    private int mEXG1Comparators;

    @Deprecated
    private int mEXG1LeadOffCurrentMode;

    @Deprecated
    private int mEXG1LeadOffSenseSelection;

    @Deprecated
    private int mEXG1RateSetting;

    @Deprecated
    private int mEXG2CH1GainSetting;

    @Deprecated
    private int mEXG2CH1GainValue;

    @Deprecated
    private int mEXG2CH2GainSetting;

    @Deprecated
    private int mEXG2CH2GainValue;

    @Deprecated
    private int mEXG2CH2PowerDown;

    @Deprecated
    private int mEXG2Comparators;

    @Deprecated
    private int mEXG2LeadOffCurrentMode;

    @Deprecated
    private int mEXG2LeadOffSenseSelection;

    @Deprecated
    private int mEXG2RateSetting;

    @Deprecated
    private int mEXG2RespirationDetectFreq;

    @Deprecated
    private int mEXG2RespirationDetectPhase;

    @Deprecated
    private int mEXG2RespirationDetectState;

    @Deprecated
    private int mEXGLeadOffComparatorTreshold;

    @Deprecated
    private int mEXGLeadOffDetectionCurrent;

    @Deprecated
    private int mEXGRLDSense;
    protected byte[] mInquiryResponseBytes;

    @Deprecated
    private int mLeadOffDetectionMode;
    transient GradDes3DOrientation mOrientationAlgo;
    public BiMap<String, String> mSensorBitmaptoName;
    protected double mStreamingStartTimeMilliSecs;
    protected Map<String, ChannelDetails> mChannelMap = new LinkedHashMap();
    protected int mBluetoothBaudRate = 9;
    protected int mPacketSize = 0;
    public int mNChannels = 0;
    protected String[] mSignalNameArray = new String[77];
    protected String[] mSignalDataTypeArray = new String[77];
    protected int mButtonStart = 0;
    protected int mDisableBluetooth = 0;
    protected int mMasterShimmer = 0;
    protected int mSingleTouch = 0;
    protected int mTCXO = 0;
    protected int mSyncWhenLogging = 0;
    protected int mSyncBroadcastInterval = 0;
    protected String mCenter = "";
    private boolean isOverrideShowErrorLedsRtc = false;
    private int mShowErrorLedsRtc = 0;
    private boolean isOverrideShowErrorLedsSd = false;
    private int mShowErrorLedsSd = 0;
    private boolean mLowBattAutoStop = false;
    protected int mTrialId = 0;
    protected int mTrialNumberOfShimmers = 0;
    protected int mTrialDurationEstimatedInSecs = 0;
    protected int mTrialDurationMaximumInSecs = 0;
    protected String mMyBluetoothAddress = "";
    protected String mMacIdFromInfoMem = "";
    protected BluetoothModuleVersionDetails bluetoothModuleVersionDetails = new BluetoothModuleVersionDetails();
    protected List<String> syncNodesList = new ArrayList();
    protected int mPpgAdcSelectionGsrBoard = 0;
    protected int mPpg1AdcSelectionProto3DeluxeBoard = 0;
    protected int mPpg2AdcSelectionProto3DeluxeBoard = 0;
    protected int mCurrentLEDStatus = 0;
    private double mLastKnownHeartRate = 0.0d;
    protected DescriptiveStatistics mVSenseBattMA = new DescriptiveStatistics(1024);
    Quat4d mQ = new Quat4d();
    private boolean mIsOrientationEnabled = false;
    protected double mDefaultOnTheFlyGyroCalibThreshold = 1.2d;
    protected boolean mEnableCalibration = true;
    protected boolean mConfigFileCreationFlag = true;
    protected boolean mShimmerUsingConfigFromInfoMem = false;
    protected boolean mUseInfoMemConfigMethod = true;
    protected boolean mUseArraysDataStructureInObjectCluster = false;

    @Deprecated
    private List<String[]> mExtraSignalProperties = null;
    protected int mGqPacketNumHeaderBytes = 0;
    protected int mSamplingDividerVBatt = 0;
    protected int mSamplingDividerGsr = 0;
    protected int mSamplingDividerPpg = 0;
    protected int mSamplingDividerLsm303dlhcAccel = 0;
    protected int mSamplingDividerBeacon = 0;
    protected double mLastReceivedTimeStampTicksUnwrapped = 0.0d;
    protected double mCurrentTimeStampCycle = 0.0d;
    protected long mInitialTimeStampTicksSd = 0;

    @Deprecated
    protected double mLastReceivedCalibratedTimeStamp = -1.0d;
    protected boolean mStreamingStartTimeSaved = false;
    protected int mTimeStampPacketByteSize = 2;
    protected int mTimeStampTicksMaxValue = 65536;
    protected long mRTCDifferenceInTicks = 0;
    public int mRTCSetByBT = 1;
    protected boolean mFirstTime = true;
    protected double mFirstTsOffsetFromInitialTsTicks = 0.0d;
    public int OFFSET_LENGTH = 9;
    protected SensorMMA736x mSensorMMA736x = new SensorMMA736x(this);
    protected SensorShimmer2Mag mSensorShimmer2Mag = new SensorShimmer2Mag(this);
    protected SensorShimmer2Gyro mSensorShimmer2Gyro = new SensorShimmer2Gyro(this);
    private SensorKionixAccel mSensorKionixAccel = new SensorKionixKXRB52042(this);
    private SensorLSM303 mSensorLSM303 = new SensorLSM303DLHC(this);
    protected SensorMPU9X50 mSensorMpu9x50 = new SensorMPU9150(this);
    public SensorBMPX80 mSensorBMPX80 = new SensorBMP180(this);
    private SensorLIS2MDL mSensorLIS2MDL = new SensorLIS2MDL(this);
    private SensorLIS3MDL mSensorLIS3MDL = new SensorLIS3MDL(this);
    private SensorLIS2DW12 mSensorLIS2DW12 = new SensorLIS2DW12(this);
    private SensorLSM6DSV mSensorLSM6DSV = new SensorLSM6DSV(this);
    protected SensorADXL371 mSensorADXL371 = new SensorADXL371(this);
    protected double OffsetECGRALL = 2060.0d;
    protected double GainECGRALL = 175.0d;
    protected double OffsetECGLALL = 2060.0d;
    protected double GainECGLALL = 175.0d;
    protected double OffsetEMG = 2060.0d;
    protected double GainEMG = 750.0d;
    protected int mExGResolution = 1;
    protected boolean mIsExg1_24bitEnabled = false;
    protected boolean mIsExg2_24bitEnabled = false;
    protected boolean mIsExg1_16bitEnabled = false;
    protected boolean mIsExg2_16bitEnabled = false;
    protected byte[] mEMGCalRawParams = new byte[13];
    protected byte[] mECGCalRawParams = new byte[13];
    protected boolean mDefaultCalibrationParametersECG = true;
    protected boolean mDefaultCalibrationParametersEMG = true;
    protected ExGConfigBytesDetails mExGConfigBytesDetails = new ExGConfigBytesDetails();
    protected byte[] mEXG1RegisterArray = new byte[10];
    protected byte[] mEXG2RegisterArray = new byte[10];
    protected double exg1Ch1CalFactor24Bit = 403.3333333333333d / (Math.pow(2.0d, 23.0d) - 1.0d);
    protected double exg1Ch2CalFactor24Bit = 403.3333333333333d / (Math.pow(2.0d, 23.0d) - 1.0d);
    protected double exg2Ch1CalFactor24Bit = 403.3333333333333d / (Math.pow(2.0d, 23.0d) - 1.0d);
    protected double exg2Ch2CalFactor24Bit = 403.3333333333333d / (Math.pow(2.0d, 23.0d) - 1.0d);
    protected double exg1Ch1CalFactor16Bit = 403.3333333333333d / (Math.pow(2.0d, 15.0d) - 1.0d);
    protected double exg1Ch2CalFactor16Bit = 403.3333333333333d / (Math.pow(2.0d, 15.0d) - 1.0d);
    protected double exg2Ch1CalFactor16Bit = 403.3333333333333d / (Math.pow(2.0d, 15.0d) - 1.0d);
    protected double exg2Ch2CalFactor16Bit = 403.3333333333333d / (Math.pow(2.0d, 15.0d) - 1.0d);

    @Deprecated
    private int mEXGReferenceElectrode = -1;
    protected int mGSRRange = 4;
    protected int mPastGSRRange = 4;
    protected int mPastGSRUncalibratedValue = 4;
    protected boolean mPastGSRFirstTime = true;

    public static final class DatabaseConfigHandleShimmerObject {
        public static final String SYNC_WHEN_LOGGING = "Sync_When_Logging";
        public static final String TRIAL_DURATION_ESTIMATED = "Trial_Dur_Est";
        public static final String TRIAL_DURATION_MAXIMUM = "Trial_Dur_Max";
    }

    private double calculateTimeStampUnwrapped(double d) {
        return d + (this.mTimeStampTicksMaxValue * this.mCurrentTimeStampCycle);
    }

    private boolean isLowBattAutoStop() {
        return this.mLowBattAutoStop;
    }

    @Deprecated
    public static String parseLeadOffComparatorTresholdToString(int i) {
        switch (i) {
            case 0:
                return "Pos:95% - Neg:5%";
            case 1:
                return "Pos:92.5% - Neg:7.5%";
            case 2:
                return "Pos:90% - Neg:10%";
            case 3:
                return "Pos:87.5% - Neg:12.5%";
            case 4:
                return "Pos:85% - Neg:15%";
            case 5:
                return "Pos:80% - Neg:20%";
            case 6:
                return "Pos:75% - Neg:25%";
            case 7:
                return "Pos:70% - Neg:30%";
            default:
                return "Treshold unread";
        }
    }

    @Deprecated
    public static String parseLeadOffDetectionCurrentToString(int i) {
        return i != 0 ? i != 1 ? i != 2 ? "22 uA" : "6 uA" : "22 nA" : "6 nA";
    }

    @Deprecated
    public static String parseLeadOffModeToString(int i) {
        return i != 0 ? i != 1 ? i != 2 ? "No mode selected" : "AC Current" : "DC Current" : "Off";
    }

    private void setExgChannelBitsPerMode(int i) {
        boolean z;
        boolean z2 = false;
        this.mIsExg1_24bitEnabled = false;
        this.mIsExg2_24bitEnabled = false;
        this.mIsExg1_16bitEnabled = false;
        this.mIsExg2_16bitEnabled = false;
        if (i != -1) {
            if (i != 100 && i != 103 && i != 116 && i != 102 && i != 106) {
                z = i != 101;
                z = false;
            }
            z2 = true;
        } else {
            z = false;
        }
        if (this.mExGResolution == 1) {
            this.mIsExg1_24bitEnabled = z2;
            this.mIsExg2_24bitEnabled = z;
        } else {
            this.mIsExg1_16bitEnabled = z2;
            this.mIsExg2_16bitEnabled = z;
        }
    }

    private void setLowBattAutoStop(boolean z) {
        this.mLowBattAutoStop = z;
    }

    protected ObjectCluster callAdditionalServices(ObjectCluster objectCluster) {
        return objectCluster;
    }

    protected abstract void checkBattery();

    public void enableArraysDataStructure(boolean z) {
        this.mUseArraysDataStructureInObjectCluster = z;
    }

    public int getBaudRate() {
        return this.mBluetoothBaudRate;
    }

    public String getBluetoothAddress() {
        return this.mMyBluetoothAddress;
    }

    public int getBluetoothBaudRate() {
        return this.mBluetoothBaudRate;
    }

    public BluetoothModuleVersionDetails getBtFwVerDetails() {
        return this.bluetoothModuleVersionDetails;
    }

    public int getBufferSize() {
        return this.mBufferSize;
    }

    public int getButtonStart() {
        return this.mButtonStart;
    }

    public String getCenter() {
        return this.mCenter;
    }

    public Map<String, ChannelDetails> getChannelMap() {
        return this.mChannelMap;
    }

    public double getCurrenTimeStampCycle() {
        return this.mCurrentTimeStampCycle;
    }

    public int getCurrentLEDStatus() {
        return this.mCurrentLEDStatus;
    }

    public int getDisableBluetooth() {
        return this.mDisableBluetooth;
    }

    public byte[] getEXG1RegisterArray() {
        return this.mEXG1RegisterArray;
    }

    public byte[] getEXG2RegisterArray() {
        return this.mEXG2RegisterArray;
    }

    @Deprecated
    public int getExGComparatorsChip1() {
        return this.mEXG1Comparators;
    }

    @Deprecated
    public int getExGComparatorsChip2() {
        return this.mEXG2Comparators;
    }

    public int getExGResolution() {
        return this.mExGResolution;
    }

    public int getExperimentId() {
        return this.mTrialId;
    }

    public int getGSRRange() {
        return this.mGSRRange;
    }

    public long getInitialTimeStampTicksSd() {
        return this.mInitialTimeStampTicksSd;
    }

    public double getLastReceivedTimeStampTicksUnwrapped() {
        return this.mLastReceivedTimeStampTicksUnwrapped;
    }

    @Deprecated
    public int getLeadOffComparatorTreshold() {
        return this.mEXGLeadOffComparatorTreshold;
    }

    @Deprecated
    public int getLeadOffDetectionCurrent() {
        return this.mEXGLeadOffDetectionCurrent;
    }

    @Deprecated
    public int getLeadOffDetectionMode() {
        return this.mLeadOffDetectionMode;
    }

    public String getMacIdFromInfoMem() {
        return this.mMacIdFromInfoMem;
    }

    public int getMasterShimmer() {
        return this.mMasterShimmer;
    }

    public int getPMux() {
        return (this.mConfigByte0 & 64) != 0 ? 1 : 0;
    }

    public int getPpg1AdcSelectionProto3DeluxeBoard() {
        return this.mPpg1AdcSelectionProto3DeluxeBoard;
    }

    public int getPpg2AdcSelectionProto3DeluxeBoard() {
        return this.mPpg2AdcSelectionProto3DeluxeBoard;
    }

    public int getPpgAdcSelectionGsrBoard() {
        return this.mPpgAdcSelectionGsrBoard;
    }

    public long getRTCDifferenceInTicks() {
        return this.mRTCDifferenceInTicks;
    }

    public int getRTCSetByBT() {
        return this.mRTCSetByBT;
    }

    public byte[] getRawInquiryResponse() {
        return this.mInquiryResponseBytes;
    }

    @Deprecated
    public int getReferenceElectrode() {
        return this.mEXGReferenceElectrode;
    }

    public int getSamplingDividerGsr() {
        return this.mSamplingDividerGsr;
    }

    public int getSamplingDividerLsm303dlhcAccel() {
        return this.mSamplingDividerLsm303dlhcAccel;
    }

    public int getSamplingDividerPpg() {
        return this.mSamplingDividerPpg;
    }

    public int getSamplingDividerVBatt() {
        return this.mSamplingDividerVBatt;
    }

    public int getSingleTouch() {
        return this.mSingleTouch;
    }

    public int getSyncBroadcastInterval() {
        return this.mSyncBroadcastInterval;
    }

    public List<String> getSyncNodesList() {
        return this.syncNodesList;
    }

    public int getSyncWhenLogging() {
        return this.mSyncWhenLogging;
    }

    public int getTCXO() {
        return this.mTCXO;
    }

    public int getTrialDurationEstimatedInSecs() {
        return this.mTrialDurationEstimatedInSecs;
    }

    public int getTrialDurationMaximumInSecs() {
        return this.mTrialDurationMaximumInSecs;
    }

    public int getTrialNumberOfShimmers() {
        return this.mTrialNumberOfShimmers;
    }

    public boolean is3DOrientationEnabled() {
        return this.mIsOrientationEnabled;
    }

    public boolean isButtonStart() {
        return this.mButtonStart > 0;
    }

    public boolean isDisableBluetooth() {
        return this.mDisableBluetooth > 0;
    }

    public boolean isEXGUsingCustomSignalConfiguration() {
        return this.mIsExg1_16bitEnabled || this.mIsExg2_16bitEnabled || this.mIsExg1_24bitEnabled || this.mIsExg2_24bitEnabled;
    }

    public boolean isMasterShimmer() {
        return this.mMasterShimmer > 0;
    }

    public boolean isRtcDifferenceSet() {
        return this.mRTCDifferenceInTicks != 0;
    }

    public boolean isShowErrorLedsRtc() {
        return this.mShowErrorLedsRtc > 0;
    }

    public boolean isShowErrorLedsSd() {
        return this.mShowErrorLedsSd > 0;
    }

    public boolean isSingleTouch() {
        return this.mSingleTouch > 0;
    }

    public boolean isSyncWhenLogging() {
        return this.mSyncWhenLogging > 0;
    }

    public boolean isTCXO() {
        return this.mTCXO > 0;
    }

    public boolean isUsingConfigFromInfoMem() {
        return this.mShimmerUsingConfigFromInfoMem;
    }

    public boolean isUsingDefaultECGParam() {
        return this.mDefaultCalibrationParametersECG;
    }

    public boolean isUsingDefaultEMGParam() {
        return this.mDefaultCalibrationParametersEMG;
    }

    protected void sendStatusMsgPacketLossDetected() {
    }

    protected void set3DOrientation(boolean z) {
        this.mIsOrientationEnabled = z;
    }

    public void setBluetoothBaudRate(int i) {
        this.mBluetoothBaudRate = i;
    }

    public void setBtFwVerDetails(BluetoothModuleVersionDetails bluetoothModuleVersionDetails) {
        this.bluetoothModuleVersionDetails = bluetoothModuleVersionDetails;
    }

    protected void setBufferSize(int i) {
        this.mBufferSize = i;
    }

    public void setButtonStart(int i) {
        this.mButtonStart = i;
    }

    public void setCenter(String str) {
        this.mCenter = str;
    }

    public void setConfigFileCreationFlag(boolean z) {
        this.mConfigFileCreationFlag = z;
    }

    public void setCurrentTimeStampCycle(double d) {
        this.mCurrentTimeStampCycle = d;
    }

    protected void setDisableBluetooth(int i) {
        this.mDisableBluetooth = i;
    }

    public void setEnableCalibration(boolean z) {
        this.mEnableCalibration = z;
    }

    public void setGSRRange(int i) {
        this.mGSRRange = i;
    }

    public void setInitialTimeStampTicksSd(long j) {
        this.mInitialTimeStampTicksSd = j;
    }

    public void setIsOverrideShowErrorLedsRtc(boolean z) {
        this.isOverrideShowErrorLedsRtc = z;
    }

    public void setIsOverrideShowErrorLedsSd(boolean z) {
        this.isOverrideShowErrorLedsSd = z;
    }

    public ObjectCluster setLSLTimeIfAvailable(ObjectCluster objectCluster) {
        return objectCluster;
    }

    public void setLastReceivedTimeStampTicksUnwrapped(double d) {
        this.mLastReceivedTimeStampTicksUnwrapped = d;
    }

    protected void setMacIdFromBt(String str) {
        this.mMyBluetoothAddress = str;
    }

    public void setMasterShimmer(int i) {
        this.mMasterShimmer = i;
    }

    public void setPacketSize(int i) {
        this.mPacketSize = i;
    }

    public void setRTCDifferenceInTicks(long j) {
        this.mRTCDifferenceInTicks = j;
    }

    public void setRTCSetByBT(int i) {
        this.mRTCSetByBT = i;
    }

    public void setSamplingDividerBeacon(int i) {
        this.mSamplingDividerBeacon = i;
    }

    public void setSamplingDividerGsr(int i) {
        this.mSamplingDividerGsr = i;
    }

    public void setSamplingDividerLsm303dlhcAccel(int i) {
        this.mSamplingDividerLsm303dlhcAccel = i;
    }

    public void setSamplingDividerPpg(int i) {
        this.mSamplingDividerPpg = i;
    }

    public void setSamplingDividerVBatt(int i) {
        this.mSamplingDividerVBatt = i;
    }

    public void setShowErrorLedsRtc(int i) {
        this.mShowErrorLedsRtc = i;
    }

    public void setShowErrorLedsRtc(boolean z) {
        this.mShowErrorLedsRtc = z ? 1 : 0;
    }

    public void setShowErrorLedsSd(int i) {
        this.mShowErrorLedsSd = i;
    }

    public void setShowErrorLedsSd(boolean z) {
        this.mShowErrorLedsSd = z ? 1 : 0;
    }

    public void setSingleTouch(int i) {
        this.mSingleTouch = i;
    }

    public void setSyncNodesList(List<String> list) {
        this.syncNodesList = list;
    }

    public void setSyncWhenLogging(int i) {
        this.mSyncWhenLogging = i;
    }

    public void setTCXO(int i) {
        this.mTCXO = i;
    }

    public void setTrialDurationEstimatedInSecs(int i) {
        this.mTrialDurationEstimatedInSecs = i;
    }

    public void setTrialDurationMaximumInSecs(int i) {
        this.mTrialDurationMaximumInSecs = i;
    }

    public class SDLogHeader {
        public static final int ACCEL_LN = 128;
        public static final int ACCEL_MPU = 4194304;
        public static final long ACCEL_MPU_MPL = 274877906944L;
        public static final int ACCEL_WR = 4096;
        public static final int BATTERY = 8192;
        public static final int BMPX80 = 262144;
        public static final int BRIDGE_AMP = 32768;
        public static final int ECG_TO_HR_FW = 16384;
        public static final int EXG1_16BIT = 1048576;
        public static final int EXG1_24BIT = 16;
        public static final int EXG2_16BIT = 524288;
        public static final int EXG2_24BIT = 8;
        public static final int EXT_EXP_A15 = 2048;
        public static final int EXT_EXP_A6 = 1;
        public static final int EXT_EXP_A7 = 2;
        public static final int GSR = 4;
        public static final int GYRO = 64;
        public static final long GYRO_MPU_MPL = 549755813888L;
        public static final int INT_EXP_A1 = 1024;
        public static final int INT_EXP_A12 = 512;
        public static final int INT_EXP_A13 = 256;
        public static final int INT_EXP_A14 = 8388608;
        public static final int MAG = 32;
        public static final int MAG_MPU = 2097152;
        public static final long MAG_MPU_MPL = 137438953472L;
        public static final int MPL_EULER_6DOF = 536870912;
        public static final int MPL_EULER_9DOF = 268435456;
        public static final int MPL_HEADING = 134217728;
        public static final int MPL_MOTION_ORIENT = 16777216;
        public static final int MPL_PEDOMETER = 67108864;
        public static final long MPL_QUAT_6DOF = 2147483648L;
        public static final int MPL_QUAT_9DOF = 1073741824;
        public static final int MPL_TAP = 33554432;
        public static final int MPL_TEMPERATURE = 131072;
        public static final long SD_SENSOR_MPL_QUAT_6DOF_RAW = 68719476736L;

        public SDLogHeader() {
        }
    }

    public class BTStream {
        public static final int ACCEL_ALT = 4194304;
        public static final int ACCEL_LN = 128;
        public static final int ACCEL_MPU = 4194304;
        public static final int ACCEL_WR = 4096;
        public static final int BATTERY = 8192;
        public static final int BMP180 = 262144;
        public static final int BRIDGE_AMP = 32768;
        public static final int EXG1_16BIT = 1048576;
        public static final int EXG1_24BIT = 16;
        public static final int EXG2_16BIT = 524288;
        public static final int EXG2_24BIT = 8;
        public static final int EXT_EXP_A15 = 2048;
        public static final int EXT_EXP_A6 = 1;
        public static final int EXT_EXP_A7 = 2;
        public static final int GSR = 4;
        public static final int GYRO = 64;
        public static final int INT_EXP_A1 = 1024;
        public static final int INT_EXP_A12 = 512;
        public static final int INT_EXP_A13 = 256;
        public static final int INT_EXP_A14 = 8388608;
        public static final int MAG = 32;
        public static final int MAG_ALT = 2097152;
        public static final int MAG_MPU = 2097152;
        public static final int MPL_TEMPERATURE = 4194304;

        public BTStream() {
        }
    }

    public enum TEST_MODE {
        MAIN_TEST((byte) 0, "Main Test"),
        LED_TEST((byte) 1, "LED Test"),
        IC_TEST((byte) 2, "IC Test");

        private final byte byteInstruction;
        private final String description;

        public byte getByteInstruction() {
            return this.byteInstruction;
        }

        public String getDescription() {
            return this.description;
        }

        TEST_MODE(byte b, String str) {
            this.byteInstruction = b;
            this.description = str;
        }

        @Override // java.lang.Enum
        public String toString() {
            return this.description + " (" + String.format("0x%02X", Byte.valueOf(this.byteInstruction)) + ")";
        }
    }

    static {
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        linkedHashMap.put(TEST_MODE.MAIN_TEST.getDescription(), TEST_MODE.MAIN_TEST);
        linkedHashMap.put(TEST_MODE.LED_TEST.getDescription(), TEST_MODE.LED_TEST);
        linkedHashMap.put(TEST_MODE.IC_TEST.getDescription(), TEST_MODE.IC_TEST);
        mMapOfBluetoothDeviceTest = Collections.unmodifiableMap(linkedHashMap);
    }

    /* JADX WARN: Removed duplicated region for block: B:209:0x09e7  */
    /* JADX WARN: Removed duplicated region for block: B:210:0x09ea A[PHI: r1
  0x09ea: PHI (r1v269 long) = (r1v264 long), (r1v271 long) binds: [B:208:0x09e5, B:205:0x09d9] A[DONT_GENERATE, DONT_INLINE]] */
    /* JADX WARN: Removed duplicated region for block: B:229:0x0b72  */
    /* JADX WARN: Removed duplicated region for block: B:240:0x0c05  */
    /* JADX WARN: Removed duplicated region for block: B:251:0x0ccc  */
    /* JADX WARN: Removed duplicated region for block: B:253:0x0cd6  */
    /* JADX WARN: Removed duplicated region for block: B:259:0x0d5d  */
    /* JADX WARN: Removed duplicated region for block: B:265:0x0dd9  */
    /* JADX WARN: Removed duplicated region for block: B:267:0x0de3  */
    /* JADX WARN: Removed duplicated region for block: B:277:0x0ee6  */
    /* JADX WARN: Removed duplicated region for block: B:280:0x0ef1  */
    /* JADX WARN: Removed duplicated region for block: B:282:0x0ef9  */
    /* JADX WARN: Removed duplicated region for block: B:300:0x107d  */
    /* JADX WARN: Removed duplicated region for block: B:303:0x1085  */
    /* JADX WARN: Removed duplicated region for block: B:305:0x108d  */
    /* JADX WARN: Removed duplicated region for block: B:311:0x110e  */
    /* JADX WARN: Removed duplicated region for block: B:318:0x11cf  */
    /* JADX WARN: Removed duplicated region for block: B:320:0x11d8  */
    /* JADX WARN: Removed duplicated region for block: B:326:0x1210  */
    /* JADX WARN: Removed duplicated region for block: B:329:0x1252  */
    /* JADX WARN: Removed duplicated region for block: B:331:0x125b  */
    /* JADX WARN: Removed duplicated region for block: B:337:0x1270  */
    /* JADX WARN: Removed duplicated region for block: B:338:0x128b  */
    /* JADX WARN: Removed duplicated region for block: B:341:0x12b4  */
    /* JADX WARN: Removed duplicated region for block: B:348:0x12f3  */
    /* JADX WARN: Removed duplicated region for block: B:350:0x12fc  */
    /* JADX WARN: Removed duplicated region for block: B:356:0x1311  */
    /* JADX WARN: Removed duplicated region for block: B:357:0x132c  */
    /* JADX WARN: Removed duplicated region for block: B:360:0x1355  */
    /* JADX WARN: Removed duplicated region for block: B:367:0x1394  */
    /* JADX WARN: Removed duplicated region for block: B:369:0x139d  */
    /* JADX WARN: Removed duplicated region for block: B:375:0x13b2  */
    /* JADX WARN: Removed duplicated region for block: B:376:0x13cd  */
    /* JADX WARN: Removed duplicated region for block: B:379:0x13f6  */
    /* JADX WARN: Removed duplicated region for block: B:386:0x1435  */
    /* JADX WARN: Removed duplicated region for block: B:388:0x143e  */
    /* JADX WARN: Removed duplicated region for block: B:419:0x1512  */
    /* JADX WARN: Removed duplicated region for block: B:421:0x151b  */
    /* JADX WARN: Removed duplicated region for block: B:427:0x1530  */
    /* JADX WARN: Removed duplicated region for block: B:428:0x1539  */
    /* JADX WARN: Removed duplicated region for block: B:431:0x154d  */
    /* JADX WARN: Removed duplicated region for block: B:445:0x1599  */
    /* JADX WARN: Removed duplicated region for block: B:448:0x15bf  */
    /* JADX WARN: Removed duplicated region for block: B:450:0x15c8  */
    /* JADX WARN: Removed duplicated region for block: B:456:0x15dd  */
    /* JADX WARN: Removed duplicated region for block: B:457:0x15e6  */
    /* JADX WARN: Removed duplicated region for block: B:460:0x15fa  */
    /* JADX WARN: Removed duplicated region for block: B:474:0x1646  */
    /* JADX WARN: Removed duplicated region for block: B:477:0x166c  */
    /* JADX WARN: Removed duplicated region for block: B:479:0x1676  */
    /* JADX WARN: Removed duplicated region for block: B:485:0x168c  */
    /* JADX WARN: Removed duplicated region for block: B:486:0x1695  */
    /* JADX WARN: Removed duplicated region for block: B:489:0x16a9  */
    /* JADX WARN: Removed duplicated region for block: B:493:0x16b7  */
    /* JADX WARN: Removed duplicated region for block: B:494:0x16ba  */
    /* JADX WARN: Removed duplicated region for block: B:497:0x16dd  */
    /* JADX WARN: Removed duplicated region for block: B:500:0x1703  */
    /* JADX WARN: Removed duplicated region for block: B:510:0x172a  */
    /* JADX WARN: Removed duplicated region for block: B:531:0x18a5  */
    /* JADX WARN: Removed duplicated region for block: B:534:0x18af  */
    /* JADX WARN: Removed duplicated region for block: B:537:0x18b4  */
    /* JADX WARN: Removed duplicated region for block: B:539:0x18bc A[PHI: r1
  0x18bc: PHI (r1v178 double[]) = (r1v48 double[]), (r1v179 double[]) binds: [B:538:0x18ba, B:532:0x18ac] A[DONT_GENERATE, DONT_INLINE]] */
    /* JADX WARN: Removed duplicated region for block: B:563:0x1afc  */
    /* JADX WARN: Removed duplicated region for block: B:565:0x1b05  */
    /* JADX WARN: Removed duplicated region for block: B:571:0x1b57  */
    /* JADX WARN: Removed duplicated region for block: B:591:0x1d0c  */
    /* JADX WARN: Removed duplicated region for block: B:593:0x1d16  */
    /* JADX WARN: Removed duplicated region for block: B:615:0x1f3f  */
    /* JADX WARN: Removed duplicated region for block: B:618:0x1f4b  */
    /* JADX WARN: Removed duplicated region for block: B:620:0x1f55  */
    /* JADX WARN: Removed duplicated region for block: B:626:0x1fa8  */
    /* JADX WARN: Removed duplicated region for block: B:646:0x2165  */
    /* JADX WARN: Removed duplicated region for block: B:648:0x216f  */
    /* JADX WARN: Removed duplicated region for block: B:654:0x2185  */
    /* JADX WARN: Removed duplicated region for block: B:655:0x218a  */
    /* JADX WARN: Removed duplicated region for block: B:661:0x21d9  */
    /* JADX WARN: Removed duplicated region for block: B:664:0x2223  */
    /* JADX WARN: Removed duplicated region for block: B:666:0x222d  */
    /* JADX WARN: Removed duplicated region for block: B:672:0x227f  */
    /* JADX WARN: Removed duplicated region for block: B:675:0x22d2  */
    /* JADX WARN: Removed duplicated region for block: B:677:0x22db  */
    /* JADX WARN: Removed duplicated region for block: B:728:0x2417  */
    /* JADX WARN: Removed duplicated region for block: B:733:0x24d6  */
    /* JADX WARN: Removed duplicated region for block: B:738:0x2591  */
    /* JADX WARN: Removed duplicated region for block: B:743:0x264a  */
    /* JADX WARN: Removed duplicated region for block: B:748:0x2742  */
    /* JADX WARN: Removed duplicated region for block: B:753:0x278f  */
    /* JADX WARN: Removed duplicated region for block: B:758:0x2805  */
    /* JADX WARN: Removed duplicated region for block: B:763:0x2852  */
    /* JADX WARN: Removed duplicated region for block: B:768:0x2894  */
    /* JADX WARN: Removed duplicated region for block: B:773:0x28d6  */
    /* JADX WARN: Removed duplicated region for block: B:777:0x28f1  */
    /* JADX WARN: Removed duplicated region for block: B:781:0x2913  */
    /* JADX WARN: Removed duplicated region for block: B:784:0x291c  */
    /* JADX WARN: Removed duplicated region for block: B:786:0x2924  */
    /* JADX WARN: Removed duplicated region for block: B:792:0x2934  */
    /* JADX WARN: Removed duplicated region for block: B:794:0x293e  */
    /* JADX WARN: Removed duplicated region for block: B:807:0x299f  */
    /* JADX WARN: Removed duplicated region for block: B:809:0x29a7  */
    /* JADX WARN: Removed duplicated region for block: B:815:0x29c2  */
    /* JADX WARN: Removed duplicated region for block: B:819:0x29e7  */
    /* JADX WARN: Removed duplicated region for block: B:823:0x2a07  */
    /* JADX WARN: Removed duplicated region for block: B:841:0x2ad3  */
    /* JADX WARN: Removed duplicated region for block: B:842:0x2aec  */
    @Override // com.shimmerresearch.driver.ShimmerDevice
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    public com.shimmerresearch.driver.ObjectCluster buildMsg(byte[] r80, com.shimmerresearch.driver.Configuration.COMMUNICATION_TYPE r81, boolean r82, double r83) {
        /*
            Method dump skipped, instructions count: 11254
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: com.shimmerresearch.driver.ShimmerObject.buildMsg(byte[], com.shimmerresearch.driver.Configuration$COMMUNICATION_TYPE, boolean, double):com.shimmerresearch.driver.ObjectCluster");
    }

    protected void parseTimestampShimmer3(Configuration.COMMUNICATION_TYPE communication_type, ObjectCluster objectCluster, double[] dArr, String[] strArr, double[] dArr2, String[] strArr2, String[] strArr3, long[] jArr) {
        double initialTimeStampTicksSd;
        double samplingClockFreq;
        int signalIndex = getSignalIndex(Configuration.Shimmer3.ObjectClusterSensorName.TIMESTAMP);
        double d = jArr[signalIndex];
        if (this.mFirstTime && communication_type == Configuration.COMMUNICATION_TYPE.SD) {
            this.mFirstTsOffsetFromInitialTsTicks = d;
            if (getFirmwareIdentifier() == 15 && !isThisVerCompatibleWith(15, 1, 0, 1)) {
                setInitialTimeStampTicksSd((long) ((getInitialTimeStampTicksSd() & 1099494850560L) + d));
            }
            this.mFirstTime = false;
        }
        double dUnwrapTimeStamp = unwrapTimeStamp(d);
        double rtcClockFreq = (dUnwrapTimeStamp / getRtcClockFreq()) * 1000.0d;
        incrementPacketsReceivedCounters();
        calculateTrialPacketLoss(rtcClockFreq);
        if (communication_type == Configuration.COMMUNICATION_TYPE.SD) {
            initialTimeStampTicksSd = dUnwrapTimeStamp + getInitialTimeStampTicksSd();
            if (isLegacySdLog()) {
                dArr[signalIndex] = d;
            } else {
                initialTimeStampTicksSd -= this.mFirstTsOffsetFromInitialTsTicks;
                dArr[signalIndex] = initialTimeStampTicksSd;
            }
            if (this.mEnableCalibration) {
                dArr2[signalIndex] = (initialTimeStampTicksSd / getRtcClockFreq()) * 1000.0d;
            }
        } else {
            if (communication_type == Configuration.COMMUNICATION_TYPE.BLUETOOTH) {
                dArr[signalIndex] = d;
                if (this.mEnableCalibration) {
                    dArr2[signalIndex] = rtcClockFreq;
                }
            }
            initialTimeStampTicksSd = 0.0d;
        }
        strArr[signalIndex] = Configuration.CHANNEL_UNITS.CLOCK_UNIT;
        objectCluster.addDataToMap(Configuration.Shimmer3.ObjectClusterSensorName.TIMESTAMP, ChannelDetails.CHANNEL_TYPE.UNCAL.toString(), Configuration.CHANNEL_UNITS.CLOCK_UNIT, dArr[signalIndex]);
        if (this.mEnableCalibration) {
            strArr2[signalIndex] = Configuration.CHANNEL_UNITS.MILLISECONDS;
            objectCluster.addDataToMap(Configuration.Shimmer3.ObjectClusterSensorName.TIMESTAMP, ChannelDetails.CHANNEL_TYPE.CAL.toString(), Configuration.CHANNEL_UNITS.MILLISECONDS, dArr2[signalIndex]);
            objectCluster.setTimeStampMilliSecs(dArr2[signalIndex]);
        }
        if (communication_type == Configuration.COMMUNICATION_TYPE.SD && isRtcDifferenceSet()) {
            double rTCDifferenceInTicks = initialTimeStampTicksSd + getRTCDifferenceInTicks();
            objectCluster.addDataToMap(Configuration.Shimmer3.ObjectClusterSensorName.REAL_TIME_CLOCK, ChannelDetails.CHANNEL_TYPE.UNCAL.toString(), Configuration.CHANNEL_UNITS.CLOCK_UNIT, rTCDifferenceInTicks);
            dArr[strArr3.length - 1] = rTCDifferenceInTicks;
            strArr[strArr3.length - 1] = Configuration.CHANNEL_UNITS.CLOCK_UNIT;
            strArr3[strArr3.length - 1] = Configuration.Shimmer3.ObjectClusterSensorName.REAL_TIME_CLOCK;
            if (this.mEnableCalibration) {
                if (communication_type == Configuration.COMMUNICATION_TYPE.SD) {
                    samplingClockFreq = (rTCDifferenceInTicks / getSamplingClockFreq()) * 1000.0d;
                } else {
                    if (getInitialTimeStampTicksSd() != 0) {
                        rtcClockFreq += (getInitialTimeStampTicksSd() / getSamplingClockFreq()) * 1000.0d;
                    }
                    if (isRtcDifferenceSet()) {
                        rtcClockFreq += (getRTCDifferenceInTicks() / getSamplingClockFreq()) * 1000.0d;
                    }
                    samplingClockFreq = rtcClockFreq;
                    double d2 = this.mFirstTsOffsetFromInitialTsTicks;
                    if (d2 != 0.0d) {
                        samplingClockFreq -= (d2 / getSamplingClockFreq()) * 1000.0d;
                    }
                }
                objectCluster.addDataToMap(Configuration.Shimmer3.ObjectClusterSensorName.REAL_TIME_CLOCK, ChannelDetails.CHANNEL_TYPE.CAL.toString(), Configuration.CHANNEL_UNITS.MILLISECONDS, samplingClockFreq);
                dArr2[strArr3.length - 1] = samplingClockFreq;
                strArr2[strArr3.length - 1] = Configuration.CHANNEL_UNITS.MILLISECONDS;
            }
        }
    }

    private void printSensorNames(List<String> list) {
        System.out.println("ObjectClusterSensorNames");
        for (String str : list) {
            System.out.println("\t" + str);
        }
        System.out.println("");
    }

    private void printSensorNames(String[] strArr) {
        System.out.println("ObjectClusterChannelNames");
        for (String str : strArr) {
            System.out.println("\t" + str);
        }
        System.out.println("");
    }

    protected int getSignalIndex(String str) {
        int i = 0;
        while (true) {
            String[] strArr = this.mSignalNameArray;
            if (i >= strArr.length) {
                return -1;
            }
            if (str == strArr[i]) {
                return i;
            }
            i++;
        }
    }

    public void interpretDataPacketFormat(int i, byte[] bArr) {
        String[] strArr = new String[77];
        String[] strArr2 = new String[77];
        int i2 = this.mTimeStampPacketByteSize;
        byte b = 5;
        int i3 = 0;
        if (getHardwareVersion() == 10 && getClass().getSimpleName().equals("ShimmerSDLog")) {
            this.mNChannels = i;
            if (isSyncWhenLogging() && (getFirmwareIdentifier() == 2 || getFirmwareIdentifier() == 9 || UtilShimmer.compareVersions(getShimmerVerObject(), Configuration.Shimmer3.CompatibilityInfoForMaps.svoShimmer3LogAndStreamWithSDLogSyncSupport) || UtilShimmer.compareVersions(getShimmerVerObject(), Configuration.Shimmer3.CompatibilityInfoForMaps.svoShimmer3RLogAndStreamWithSDLogSyncSupport))) {
                strArr[0] = SensorShimmerClock.ObjectClusterSensorName.TIMESTAMP_OFFSET;
                int i4 = this.OFFSET_LENGTH;
                if (i4 == 5) {
                    strArr2[0] = "u32signed";
                    this.mNChannels++;
                    i2 += 5;
                } else if (i4 == 9) {
                    strArr2[0] = "u72";
                    this.mNChannels++;
                    i2 += 9;
                }
                i3 = 1;
            }
        }
        if (getHardwareVersion() == 4 || getHardwareVersion() == 3 || getHardwareVersion() == 10) {
            strArr[i3] = Configuration.Shimmer3.ObjectClusterSensorName.TIMESTAMP;
        } else {
            strArr[i3] = Configuration.Shimmer2.ObjectClusterSensorName.TIMESTAMP;
        }
        int i5 = this.mTimeStampPacketByteSize;
        if (i5 == 2) {
            strArr2[i3] = "u16";
        } else if (i5 == 3) {
            strArr2[i3] = "u24";
        }
        int i6 = i3;
        while (i6 < i + i3) {
            byte b2 = bArr[i6 - i3];
            if (b2 == 0) {
                if (getHardwareVersion() == 4 || getHardwareVersion() == 3 || getHardwareVersion() == 10) {
                    int i7 = i6 + 1;
                    strArr[i7] = Configuration.Shimmer3.ObjectClusterSensorName.ACCEL_LN_X;
                    strArr2[i7] = "i16";
                } else {
                    int i8 = i6 + 1;
                    strArr[i8] = Configuration.Shimmer2.ObjectClusterSensorName.ACCEL_X;
                    strArr2[i8] = "u12";
                }
            } else if (b2 == 1) {
                if (getHardwareVersion() == 4 || getHardwareVersion() == 3 || getHardwareVersion() == 10) {
                    int i9 = i6 + 1;
                    strArr[i9] = Configuration.Shimmer3.ObjectClusterSensorName.ACCEL_LN_Y;
                    strArr2[i9] = "i16";
                } else {
                    int i10 = i6 + 1;
                    strArr[i10] = Configuration.Shimmer2.ObjectClusterSensorName.ACCEL_Y;
                    strArr2[i10] = "u12";
                }
            } else if (b2 == 2) {
                if (getHardwareVersion() == 4 || getHardwareVersion() == 3 || getHardwareVersion() == 10) {
                    int i11 = i6 + 1;
                    strArr[i11] = Configuration.Shimmer3.ObjectClusterSensorName.ACCEL_LN_Z;
                    strArr2[i11] = "i16";
                } else {
                    int i12 = i6 + 1;
                    strArr[i12] = Configuration.Shimmer2.ObjectClusterSensorName.ACCEL_Z;
                    strArr2[i12] = "u12";
                }
            } else if (b2 != 3) {
                if (b2 == 4) {
                    if (getHardwareVersion() == 4) {
                        int i13 = i6 + 1;
                        strArr[i13] = Configuration.Shimmer3.ObjectClusterSensorName.GYRO_Y;
                        strArr2[i13] = "i16";
                    } else if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
                        int i14 = i6 + 1;
                        strArr2[i14] = "i16";
                        i2 += 2;
                        strArr[i14] = Configuration.Shimmer3.ObjectClusterSensorName.ACCEL_WR_X;
                    } else {
                        int i15 = i6 + 1;
                        strArr[i15] = Configuration.Shimmer2.ObjectClusterSensorName.GYRO_Y;
                        strArr2[i15] = "u12";
                    }
                } else if (b2 == b) {
                    if (getHardwareVersion() == 4) {
                        int i16 = i6 + 1;
                        strArr[i16] = Configuration.Shimmer3.ObjectClusterSensorName.GYRO_Z;
                        strArr2[i16] = "i16";
                    } else if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
                        int i17 = i6 + 1;
                        strArr2[i17] = "i16";
                        i2 += 2;
                        strArr[i17] = Configuration.Shimmer3.ObjectClusterSensorName.ACCEL_WR_Y;
                    } else {
                        int i18 = i6 + 1;
                        strArr[i18] = Configuration.Shimmer2.ObjectClusterSensorName.GYRO_Z;
                        strArr2[i18] = "u12";
                    }
                } else if (b2 == 6) {
                    if (getHardwareVersion() == 4) {
                        int i19 = i6 + 1;
                        strArr[i19] = Configuration.Shimmer3.ObjectClusterSensorName.BATTERY;
                        strArr2[i19] = "i16";
                    } else if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
                        int i20 = i6 + 1;
                        strArr2[i20] = "i16";
                        i2 += 2;
                        strArr[i20] = Configuration.Shimmer3.ObjectClusterSensorName.ACCEL_WR_Z;
                    } else {
                        int i21 = i6 + 1;
                        strArr[i21] = Configuration.Shimmer2.ObjectClusterSensorName.MAG_X;
                        strArr2[i21] = "i16";
                    }
                } else if (b2 == 7) {
                    if (getHardwareVersion() == 4) {
                        int i22 = i6 + 1;
                        strArr2[i22] = "i16";
                        i2 += 2;
                        strArr[i22] = Configuration.Shimmer3.ObjectClusterSensorName.ACCEL_WR_X;
                    } else if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
                        int i23 = i6 + 1;
                        strArr[i23] = Configuration.Shimmer3.ObjectClusterSensorName.MAG_X;
                        if (isSupportedNewImuSensors()) {
                            strArr2[i23] = "i16";
                        } else {
                            strArr2[i23] = "i16r";
                        }
                    } else {
                        int i24 = i6 + 1;
                        strArr2[i24] = "i16";
                        i2 += 2;
                        strArr[i24] = Configuration.Shimmer2.ObjectClusterSensorName.MAG_Y;
                    }
                } else if (b2 == 8) {
                    if (getHardwareVersion() == 4) {
                        int i25 = i6 + 1;
                        strArr2[i25] = "i16";
                        i2 += 2;
                        strArr[i25] = Configuration.Shimmer3.ObjectClusterSensorName.ACCEL_WR_Y;
                    } else if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
                        int i26 = i6 + 1;
                        strArr[i26] = Configuration.Shimmer3.ObjectClusterSensorName.MAG_Y;
                        if (isSupportedNewImuSensors()) {
                            strArr2[i26] = "i16";
                        } else {
                            strArr2[i26] = "i16r";
                        }
                    } else {
                        int i27 = i6 + 1;
                        strArr2[i27] = "i16";
                        i2 += 2;
                        strArr[i27] = Configuration.Shimmer2.ObjectClusterSensorName.MAG_Z;
                    }
                } else if (b2 == 9) {
                    if (getHardwareVersion() == 4) {
                        int i28 = i6 + 1;
                        strArr[i28] = Configuration.Shimmer3.ObjectClusterSensorName.ACCEL_WR_Z;
                        strArr2[i28] = "i16";
                    } else if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
                        int i29 = i6 + 1;
                        strArr[i29] = Configuration.Shimmer3.ObjectClusterSensorName.MAG_Z;
                        if (isSupportedNewImuSensors()) {
                            strArr2[i29] = "i16";
                        } else {
                            strArr2[i29] = "i16r";
                        }
                    } else {
                        int i30 = i6 + 1;
                        strArr[i30] = Configuration.Shimmer2.ObjectClusterSensorName.ECG_RA_LL;
                        strArr2[i30] = "u12";
                    }
                } else if (b2 == 10) {
                    if (getHardwareVersion() == 4) {
                        int i31 = i6 + 1;
                        strArr[i31] = Configuration.Shimmer3.ObjectClusterSensorName.MAG_X;
                        strArr2[i31] = "i16";
                    } else if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
                        int i32 = i6 + 1;
                        strArr[i32] = Configuration.Shimmer3.ObjectClusterSensorName.GYRO_X;
                        if (getHardwareVersion() == 3) {
                            strArr2[i32] = "i16r";
                        } else if (getHardwareVersion() == 10) {
                            strArr2[i32] = "i16";
                        }
                    } else {
                        int i33 = i6 + 1;
                        strArr[i33] = Configuration.Shimmer2.ObjectClusterSensorName.ECG_LA_LL;
                        strArr2[i33] = "u12";
                    }
                } else if (b2 == 11) {
                    if (getHardwareVersion() == 4) {
                        int i34 = i6 + 1;
                        strArr[i34] = Configuration.Shimmer3.ObjectClusterSensorName.MAG_Y;
                        strArr2[i34] = "i16";
                    } else if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
                        int i35 = i6 + 1;
                        strArr[i35] = Configuration.Shimmer3.ObjectClusterSensorName.GYRO_Y;
                        if (getHardwareVersion() == 3) {
                            strArr2[i35] = "i16r";
                        } else if (getHardwareVersion() == 10) {
                            strArr2[i35] = "i16";
                        }
                    } else {
                        int i36 = i6 + 1;
                        strArr[i36] = Configuration.Shimmer2.ObjectClusterSensorName.GSR;
                        strArr2[i36] = "u16";
                    }
                } else if (b2 == 12) {
                    if (getHardwareVersion() == 4) {
                        int i37 = i6 + 1;
                        strArr[i37] = Configuration.Shimmer3.ObjectClusterSensorName.MAG_Z;
                        strArr2[i37] = "i16";
                    } else if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
                        int i38 = i6 + 1;
                        strArr[i38] = Configuration.Shimmer3.ObjectClusterSensorName.GYRO_Z;
                        if (getHardwareVersion() == 3) {
                            strArr2[i38] = "i16r";
                        } else if (getHardwareVersion() == 10) {
                            strArr2[i38] = "i16";
                        }
                    } else {
                        int i39 = i6 + 1;
                        strArr[i39] = Configuration.Shimmer2.ObjectClusterSensorName.GSR_RES;
                        strArr2[i39] = "u16";
                    }
                } else if (b2 == 13) {
                    if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
                        if (getHardwareVersion() == 10) {
                            int i40 = i6 + 1;
                            strArr[i40] = Configuration.Shimmer3.ObjectClusterSensorName.EXT_ADC_0;
                            strArr2[i40] = "u14";
                        } else {
                            int i41 = i6 + 1;
                            strArr[i41] = Configuration.Shimmer3.ObjectClusterSensorName.EXT_EXP_ADC_A7;
                            strArr2[i41] = "u12";
                        }
                    } else {
                        int i42 = i6 + 1;
                        strArr[i42] = Configuration.Shimmer2.ObjectClusterSensorName.EMG;
                        strArr2[i42] = "u12";
                    }
                } else if (b2 == 14) {
                    if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
                        if (getHardwareVersion() == 10) {
                            int i43 = i6 + 1;
                            strArr[i43] = Configuration.Shimmer3.ObjectClusterSensorName.EXT_ADC_1;
                            strArr2[i43] = "u14";
                        } else {
                            int i44 = i6 + 1;
                            strArr[i44] = Configuration.Shimmer3.ObjectClusterSensorName.EXT_EXP_ADC_A6;
                            strArr2[i44] = "u12";
                        }
                    } else {
                        int i45 = i6 + 1;
                        strArr[i45] = Configuration.Shimmer2.ObjectClusterSensorName.EXP_BOARD_A0;
                        strArr2[i45] = "u12";
                    }
                } else if (b2 == 15) {
                    if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
                        if (getHardwareVersion() == 10) {
                            int i46 = i6 + 1;
                            strArr[i46] = Configuration.Shimmer3.ObjectClusterSensorName.EXT_ADC_2;
                            strArr2[i46] = "u14";
                        } else {
                            int i47 = i6 + 1;
                            strArr[i47] = Configuration.Shimmer3.ObjectClusterSensorName.EXT_EXP_ADC_A15;
                            strArr2[i47] = "u12";
                        }
                    } else {
                        int i48 = i6 + 1;
                        strArr[i48] = Configuration.Shimmer2.ObjectClusterSensorName.EXP_BOARD_A7;
                        strArr2[i48] = "u12";
                    }
                } else if (b2 == 16) {
                    if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
                        if (getHardwareVersion() == 10) {
                            int i49 = i6 + 1;
                            strArr[i49] = Configuration.Shimmer3.ObjectClusterSensorName.INT_ADC_3;
                            strArr2[i49] = "u14";
                        } else {
                            int i50 = i6 + 1;
                            strArr[i50] = Configuration.Shimmer3.ObjectClusterSensorName.INT_EXP_ADC_A1;
                            strArr2[i50] = "u12";
                        }
                    } else {
                        int i51 = i6 + 1;
                        strArr[i51] = Configuration.Shimmer2.ObjectClusterSensorName.BRIDGE_AMP_HIGH;
                        strArr2[i51] = "u12";
                    }
                } else if (b2 == 17) {
                    if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
                        if (getHardwareVersion() == 10) {
                            int i52 = i6 + 1;
                            strArr[i52] = Configuration.Shimmer3.ObjectClusterSensorName.INT_ADC_0;
                            strArr2[i52] = "u14";
                        } else {
                            int i53 = i6 + 1;
                            strArr[i53] = Configuration.Shimmer3.ObjectClusterSensorName.INT_EXP_ADC_A12;
                            strArr2[i53] = "u12";
                        }
                    } else {
                        int i54 = i6 + 1;
                        strArr[i54] = Configuration.Shimmer2.ObjectClusterSensorName.BRIDGE_AMP_LOW;
                        strArr2[i54] = "u12";
                    }
                } else if (b2 == 18) {
                    if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
                        if (getHardwareVersion() == 10) {
                            int i55 = i6 + 1;
                            strArr[i55] = Configuration.Shimmer3.ObjectClusterSensorName.INT_ADC_1;
                            strArr2[i55] = "u14";
                        } else {
                            int i56 = i6 + 1;
                            strArr[i56] = Configuration.Shimmer3.ObjectClusterSensorName.INT_EXP_ADC_A13;
                            strArr2[i56] = "u12";
                        }
                    } else {
                        int i57 = i6 + 1;
                        strArr[i57] = Configuration.Shimmer2.ObjectClusterSensorName.HEART_RATE;
                        if (getFirmwareVersionMajor() == 0 && getFirmwareVersionMinor() == 1) {
                            strArr2[i57] = "u8";
                            i2++;
                        } else {
                            strArr2[i57] = "u16";
                        }
                    }
                } else if (b2 == 19) {
                    if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
                        if (getHardwareVersion() == 10) {
                            int i58 = i6 + 1;
                            strArr[i58] = Configuration.Shimmer3.ObjectClusterSensorName.INT_ADC_2;
                            strArr2[i58] = "u14";
                        } else {
                            int i59 = i6 + 1;
                            strArr[i59] = Configuration.Shimmer3.ObjectClusterSensorName.INT_EXP_ADC_A14;
                            strArr2[i59] = "u12";
                        }
                    }
                } else if (b2 == 20) {
                    if (getHardwareVersion() == 10) {
                        int i60 = i6 + 1;
                        strArr[i60] = Configuration.Shimmer3.ObjectClusterSensorName.ACCEL_HIGHG_X;
                        strArr2[i60] = "i12*>";
                    }
                } else if (b2 == 21) {
                    if (getHardwareVersion() == 10) {
                        int i61 = i6 + 1;
                        strArr[i61] = Configuration.Shimmer3.ObjectClusterSensorName.ACCEL_HIGHG_Y;
                        strArr2[i61] = "i12*>";
                    }
                } else if (b2 == 22) {
                    if (getHardwareVersion() == 10) {
                        int i62 = i6 + 1;
                        strArr[i62] = Configuration.Shimmer3.ObjectClusterSensorName.ACCEL_HIGHG_Z;
                        strArr2[i62] = "i12*>";
                    }
                } else if (b2 == 23) {
                    if (getHardwareVersion() == 10) {
                        int i63 = i6 + 1;
                        strArr[i63] = Configuration.Shimmer3.ObjectClusterSensorName.ALT_MAG_X;
                        strArr2[i63] = "i16";
                    }
                } else if (b2 == 24) {
                    if (getHardwareVersion() == 10) {
                        int i64 = i6 + 1;
                        strArr[i64] = Configuration.Shimmer3.ObjectClusterSensorName.ALT_MAG_Y;
                        strArr2[i64] = "i16";
                    }
                } else if (b2 == 25) {
                    if (getHardwareVersion() == 10) {
                        int i65 = i6 + 1;
                        strArr[i65] = Configuration.Shimmer3.ObjectClusterSensorName.ALT_MAG_Z;
                        strArr2[i65] = "i16";
                    }
                } else if (b2 == 26) {
                    if (getHardwareVersion() == 3) {
                        int i66 = i6 + 1;
                        strArr[i66] = isSupportedBmp280() ? SensorBMP280.ObjectClusterSensorName.TEMPERATURE_BMP280 : SensorBMP180.ObjectClusterSensorName.TEMPERATURE_BMP180;
                        strArr2[i66] = "u16r";
                    } else if (getHardwareVersion() == 10) {
                        int i67 = i6 + 1;
                        strArr[i67] = SensorBMP390.ObjectClusterSensorName.TEMPERATURE_BMP390;
                        strArr2[i67] = "u24";
                        i2 += 3;
                    }
                } else if (b2 == 27) {
                    if (getHardwareVersion() == 3) {
                        int i68 = i6 + 1;
                        strArr[i68] = isSupportedBmp280() ? SensorBMP280.ObjectClusterSensorName.PRESSURE_BMP280 : SensorBMP180.ObjectClusterSensorName.PRESSURE_BMP180;
                        strArr2[i68] = "u24r";
                    } else if (getHardwareVersion() == 10) {
                        int i69 = i6 + 1;
                        strArr[i69] = SensorBMP390.ObjectClusterSensorName.PRESSURE_BMP390;
                        strArr2[i69] = "u24";
                    }
                    i2 += 3;
                } else if (b2 == 28) {
                    if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
                        int i70 = i6 + 1;
                        strArr[i70] = SensorGSR.ObjectClusterSensorName.GSR_RESISTANCE;
                        strArr2[i70] = "u16";
                    }
                } else if (b2 == 29) {
                    if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
                        int i71 = i6 + 1;
                        strArr[i71] = Configuration.Shimmer3.ObjectClusterSensorName.EXG1_STATUS;
                        strArr2[i71] = "u8";
                        i2++;
                    }
                } else if (b2 == 30) {
                    if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
                        int i72 = i6 + 1;
                        strArr[i72] = Configuration.Shimmer3.ObjectClusterSensorName.EXG1_CH1_24BIT;
                        strArr2[i72] = "i24r";
                        i2 += 3;
                    }
                } else if (b2 == 31) {
                    if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
                        int i73 = i6 + 1;
                        strArr[i73] = Configuration.Shimmer3.ObjectClusterSensorName.EXG1_CH2_24BIT;
                        strArr2[i73] = "i24r";
                        i2 += 3;
                    }
                } else if (b2 == 32) {
                    if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
                        int i74 = i6 + 1;
                        strArr[i74] = Configuration.Shimmer3.ObjectClusterSensorName.EXG2_STATUS;
                        strArr2[i74] = "u8";
                        i2++;
                    }
                } else if (b2 == 33) {
                    if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
                        int i75 = i6 + 1;
                        strArr[i75] = Configuration.Shimmer3.ObjectClusterSensorName.EXG2_CH1_24BIT;
                        strArr2[i75] = "i24r";
                        i2 += 3;
                    }
                } else if (b2 == 34) {
                    if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
                        int i76 = i6 + 1;
                        strArr[i76] = Configuration.Shimmer3.ObjectClusterSensorName.EXG2_CH2_24BIT;
                        strArr2[i76] = "i24r";
                        i2 += 3;
                    }
                } else if (b2 == 35) {
                    if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
                        int i77 = i6 + 1;
                        strArr[i77] = Configuration.Shimmer3.ObjectClusterSensorName.EXG1_CH1_16BIT;
                        strArr2[i77] = "i16r";
                    }
                } else if (b2 == 36) {
                    if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
                        int i78 = i6 + 1;
                        strArr[i78] = Configuration.Shimmer3.ObjectClusterSensorName.EXG1_CH2_16BIT;
                        strArr2[i78] = "i16r";
                    }
                } else if (b2 == 37) {
                    if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
                        int i79 = i6 + 1;
                        strArr[i79] = Configuration.Shimmer3.ObjectClusterSensorName.EXG2_CH1_16BIT;
                        strArr2[i79] = "i16r";
                    }
                } else if (b2 == 38) {
                    if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
                        int i80 = i6 + 1;
                        strArr[i80] = Configuration.Shimmer3.ObjectClusterSensorName.EXG2_CH2_16BIT;
                        strArr2[i80] = "i16r";
                    }
                } else if (b2 == 39) {
                    if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
                        int i81 = i6 + 1;
                        strArr[i81] = Configuration.Shimmer3.ObjectClusterSensorName.BRIDGE_AMP_HIGH;
                        strArr2[i81] = "u12";
                    }
                } else if (b2 == 40) {
                    if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
                        int i82 = i6 + 1;
                        strArr[i82] = Configuration.Shimmer3.ObjectClusterSensorName.BRIDGE_AMP_LOW;
                        strArr2[i82] = "u12";
                    }
                } else {
                    int i83 = i6 + 1;
                    strArr[i83] = Byte.toString(b2);
                    strArr2[i83] = "u12";
                }
                i6++;
                b = 5;
            } else if (getHardwareVersion() == 4) {
                int i84 = i6 + 1;
                strArr[i84] = Configuration.Shimmer3.ObjectClusterSensorName.GYRO_X;
                strArr2[i84] = "i16";
            } else if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
                int i85 = i6 + 1;
                strArr[i85] = Configuration.Shimmer3.ObjectClusterSensorName.BATTERY;
                strArr2[i85] = "i16";
            } else {
                int i86 = i6 + 1;
                strArr[i86] = Configuration.Shimmer2.ObjectClusterSensorName.GYRO_X;
                strArr2[i86] = "u12";
            }
            i2 += 2;
            i6++;
            b = 5;
        }
        this.mSignalNameArray = strArr;
        this.mSignalDataTypeArray = strArr2;
        setPacketSize(i2);
    }

    @Deprecated
    public static BiMap<String, String> generateBiMapSensorIDtoSensorName(int i) {
        if (i != 2) {
            HashMap map = new HashMap();
            map.put(Integer.toString(64), "Gyroscope");
            map.put(Integer.toString(32), "Magnetometer");
            map.put(Integer.toString(4), "GSR");
            map.put(Integer.toString(2), "Exp Board A7");
            map.put(Integer.toString(1), "Exp Board A0");
            map.put(Integer.toString(3), "Exp Board");
            map.put(Integer.toString(32768), "Bridge Amplifier");
            map.put(Integer.toString(16384), "Heart Rate");
            map.put(Integer.toString(8192), "Battery Voltage");
            map.put(Integer.toString(2), "External ADC A7");
            map.put(Integer.toString(1), "External ADC A6");
            map.put(Integer.toString(2048), "External ADC A15");
            map.put(Integer.toString(1024), "Internal ADC A1");
            map.put(Integer.toString(512), "Internal ADC A12");
            map.put(Integer.toString(256), "Internal ADC A13");
            map.put(Integer.toString(8388608), "Internal ADC A14");
            map.put(Integer.toString(262144), "Pressure");
            map.put(Integer.toString(128), "Low Noise Accelerometer");
            map.put(Integer.toString(4096), "Wide Range Accelerometer");
            map.put(Integer.toString(16), "EXG1");
            map.put(Integer.toString(8), "EXG2");
            map.put(Integer.toString(1048576), "EXG1 16Bit");
            map.put(Integer.toString(524288), "EXG2 16Bit");
            return ImmutableBiMap.copyOf(Collections.unmodifiableMap(map));
        }
        HashMap map2 = new HashMap();
        map2.put(Integer.toString(128), OrientationModule6DOF.GuiLabelConfig.ACCELEROMETER);
        map2.put(Integer.toString(64), "Gyroscope");
        map2.put(Integer.toString(32), "Magnetometer");
        map2.put(Integer.toString(8), "EMG");
        map2.put(Integer.toString(16), "ECG");
        map2.put(Integer.toString(4), "GSR");
        map2.put(Integer.toString(2), "Exp Board A7");
        map2.put(Integer.toString(1), "Exp Board A0");
        map2.put(Integer.toString(3), "Exp Board");
        map2.put(Integer.toString(32768), "Bridge Amplifier");
        map2.put(Integer.toString(16384), "Heart Rate");
        map2.put(Integer.toString(8192), "Battery Voltage");
        map2.put(Integer.toString(2), "External ADC A7");
        map2.put(Integer.toString(1), "External ADC A6");
        map2.put(Integer.toString(2048), "External ADC A15");
        map2.put(Integer.toString(1024), "Internal ADC A1");
        map2.put(Integer.toString(512), "Internal ADC A12");
        map2.put(Integer.toString(256), "Internal ADC A13");
        map2.put(Integer.toString(8388608), "Internal ADC A14");
        return ImmutableBiMap.copyOf(Collections.unmodifiableMap(map2));
    }

    @Deprecated
    public void generateBiMapSensorIDtoSensorName() {
        if (getHardwareVersion() != -1) {
            if (getHardwareVersion() != 2) {
                HashMap map = new HashMap();
                map.put(Integer.toString(262144), "Pressure");
                map.put(Integer.toString(64), "Gyroscope");
                map.put(Integer.toString(32), "Magnetometer");
                map.put(Integer.toString(24), "ECG");
                map.put(Integer.toString(16), "EMG");
                map.put(Integer.toString(4), "GSR");
                map.put(Integer.toString(2), "Exp Board A7");
                map.put(Integer.toString(1), "Exp Board A0");
                map.put(Integer.toString(3), "Exp Board");
                map.put(Integer.toString(32768), "Bridge Amplifier");
                map.put(Integer.toString(16384), "Heart Rate");
                map.put(Integer.toString(8192), "Battery Voltage");
                map.put(Integer.toString(2), "External ADC A7");
                map.put(Integer.toString(1), "External ADC A6");
                map.put(Integer.toString(2048), "External ADC A15");
                map.put(Integer.toString(1024), "Internal ADC A1");
                map.put(Integer.toString(512), "Internal ADC A12");
                map.put(Integer.toString(256), "Internal ADC A13");
                map.put(Integer.toString(8388608), "Internal ADC A14");
                map.put(Integer.toString(128), "Low Noise Accelerometer");
                map.put(Integer.toString(4096), "Wide Range Accelerometer");
                this.mSensorBitmaptoName = ImmutableBiMap.copyOf(Collections.unmodifiableMap(map));
                return;
            }
            HashMap map2 = new HashMap();
            map2.put(Integer.toString(128), OrientationModule6DOF.GuiLabelConfig.ACCELEROMETER);
            map2.put(Integer.toString(64), "Gyroscope");
            map2.put(Integer.toString(32), "Magnetometer");
            map2.put(Integer.toString(16), "ECG");
            map2.put(Integer.toString(8), "EMG");
            map2.put(Integer.toString(4), "GSR");
            map2.put(Integer.toString(2), "Exp Board A7");
            map2.put(Integer.toString(1), "Exp Board A0");
            map2.put(Integer.toString(3), "Exp Board");
            map2.put(Integer.toString(32768), "Bridge Amplifier");
            map2.put(Integer.toString(16384), "Heart Rate");
            map2.put(Integer.toString(8192), "Battery Voltage");
            map2.put(Integer.toString(2), "External ADC A7");
            map2.put(Integer.toString(1), "External ADC A6");
            map2.put(Integer.toString(2048), "External ADC A15");
            map2.put(Integer.toString(1024), "Internal ADC A1");
            map2.put(Integer.toString(512), "Internal ADC A12");
            map2.put(Integer.toString(256), "Internal ADC A13");
            map2.put(Integer.toString(8388608), "Internal ADC A14");
            this.mSensorBitmaptoName = ImmutableBiMap.copyOf(Collections.unmodifiableMap(map2));
        }
    }

    @Override // com.shimmerresearch.driver.ShimmerDevice
    public String[] getListofEnabledChannelSignals() {
        ArrayList arrayList = new ArrayList();
        if (getHardwareVersion() == 1 || getHardwareVersion() == 2) {
            arrayList.add("Timestamp");
            if ((this.mEnabledSensors & 128) > 0) {
                arrayList.add(Configuration.Shimmer2.ObjectClusterSensorName.ACCEL_X);
                arrayList.add(Configuration.Shimmer2.ObjectClusterSensorName.ACCEL_Y);
                arrayList.add(Configuration.Shimmer2.ObjectClusterSensorName.ACCEL_Z);
            }
            if ((this.mEnabledSensors & 64) > 0) {
                arrayList.add(Configuration.Shimmer2.ObjectClusterSensorName.GYRO_X);
                arrayList.add(Configuration.Shimmer2.ObjectClusterSensorName.GYRO_Y);
                arrayList.add(Configuration.Shimmer2.ObjectClusterSensorName.GYRO_Z);
            }
            if ((this.mEnabledSensors & 32) > 0) {
                arrayList.add(Configuration.Shimmer2.ObjectClusterSensorName.MAG_X);
                arrayList.add(Configuration.Shimmer2.ObjectClusterSensorName.MAG_Y);
                arrayList.add(Configuration.Shimmer2.ObjectClusterSensorName.MAG_Z);
            }
            if ((this.mEnabledSensors & 4) > 0) {
                arrayList.add(Configuration.Shimmer2.ObjectClusterSensorName.GSR);
            }
            if ((this.mEnabledSensors & 16) > 0) {
                arrayList.add(Configuration.Shimmer2.ObjectClusterSensorName.ECG_RA_LL);
                arrayList.add(Configuration.Shimmer2.ObjectClusterSensorName.ECG_LA_LL);
            }
            if ((this.mEnabledSensors & 8) > 0) {
                arrayList.add(Configuration.Shimmer2.ObjectClusterSensorName.EMG);
            }
            if ((this.mEnabledSensors & 32768) > 0) {
                arrayList.add(Configuration.Shimmer2.ObjectClusterSensorName.BRIDGE_AMP_HIGH);
                arrayList.add(Configuration.Shimmer2.ObjectClusterSensorName.BRIDGE_AMP_LOW);
            }
            if ((this.mEnabledSensors & DefaultHttpDataFactory.MINSIZE) > 0) {
                arrayList.add(Configuration.Shimmer2.ObjectClusterSensorName.HEART_RATE);
            }
            if ((this.mEnabledSensors & 1) > 0 && getPMux() == 0) {
                arrayList.add(Configuration.Shimmer2.ObjectClusterSensorName.EXP_BOARD_A0);
            }
            if ((this.mEnabledSensors & 2) > 0 && getPMux() == 0) {
                arrayList.add(Configuration.Shimmer2.ObjectClusterSensorName.EXP_BOARD_A7);
            }
            if ((this.mEnabledSensors & Http2CodecUtil.DEFAULT_HEADER_LIST_SIZE) > 0) {
                arrayList.add(Configuration.Shimmer2.ObjectClusterSensorName.BATTERY);
                arrayList.add(Configuration.Shimmer2.ObjectClusterSensorName.REG);
            }
            if ((this.mEnabledSensors & 128) > 0 && (this.mEnabledSensors & 64) > 0 && (this.mEnabledSensors & 32) > 0 && is3DOrientationEnabled()) {
                arrayList.add(Configuration.Shimmer2.ObjectClusterSensorName.EULER_9DOF_YAW);
                arrayList.add(Configuration.Shimmer2.ObjectClusterSensorName.EULER_9DOF_PITCH);
                arrayList.add(Configuration.Shimmer2.ObjectClusterSensorName.EULER_9DOF_ROLL);
            }
            if ((this.mEnabledSensors & 128) > 0 && (this.mEnabledSensors & 64) > 0 && (this.mEnabledSensors & 32) > 0 && is3DOrientationEnabled()) {
                arrayList.add(Configuration.Shimmer2.ObjectClusterSensorName.QUAT_MADGE_9DOF_W);
                arrayList.add(Configuration.Shimmer2.ObjectClusterSensorName.QUAT_MADGE_9DOF_X);
                arrayList.add(Configuration.Shimmer2.ObjectClusterSensorName.QUAT_MADGE_9DOF_Y);
                arrayList.add(Configuration.Shimmer2.ObjectClusterSensorName.QUAT_MADGE_9DOF_Z);
            }
            return (String[]) arrayList.toArray(new String[arrayList.size()]);
        }
        return super.getListofEnabledChannelSignals();
    }

    protected void retrieveBiophysicalCalibrationParametersFromPacket(byte[] bArr, int i) {
        if (i == 42) {
            if (bArr[0] == -1 && bArr[1] == -1 && bArr[2] == -1 && bArr[3] == -1) {
                this.mDefaultCalibrationParametersECG = true;
            } else {
                this.mDefaultCalibrationParametersECG = false;
                this.OffsetECGLALL = ((r0 & 255) << 8) + (bArr[1] & 255);
                this.GainECGLALL = ((bArr[2] & 255) << 8) + (bArr[3] & 255);
                this.OffsetECGRALL = ((bArr[4] & 255) << 8) + (bArr[5] & 255);
                this.GainECGRALL = ((bArr[6] & 255) << 8) + (bArr[7] & 255);
            }
        }
        if (i == 39) {
            if (bArr[0] == -1 && bArr[1] == -1 && bArr[2] == -1 && bArr[3] == -1) {
                this.mDefaultCalibrationParametersEMG = true;
                return;
            }
            this.mDefaultCalibrationParametersEMG = false;
            this.OffsetEMG = ((r12 & 255) << 8) + (bArr[1] & 255);
            this.GainEMG = ((bArr[2] & 255) << 8) + (bArr[3] & 255);
        }
    }

    protected double unwrapTimeStamp(double d) {
        double dCalculateTimeStampUnwrapped = calculateTimeStampUnwrapped(d);
        if (getLastReceivedTimeStampTicksUnwrapped() > dCalculateTimeStampUnwrapped) {
            this.mCurrentTimeStampCycle += 1.0d;
            dCalculateTimeStampUnwrapped = calculateTimeStampUnwrapped(d);
        }
        setLastReceivedTimeStampTicksUnwrapped(dCalculateTimeStampUnwrapped);
        return dCalculateTimeStampUnwrapped;
    }

    private void calculateTrialPacketLoss(double d) {
        if (!this.mStreamingStartTimeSaved) {
            this.mStreamingStartTimeSaved = true;
            this.mStreamingStartTimeMilliSecs = d;
        }
        double d2 = this.mStreamingStartTimeMilliSecs;
        if (d2 > 0.0d) {
            long samplingRateShimmer = (long) ((d - d2) / ((1.0d / getSamplingRateShimmer()) * 1000.0d));
            setPacketExpectedCountOverall(samplingRateShimmer);
            long packetReceivedCountOverall = getPacketReceivedCountOverall();
            setPacketLossCountPerTrial(samplingRateShimmer + packetReceivedCountOverall);
            setPacketReceptionRateOverall((packetReceivedCountOverall / samplingRateShimmer) * 100.0d);
        }
    }

    public void resetCalibratedTimeStamp() {
        setLastReceivedTimeStampTicksUnwrapped(0.0d);
        this.mLastReceivedCalibratedTimeStamp = -1.0d;
        this.mStreamingStartTimeSaved = false;
        this.mStreamingStartTimeMilliSecs = -1.0d;
        setCurrentTimeStampCycle(0.0d);
    }

    protected void interpretInqResponse(byte[] bArr) {
        char c;
        try {
            if (getHardwareVersion() != 1 && getHardwareVersion() != 2) {
                if (getHardwareVersion() == 3) {
                    if (bArr.length >= 8) {
                        this.mPacketSize = this.mTimeStampPacketByteSize + (bArr[6] * 2);
                        setSamplingRateShimmer(convertSamplingRateBytesToFreq(bArr[0], bArr[1], getSamplingClockFreq()));
                        this.mNChannels = bArr[6];
                        this.mBufferSize = bArr[7];
                        long j = (bArr[2] & 255) + ((bArr[3] & 255) << 8) + ((bArr[4] & 255) << 16) + ((bArr[5] & 255) << 24);
                        this.mConfigByte0 = j;
                        setDigitalAccelRange(((int) (j & 12)) >> 2);
                        setGyroRange(((int) (this.mConfigByte0 & 196608)) >> 16);
                        setLSM303MagRange(((int) (this.mConfigByte0 & 14680064)) >> 21);
                        setLSM303DigitalAccelRate(((int) (this.mConfigByte0 & 240)) >> 4);
                        setMPU9150GyroAccelRate(((int) (this.mConfigByte0 & 65280)) >> 8);
                        setMagRate(((int) (this.mConfigByte0 & 1835008)) >> 18);
                        setPressureResolution(((int) (this.mConfigByte0 >> 28)) & 3);
                        setGSRRange(((int) (this.mConfigByte0 >> 25)) & 7);
                        setInternalExpPower(((int) (this.mConfigByte0 >> 24)) & 1);
                        byte[] bArr2 = new byte[this.mNChannels + 8];
                        this.mInquiryResponseBytes = bArr2;
                        System.arraycopy(bArr, 0, bArr2, 0, bArr2.length);
                        if (getLSM303DigitalAccelRate() == 2 && getSamplingRateShimmer() > 10.0d) {
                            setLowPowerAccelWR(true);
                        }
                        checkLowPowerGyro();
                        checkLowPowerMag();
                        int length = bArr.length;
                        int i = this.mNChannels;
                        if (length >= i + 8) {
                            byte[] bArr3 = new byte[i];
                            System.arraycopy(bArr, 8, bArr3, 0, i);
                            updateEnabledSensorsFromChannels(bArr3);
                            if (!this.mUseInfoMemConfigMethod || getFirmwareVersionCode() < 6) {
                                setEnabledAndDerivedSensorsAndUpdateMaps(this.mEnabledSensors, this.mDerivedSensors);
                            }
                            interpretDataPacketFormat(this.mNChannels, bArr3);
                            checkExgResolutionFromEnabledSensorsVar();
                            return;
                        }
                        return;
                    }
                    return;
                }
                if (getHardwareVersion() == 10) {
                    if (bArr.length >= 11) {
                        this.mPacketSize = this.mTimeStampPacketByteSize + (bArr[9] * 2);
                        setSamplingRateShimmer(convertSamplingRateBytesToFreq(bArr[0], bArr[1], getSamplingClockFreq()));
                        this.mNChannels = bArr[9];
                        this.mBufferSize = bArr[10];
                        long j2 = (bArr[2] & 255) + ((bArr[3] & 255) << 8) + ((bArr[4] & 255) << 16) + ((bArr[5] & 255) << 24) + ((bArr[6] & 255) << 32) + ((bArr[7] & 255) << 40) + ((bArr[8] & 255) << 48);
                        this.mConfigByte0 = j2;
                        setDigitalAccelRange(((int) (j2 & 12)) >> 2);
                        long j3 = this.mConfigByte0;
                        setGyroRange(((int) (((j3 & 196608) >> 16) & 3)) + (((int) ((j3 >> 34) & 1)) << 2));
                        setAltMagRange(((int) (this.mConfigByte0 & 14680064)) >> 21);
                        setLIS2DW12DigitalAccelRate(((int) (this.mConfigByte0 & 240)) >> 4);
                        setLowPowerAccelWR(getLIS2DW12DigitalAccelRate() == 1);
                        setLSM6DSVGyroAccelRate(((int) (this.mConfigByte0 & 65280)) >> 8);
                        checkLowPowerGyro();
                        long j4 = this.mConfigByte0;
                        setMagRate((int) ((j4 >> 18) & 7));
                        setAltMagRate((int) ((j4 >> 40) & 63));
                        checkLowPowerMag();
                        setGSRRange(((int) (this.mConfigByte0 >> 25)) & 7);
                        setInternalExpPower(((int) (this.mConfigByte0 >> 24)) & 1);
                        long j5 = this.mConfigByte0;
                        setPressureResolution((((int) (j5 >> 28)) & 3) + ((1 & ((int) (j5 >> 32))) << 2));
                        byte[] bArr4 = new byte[this.mNChannels + 11];
                        this.mInquiryResponseBytes = bArr4;
                        System.arraycopy(bArr, 0, bArr4, 0, bArr4.length);
                        int length2 = bArr.length;
                        int i2 = this.mNChannels;
                        if (length2 >= i2 + 11) {
                            byte[] bArr5 = new byte[i2];
                            System.arraycopy(bArr, 11, bArr5, 0, i2);
                            updateEnabledSensorsFromChannels(bArr5);
                            if (!this.mUseInfoMemConfigMethod || getFirmwareVersionCode() < 6) {
                                setEnabledAndDerivedSensorsAndUpdateMaps(this.mEnabledSensors, this.mDerivedSensors);
                            }
                            interpretDataPacketFormat(this.mNChannels, bArr5);
                            checkExgResolutionFromEnabledSensorsVar();
                            return;
                        }
                        return;
                    }
                    return;
                }
                if (getHardwareVersion() == 4) {
                    this.mPacketSize = this.mTimeStampPacketByteSize + (bArr[2] * 2);
                    setSamplingRateShimmer(1024.0d / bArr[0]);
                    setDigitalAccelRange(bArr[1]);
                    int i3 = bArr[2];
                    this.mNChannels = i3;
                    this.mBufferSize = bArr[3];
                    byte[] bArr6 = new byte[i3];
                    System.arraycopy(bArr, 4, bArr6, 0, i3);
                    interpretDataPacketFormat(this.mNChannels, bArr6);
                    return;
                }
                return;
            }
            setPacketSize(this.mTimeStampPacketByteSize + (bArr[3] * 2));
            setSamplingRateShimmer(1024.0d / bArr[0]);
            if (getMagRate() != 3 || getSamplingRateShimmer() <= 10.0d) {
                c = 1;
            } else {
                c = 1;
                setLowPowerMag(true);
            }
            setDigitalAccelRange(bArr[c]);
            this.mConfigByte0 = bArr[2] & 255;
            int i4 = bArr[3];
            this.mNChannels = i4;
            this.mBufferSize = bArr[4];
            byte[] bArr7 = new byte[i4];
            System.arraycopy(bArr, 5, bArr7, 0, i4);
            updateEnabledSensorsFromChannels(bArr7);
            interpretDataPacketFormat(this.mNChannels, bArr7);
            byte[] bArr8 = new byte[this.mNChannels + 5];
            this.mInquiryResponseBytes = bArr8;
            System.arraycopy(bArr, 0, bArr8, 0, bArr8.length);
        } catch (Exception e) {
            e.printStackTrace();
            try {
                disconnect();
            } catch (ShimmerException e2) {
                e2.printStackTrace();
            }
        }
    }

    @Deprecated
    protected void updateEnabledSensorsFromChannels(byte[] bArr) {
        int i;
        int i2 = 0;
        for (int i3 = 0; i3 < bArr.length; i3++) {
            if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
                byte b = bArr[i3];
                if (b == 0 || b == 1 || b == 2) {
                    i2 |= 128;
                }
                if (b == 4 || b == 5 || b == 6) {
                    i2 |= 4096;
                }
                if (b == 10 || b == 11 || b == 12) {
                    i2 |= 64;
                }
                if (b == 7 || b == 8 || b == 9) {
                    i2 |= 32;
                }
                if (b == 3) {
                    i2 |= 8192;
                }
                if (b == 13) {
                    i2 |= 2;
                }
                if (b == 14) {
                    i2 |= 1;
                }
                if (b == 15) {
                    i2 |= 2048;
                }
                if (b == 16) {
                    i2 |= 1024;
                }
                if (b == 17) {
                    i2 |= 512;
                }
                if (b == 18) {
                    i2 |= 256;
                }
                if (b == 19) {
                    i2 |= 8388608;
                }
                if (b == 13) {
                    i2 |= 2;
                }
                if (b == 14) {
                    i2 |= 1;
                }
                if (b == 15) {
                    i2 |= 2048;
                }
                if (b == 16) {
                    i2 |= 1024;
                }
                if (b == 17) {
                    i2 |= 512;
                }
                if (b == 18) {
                    i2 |= 256;
                }
                if (b == 19) {
                    i2 |= 8388608;
                }
                if (b == 27) {
                    i2 |= 262144;
                }
                if (b == 26) {
                    i2 |= 262144;
                }
                if (b == 28) {
                    i2 |= 4;
                }
                if (b == 30) {
                    i2 |= 16;
                }
                if (b == 31) {
                    i2 |= 16;
                }
                if (b == 35) {
                    i2 |= 1048576;
                }
                if (b == 36) {
                    i2 |= 1048576;
                }
                if (b == 33) {
                    i2 |= 8;
                }
                if (b == 34) {
                    i2 |= 8;
                }
                if (b == 37) {
                    i2 |= 524288;
                }
                if (b == 38) {
                    i2 |= 524288;
                }
                if (b == 39 || b == 40) {
                    i2 |= 32768;
                }
                if (b == 20 || b == 21 || b == 22) {
                    i2 |= 4194304;
                }
                if (b == 23 || b == 24 || b == 25) {
                    i = 2097152;
                    i2 |= i;
                }
            } else if (getHardwareVersion() == 2) {
                byte b2 = bArr[i3];
                if (b2 == 0 || b2 == 1 || b2 == 2) {
                    i2 |= 128;
                }
                if (b2 == 3 || b2 == 4 || b2 == 5) {
                    i2 |= 64;
                }
                if (b2 == 6 || b2 == 6 || b2 == 6) {
                    i2 |= 32;
                }
                if (b2 == 10 || b2 == 9) {
                    i2 |= 16;
                } else if (b2 == 13) {
                    i2 |= 8;
                } else if (b2 == 14 && getPMux() == 0) {
                    i2 |= 1;
                } else if (bArr[i3] == 15 && getPMux() == 0) {
                    i2 |= 2;
                } else {
                    byte b3 = bArr[i3];
                    if (b3 == 16 || b3 == 17) {
                        i = 32768;
                        i2 |= i;
                    } else if (b3 == 11 || b3 == 12) {
                        i2 |= 4;
                    } else if (b3 == 18) {
                        i2 |= 16384;
                    } else if ((b3 == 14 && getPMux() == 1) || (bArr[i3] == 15 && getPMux() == 1)) {
                        i2 |= 8192;
                    }
                }
            }
        }
        this.mEnabledSensors = i2;
    }

    @Deprecated
    public String getDeviceName() {
        return getShimmerUserAssignedName();
    }

    @Deprecated
    public void setDeviceName(String str) {
        setShimmerUserAssignedName(str);
    }

    public byte[] getRawCalibrationParameters() {
        byte[] byteArray;
        byte[] bArr = new byte[1];
        if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            try {
                byteArrayOutputStream.write(5);
                byteArrayOutputStream.write(getAccelCalRawParams().length);
                byteArrayOutputStream.write(getAccelCalRawParams());
                byteArrayOutputStream.write(getDigiAccelCalRawParams().length);
                byteArrayOutputStream.write(getDigiAccelCalRawParams());
                byteArrayOutputStream.write(getGyroCalRawParams().length);
                byteArrayOutputStream.write(getGyroCalRawParams());
                byteArrayOutputStream.write(getMagCalRawParams().length);
                byteArrayOutputStream.write(getMagCalRawParams());
                byteArrayOutputStream.write(getPressureRawCoefficients().length);
                byteArrayOutputStream.write(getPressureRawCoefficients());
                byteArray = byteArrayOutputStream.toByteArray();
            } catch (IOException e) {
                e.printStackTrace();
                return bArr;
            }
        } else {
            if (getHardwareVersion() != 1 && getHardwareVersion() != 2) {
                bArr[0] = 0;
                return bArr;
            }
            ByteArrayOutputStream byteArrayOutputStream2 = new ByteArrayOutputStream();
            try {
                byteArrayOutputStream2.write(5);
                byteArrayOutputStream2.write(getAccelCalRawParams().length);
                byteArrayOutputStream2.write(getAccelCalRawParams());
                byteArrayOutputStream2.write(getGyroCalRawParams().length);
                byteArrayOutputStream2.write(getGyroCalRawParams());
                byteArrayOutputStream2.write(getMagCalRawParams().length);
                byteArrayOutputStream2.write(getMagCalRawParams());
                byteArrayOutputStream2.write(this.mECGCalRawParams.length);
                byteArrayOutputStream2.write(this.mECGCalRawParams);
                byteArrayOutputStream2.write(this.mEMGCalRawParams.length);
                byteArrayOutputStream2.write(this.mEMGCalRawParams);
                byteArray = byteArrayOutputStream2.toByteArray();
            } catch (IOException e2) {
                e2.printStackTrace();
                return bArr;
            }
        }
        return byteArray;
    }

    @Deprecated
    public List<String> getListofEnabledSensors() {
        ArrayList arrayList = new ArrayList();
        if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
            if ((this.mEnabledSensors & 128) > 0) {
                arrayList.add("Low Noise Accelerometer");
            }
            if ((this.mEnabledSensors & 4096) > 0) {
                arrayList.add("Wide Range Accelerometer");
            }
        } else if ((this.mEnabledSensors & 128) > 0) {
            arrayList.add(OrientationModule6DOF.GuiLabelConfig.ACCELEROMETER);
        }
        if ((this.mEnabledSensors & 64) > 0) {
            arrayList.add("Gyroscope");
        }
        if ((this.mEnabledSensors & 32) > 0) {
            arrayList.add("Magnetometer");
        }
        if ((this.mEnabledSensors & 4) > 0) {
            arrayList.add("GSR");
        }
        if (getHardwareVersion() == 1 || getHardwareVersion() == 2) {
            if ((this.mEnabledSensors & 16) > 0) {
                arrayList.add("ECG");
            }
            if ((this.mEnabledSensors & 8) > 0) {
                arrayList.add("EMG");
            }
        }
        if ((this.mEnabledSensors & 32768) > 0) {
            arrayList.add("Bridge Amplifier");
        }
        if ((this.mEnabledSensors & DefaultHttpDataFactory.MINSIZE) > 0) {
            arrayList.add("Heart Rate");
        }
        if ((this.mEnabledSensors & 1) > 0 && (this.mEnabledSensors & Http2CodecUtil.DEFAULT_HEADER_LIST_SIZE) == 0 && getHardwareVersion() != 3) {
            arrayList.add("ExpBoard A0");
        }
        if ((this.mEnabledSensors & 2) > 0 && (this.mEnabledSensors & Http2CodecUtil.DEFAULT_HEADER_LIST_SIZE) == 0 && getHardwareVersion() != 3) {
            arrayList.add("ExpBoard A7");
        }
        if ((this.mEnabledSensors & Http2CodecUtil.DEFAULT_HEADER_LIST_SIZE) > 0) {
            arrayList.add("Battery Voltage");
        }
        if ((this.mEnabledSensors & 2) > 0 && getHardwareVersion() == 3) {
            arrayList.add("External ADC A7");
        }
        if ((this.mEnabledSensors & 1) > 0 && getHardwareVersion() == 3) {
            arrayList.add("External ADC A6");
        }
        if ((this.mEnabledSensors & 2048) > 0 && getHardwareVersion() == 3) {
            arrayList.add("External ADC A15");
        }
        if ((this.mEnabledSensors & 1024) > 0 && getHardwareVersion() == 3) {
            arrayList.add("Internal ADC A1");
        }
        if ((this.mEnabledSensors & 512) > 0 && getHardwareVersion() == 3) {
            arrayList.add("Internal ADC A12");
        }
        if ((this.mEnabledSensors & 256) > 0 && getHardwareVersion() == 3) {
            arrayList.add("Internal ADC A13");
        }
        if ((this.mEnabledSensors & 8388608) > 0 && getHardwareVersion() == 3) {
            arrayList.add("Internal ADC A14");
        }
        if ((this.mEnabledSensors & 262144) > 0 && getHardwareVersion() == 3) {
            arrayList.add("Pressure");
        }
        if ((this.mEnabledSensors & 16) > 0 && getHardwareVersion() == 3) {
            arrayList.add("EXG1");
        }
        if ((this.mEnabledSensors & 8) > 0 && getHardwareVersion() == 3) {
            arrayList.add("EXG2");
        }
        if ((this.mEnabledSensors & 1048576) > 0 && getHardwareVersion() == 3) {
            arrayList.add("EXG1 16Bit");
        }
        if ((this.mEnabledSensors & 524288) > 0 && getHardwareVersion() == 3) {
            arrayList.add("EXG2 16Bit");
        }
        return arrayList;
    }

    @Override // com.shimmerresearch.driver.ShimmerDevice
    public List<String[]> getListofEnabledChannelSignalsandFormats() {
        ArrayList arrayList = new ArrayList();
        if (getHardwareVersion() == 1 || getHardwareVersion() == 2) {
            arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.TIMESTAMP, ChannelDetails.CHANNEL_TYPE.CAL.toString(), Configuration.CHANNEL_UNITS.MILLISECONDS});
            arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.TIMESTAMP, ChannelDetails.CHANNEL_TYPE.UNCAL.toString(), Configuration.CHANNEL_UNITS.NO_UNITS});
            if ((this.mEnabledSensors & 128) > 0) {
                String str = this.mSensorMMA736x.mIsUsingDefaultLNAccelParam ? "m/(s^2)*" : "m/(s^2)";
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.ACCEL_X, ChannelDetails.CHANNEL_TYPE.CAL.toString(), str});
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.ACCEL_X, ChannelDetails.CHANNEL_TYPE.UNCAL.toString(), Configuration.CHANNEL_UNITS.NO_UNITS});
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.ACCEL_Y, ChannelDetails.CHANNEL_TYPE.CAL.toString(), str});
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.ACCEL_Y, ChannelDetails.CHANNEL_TYPE.UNCAL.toString(), Configuration.CHANNEL_UNITS.NO_UNITS});
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.ACCEL_Z, ChannelDetails.CHANNEL_TYPE.CAL.toString(), str});
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.ACCEL_Z, ChannelDetails.CHANNEL_TYPE.UNCAL.toString(), Configuration.CHANNEL_UNITS.NO_UNITS});
            }
            if ((this.mEnabledSensors & 64) > 0) {
                String str2 = this.mSensorShimmer2Gyro.mIsUsingDefaultGyroParam ? "deg/s*" : "deg/s";
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.GYRO_X, ChannelDetails.CHANNEL_TYPE.CAL.toString(), str2});
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.GYRO_X, ChannelDetails.CHANNEL_TYPE.UNCAL.toString(), Configuration.CHANNEL_UNITS.NO_UNITS});
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.GYRO_Y, ChannelDetails.CHANNEL_TYPE.CAL.toString(), str2});
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.GYRO_Y, ChannelDetails.CHANNEL_TYPE.UNCAL.toString(), Configuration.CHANNEL_UNITS.NO_UNITS});
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.GYRO_Z, ChannelDetails.CHANNEL_TYPE.CAL.toString(), str2});
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.GYRO_Z, ChannelDetails.CHANNEL_TYPE.UNCAL.toString(), Configuration.CHANNEL_UNITS.NO_UNITS});
            }
            if ((this.mEnabledSensors & 32) > 0) {
                String str3 = this.mSensorShimmer2Mag.mIsUsingDefaultMagParam ? "local_flux*" : "local_flux";
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.MAG_X, ChannelDetails.CHANNEL_TYPE.CAL.toString(), str3});
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.MAG_X, ChannelDetails.CHANNEL_TYPE.UNCAL.toString(), Configuration.CHANNEL_UNITS.NO_UNITS});
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.MAG_Y, ChannelDetails.CHANNEL_TYPE.CAL.toString(), str3});
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.MAG_Y, ChannelDetails.CHANNEL_TYPE.UNCAL.toString(), Configuration.CHANNEL_UNITS.NO_UNITS});
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.MAG_Z, ChannelDetails.CHANNEL_TYPE.CAL.toString(), str3});
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.MAG_Z, ChannelDetails.CHANNEL_TYPE.UNCAL.toString(), Configuration.CHANNEL_UNITS.NO_UNITS});
            }
            if ((this.mEnabledSensors & 4) > 0) {
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.GSR, ChannelDetails.CHANNEL_TYPE.CAL.toString(), Configuration.CHANNEL_UNITS.KOHMS});
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.GSR, ChannelDetails.CHANNEL_TYPE.UNCAL.toString(), Configuration.CHANNEL_UNITS.NO_UNITS});
            }
            if ((this.mEnabledSensors & 16) > 0) {
                String str4 = this.mDefaultCalibrationParametersECG ? "mV*" : Configuration.CHANNEL_UNITS.MILLIVOLTS;
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.ECG_RA_LL, ChannelDetails.CHANNEL_TYPE.CAL.toString(), str4});
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.ECG_RA_LL, ChannelDetails.CHANNEL_TYPE.UNCAL.toString(), Configuration.CHANNEL_UNITS.NO_UNITS});
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.ECG_LA_LL, ChannelDetails.CHANNEL_TYPE.CAL.toString(), str4});
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.ECG_LA_LL, ChannelDetails.CHANNEL_TYPE.UNCAL.toString(), Configuration.CHANNEL_UNITS.NO_UNITS});
            }
            if ((this.mEnabledSensors & 8) > 0) {
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.EMG, ChannelDetails.CHANNEL_TYPE.CAL.toString(), !this.mDefaultCalibrationParametersECG ? Configuration.CHANNEL_UNITS.MILLIVOLTS : "mV*"});
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.EMG, ChannelDetails.CHANNEL_TYPE.UNCAL.toString(), Configuration.CHANNEL_UNITS.NO_UNITS});
            }
            if ((this.mEnabledSensors & 32768) > 0) {
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.BRIDGE_AMP_HIGH, ChannelDetails.CHANNEL_TYPE.CAL.toString(), Configuration.CHANNEL_UNITS.MILLIVOLTS});
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.BRIDGE_AMP_HIGH, ChannelDetails.CHANNEL_TYPE.UNCAL.toString(), Configuration.CHANNEL_UNITS.NO_UNITS});
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.BRIDGE_AMP_LOW, ChannelDetails.CHANNEL_TYPE.CAL.toString(), Configuration.CHANNEL_UNITS.MILLIVOLTS});
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.BRIDGE_AMP_LOW, ChannelDetails.CHANNEL_TYPE.UNCAL.toString(), Configuration.CHANNEL_UNITS.NO_UNITS});
            }
            if ((this.mEnabledSensors & DefaultHttpDataFactory.MINSIZE) > 0) {
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.HEART_RATE, ChannelDetails.CHANNEL_TYPE.CAL.toString(), Configuration.CHANNEL_UNITS.BEATS_PER_MINUTE});
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.HEART_RATE, ChannelDetails.CHANNEL_TYPE.UNCAL.toString(), Configuration.CHANNEL_UNITS.NO_UNITS});
            }
            if ((this.mEnabledSensors & 1) > 0 && getPMux() == 0) {
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.EXP_BOARD_A0, ChannelDetails.CHANNEL_TYPE.CAL.toString(), Configuration.CHANNEL_UNITS.MILLIVOLTS});
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.EXP_BOARD_A0, ChannelDetails.CHANNEL_TYPE.UNCAL.toString(), Configuration.CHANNEL_UNITS.NO_UNITS});
            }
            if ((this.mEnabledSensors & 2) > 0 && getPMux() == 0) {
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.EXP_BOARD_A7, ChannelDetails.CHANNEL_TYPE.CAL.toString(), Configuration.CHANNEL_UNITS.MILLIVOLTS});
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.EXP_BOARD_A7, ChannelDetails.CHANNEL_TYPE.UNCAL.toString(), Configuration.CHANNEL_UNITS.NO_UNITS});
            }
            if ((this.mEnabledSensors & Http2CodecUtil.DEFAULT_HEADER_LIST_SIZE) > 0) {
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.REG, ChannelDetails.CHANNEL_TYPE.CAL.toString(), Configuration.CHANNEL_UNITS.MILLIVOLTS});
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.REG, ChannelDetails.CHANNEL_TYPE.UNCAL.toString(), Configuration.CHANNEL_UNITS.NO_UNITS});
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.BATTERY, ChannelDetails.CHANNEL_TYPE.CAL.toString(), Configuration.CHANNEL_UNITS.MILLIVOLTS});
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.BATTERY, ChannelDetails.CHANNEL_TYPE.UNCAL.toString(), Configuration.CHANNEL_UNITS.NO_UNITS});
            }
            if ((this.mEnabledSensors & 128) > 0 && (this.mEnabledSensors & 64) > 0 && (this.mEnabledSensors & 32) > 0 && is3DOrientationEnabled()) {
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.EULER_9DOF_YAW, ChannelDetails.CHANNEL_TYPE.CAL.toString(), Configuration.CHANNEL_UNITS.LOCAL});
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.EULER_9DOF_PITCH, ChannelDetails.CHANNEL_TYPE.CAL.toString(), Configuration.CHANNEL_UNITS.LOCAL});
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.EULER_9DOF_ROLL, ChannelDetails.CHANNEL_TYPE.CAL.toString(), Configuration.CHANNEL_UNITS.LOCAL});
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.QUAT_MADGE_9DOF_W, ChannelDetails.CHANNEL_TYPE.CAL.toString(), Configuration.CHANNEL_UNITS.LOCAL});
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.QUAT_MADGE_9DOF_X, ChannelDetails.CHANNEL_TYPE.CAL.toString(), Configuration.CHANNEL_UNITS.LOCAL});
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.QUAT_MADGE_9DOF_Y, ChannelDetails.CHANNEL_TYPE.CAL.toString(), Configuration.CHANNEL_UNITS.LOCAL});
                arrayList.add(new String[]{this.mShimmerUserAssignedName, Configuration.Shimmer2.ObjectClusterSensorName.QUAT_MADGE_9DOF_Z, ChannelDetails.CHANNEL_TYPE.CAL.toString(), Configuration.CHANNEL_UNITS.LOCAL});
            }
        } else if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
            return super.getListofEnabledChannelSignalsandFormats();
        }
        List<String[]> list = this.mExtraSignalProperties;
        if (list != null) {
            arrayList.addAll(list);
        }
        arrayList.addAll(getListofEnabledAlgorithmsSignalsandFormats());
        return arrayList;
    }

    @Deprecated
    public void addAlgorithm(String str, AbstractAlgorithm abstractAlgorithm) {
        if (doesAlgorithmAlreadyExist(abstractAlgorithm)) {
            return;
        }
        this.mMapOfAlgorithmModules.put(str, abstractAlgorithm);
        String[] signalOutputNameArray = abstractAlgorithm.getSignalOutputNameArray();
        String[] signalOutputFormatArray = abstractAlgorithm.getSignalOutputFormatArray();
        String[] signalOutputUnitArray = abstractAlgorithm.getSignalOutputUnitArray();
        for (int i = 0; i < signalOutputNameArray.length; i++) {
            addExtraSignalProperty(new String[]{this.mShimmerUserAssignedName, signalOutputNameArray[i], signalOutputFormatArray[i], signalOutputUnitArray[i]});
        }
    }

    @Deprecated
    public void addExtraSignalProperty(String[] strArr) {
        if (this.mExtraSignalProperties == null) {
            this.mExtraSignalProperties = new ArrayList();
        }
        this.mExtraSignalProperties.add(strArr);
    }

    @Deprecated
    public void clearExtraSignalProperties() {
        List<String[]> list = this.mExtraSignalProperties;
        if (list != null) {
            list.clear();
        }
    }

    @Deprecated
    public void removeExtraSignalProperty(String[] strArr) {
        List<String[]> list = this.mExtraSignalProperties;
        if (list != null) {
            for (int size = list.size() - 1; size > -1; size--) {
                String[] strArr2 = this.mExtraSignalProperties.get(size);
                if (strArr2[0].equals(strArr[0]) && strArr2[1].equals(strArr[1]) && strArr2[2].equals(strArr[2]) && strArr2[3].equals(strArr[3])) {
                    this.mExtraSignalProperties.remove(size);
                }
            }
        }
    }

    public void updateTimestampByteLength() {
        if (getFirmwareVersionCode() >= 6) {
            this.mTimeStampPacketByteSize = 3;
        } else {
            this.mTimeStampPacketByteSize = 2;
        }
        this.mTimeStampTicksMaxValue = (int) Math.pow(2.0d, this.mTimeStampPacketByteSize * 8);
    }

    @Deprecated
    public String[] getListofSupportedSensors() {
        return getListofSupportedSensors(getHardwareVersion());
    }

    @Deprecated
    public static String[] getListofSupportedSensors(int i) {
        if (i == 2 || i == 1) {
            return Configuration.Shimmer2.ListofCompatibleSensors;
        }
        if (i == 3) {
            return Configuration.Shimmer3.ListofCompatibleSensors;
        }
        return null;
    }

    @Override // com.shimmerresearch.driver.ShimmerDevice
    protected double calcMaxSamplingRate() {
        double dCalcMaxSamplingRate = super.calcMaxSamplingRate();
        if (getHardwareVersion() == 1 || getHardwareVersion() == 2) {
            return Math.min(1024.0d, dCalcMaxSamplingRate);
        }
        return (getHardwareVersion() == 3 || getHardwareVersion() == 5 || getHardwareVersion() == 10) ? Math.min(2048.0d, dCalcMaxSamplingRate) : dCalcMaxSamplingRate;
    }

    @Override // com.shimmerresearch.driver.ShimmerDevice
    protected void setSamplingRateSensors(double d) {
        super.setSamplingRateSensors(d);
        if (this.mShimmerVerObject.isShimmerGen3()) {
            setExGRateFromFreq(d);
        }
    }

    public boolean checkLowPowerMag() {
        if (isShimmerGen2()) {
            return this.mSensorShimmer2Mag.checkLowPowerMag();
        }
        if (isShimmerGen3()) {
            return this.mSensorLSM303.checkLowPowerMag();
        }
        if (isShimmerGen3R()) {
            return this.mSensorLIS3MDL.checkLowPowerMag();
        }
        return false;
    }

    protected void setupOrientation(int i, double d) {
        if (i == 1) {
            set3DOrientation(true);
            enableOnTheFlyGyroCal(true, (int) d, 1.2d);
        } else {
            set3DOrientation(false);
            setOnTheFlyGyroCal(false);
        }
    }

    @Override // com.shimmerresearch.driver.ShimmerDevice
    public void setDefaultShimmerConfiguration() {
        if (getHardwareVersion() != -1) {
            setDefaultShimmerName();
            clearExgConfig();
            sensorAndConfigMapsCreate();
            if (getHardwareVersion() == 3) {
                if (getExpansionBoardId() == 59) {
                    setSensorEnabledState(100, true);
                } else {
                    setSensorEnabledState(2, true);
                    setSensorEnabledState(30, true);
                    setSensorEnabledState(32, true);
                    setSensorEnabledState(3, true);
                    setIsAlgorithmEnabled(GyroOnTheFlyCalModule.GENERAL_ALGORITHM_NAME, true);
                }
            }
            this.mTrialName = ShimmerDevice.DEFAULT_EXPERIMENT_NAME;
            this.mTrialNumberOfShimmers = 1;
            this.mTrialId = 0;
            setButtonStart(true);
            setShowErrorLedsRtc(true);
            setShowErrorLedsSd(true);
            setBluetoothBaudRate(9);
            setInternalExpPower(false);
            setExGResolution(1);
            setShimmer2rMagRate(0);
            setMasterShimmer(false);
            setSingleTouch(false);
            setTCXO(false);
            setLowBattAutoStop(false);
            setPacketSize(0);
            this.mConfigByte0 = 0L;
            this.mNChannels = 0;
            this.mBufferSize = 0;
            this.mSyncBroadcastInterval = 0;
            setInitialTimeStampTicksSd(0L);
            setShimmerAndSensorsSamplingRate(51.2d);
            setLSM303MagRange(getMagRange());
            setAccelRange(getAccelRange());
            setGyroRange(getGyroRange());
            this.syncNodesList.clear();
        }
    }

    private void setDefaultShimmerName() {
        this.mShimmerUserAssignedName = ShimmerDevice.DEFAULT_SHIMMER_NAME;
        String macIdParsed = getMacIdParsed();
        if (macIdParsed.isEmpty()) {
            return;
        }
        if (this.mShimmerUserAssignedName.length() > 7) {
            this.mShimmerUserAssignedName = this.mShimmerUserAssignedName.substring(0, 7);
        }
        this.mShimmerUserAssignedName = this.mShimmerUserAssignedName + "_" + macIdParsed;
    }

    @Override // com.shimmerresearch.driver.ShimmerDevice
    public void configBytesParse(byte[] bArr, Configuration.COMMUNICATION_TYPE communication_type) {
        this.mInfoMemBytesOriginal = bArr;
        String str = "";
        if (!ConfigByteLayout.checkConfigBytesValid(bArr)) {
            setDefaultShimmerConfiguration();
            this.mShimmerUsingConfigFromInfoMem = false;
            this.mConfigBytes = bArr;
        } else {
            ConfigByteLayoutShimmer3 configByteLayoutShimmer3 = (ConfigByteLayoutShimmer3) this.mConfigByteLayout;
            this.mShimmerUsingConfigFromInfoMem = true;
            this.mConfigBytes = bArr;
            createInfoMemLayoutObjectIfNeeded();
            setShimmerAndSensorsSamplingRate(convertSamplingRateBytesToFreq((byte) (bArr[configByteLayoutShimmer3.idxShimmerSamplingRate] & configByteLayoutShimmer3.maskShimmerSamplingRate), (byte) (bArr[configByteLayoutShimmer3.idxShimmerSamplingRate + 1] & configByteLayoutShimmer3.maskShimmerSamplingRate), getSamplingClockFreq()));
            parseEnabledDerivedSensorsForMaps(configByteLayoutShimmer3, bArr);
            this.mBufferSize = bArr[configByteLayoutShimmer3.idxBufferSize] & configByteLayoutShimmer3.maskBufferSize;
            setGSRRange((bArr[configByteLayoutShimmer3.idxConfigSetupByte3] >> configByteLayoutShimmer3.bitShiftGSRRange) & configByteLayoutShimmer3.maskGSRRange);
            this.mInternalExpPower = (bArr[configByteLayoutShimmer3.idxConfigSetupByte3] >> configByteLayoutShimmer3.bitShiftEXPPowerEnable) & configByteLayoutShimmer3.maskEXPPowerEnable;
            System.arraycopy(bArr, configByteLayoutShimmer3.idxEXGADS1292RChip1Config1, this.mEXG1RegisterArray, 0, 10);
            System.arraycopy(bArr, configByteLayoutShimmer3.idxEXGADS1292RChip2Config1, this.mEXG2RegisterArray, 0, 10);
            exgBytesGetConfigFrom(this.mEXG1RegisterArray, this.mEXG2RegisterArray);
            this.mBluetoothBaudRate = bArr[configByteLayoutShimmer3.idxBtCommBaudRate] & configByteLayoutShimmer3.maskBaudRate;
            byte[] bArr2 = new byte[configByteLayoutShimmer3.lengthGeneralCalibrationBytes];
            int i = configByteLayoutShimmer3.lengthShimmerName;
            byte[] bArr3 = new byte[i];
            System.arraycopy(bArr, configByteLayoutShimmer3.idxSDShimmerName, bArr3, 0, configByteLayoutShimmer3.lengthShimmerName);
            String str2 = "";
            for (int i2 = 0; i2 < i; i2++) {
                char c = (char) bArr3[i2];
                if (!UtilShimmer.isAsciiPrintable(c)) {
                    break;
                }
                str2 = str2 + c;
            }
            int i3 = configByteLayoutShimmer3.lengthExperimentName;
            byte[] bArr4 = new byte[i3];
            System.arraycopy(bArr, configByteLayoutShimmer3.idxSDEXPIDName, bArr4, 0, configByteLayoutShimmer3.lengthExperimentName);
            for (int i4 = 0; i4 < i3; i4++) {
                char c2 = (char) bArr4[i4];
                if (!UtilShimmer.isAsciiPrintable(c2)) {
                    break;
                }
                str = str + c2;
            }
            this.mTrialName = new String(str);
            int i5 = (configByteLayoutShimmer3.lengthConfigTimeBytes - 1) * 8;
            this.mConfigTime = 0L;
            for (int i6 = 0; i6 < configByteLayoutShimmer3.lengthConfigTimeBytes; i6++) {
                this.mConfigTime += (bArr[configByteLayoutShimmer3.idxSDConfigTime0 + i6] & 255) << i5;
                i5 -= 8;
            }
            if (isSupportedSdLogSync()) {
                this.mTrialId = bArr[configByteLayoutShimmer3.idxSDMyTrialID] & 255;
                this.mTrialNumberOfShimmers = bArr[configByteLayoutShimmer3.idxSDNumOfShimmers] & 255;
            }
            if (getFirmwareIdentifier() == 2 || getFirmwareIdentifier() == 3 || getFirmwareIdentifier() == 15) {
                this.mButtonStart = (bArr[configByteLayoutShimmer3.idxSDExperimentConfig0] >> configByteLayoutShimmer3.bitShiftButtonStart) & configByteLayoutShimmer3.maskButtonStart;
                this.mDisableBluetooth = (bArr[configByteLayoutShimmer3.idxSDExperimentConfig0] >> configByteLayoutShimmer3.bitShiftDisableBluetooth) & configByteLayoutShimmer3.maskDisableBluetooth;
                setShowErrorLedsRtc((bArr[configByteLayoutShimmer3.idxSDExperimentConfig0] >> configByteLayoutShimmer3.bitShiftShowErrorLedsRwc) & configByteLayoutShimmer3.maskShowErrorLedsRwc);
                setShowErrorLedsSd((bArr[configByteLayoutShimmer3.idxSDExperimentConfig0] >> configByteLayoutShimmer3.bitShiftShowErrorLedsSd) & configByteLayoutShimmer3.maskShowErrorLedsSd);
            }
            if (isSupportedSdLogSync()) {
                this.mSyncWhenLogging = (bArr[configByteLayoutShimmer3.idxSDExperimentConfig0] >> configByteLayoutShimmer3.bitShiftTimeSyncWhenLogging) & configByteLayoutShimmer3.maskTimeSyncWhenLogging;
                this.mMasterShimmer = (bArr[configByteLayoutShimmer3.idxSDExperimentConfig0] >> configByteLayoutShimmer3.bitShiftMasterShimmer) & configByteLayoutShimmer3.maskTimeMasterShimmer;
                this.mSingleTouch = (bArr[configByteLayoutShimmer3.idxSDExperimentConfig1] >> configByteLayoutShimmer3.bitShiftSingleTouch) & configByteLayoutShimmer3.maskTimeSingleTouch;
                this.mSyncBroadcastInterval = bArr[configByteLayoutShimmer3.idxSDBTInterval] & 255;
                setTrialDurationEstimatedInSecs((bArr[configByteLayoutShimmer3.idxEstimatedExpLengthLsb] & 255) + ((bArr[configByteLayoutShimmer3.idxEstimatedExpLengthMsb] & 255) << 8));
                setTrialDurationMaximumInSecs((bArr[configByteLayoutShimmer3.idxMaxExpLengthLsb] & 255) + ((bArr[configByteLayoutShimmer3.idxMaxExpLengthMsb] & 255) << 8));
            }
            if (getFirmwareIdentifier() == 2 || getFirmwareIdentifier() == 3 || getFirmwareIdentifier() == 15) {
                this.mTCXO = (bArr[configByteLayoutShimmer3.idxSDExperimentConfig1] >> configByteLayoutShimmer3.bitShiftTCX0) & configByteLayoutShimmer3.maskTimeTCX0;
            }
            if (isVerCompatibleWithAnyOf(Configuration.Shimmer3.configOptionLowPowerAutoStop.mListOfCompatibleVersionInfo)) {
                setLowBattAutoStop((bArr[configByteLayoutShimmer3.idxSDExperimentConfig1] >> configByteLayoutShimmer3.bitShiftLowBattStop) & configByteLayoutShimmer3.maskLowBattStop);
            }
            byte[] bArr5 = new byte[configByteLayoutShimmer3.lengthMacIdBytes];
            System.arraycopy(bArr, configByteLayoutShimmer3.idxMacAddress, bArr5, 0, configByteLayoutShimmer3.lengthMacIdBytes);
            this.mMacIdFromInfoMem = UtilShimmer.bytesToHexString(bArr5);
            if (((bArr[configByteLayoutShimmer3.idxSDConfigDelayFlag] >> configByteLayoutShimmer3.bitShiftSDCfgFileWriteFlag) & configByteLayoutShimmer3.maskSDCfgFileWriteFlag) == configByteLayoutShimmer3.maskSDCfgFileWriteFlag) {
                this.mConfigFileCreationFlag = true;
            } else {
                this.mConfigFileCreationFlag = false;
            }
            if (isSupportedSdLogSync()) {
                this.syncNodesList.clear();
                for (int i7 = 0; i7 < configByteLayoutShimmer3.maxNumOfExperimentNodes; i7++) {
                    System.arraycopy(bArr, configByteLayoutShimmer3.idxNode0 + (configByteLayoutShimmer3.lengthMacIdBytes * i7), bArr5, 0, configByteLayoutShimmer3.lengthMacIdBytes);
                    if (Arrays.equals(bArr5, configByteLayoutShimmer3.invalidMacId) || Arrays.equals(bArr5, configByteLayoutShimmer3.invalidMacId)) {
                        break;
                    }
                    this.syncNodesList.add(UtilShimmer.bytesToHexString(bArr5));
                }
            }
            Iterator<AbstractSensor> it2 = this.mMapOfSensorClasses.values().iterator();
            while (it2.hasNext()) {
                it2.next().configBytesParse(this, this.mConfigBytes, communication_type);
            }
            str = str2;
        }
        checkAndCorrectShimmerName(str);
    }

    private void parseEnabledDerivedSensorsForMaps(ConfigByteLayoutShimmer3 configByteLayoutShimmer3, byte[] bArr) {
        this.mEnabledSensors = (bArr[configByteLayoutShimmer3.idxSensors0] & configByteLayoutShimmer3.maskSensors) << configByteLayoutShimmer3.byteShiftSensors0;
        this.mEnabledSensors += (bArr[configByteLayoutShimmer3.idxSensors1] & configByteLayoutShimmer3.maskSensors) << configByteLayoutShimmer3.byteShiftSensors1;
        this.mEnabledSensors += (bArr[configByteLayoutShimmer3.idxSensors2] & configByteLayoutShimmer3.maskSensors) << configByteLayoutShimmer3.byteShiftSensors2;
        if (this.mShimmerVerObject.isSupportedMpl()) {
            this.mEnabledSensors += (bArr[configByteLayoutShimmer3.idxSensors3] & 255) << configByteLayoutShimmer3.bitShiftSensors3;
            this.mEnabledSensors += (bArr[configByteLayoutShimmer3.idxSensors4] & 255) << configByteLayoutShimmer3.bitShiftSensors4;
        }
        this.mDerivedSensors = 0L;
        if (configByteLayoutShimmer3.idxDerivedSensors0 > 0 && bArr[configByteLayoutShimmer3.idxDerivedSensors0] != ((byte) configByteLayoutShimmer3.maskDerivedChannelsByte) && configByteLayoutShimmer3.idxDerivedSensors1 > 0 && bArr[configByteLayoutShimmer3.idxDerivedSensors1] != ((byte) configByteLayoutShimmer3.maskDerivedChannelsByte)) {
            this.mDerivedSensors |= (bArr[configByteLayoutShimmer3.idxDerivedSensors0] & configByteLayoutShimmer3.maskDerivedChannelsByte) << configByteLayoutShimmer3.byteShiftDerivedSensors0;
            this.mDerivedSensors |= (bArr[configByteLayoutShimmer3.idxDerivedSensors1] & configByteLayoutShimmer3.maskDerivedChannelsByte) << configByteLayoutShimmer3.byteShiftDerivedSensors1;
            if (configByteLayoutShimmer3.idxDerivedSensors2 > 0) {
                this.mDerivedSensors |= (bArr[configByteLayoutShimmer3.idxDerivedSensors2] & configByteLayoutShimmer3.maskDerivedChannelsByte) << configByteLayoutShimmer3.byteShiftDerivedSensors2;
            }
            if (this.mShimmerVerObject.isSupportedEightByteDerivedSensors()) {
                this.mDerivedSensors |= (bArr[configByteLayoutShimmer3.idxDerivedSensors3] & configByteLayoutShimmer3.maskDerivedChannelsByte) << configByteLayoutShimmer3.byteShiftDerivedSensors3;
                this.mDerivedSensors |= (bArr[configByteLayoutShimmer3.idxDerivedSensors4] & configByteLayoutShimmer3.maskDerivedChannelsByte) << configByteLayoutShimmer3.byteShiftDerivedSensors4;
                this.mDerivedSensors |= (bArr[configByteLayoutShimmer3.idxDerivedSensors5] & configByteLayoutShimmer3.maskDerivedChannelsByte) << configByteLayoutShimmer3.byteShiftDerivedSensors5;
                this.mDerivedSensors |= (bArr[configByteLayoutShimmer3.idxDerivedSensors6] & configByteLayoutShimmer3.maskDerivedChannelsByte) << configByteLayoutShimmer3.byteShiftDerivedSensors6;
                this.mDerivedSensors = ((bArr[configByteLayoutShimmer3.idxDerivedSensors7] & configByteLayoutShimmer3.maskDerivedChannelsByte) << configByteLayoutShimmer3.byteShiftDerivedSensors7) | this.mDerivedSensors;
            }
        }
        setEnabledAndDerivedSensorsAndUpdateMaps(this.mEnabledSensors, this.mDerivedSensors);
    }

    @Override // com.shimmerresearch.driver.ShimmerDevice
    public byte[] configBytesGenerate(boolean z, Configuration.COMMUNICATION_TYPE communication_type) {
        byte[] bArrHexStringToByteArray;
        ConfigByteLayoutShimmer3 configByteLayoutShimmer3 = new ConfigByteLayoutShimmer3(getFirmwareIdentifier(), getFirmwareVersionMajor(), getFirmwareVersionMinor(), getFirmwareVersionInternal(), 3);
        if (this.mShimmerVerObject.mHardwareVersion != -1) {
            configByteLayoutShimmer3 = new ConfigByteLayoutShimmer3(getFirmwareIdentifier(), getFirmwareVersionMajor(), getFirmwareVersionMinor(), getFirmwareVersionInternal(), this.mShimmerVerObject.mHardwareVersion);
        }
        byte[] bArr = (byte[]) this.mConfigBytes.clone();
        this.mConfigBytes = ConfigByteLayoutShimmer3.createConfigByteArrayEmpty(this.mConfigBytes.length);
        if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
            if (!z) {
                System.arraycopy(bArr, 0, this.mConfigBytes, 0, bArr.length > this.mConfigBytes.length ? this.mConfigBytes.length : bArr.length);
            }
            byte[] bArrConvertSamplingRateFreqToBytes = convertSamplingRateFreqToBytes(getSamplingRateShimmer(), getSamplingClockFreq());
            this.mConfigBytes[configByteLayoutShimmer3.idxShimmerSamplingRate] = bArrConvertSamplingRateFreqToBytes[0];
            int i = 1;
            this.mConfigBytes[configByteLayoutShimmer3.idxShimmerSamplingRate + 1] = bArrConvertSamplingRateFreqToBytes[1];
            this.mConfigBytes[configByteLayoutShimmer3.idxBufferSize] = 1;
            checkExgResolutionFromEnabledSensorsVar();
            refreshEnabledSensorsFromSensorMap();
            this.mConfigBytes[configByteLayoutShimmer3.idxSensors0] = (byte) ((this.mEnabledSensors >> configByteLayoutShimmer3.byteShiftSensors0) & configByteLayoutShimmer3.maskSensors);
            this.mConfigBytes[configByteLayoutShimmer3.idxSensors1] = (byte) ((this.mEnabledSensors >> configByteLayoutShimmer3.byteShiftSensors1) & configByteLayoutShimmer3.maskSensors);
            this.mConfigBytes[configByteLayoutShimmer3.idxSensors2] = (byte) ((this.mEnabledSensors >> configByteLayoutShimmer3.byteShiftSensors2) & configByteLayoutShimmer3.maskSensors);
            this.mConfigBytes[configByteLayoutShimmer3.idxConfigSetupByte0] = 0;
            this.mConfigBytes[configByteLayoutShimmer3.idxConfigSetupByte1] = 0;
            this.mConfigBytes[configByteLayoutShimmer3.idxConfigSetupByte2] = 0;
            this.mConfigBytes[configByteLayoutShimmer3.idxConfigSetupByte3] = 0;
            byte[] bArr2 = this.mConfigBytes;
            int i2 = configByteLayoutShimmer3.idxConfigSetupByte3;
            bArr2[i2] = (byte) (bArr2[i2] | ((byte) ((getGSRRange() & configByteLayoutShimmer3.maskGSRRange) << configByteLayoutShimmer3.bitShiftGSRRange)));
            checkIfInternalExpBrdPowerIsNeeded();
            byte[] bArr3 = this.mConfigBytes;
            int i3 = configByteLayoutShimmer3.idxConfigSetupByte3;
            bArr3[i3] = (byte) (bArr3[i3] | ((byte) ((this.mInternalExpPower & configByteLayoutShimmer3.maskEXPPowerEnable) << configByteLayoutShimmer3.bitShiftEXPPowerEnable)));
            exgBytesGetFromConfig();
            System.arraycopy(this.mEXG1RegisterArray, 0, this.mConfigBytes, configByteLayoutShimmer3.idxEXGADS1292RChip1Config1, 10);
            System.arraycopy(this.mEXG2RegisterArray, 0, this.mConfigBytes, configByteLayoutShimmer3.idxEXGADS1292RChip2Config1, 10);
            this.mConfigBytes[configByteLayoutShimmer3.idxBtCommBaudRate] = (byte) (this.mBluetoothBaudRate & configByteLayoutShimmer3.maskBaudRate);
            if (configByteLayoutShimmer3.idxDerivedSensors0 > 0 && configByteLayoutShimmer3.idxDerivedSensors1 > 0) {
                this.mConfigBytes[configByteLayoutShimmer3.idxDerivedSensors0] = (byte) ((this.mDerivedSensors >> configByteLayoutShimmer3.byteShiftDerivedSensors0) & configByteLayoutShimmer3.maskDerivedChannelsByte);
                this.mConfigBytes[configByteLayoutShimmer3.idxDerivedSensors1] = (byte) ((this.mDerivedSensors >> configByteLayoutShimmer3.byteShiftDerivedSensors1) & configByteLayoutShimmer3.maskDerivedChannelsByte);
                if (configByteLayoutShimmer3.idxDerivedSensors2 > 0) {
                    this.mConfigBytes[configByteLayoutShimmer3.idxDerivedSensors2] = (byte) ((this.mDerivedSensors >> configByteLayoutShimmer3.byteShiftDerivedSensors2) & configByteLayoutShimmer3.maskDerivedChannelsByte);
                }
                if (this.mShimmerVerObject.isSupportedEightByteDerivedSensors()) {
                    this.mConfigBytes[configByteLayoutShimmer3.idxDerivedSensors3] = (byte) ((this.mDerivedSensors >> configByteLayoutShimmer3.byteShiftDerivedSensors3) & configByteLayoutShimmer3.maskDerivedChannelsByte);
                    this.mConfigBytes[configByteLayoutShimmer3.idxDerivedSensors4] = (byte) ((this.mDerivedSensors >> configByteLayoutShimmer3.byteShiftDerivedSensors4) & configByteLayoutShimmer3.maskDerivedChannelsByte);
                    this.mConfigBytes[configByteLayoutShimmer3.idxDerivedSensors5] = (byte) ((this.mDerivedSensors >> configByteLayoutShimmer3.byteShiftDerivedSensors5) & configByteLayoutShimmer3.maskDerivedChannelsByte);
                    this.mConfigBytes[configByteLayoutShimmer3.idxDerivedSensors6] = (byte) ((this.mDerivedSensors >> configByteLayoutShimmer3.byteShiftDerivedSensors6) & configByteLayoutShimmer3.maskDerivedChannelsByte);
                    this.mConfigBytes[configByteLayoutShimmer3.idxDerivedSensors7] = (byte) ((this.mDerivedSensors >> configByteLayoutShimmer3.byteShiftDerivedSensors7) & configByteLayoutShimmer3.maskDerivedChannelsByte);
                }
            }
            for (int i4 = 0; i4 < configByteLayoutShimmer3.lengthShimmerName; i4++) {
                if (i4 < this.mShimmerUserAssignedName.length()) {
                    this.mConfigBytes[configByteLayoutShimmer3.idxSDShimmerName + i4] = (byte) this.mShimmerUserAssignedName.charAt(i4);
                } else {
                    this.mConfigBytes[configByteLayoutShimmer3.idxSDShimmerName + i4] = -1;
                }
            }
            for (int i5 = 0; i5 < configByteLayoutShimmer3.lengthExperimentName; i5++) {
                if (i5 < this.mTrialName.length()) {
                    this.mConfigBytes[configByteLayoutShimmer3.idxSDEXPIDName + i5] = (byte) this.mTrialName.charAt(i5);
                } else {
                    this.mConfigBytes[configByteLayoutShimmer3.idxSDEXPIDName + i5] = -1;
                }
            }
            this.mConfigBytes[configByteLayoutShimmer3.idxSDConfigTime0] = (byte) ((this.mConfigTime >> configByteLayoutShimmer3.bitShiftSDConfigTime0) & 255);
            this.mConfigBytes[configByteLayoutShimmer3.idxSDConfigTime1] = (byte) ((this.mConfigTime >> configByteLayoutShimmer3.bitShiftSDConfigTime1) & 255);
            this.mConfigBytes[configByteLayoutShimmer3.idxSDConfigTime2] = (byte) ((this.mConfigTime >> configByteLayoutShimmer3.bitShiftSDConfigTime2) & 255);
            this.mConfigBytes[configByteLayoutShimmer3.idxSDConfigTime3] = (byte) ((this.mConfigTime >> configByteLayoutShimmer3.bitShiftSDConfigTime3) & 255);
            if (isSupportedSdLogSync()) {
                this.mConfigBytes[configByteLayoutShimmer3.idxSDMyTrialID] = (byte) (this.mTrialId & 255);
                this.mConfigBytes[configByteLayoutShimmer3.idxSDNumOfShimmers] = (byte) (this.mTrialNumberOfShimmers & 255);
            }
            if (getFirmwareIdentifier() == 2 || getFirmwareIdentifier() == 3 || getFirmwareIdentifier() == 15) {
                this.mConfigBytes[configByteLayoutShimmer3.idxSDExperimentConfig0] = (byte) ((this.mButtonStart & configByteLayoutShimmer3.maskButtonStart) << configByteLayoutShimmer3.bitShiftButtonStart);
                byte[] bArr4 = this.mConfigBytes;
                int i6 = configByteLayoutShimmer3.idxSDExperimentConfig0;
                bArr4[i6] = (byte) (bArr4[i6] | ((byte) ((this.mDisableBluetooth & configByteLayoutShimmer3.maskDisableBluetooth) << configByteLayoutShimmer3.bitShiftDisableBluetooth)));
                if (this.isOverrideShowErrorLedsRtc) {
                    byte[] bArr5 = this.mConfigBytes;
                    int i7 = configByteLayoutShimmer3.idxSDExperimentConfig0;
                    bArr5[i7] = (byte) (bArr5[i7] | ((byte) (configByteLayoutShimmer3.maskShowErrorLedsRwc << configByteLayoutShimmer3.bitShiftShowErrorLedsRwc)));
                } else {
                    byte[] bArr6 = this.mConfigBytes;
                    int i8 = configByteLayoutShimmer3.idxSDExperimentConfig0;
                    bArr6[i8] = (byte) (bArr6[i8] | ((byte) ((this.mShowErrorLedsRtc & configByteLayoutShimmer3.maskShowErrorLedsRwc) << configByteLayoutShimmer3.bitShiftShowErrorLedsRwc)));
                }
                if (this.isOverrideShowErrorLedsSd) {
                    byte[] bArr7 = this.mConfigBytes;
                    int i9 = configByteLayoutShimmer3.idxSDExperimentConfig0;
                    bArr7[i9] = (byte) (bArr7[i9] | ((byte) (configByteLayoutShimmer3.maskShowErrorLedsSd << configByteLayoutShimmer3.bitShiftShowErrorLedsSd)));
                } else {
                    byte[] bArr8 = this.mConfigBytes;
                    int i10 = configByteLayoutShimmer3.idxSDExperimentConfig0;
                    bArr8[i10] = (byte) (bArr8[i10] | ((byte) ((this.mShowErrorLedsSd & configByteLayoutShimmer3.maskShowErrorLedsSd) << configByteLayoutShimmer3.bitShiftShowErrorLedsSd)));
                }
            }
            this.mConfigBytes[configByteLayoutShimmer3.idxSDExperimentConfig1] = 0;
            if (isSupportedSdLogSync()) {
                byte[] bArr9 = this.mConfigBytes;
                int i11 = configByteLayoutShimmer3.idxSDExperimentConfig0;
                bArr9[i11] = (byte) (bArr9[i11] | ((byte) ((this.mSyncWhenLogging & configByteLayoutShimmer3.maskTimeSyncWhenLogging) << configByteLayoutShimmer3.bitShiftTimeSyncWhenLogging)));
                byte[] bArr10 = this.mConfigBytes;
                int i12 = configByteLayoutShimmer3.idxSDExperimentConfig0;
                bArr10[i12] = (byte) (bArr10[i12] | ((byte) ((this.mMasterShimmer & configByteLayoutShimmer3.maskTimeMasterShimmer) << configByteLayoutShimmer3.bitShiftMasterShimmer)));
                byte[] bArr11 = this.mConfigBytes;
                int i13 = configByteLayoutShimmer3.idxSDExperimentConfig1;
                bArr11[i13] = (byte) (bArr11[i13] | ((byte) ((this.mSingleTouch & configByteLayoutShimmer3.maskTimeSingleTouch) << configByteLayoutShimmer3.bitShiftSingleTouch)));
                this.mConfigBytes[configByteLayoutShimmer3.idxSDBTInterval] = (byte) (this.mSyncBroadcastInterval & 255);
                this.mConfigBytes[configByteLayoutShimmer3.idxEstimatedExpLengthLsb] = (byte) (getTrialDurationEstimatedInSecs() & 255);
                this.mConfigBytes[configByteLayoutShimmer3.idxEstimatedExpLengthMsb] = (byte) ((getTrialDurationEstimatedInSecs() >> 8) & 255);
                this.mConfigBytes[configByteLayoutShimmer3.idxMaxExpLengthLsb] = (byte) (getTrialDurationMaximumInSecs() & 255);
                this.mConfigBytes[configByteLayoutShimmer3.idxMaxExpLengthMsb] = (byte) ((getTrialDurationMaximumInSecs() >> 8) & 255);
            }
            if (getFirmwareIdentifier() == 2 || getFirmwareIdentifier() == 3 || getFirmwareIdentifier() == 15) {
                byte[] bArr12 = this.mConfigBytes;
                int i14 = configByteLayoutShimmer3.idxSDExperimentConfig1;
                bArr12[i14] = (byte) (bArr12[i14] | ((byte) ((this.mTCXO & configByteLayoutShimmer3.maskTimeTCX0) << configByteLayoutShimmer3.bitShiftTCX0)));
            }
            if (isVerCompatibleWithAnyOf(Configuration.Shimmer3.configOptionLowPowerAutoStop.mListOfCompatibleVersionInfo)) {
                byte[] bArr13 = this.mConfigBytes;
                int i15 = configByteLayoutShimmer3.idxSDExperimentConfig1;
                byte b = bArr13[i15];
                if (!isLowBattAutoStop()) {
                    int i16 = configByteLayoutShimmer3.maskLowBattStop;
                    i = 0;
                }
                bArr13[i15] = (byte) (b | ((byte) (i << configByteLayoutShimmer3.bitShiftLowBattStop)));
            }
            if ((getFirmwareIdentifier() == 3 || getFirmwareIdentifier() == 2 || getFirmwareIdentifier() == 15) && z) {
                System.arraycopy(configByteLayoutShimmer3.invalidMacId, 0, this.mConfigBytes, configByteLayoutShimmer3.idxMacAddress, configByteLayoutShimmer3.lengthMacIdBytes);
                this.mConfigBytes[configByteLayoutShimmer3.idxSDConfigDelayFlag] = 0;
                int i17 = this.mConfigFileCreationFlag ? configByteLayoutShimmer3.maskSDCfgFileWriteFlag << configByteLayoutShimmer3.bitShiftSDCfgFileWriteFlag : 0;
                byte[] bArr14 = this.mConfigBytes;
                int i18 = configByteLayoutShimmer3.idxSDConfigDelayFlag;
                bArr14[i18] = (byte) (((byte) i17) | bArr14[i18]);
                byte[] bArr15 = this.mConfigBytes;
                int i19 = configByteLayoutShimmer3.idxSDConfigDelayFlag;
                bArr15[i19] = (byte) (bArr15[i19] | configByteLayoutShimmer3.bitShiftSDCfgFileWriteFlag);
            }
            if (isSupportedSdLogSync()) {
                for (int i20 = 0; i20 < configByteLayoutShimmer3.maxNumOfExperimentNodes; i20++) {
                    if (this.syncNodesList.size() > 0 && i20 < this.syncNodesList.size() && this.mSyncWhenLogging > 0) {
                        bArrHexStringToByteArray = UtilShimmer.hexStringToByteArray(this.syncNodesList.get(i20));
                    } else {
                        bArrHexStringToByteArray = configByteLayoutShimmer3.invalidMacId;
                    }
                    System.arraycopy(bArrHexStringToByteArray, 0, this.mConfigBytes, configByteLayoutShimmer3.idxNode0 + (configByteLayoutShimmer3.lengthMacIdBytes * i20), configByteLayoutShimmer3.lengthMacIdBytes);
                }
            }
            Iterator<AbstractSensor> it2 = this.mMapOfSensorClasses.values().iterator();
            while (it2.hasNext()) {
                it2.next().configBytesGenerate(this, this.mConfigBytes, communication_type);
            }
        }
        if (getFirmwareIdentifier() == 15) {
            byte[] bArr16 = this.mConfigBytes;
            int i21 = configByteLayoutShimmer3.idxConfigSetupByte0;
            bArr16[i21] = (byte) (bArr16[i21] & (~((byte) (configByteLayoutShimmer3.maskLSM303DLHCAccelSamplingRate << configByteLayoutShimmer3.bitShiftLSM303DLHCAccelSamplingRate))));
            byte[] bArr17 = this.mConfigBytes;
            int i22 = configByteLayoutShimmer3.idxConfigSetupByte0;
            bArr17[i22] = (byte) (bArr17[i22] | ((byte) ((configByteLayoutShimmer3.maskLSM303DLHCAccelSamplingRate & 5) << configByteLayoutShimmer3.bitShiftLSM303DLHCAccelSamplingRate)));
            byte[] bArr18 = this.mConfigBytes;
            int i23 = configByteLayoutShimmer3.idxConfigSetupByte1;
            bArr18[i23] = (byte) (bArr18[i23] & (~((byte) (configByteLayoutShimmer3.maskMPU9150AccelGyroSamplingRate << configByteLayoutShimmer3.bitShiftMPU9150AccelGyroSamplingRate))));
            byte[] bArr19 = this.mConfigBytes;
            int i24 = configByteLayoutShimmer3.idxConfigSetupByte1;
            bArr19[i24] = (byte) (bArr19[i24] | ((byte) ((configByteLayoutShimmer3.maskMPU9150AccelGyroSamplingRate & 155) << configByteLayoutShimmer3.bitShiftMPU9150AccelGyroSamplingRate)));
            byte[] bArr20 = this.mConfigBytes;
            int i25 = configByteLayoutShimmer3.idxConfigSetupByte2;
            bArr20[i25] = (byte) (bArr20[i25] & (~((byte) (configByteLayoutShimmer3.maskLSM303DLHCMagSamplingRate << configByteLayoutShimmer3.bitShiftLSM303DLHCMagSamplingRate))));
            byte[] bArr21 = this.mConfigBytes;
            int i26 = configByteLayoutShimmer3.idxConfigSetupByte2;
            bArr21[i26] = (byte) (bArr21[i26] | ((byte) ((configByteLayoutShimmer3.maskLSM303DLHCMagSamplingRate & 6) << configByteLayoutShimmer3.bitShiftLSM303DLHCMagSamplingRate)));
        }
        return this.mConfigBytes;
    }

    @Override // com.shimmerresearch.driver.ShimmerDevice
    public void handleSpecCasesUpdateEnabledSensors() {
        updateEnabledSensorsFromExgResolution();
    }

    @Override // com.shimmerresearch.driver.ShimmerDevice
    public void sensorAndConfigMapsCreate() {
        createMapOfSensorClasses();
        super.sensorAndConfigMapsCreateCommon();
    }

    private void updateSensorMapChannelsFromChannelMap(LinkedHashMap<Integer, SensorDetails> linkedHashMap) {
        for (SensorDetails sensorDetails : linkedHashMap.values()) {
            Iterator<String> it2 = sensorDetails.mSensorDetailsRef.mListOfChannelsRef.iterator();
            while (it2.hasNext()) {
                ChannelDetails channelDetails = this.mChannelMap.get(it2.next());
                if (channelDetails != null) {
                    sensorDetails.mListOfChannels.add(channelDetails);
                }
            }
        }
    }

    private void createMapOfSensorClasses() {
        this.mMapOfSensorClasses = new LinkedHashMap<>();
        if (isShimmerGen2()) {
            SensorMMA736x sensorMMA736x = new SensorMMA736x(this);
            this.mSensorMMA736x = sensorMMA736x;
            addSensorClass(sensorMMA736x);
            SensorShimmer2Mag sensorShimmer2Mag = new SensorShimmer2Mag(this);
            this.mSensorShimmer2Mag = sensorShimmer2Mag;
            addSensorClass(sensorShimmer2Mag);
            SensorShimmer2Gyro sensorShimmer2Gyro = new SensorShimmer2Gyro(this);
            this.mSensorShimmer2Gyro = sensorShimmer2Gyro;
            addSensorClass(sensorShimmer2Gyro);
            return;
        }
        if (isShimmerGenGq()) {
            addSensorClass(AbstractSensor.SENSORS.GSR, new SensorGSR(this.mShimmerVerObject));
            addSensorClass(AbstractSensor.SENSORS.ECG_TO_HR, new SensorECGToHRFw(this.mShimmerVerObject));
            return;
        }
        if (isShimmerGen3()) {
            if (isSupportedNoImuSensors()) {
                return;
            }
            if (isSupportedNewImuSensors()) {
                SensorBMP280 sensorBMP280 = new SensorBMP280(this);
                this.mSensorBMPX80 = sensorBMP280;
                addSensorClass(sensorBMP280);
                SensorLSM303AH sensorLSM303AH = new SensorLSM303AH(this);
                this.mSensorLSM303 = sensorLSM303AH;
                addSensorClass(sensorLSM303AH);
                SensorKionixKXTC92050 sensorKionixKXTC92050 = new SensorKionixKXTC92050(this);
                this.mSensorKionixAccel = sensorKionixKXTC92050;
                addSensorClass(sensorKionixKXTC92050);
                SensorMPU9250 sensorMPU9250 = new SensorMPU9250(this);
                this.mSensorMpu9x50 = sensorMPU9250;
                addSensorClass(sensorMPU9250);
                return;
            }
            SensorBMP180 sensorBMP180 = new SensorBMP180(this);
            this.mSensorBMPX80 = sensorBMP180;
            addSensorClass(sensorBMP180);
            SensorLSM303DLHC sensorLSM303DLHC = new SensorLSM303DLHC(this);
            this.mSensorLSM303 = sensorLSM303DLHC;
            addSensorClass(sensorLSM303DLHC);
            SensorKionixKXRB52042 sensorKionixKXRB52042 = new SensorKionixKXRB52042(this);
            this.mSensorKionixAccel = sensorKionixKXRB52042;
            addSensorClass(sensorKionixKXRB52042);
            SensorMPU9150 sensorMPU9150 = new SensorMPU9150(this);
            this.mSensorMpu9x50 = sensorMPU9150;
            addSensorClass(sensorMPU9150);
            return;
        }
        if (isShimmerGen3R()) {
            SensorBMP390 sensorBMP390 = new SensorBMP390(this);
            this.mSensorBMPX80 = sensorBMP390;
            addSensorClass(sensorBMP390);
            SensorLSM6DSV sensorLSM6DSV = new SensorLSM6DSV(this);
            this.mSensorLSM6DSV = sensorLSM6DSV;
            addSensorClass(sensorLSM6DSV);
            if (isShimmer3RwithHighGAccelSupport()) {
                SensorADXL371 sensorADXL371 = new SensorADXL371(this);
                this.mSensorADXL371 = sensorADXL371;
                addSensorClass(sensorADXL371);
            }
            SensorLIS2DW12 sensorLIS2DW12 = new SensorLIS2DW12(this);
            this.mSensorLIS2DW12 = sensorLIS2DW12;
            addSensorClass(sensorLIS2DW12);
            if (isShimmer3RwithAltMagSupport()) {
                SensorLIS3MDL sensorLIS3MDL = new SensorLIS3MDL(this);
                this.mSensorLIS3MDL = sensorLIS3MDL;
                addSensorClass(sensorLIS3MDL);
            }
            SensorLIS2MDL sensorLIS2MDL = new SensorLIS2MDL(this);
            this.mSensorLIS2MDL = sensorLIS2MDL;
            addSensorClass(sensorLIS2MDL);
        }
    }

    @Override // com.shimmerresearch.driver.ShimmerDevice
    protected void handleSpecialCasesAfterSensorMapCreate() {
        super.handleSpecialCasesAfterSensorMapCreate();
        if (getHardwareVersion() != -1) {
            if (isShimmerGen2()) {
                Map<Integer, SensorDetailsRef> map = Configuration.Shimmer2.mSensorMapRef;
                for (Integer num : map.keySet()) {
                    this.mSensorMap.put(num, new SensorDetails(false, 0L, map.get(num)));
                }
                updateSensorMapChannelsFromChannelMap(this.mSensorMap);
            } else if (isShimmerGen3() || isShimmerGen3R() || isShimmerGenGq()) {
                if (isShimmerGen3R()) {
                    this.mChannelMap.putAll(Configuration.Shimmer3.mChannelMapRef3r);
                } else {
                    this.mChannelMap.putAll(Configuration.Shimmer3.mChannelMapRef);
                }
                if (isShimmerGenGq()) {
                    this.mChannelMap.remove(SensorGSR.ObjectClusterSensorName.GSR_RESISTANCE);
                    this.mChannelMap.remove(SensorGSR.ObjectClusterSensorName.GSR_ADC_VALUE);
                    this.mChannelMap.remove(SensorGSR.ObjectClusterSensorName.GSR_CONDUCTANCE);
                    this.mChannelMap.remove(SensorGSR.ObjectClusterSensorName.GSR_RANGE);
                    this.mChannelMap.put(SensorGSR.channelGsrMicroSiemensGq.mObjectClusterName, SensorGSR.channelGsrMicroSiemensGq);
                    this.mChannelMap.remove(SensorEXG.ObjectClusterSensorName.ECG_LA_RA_24BIT);
                    this.mChannelMap.putAll(SensorEXG.mChannelMapRefGq);
                }
                if (getFirmwareVersionCode() >= 6) {
                    this.mChannelMap.remove("Timestamp");
                    this.mChannelMap.put("Timestamp", SensorShimmerClock.channelShimmerClock3byte);
                }
                if (isShimmerGen3() || isShimmerGen3R()) {
                    this.mSensorMap.putAll(createSensorMapShimmer3());
                } else if (isShimmerGenGq()) {
                    LinkedHashMap<Integer, SensorDetails> linkedHashMap = new LinkedHashMap<>();
                    linkedHashMap.put(Integer.valueOf(Configuration.Shimmer3.SENSOR_ID.SHIMMER_TIMESTAMP), new SensorDetails(false, 0L, SensorShimmerClock.sensorShimmerClock));
                    linkedHashMap.put(100, new SensorDetails(false, 0L, SensorEXG.sDRefEcgGq));
                    updateSensorMapChannelsFromChannelMap(linkedHashMap);
                    this.mSensorMap.putAll(linkedHashMap);
                }
                createSensorGroupMapShimmer3();
                if (getExpansionBoardId() == 59) {
                    this.mSensorGroupingMap.remove(Integer.valueOf(Configuration.Shimmer3.LABEL_SENSOR_TILE.EXTERNAL_EXPANSION_ADC.ordinal()));
                }
                createConfigOptionMapShimmer3();
            } else if (getHardwareVersion() == 5) {
                Map<Integer, SensorDetailsRef> map2 = Configuration.ShimmerGqBle.mSensorMapRef;
                for (Integer num2 : map2.keySet()) {
                    this.mSensorMap.put(num2, new SensorDetails(false, 0L, map2.get(num2)));
                }
                this.mSensorGroupingMap.putAll(Configuration.ShimmerGqBle.mSensorGroupingMapRef);
                this.mConfigOptionsMapSensors.putAll(Configuration.ShimmerGqBle.mConfigOptionsMapRef);
                updateSensorMapChannelsFromChannelMap(this.mSensorMap);
            }
        }
        SensorEXG.updateSensorMapForExgResolution(this, getExGResolution());
    }

    @Override // com.shimmerresearch.driver.ShimmerDevice
    public void generateParserMap() {
        SensorEXG.updateSensorMapForExgResolution(this, getExGResolution());
        super.generateParserMap();
    }

    /* JADX WARN: Removed duplicated region for block: B:37:0x008a  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    private java.util.LinkedHashMap<java.lang.Integer, com.shimmerresearch.driverUtilities.SensorDetails> createSensorMapShimmer3() {
        /*
            r10 = this;
            java.util.LinkedHashMap r0 = new java.util.LinkedHashMap
            r0.<init>()
            com.shimmerresearch.driver.ConfigByteLayout r1 = r10.getConfigByteLayout()
            if (r1 == 0) goto L9b
            boolean r2 = r10.isShimmerGen3R()
            if (r2 == 0) goto L14
            java.util.Map<java.lang.Integer, com.shimmerresearch.driverUtilities.SensorDetailsRef> r2 = com.shimmerresearch.driver.Configuration.Shimmer3.mSensorMapRef3r
            goto L16
        L14:
            java.util.Map<java.lang.Integer, com.shimmerresearch.driverUtilities.SensorDetailsRef> r2 = com.shimmerresearch.driver.Configuration.Shimmer3.mSensorMapRef
        L16:
            java.util.Set r3 = r2.keySet()
            java.util.Iterator r3 = r3.iterator()
        L1e:
            boolean r4 = r3.hasNext()
            if (r4 == 0) goto L9b
            java.lang.Object r4 = r3.next()
            java.lang.Integer r4 = (java.lang.Integer) r4
            boolean r5 = r1 instanceof com.shimmerresearch.driver.shimmer2r3.ConfigByteLayoutShimmer3
            r6 = 0
            if (r5 == 0) goto L8a
            r5 = r1
            com.shimmerresearch.driver.shimmer2r3.ConfigByteLayoutShimmer3 r5 = (com.shimmerresearch.driver.shimmer2r3.ConfigByteLayoutShimmer3) r5
            int r7 = r4.intValue()
            r8 = 16
            if (r7 != r8) goto L3d
            int r5 = r5.maskDerivedChannelResAmp
            goto L8b
        L3d:
            int r7 = r4.intValue()
            r8 = 104(0x68, float:1.46E-43)
            if (r7 != r8) goto L48
            int r5 = r5.maskDerivedChannelSkinTemp
            goto L8b
        L48:
            int r7 = r4.intValue()
            r8 = 8
            if (r7 != r8) goto L53
            int r5 = r5.maskDerivedChannelPpg_ADC12ADC13
            goto L8b
        L53:
            int r7 = r4.intValue()
            r8 = 11
            if (r7 != r8) goto L5e
            int r5 = r5.maskDerivedChannelPpg_ADC12ADC13
            goto L8b
        L5e:
            int r7 = r4.intValue()
            r8 = 9
            if (r7 != r8) goto L69
            int r5 = r5.maskDerivedChannelPpg1_ADC12ADC13
            goto L8b
        L69:
            int r7 = r4.intValue()
            r8 = 12
            if (r7 != r8) goto L74
            int r5 = r5.maskDerivedChannelPpg1_ADC12ADC13
            goto L8b
        L74:
            int r7 = r4.intValue()
            r8 = 18
            if (r7 != r8) goto L7f
            int r5 = r5.maskDerivedChannelPpg2_ADC1ADC14
            goto L8b
        L7f:
            int r7 = r4.intValue()
            r8 = 14
            if (r7 != r8) goto L8a
            int r5 = r5.maskDerivedChannelPpg2_ADC1ADC14
            goto L8b
        L8a:
            r5 = 0
        L8b:
            com.shimmerresearch.driverUtilities.SensorDetails r7 = new com.shimmerresearch.driverUtilities.SensorDetails
            long r8 = (long) r5
            java.lang.Object r5 = r2.get(r4)
            com.shimmerresearch.driverUtilities.SensorDetailsRef r5 = (com.shimmerresearch.driverUtilities.SensorDetailsRef) r5
            r7.<init>(r6, r8, r5)
            r0.put(r4, r7)
            goto L1e
        L9b:
            r10.updateSensorMapChannelsFromChannelMap(r0)
            return r0
        */
        throw new UnsupportedOperationException("Method not decompiled: com.shimmerresearch.driver.ShimmerObject.createSensorMapShimmer3():java.util.LinkedHashMap");
    }

    private void createSensorGroupMapShimmer3() {
        Map<Integer, SensorGroupingDetails> map;
        if (isShimmerGen3R()) {
            map = Configuration.Shimmer3.mSensorGroupingMapRef3r;
        } else {
            map = Configuration.Shimmer3.mSensorGroupingMapRef;
        }
        loadCompatibleSensorGroupEntries(map);
    }

    private void createConfigOptionMapShimmer3() {
        Map<String, ConfigOptionDetailsSensor> map;
        generateConfigOptionsMap();
        if (isShimmerGen3R()) {
            map = Configuration.Shimmer3.mConfigOptionsMapRef3r;
        } else {
            map = Configuration.Shimmer3.mConfigOptionsMapRef;
        }
        loadCompatibleConfigOptionGroupEntries(map);
    }

    @Override // com.shimmerresearch.driver.ShimmerDevice
    public void checkConfigOptionValues(String str) {
        if (this.mConfigOptionsMapSensors == null || this.mConfigOptionsMapSensors.get(str) == null) {
            return;
        }
        if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
            if (str.equals(SensorEXG.GuiLabelConfig.EXG_RESPIRATION_DETECT_PHASE)) {
                checkWhichExgRespPhaseValuesToUse();
                return;
            } else {
                if (str.equals(SensorEXG.GuiLabelConfig.EXG_REFERENCE_ELECTRODE)) {
                    checkWhichExgRefElectrodeValuesToUse();
                    return;
                }
                return;
            }
        }
        getHardwareVersion();
    }

    @Override // com.shimmerresearch.driver.ShimmerDevice
    public void handleSpecCasesBeforeSensorMapUpdateGeneral() {
        checkExgResolutionFromEnabledSensorsVar();
    }

    @Override // com.shimmerresearch.driver.ShimmerDevice
    public boolean handleSpecCasesBeforeSensorMapUpdatePerSensor(Integer num) {
        if (num.intValue() == 100 || num.intValue() == 101 || num.intValue() == 102 || num.intValue() == 116 || num.intValue() == 103 || num.intValue() == 106) {
            this.mSensorMap.get(num).setIsEnabled(false);
            return true;
        }
        if (num.intValue() == 7 || num.intValue() == 10 || num.intValue() == 17 || num.intValue() == 13) {
            if (this.mSensorMap.get(num).mSensorDetailsRef.mListOfSensorIdsConflicting != null) {
                for (Integer num2 : this.mSensorMap.get(num).mSensorDetailsRef.mListOfSensorIdsConflicting) {
                    if (this.mSensorMap.get(num2) != null && this.mSensorMap.get(num2).isDerivedChannel() && (this.mDerivedSensors & this.mSensorMap.get(num2).mDerivedSensorBitmapID) == this.mSensorMap.get(num2).mDerivedSensorBitmapID) {
                        this.mSensorMap.get(num).setIsEnabled(false);
                        return true;
                    }
                }
            } else {
                System.out.println("2r:null");
            }
        } else if (num.intValue() == -100) {
            this.mSensorMap.get(num).setIsEnabled(true);
            return true;
        }
        return false;
    }

    @Override // com.shimmerresearch.driver.ShimmerDevice
    public void handleSpecCasesAfterSensorMapUpdateFromEnabledSensors() {
        checkExgResolutionFromEnabledSensorsVar();
        internalCheckExgModeAndUpdateSensorMap();
        if (this.mSensorMap.get(8) != null) {
            if (this.mSensorMap.get(8).isEnabled() || this.mSensorMap.get(11).isEnabled()) {
                this.mSensorMap.get(105).setIsEnabled(true);
                if (this.mSensorMap.get(8).isEnabled()) {
                    this.mPpgAdcSelectionGsrBoard = SensorPPG.ListOfPpgAdcSelectionConfigValues[1].intValue();
                } else if (this.mSensorMap.get(11).isEnabled()) {
                    this.mPpgAdcSelectionGsrBoard = SensorPPG.ListOfPpgAdcSelectionConfigValues[0].intValue();
                }
            } else if (this.mSensorMap.get(105) != null) {
                this.mSensorMap.get(105).setIsEnabled(false);
            } else {
                System.out.println("2r:null");
            }
        }
        if (this.mSensorMap.get(9) != null) {
            if (this.mSensorMap.get(9).isEnabled() || this.mSensorMap.get(12).isEnabled()) {
                this.mSensorMap.get(110).setIsEnabled(true);
                if (this.mSensorMap.get(9).isEnabled()) {
                    this.mPpg1AdcSelectionProto3DeluxeBoard = SensorPPG.ListOfPpg1AdcSelectionConfigValues[1].intValue();
                } else if (this.mSensorMap.get(12).isEnabled()) {
                    this.mPpg1AdcSelectionProto3DeluxeBoard = SensorPPG.ListOfPpg1AdcSelectionConfigValues[0].intValue();
                }
            } else if (this.mSensorMap.get(110) != null) {
                this.mSensorMap.get(110).setIsEnabled(false);
            } else {
                System.out.println("2r:null");
            }
        }
        if (this.mSensorMap.get(18) != null) {
            if (this.mSensorMap.get(18).isEnabled() || this.mSensorMap.get(14).isEnabled()) {
                this.mSensorMap.get(113).setIsEnabled(true);
                if (this.mSensorMap.get(18).isEnabled()) {
                    this.mPpg2AdcSelectionProto3DeluxeBoard = SensorPPG.ListOfPpg2AdcSelectionConfigValues[0].intValue();
                } else if (this.mSensorMap.get(14).isEnabled()) {
                    this.mPpg2AdcSelectionProto3DeluxeBoard = SensorPPG.ListOfPpg2AdcSelectionConfigValues[1].intValue();
                }
            } else if (this.mSensorMap.get(113) != null) {
                this.mSensorMap.get(113).setIsEnabled(false);
            } else {
                System.out.println("2r:null");
            }
        }
        enableShimmer3Timestamps();
    }

    private void enableShimmer3Timestamps() {
        SensorDetails sensorDetails = this.mSensorMap.get(Integer.valueOf(Configuration.Shimmer3.SENSOR_ID.SHIMMER_TIMESTAMP));
        if (sensorDetails != null) {
            sensorDetails.setIsEnabled(true);
        }
        SensorDetails sensorDetails2 = this.mSensorMap.get(Integer.valueOf(Configuration.Shimmer3.SENSOR_ID.HOST_SYSTEM_TIMESTAMP));
        if (sensorDetails2 != null) {
            sensorDetails2.setIsEnabled(true);
        }
        SensorDetails sensorDetails3 = this.mSensorMap.get(-100);
        if (sensorDetails3 != null) {
            sensorDetails3.setIsEnabled(true);
        }
    }

    public boolean checkIfSensorEnabled(int i) {
        if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
            if (i == 105) {
                return super.isSensorEnabled(8) || super.isSensorEnabled(11);
            }
            if (i == 110) {
                return super.isSensorEnabled(9) || super.isSensorEnabled(12);
            }
            if (i == 113) {
                return super.isSensorEnabled(18) || super.isSensorEnabled(14);
            }
        }
        return super.isSensorEnabled(i);
    }

    @Override // com.shimmerresearch.driver.ShimmerDevice
    public int handleSpecCasesBeforeSetSensorState(int i, boolean z) {
        if (i == 105) {
            this.mSensorMap.get(Integer.valueOf(i)).setIsEnabled(z);
            return SensorPPG.ListOfPpgAdcSelection[this.mPpgAdcSelectionGsrBoard].contains("A12") ? 8 : 11;
        }
        if (i == 110) {
            this.mSensorMap.get(Integer.valueOf(i)).setIsEnabled(z);
            return SensorPPG.ListOfPpg1AdcSelection[this.mPpg1AdcSelectionProto3DeluxeBoard].contains("A12") ? 9 : 12;
        }
        if (i != 113) {
            return i;
        }
        this.mSensorMap.get(Integer.valueOf(i)).setIsEnabled(z);
        return SensorPPG.ListOfPpg2AdcSelection[this.mPpg2AdcSelectionProto3DeluxeBoard].contains("A14") ? 14 : 18;
    }

    @Override // com.shimmerresearch.driver.ShimmerDevice
    public void checkShimmerConfigBeforeConfiguring() {
        if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
            if (this.mShimmerUserAssignedName.equals(ShimmerDevice.DEFAULT_SHIMMER_NAME)) {
                setDefaultShimmerName();
            }
            setTrialNameAndCheck(getTrialName());
            if (!isSensorEnabled(19)) {
                setDefaultGsrSensorConfig(false);
            }
            if (!SensorEXG.checkIsAnyExgChannelEnabled(this.mSensorMap)) {
                clearExgConfig();
            }
            super.checkShimmerConfigBeforeConfiguring();
            setSamplingRateSensors(getSamplingRateShimmer());
        }
    }

    @Override // com.shimmerresearch.driver.ShimmerDevice
    protected void checkIfInternalExpBrdPowerIsNeeded() {
        super.checkIfInternalExpBrdPowerIsNeeded();
        if (this.mInternalExpPower == 0) {
            if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
                Iterator<SensorDetails> it2 = this.mSensorMap.values().iterator();
                while (it2.hasNext()) {
                    if (it2.next().isInternalExpBrdPowerRequired()) {
                        this.mInternalExpPower = 1;
                        return;
                    } else if (!isSensorEnabled(17) && !isSensorEnabled(7) && !isSensorEnabled(10) && !isSensorEnabled(13)) {
                        this.mInternalExpPower = 0;
                    }
                }
            }
        }
    }

    @Override // com.shimmerresearch.driver.ShimmerDevice
    protected void setDefaultConfigForSensor(int i, boolean z) {
        if (i == 19) {
            setDefaultGsrSensorConfig(z);
            return;
        }
        if (i != 103 && i != 100 && i != 101 && i != 102 && i != 116 && i != 106) {
            super.setDefaultConfigForSensor(i, z);
            return;
        }
        if (!z) {
            if (SensorEXG.checkIsAnyExgChannelEnabled(this.mSensorMap)) {
                return;
            }
            clearExgConfig();
            return;
        }
        if (i == 103) {
            setDefaultRespirationConfiguration(getSamplingRateShimmer());
            return;
        }
        if (i == 100) {
            setDefaultECGConfiguration(getSamplingRateShimmer());
            return;
        }
        if (i == 101) {
            setDefaultEMGConfiguration(getSamplingRateShimmer());
            return;
        }
        if (i == 102) {
            setEXGTestSignal(getSamplingRateShimmer());
        } else if (i == 106) {
            setExgThreeUnipolarInput(getSamplingRateShimmer());
        } else if (i == 116) {
            setEXGCustom(getSamplingRateShimmer());
        }
    }

    private void setDefaultGsrSensorConfig(boolean z) {
        if (z) {
            return;
        }
        setGSRRange(4);
    }

    private void setLowBattAutoStop(int i) {
        setLowBattAutoStop(i > 0);
    }

    public void setExperimentDurationEstimatedInSecs(int i) {
        int iPow = (int) (Math.pow(2.0d, 16.0d) - 1.0d);
        if (i > iPow) {
            i = iPow;
        } else if (i <= 0) {
            i = 1;
        }
        setTrialDurationEstimatedInSecs(i);
    }

    public void setExperimentDurationMaximumInSecs(int i) {
        int iPow = (int) (Math.pow(2.0d, 16.0d) - 1.0d);
        if (i > iPow) {
            i = iPow;
        } else if (i < 0) {
            i = 1;
        }
        setTrialDurationMaximumInSecs(i);
    }

    public boolean getInitialized() {
        return this.mIsInitialised;
    }

    public int get5VReg() {
        if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
            return -1;
        }
        return (this.mConfigByte0 & (-128)) != 0 ? 1 : 0;
    }

    public int getShimmerVersion() {
        return getHardwareVersion();
    }

    public String getMacIdFromBtParsed() {
        return this.mMyBluetoothAddress.length() >= 12 ? this.mMyBluetoothAddress.substring(8, 12) : "0000";
    }

    @Override // com.shimmerresearch.driver.ShimmerDevice
    public String getMacId() {
        if (this.mMacIdFromUart == null) {
            return this.mMyBluetoothAddress;
        }
        if (!this.mMacIdFromUart.isEmpty()) {
            return this.mMacIdFromUart;
        }
        if (this.mMacIdFromInfoMem.isEmpty() && this.mMacIdFromInfoMem.isEmpty()) {
            return this.mMyBluetoothAddress;
        }
        return this.mMacIdFromInfoMem;
    }

    protected byte[] generateConfigBytesForWritingToShimmer() {
        return configBytesGenerate(true);
    }

    public void setExperimentNumberOfShimmers(int i) {
        int iPow = (int) (Math.pow(2.0d, 8.0d) - 1.0d);
        if (i > iPow) {
            i = iPow;
        } else if (i <= 0) {
            i = 1;
        }
        this.mTrialNumberOfShimmers = i;
    }

    public void setMasterShimmer(boolean z) {
        setMasterShimmer(z ? 1 : 0);
    }

    public void setSingleTouch(boolean z) {
        setSingleTouch(z ? 1 : 0);
    }

    public void setTCXO(boolean z) {
        setTCXO(z ? 1 : 0);
    }

    public void setSyncWhenLogging(boolean z) {
        setSyncWhenLogging(z ? 1 : 0);
    }

    public void setButtonStart(boolean z) {
        setButtonStart(z ? 1 : 0);
    }

    public void setDisableBluetooth(boolean z) {
        setDisableBluetooth(z ? 1 : 0);
    }

    public void setExperimentId(int i) {
        int iPow = (int) (Math.pow(2.0d, 8.0d) - 1.0d);
        if (i > iPow) {
            i = iPow;
        } else if (i < 0) {
            i = 1;
        }
        this.mTrialId = i;
    }

    protected void setSyncBroadcastInterval(int i) {
        int iPow = (int) (Math.pow(2.0d, 8.0d) - 1.0d);
        if (i > iPow) {
            i = iPow;
        } else if (i <= 0) {
            i = 1;
        }
        this.mSyncBroadcastInterval = i;
    }

    public byte[] generateCalParamLSM303DLHCAccel() {
        return getCurrentCalibDetailsAccelWr().generateCalParamByteArray();
    }

    public byte[] generateCalParamLSM303DLHCMag() {
        return getCurrentCalibDetailsMag().generateCalParamByteArray();
    }

    public void parseCalibParamFromPacketAccelLsm(byte[] bArr, CalibDetails.CALIB_READ_SOURCE calib_read_source) {
        getCurrentCalibDetailsAccelWr().parseCalParamByteArray(bArr, calib_read_source);
    }

    public void getCurrentCalibDetailsAccelAlt(byte[] bArr, CalibDetails.CALIB_READ_SOURCE calib_read_source) {
        getCurrentCalibDetailsAccelAlt().parseCalParamByteArray(bArr, calib_read_source);
    }

    public void getCurrentCalibDetailsMagWr(byte[] bArr, CalibDetails.CALIB_READ_SOURCE calib_read_source) {
        getCurrentCalibDetailsMagAlt().parseCalParamByteArray(bArr, calib_read_source);
    }

    public void parseCalibParamFromPacketMag(byte[] bArr, CalibDetails.CALIB_READ_SOURCE calib_read_source) {
        getCurrentCalibDetailsMag().parseCalParamByteArray(bArr, calib_read_source);
    }

    public void setDefaultCalibrationShimmer3StandardImus() {
        setDefaultCalibrationShimmer3LowNoiseAccel();
        setDefaultCalibrationShimmer3WideRangeAccel();
        setDefaultCalibrationShimmer3Gyro();
        setDefaultCalibrationShimmer3Mag();
    }

    private void setDefaultCalibrationShimmer3LowNoiseAccel() {
        getCurrentCalibDetailsAccelLn().resetToDefaultParameters();
    }

    private void setDefaultCalibrationShimmer3WideRangeAccel() {
        getCurrentCalibDetailsAccelWr().resetToDefaultParameters();
    }

    private void setDefaultCalibrationShimmer3Mag() {
        getCurrentCalibDetailsMag().resetToDefaultParameters();
    }

    protected CalibDetailsKinematic getCurrentCalibDetailsAccelWr() {
        if (isShimmerGen3() || isShimmerGenGq()) {
            return this.mSensorLSM303.getCurrentCalibDetailsAccelWr();
        }
        if (isShimmerGen3R()) {
            return this.mSensorLIS2DW12.getCurrentCalibDetailsAccelWr();
        }
        return null;
    }

    protected CalibDetailsKinematic getCurrentCalibDetailsMag() {
        if (isShimmerGen2()) {
            return this.mSensorShimmer2Mag.getCurrentCalibDetailsMag();
        }
        if (isShimmerGen3() || isShimmerGenGq()) {
            return this.mSensorLSM303.getCurrentCalibDetailsMag();
        }
        if (isShimmerGen3R()) {
            return this.mSensorLIS2MDL.getCurrentCalibDetailsMag();
        }
        return null;
    }

    protected CalibDetailsKinematic getCurrentCalibDetailsMagAlt() {
        if (isShimmerGen3R()) {
            return this.mSensorLIS3MDL.getCurrentCalibDetailsMagAlt();
        }
        return null;
    }

    protected CalibDetailsKinematic getCurrentCalibDetailsAccelLn() {
        if (isShimmerGen2()) {
            return this.mSensorMMA736x.getCurrentCalibDetailsAccelLn();
        }
        if (isShimmerGen3() || isShimmerGenGq()) {
            return this.mSensorKionixAccel.getCurrentCalibDetailsAccelLn();
        }
        if (isShimmerGen3R()) {
            return this.mSensorLSM6DSV.getCurrentCalibDetailsAccelLn();
        }
        return null;
    }

    protected CalibDetailsKinematic getCurrentCalibDetailsAccelAlt() {
        if (isShimmerGen3R()) {
            return this.mSensorADXL371.getCurrentCalibDetailsAccelHighG();
        }
        return null;
    }

    @Override // com.shimmerresearch.driver.ShimmerDevice
    public void setMapOfSensorCalibrationAll(TreeMap<Integer, TreeMap<Integer, CalibDetails>> treeMap) {
        super.setMapOfSensorCalibrationAll(treeMap);
        for (Integer num : treeMap.keySet()) {
            setSensorCalibrationPerSensor(num, treeMap.get(num));
        }
    }

    public void updateCurrentAccelLnCalibInUse() {
        if (isShimmerGen2()) {
            this.mSensorMMA736x.updateCurrentAccelCalibInUse();
        } else if (isShimmerGen3()) {
            this.mSensorKionixAccel.updateCurrentAccelLnCalibInUse();
        } else if (isShimmerGen3R()) {
            this.mSensorLSM6DSV.updateCurrentAccelLnCalibInUse();
        }
    }

    public void updateCurrentMagCalibInUse() {
        if (isShimmerGen3R()) {
            this.mSensorLIS2MDL.updateCurrentMagCalibInUse();
        } else {
            this.mSensorLSM303.updateCurrentMagCalibInUse();
        }
    }

    public void updateCurrentAccelWrCalibInUse() {
        if (isShimmerGen3()) {
            this.mSensorLSM303.updateCurrentAccelWrCalibInUse();
        } else if (isShimmerGen3R()) {
            this.mSensorLIS2DW12.updateCurrentAccelWrCalibInUse();
        }
    }

    private void updateCurrentCalibInUse() {
        updateCurrentAccelLnCalibInUse();
        updateCurrentAccelWrCalibInUse();
        updateCurrentGyroCalibInUse();
        updateCurrentMagCalibInUse();
        updateCurrentPressureCalibInUse();
    }

    protected void retrievePressureCalibrationParametersFromPacket(byte[] bArr, CalibDetails.CALIB_READ_SOURCE calib_read_source) {
        this.mSensorBMPX80.parseCalParamByteArray(bArr, calib_read_source);
        updateCurrentPressureCalibInUse();
    }

    public void updateCurrentPressureCalibInUse() {
        this.mSensorBMPX80.updateCurrentPressureCalibInUse();
    }

    public void setPressureResolution(int i) {
        this.mSensorBMPX80.setPressureResolution(i);
    }

    public int getPressureResolution() {
        return this.mSensorBMPX80.getPressureResolution();
    }

    public void setPressureCalib(double d, double d2, double d3, double d4, double d5, double d6, double d7, double d8, double d9, double d10, double d11) {
        SensorBMPX80 sensorBMPX80 = this.mSensorBMPX80;
        if (sensorBMPX80 instanceof SensorBMP180) {
            ((SensorBMP180) sensorBMPX80).setPressureCalib(d, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11);
        }
    }

    public byte[] getPressureRawCoefficients() {
        return this.mSensorBMPX80.mCalibDetailsBmpX80.getPressureRawCoefficients();
    }

    public byte[] getDigiAccelCalRawParams() {
        return getCurrentCalibDetailsAccelWr().generateCalParamByteArray();
    }

    public byte[] getAccelCalRawParams() {
        return getCurrentCalibDetailsAccelLn().generateCalParamByteArray();
    }

    public byte[] getMagCalRawParams() {
        return getCurrentCalibDetailsMag().generateCalParamByteArray();
    }

    protected void setPpgAdcSelectionGsrBoard(int i) {
        this.mPpgAdcSelectionGsrBoard = i;
        setSensorEnabledState(105, this.mSensorMap.get(105).isEnabled());
    }

    protected void setPpg1AdcSelectionProto3DeluxeBoard(int i) {
        this.mPpg1AdcSelectionProto3DeluxeBoard = i;
        setSensorEnabledState(110, this.mSensorMap.get(110).isEnabled());
    }

    protected void setPpg2AdcSelectionProto3DeluxeBoard(int i) {
        this.mPpg2AdcSelectionProto3DeluxeBoard = i;
        setSensorEnabledState(113, this.mSensorMap.get(113).isEnabled());
    }

    public void exgBytesGetConfigFrom(ExGConfigOptionDetails.EXG_CHIP_INDEX exg_chip_index, byte[] bArr) {
        int i = bArr.length == 10 ? 0 : 1;
        if (exg_chip_index == ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1) {
            System.arraycopy(bArr, i, this.mEXG1RegisterArray, 0, 10);
            byte[] bArr2 = this.mEXG1RegisterArray;
            this.mEXG1RateSetting = bArr2[0] & 7;
            byte b = bArr2[2];
            this.mEXGLeadOffDetectionCurrent = (b >> 2) & 3;
            this.mEXGLeadOffComparatorTreshold = (b >> 5) & 7;
            int i2 = (bArr2[3] >> 4) & 7;
            this.mEXG1CH1GainSetting = i2;
            this.mEXG1CH1GainValue = SensorEXG.convertEXGGainSettingToValue(i2);
            int i3 = (this.mEXG1RegisterArray[4] >> 4) & 7;
            this.mEXG1CH2GainSetting = i3;
            this.mEXG1CH2GainValue = SensorEXG.convertEXGGainSettingToValue(i3);
            byte[] bArr3 = this.mEXG1RegisterArray;
            byte b2 = bArr3[5];
            this.mEXGReferenceElectrode = b2 & 15;
            this.mEXG1LeadOffCurrentMode = bArr3[2] & 1;
            this.mEXG1Comparators = bArr3[1] & 64;
            this.mEXGRLDSense = b2 & 16;
            this.mEXG1LeadOffSenseSelection = bArr3[6] & 15;
            this.mExGConfigBytesDetails.updateFromRegisterArray(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, this.mEXG1RegisterArray);
            return;
        }
        if (exg_chip_index == ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2) {
            System.arraycopy(bArr, i, this.mEXG2RegisterArray, 0, 10);
            byte[] bArr4 = this.mEXG2RegisterArray;
            this.mEXG2RateSetting = bArr4[0] & 7;
            byte b3 = bArr4[3];
            int i4 = (b3 >> 4) & 7;
            this.mEXG2CH1GainSetting = i4;
            this.mEXG2CH2PowerDown = (b3 >> 7) & 1;
            this.mEXG2CH1GainValue = SensorEXG.convertEXGGainSettingToValue(i4);
            int i5 = (this.mEXG2RegisterArray[4] >> 4) & 7;
            this.mEXG2CH2GainSetting = i5;
            this.mEXG2CH2GainValue = SensorEXG.convertEXGGainSettingToValue(i5);
            byte[] bArr5 = this.mEXG2RegisterArray;
            this.mEXG2LeadOffCurrentMode = bArr5[2] & 1;
            this.mEXG2Comparators = bArr5[1] & 64;
            this.mEXG2LeadOffSenseSelection = bArr5[6] & 15;
            byte b4 = bArr5[8];
            this.mEXG2RespirationDetectState = (b4 >> 6) & 3;
            this.mEXG2RespirationDetectPhase = (b4 >> 2) & 15;
            this.mEXG2RespirationDetectFreq = (bArr5[9] >> 2) & 1;
            this.mExGConfigBytesDetails.updateFromRegisterArray(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, this.mEXG2RegisterArray);
        }
    }

    public void exgBytesGetConfigFrom(byte[] bArr, byte[] bArr2) {
        if (bArr != null) {
            setEXG1RegisterArray(bArr);
        }
        if (bArr2 != null) {
            setEXG2RegisterArray(bArr2);
        }
        internalCheckExgModeAndUpdateSensorMap();
    }

    public void exgBytesGetFromConfig() {
        this.mEXG1RegisterArray = this.mExGConfigBytesDetails.getEXG1RegisterArray();
        byte[] eXG2RegisterArray = this.mExGConfigBytesDetails.getEXG2RegisterArray();
        this.mEXG2RegisterArray = eXG2RegisterArray;
        exgBytesGetConfigFrom(this.mEXG1RegisterArray, eXG2RegisterArray);
    }

    public void setDefaultECGConfiguration(double d) {
        if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
            clearExgConfig();
            setExgChannelBitsPerMode(100);
            setExgPropertyBothChips(ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG1.CONVERSION_MODES.CONTINUOUS);
            setExgPropertyBothChips(ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG2.REFERENCE_BUFFER.ON);
            setExgPropertyBothChips(ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG2.VOLTAGE_REFERENCE.VREF_2_42V);
            setExGGainSetting(ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG4.CH1_PGA_GAIN.GAIN_4.configValueInt);
            setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG5.CH2_INPUT_SELECTION.RLDIN_CONNECTED_TO_NEG_INPUT);
            setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG6.RLD_BUFFER_POWER.ENABLED);
            setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG6.RLD_NEG_INPUTS_CH2.RLD_CONNECTED_TO_IN2N);
            setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG6.RLD_POS_INPUTS_CH2.RLD_CONNECTED_TO_IN2P);
            setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG6.RLD_POS_INPUTS_CH1.RLD_CONNECTED_TO_IN1P);
            setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG10.RLD_REFERENCE_SIGNAL.HALF_OF_SUPPLY);
            setDefaultExgCommon(d);
        }
    }

    protected void setDefaultEMGConfiguration(double d) {
        if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
            clearExgConfig();
            setExgChannelBitsPerMode(101);
            setExgPropertyBothChips(ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG1.CONVERSION_MODES.CONTINUOUS);
            setExgPropertyBothChips(ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG2.REFERENCE_BUFFER.ON);
            setExgPropertyBothChips(ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG2.VOLTAGE_REFERENCE.VREF_2_42V);
            setExGGainSetting(ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG4.CH1_PGA_GAIN.GAIN_12.configValueInt);
            setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG4.CH1_INPUT_SELECTION.ROUTE_CH3_TO_CH1);
            setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG5.CH2_INPUT_SELECTION.NORMAL);
            setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG4.CH1_POWER_DOWN.POWER_DOWN);
            setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG4.CH1_INPUT_SELECTION.SHORTED);
            setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG5.CH2_POWER_DOWN.POWER_DOWN);
            setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG5.CH2_INPUT_SELECTION.SHORTED);
            setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG6.RLD_BUFFER_POWER.ENABLED);
            setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG10.RLD_REFERENCE_SIGNAL.HALF_OF_SUPPLY);
            setDefaultExgCommon(d);
        }
    }

    protected void setEXGTestSignal(double d) {
        if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
            clearExgConfig();
            setExgChannelBitsPerMode(102);
            setExgPropertyBothChips(ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG1.CONVERSION_MODES.CONTINUOUS);
            setExgPropertyBothChips(ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG2.REFERENCE_BUFFER.ON);
            setExgPropertyBothChips(ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG2.VOLTAGE_REFERENCE.VREF_2_42V);
            setExGGainSetting(ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG4.CH1_PGA_GAIN.GAIN_1.configValueInt);
            setExgPropertyBothChips(ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG2.TEST_SIGNAL_SELECTION.ON);
            setExgPropertyBothChips(ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG2.TEST_SIGNAL_FREQUENCY.SQUARE_WAVE_1KHZ);
            setExgPropertyBothChips(ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG4.CH1_INPUT_SELECTION.TEST_SIGNAL);
            setExgPropertyBothChips(ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG5.CH2_INPUT_SELECTION.TEST_SIGNAL);
            setDefaultExgCommon(d);
        }
    }

    protected void setDefaultRespirationConfiguration(double d) {
        if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
            clearExgConfig();
            setExgChannelBitsPerMode(103);
            setExgPropertyBothChips(ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG1.CONVERSION_MODES.CONTINUOUS);
            setExgPropertyBothChips(ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG2.REFERENCE_BUFFER.ON);
            setExgPropertyBothChips(ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG2.VOLTAGE_REFERENCE.VREF_2_42V);
            setExGGainSetting(ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG4.CH1_PGA_GAIN.GAIN_4.configValueInt);
            setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG6.RLD_BUFFER_POWER.ENABLED);
            setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG10.RLD_REFERENCE_SIGNAL.HALF_OF_SUPPLY);
            setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG9.RESPIRATION_DEMOD_CIRCUITRY.ON);
            setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG9.RESPIRATION_MOD_CIRCUITRY.ON);
            setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG9.RESPIRATION_PHASE_AT_32KHZ.PHASE_112_5);
            setDefaultExgCommon(d);
        }
    }

    protected void setEXGCustom(double d) {
        if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
            clearExgConfig();
            setExgChannelBitsPerMode(116);
            setExgPropertyBothChips(ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG1.CONVERSION_MODES.CONTINUOUS);
            setExgPropertyBothChips(ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG2.REFERENCE_BUFFER.ON);
            setExgPropertyBothChips(ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG2.VOLTAGE_REFERENCE.VREF_2_42V);
            setExgPropertyBothChips(ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG2.TEST_SIGNAL_SELECTION.ON);
            setExgPropertyBothChips(ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG2.TEST_SIGNAL_FREQUENCY.SQUARE_WAVE_1KHZ);
            setExGGainSetting(ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG4.CH1_PGA_GAIN.GAIN_4.configValueInt);
            setExgPropertyBothChips(ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG5.CH2_INPUT_SELECTION.RLDIN_CONNECTED_TO_NEG_INPUT);
            setDefaultExgCommon(d);
        }
    }

    public void setExgThreeUnipolarInput(double d) {
        clearExgConfig();
        setExgChannelBitsPerMode(106);
        setExgPropertyBothChips(ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG1.CONVERSION_MODES.CONTINUOUS);
        setExgPropertyBothChips(ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG2.REFERENCE_BUFFER.ON);
        setExgPropertyBothChips(ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG2.VOLTAGE_REFERENCE.VREF_2_42V);
        setExGGainSetting(ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG4.CH1_PGA_GAIN.GAIN_4.configValueInt);
        setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG4.CH1_INPUT_SELECTION.RLDIN_CONNECTED_TO_NEG_INPUT);
        setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG5.CH2_INPUT_SELECTION.RLDIN_CONNECTED_TO_NEG_INPUT);
        setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG4.CH1_INPUT_SELECTION.SHORTED);
        setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG5.CH2_INPUT_SELECTION.RLDIN_CONNECTED_TO_NEG_INPUT);
        setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG6.RLD_BUFFER_POWER.ENABLED);
        setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG10.RLD_REFERENCE_SIGNAL.HALF_OF_SUPPLY);
        setDefaultExgCommon(d);
    }

    private void setDefaultExgCommon(double d) {
        if (ShimmerVerObject.isSupportedExgChipClocksJoined(getShimmerVerObject(), getExpansionBoardDetails())) {
            setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG2.OSCILLATOR_CLOCK_CONNECTION.ON);
        }
        setExGRateFromFreq(d);
        exgBytesGetConfigFrom(this.mEXG1RegisterArray, this.mEXG2RegisterArray);
    }

    protected void clearExgConfig() {
        setExgChannelBitsPerMode(-1);
        this.mExGConfigBytesDetails.startNewExGConig();
        this.mEXG1RegisterArray = this.mExGConfigBytesDetails.getEXG1RegisterArray();
        byte[] eXG2RegisterArray = this.mExGConfigBytesDetails.getEXG2RegisterArray();
        this.mEXG2RegisterArray = eXG2RegisterArray;
        exgBytesGetConfigFrom(this.mEXG1RegisterArray, eXG2RegisterArray);
    }

    protected boolean isExgPropertyEnabled(ExGConfigOptionDetails.EXG_CHIP_INDEX exg_chip_index, ExGConfigOption exGConfigOption) {
        return this.mExGConfigBytesDetails.isExgPropertyEnabled(exg_chip_index, exGConfigOption);
    }

    protected void setExgPropertyBothChips(ExGConfigOption exGConfigOption) {
        this.mExGConfigBytesDetails.setExgPropertyBothChips(exGConfigOption);
        this.mEXG1RegisterArray = this.mExGConfigBytesDetails.getEXG1RegisterArray();
        byte[] eXG2RegisterArray = this.mExGConfigBytesDetails.getEXG2RegisterArray();
        this.mEXG2RegisterArray = eXG2RegisterArray;
        exgBytesGetConfigFrom(this.mEXG1RegisterArray, eXG2RegisterArray);
    }

    protected void setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX exg_chip_index, ExGConfigOption exGConfigOption) {
        this.mExGConfigBytesDetails.setExgPropertySingleChip(exg_chip_index, exGConfigOption);
        if (exg_chip_index == ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1) {
            this.mEXG1RegisterArray = this.mExGConfigBytesDetails.getEXG1RegisterArray();
        } else if (exg_chip_index == ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2) {
            this.mEXG2RegisterArray = this.mExGConfigBytesDetails.getEXG2RegisterArray();
        }
        updateExgVariables(exg_chip_index);
    }

    public void setExgPropertySingleChipValue(ExGConfigOptionDetails.EXG_CHIP_INDEX exg_chip_index, String str, int i) {
        this.mExGConfigBytesDetails.setExgPropertyValue(exg_chip_index, str, i);
        if (exg_chip_index == ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1) {
            this.mEXG1RegisterArray = this.mExGConfigBytesDetails.getEXG1RegisterArray();
        } else if (exg_chip_index == ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2) {
            this.mEXG2RegisterArray = this.mExGConfigBytesDetails.getEXG2RegisterArray();
        }
        updateExgVariables(exg_chip_index);
    }

    private void updateExgVariables(ExGConfigOptionDetails.EXG_CHIP_INDEX exg_chip_index) {
        if (exg_chip_index == ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1) {
            exgBytesGetConfigFrom(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, this.mEXG1RegisterArray);
        } else if (exg_chip_index == ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2) {
            exgBytesGetConfigFrom(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, this.mEXG2RegisterArray);
        }
    }

    public int getExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX exg_chip_index, String str) {
        return this.mExGConfigBytesDetails.getExgPropertySingleChip(exg_chip_index, str);
    }

    public HashMap<String, Integer> getMapOfExGSettingsChip1() {
        return this.mExGConfigBytesDetails.mMapOfExGSettingsChip1ThisShimmer;
    }

    public HashMap<String, Integer> getMapOfExGSettingsChip2() {
        return this.mExGConfigBytesDetails.mMapOfExGSettingsChip2ThisShimmer;
    }

    protected void checkExgResolutionFromEnabledSensorsVar() {
        ConfigByteLayout configByteLayout = getConfigByteLayout();
        if (configByteLayout instanceof ConfigByteLayoutShimmer3) {
            ConfigByteLayoutShimmer3 configByteLayoutShimmer3 = (ConfigByteLayoutShimmer3) configByteLayout;
            this.mIsExg1_24bitEnabled = (this.mEnabledSensors & ((long) configByteLayoutShimmer3.maskExg1_24bitFlag)) > 0;
            this.mIsExg2_24bitEnabled = (this.mEnabledSensors & ((long) configByteLayoutShimmer3.maskExg2_24bitFlag)) > 0;
            this.mIsExg1_16bitEnabled = (this.mEnabledSensors & ((long) configByteLayoutShimmer3.maskExg1_16bitFlag)) > 0;
            this.mIsExg2_16bitEnabled = (((long) configByteLayoutShimmer3.maskExg2_16bitFlag) & this.mEnabledSensors) > 0;
        } else if (configByteLayout instanceof ConfigByteLayoutShimmerGq802154) {
            ConfigByteLayoutShimmerGq802154 configByteLayoutShimmerGq802154 = (ConfigByteLayoutShimmerGq802154) configByteLayout;
            this.mIsExg1_24bitEnabled = (this.mEnabledSensors & ((long) configByteLayoutShimmerGq802154.maskExg1_24bitFlag)) > 0;
            this.mIsExg2_24bitEnabled = (this.mEnabledSensors & ((long) configByteLayoutShimmerGq802154.maskExg2_24bitFlag)) > 0;
            this.mIsExg1_16bitEnabled = (this.mEnabledSensors & ((long) configByteLayoutShimmerGq802154.maskExg1_16bitFlag)) > 0;
            this.mIsExg2_16bitEnabled = (((long) configByteLayoutShimmerGq802154.maskExg2_16bitFlag) & this.mEnabledSensors) > 0;
        }
        if (this.mIsExg1_16bitEnabled || this.mIsExg2_16bitEnabled) {
            this.mExGResolution = 0;
        } else if (this.mIsExg1_24bitEnabled || this.mIsExg2_24bitEnabled) {
            this.mExGResolution = 1;
        }
    }

    private void updateEnabledSensorsFromExgResolution() {
        long j;
        long enabledSensors = getEnabledSensors();
        ConfigByteLayout configByteLayout = getConfigByteLayout();
        int i = 0;
        if (configByteLayout instanceof ConfigByteLayoutShimmer3) {
            ConfigByteLayoutShimmer3 configByteLayoutShimmer3 = (ConfigByteLayoutShimmer3) configByteLayout;
            j = ((((((enabledSensors & (~configByteLayoutShimmer3.maskExg1_24bitFlag)) | (this.mIsExg1_24bitEnabled ? configByteLayoutShimmer3.maskExg1_24bitFlag : 0)) & (~configByteLayoutShimmer3.maskExg2_24bitFlag)) | (this.mIsExg2_24bitEnabled ? configByteLayoutShimmer3.maskExg2_24bitFlag : 0)) & (~configByteLayoutShimmer3.maskExg1_16bitFlag)) | (this.mIsExg1_16bitEnabled ? configByteLayoutShimmer3.maskExg1_16bitFlag : 0)) & (~configByteLayoutShimmer3.maskExg2_16bitFlag);
            if (this.mIsExg2_16bitEnabled) {
                i = configByteLayoutShimmer3.maskExg2_16bitFlag;
            }
        } else {
            if (configByteLayout instanceof ConfigByteLayoutShimmerGq802154) {
                ConfigByteLayoutShimmerGq802154 configByteLayoutShimmerGq802154 = (ConfigByteLayoutShimmerGq802154) configByteLayout;
                j = ((((((enabledSensors & (~configByteLayoutShimmerGq802154.maskExg1_24bitFlag)) | (this.mIsExg1_24bitEnabled ? configByteLayoutShimmerGq802154.maskExg1_24bitFlag : 0)) & (~configByteLayoutShimmerGq802154.maskExg2_24bitFlag)) | (this.mIsExg2_24bitEnabled ? configByteLayoutShimmerGq802154.maskExg2_24bitFlag : 0)) & (~configByteLayoutShimmerGq802154.maskExg1_16bitFlag)) | (this.mIsExg1_16bitEnabled ? configByteLayoutShimmerGq802154.maskExg1_16bitFlag : 0)) & (~configByteLayoutShimmerGq802154.maskExg2_16bitFlag);
                if (this.mIsExg2_16bitEnabled) {
                    i = configByteLayoutShimmerGq802154.maskExg2_16bitFlag;
                }
            }
            setEnabledSensors(enabledSensors);
        }
        enabledSensors = j | i;
        setEnabledSensors(enabledSensors);
    }

    public int getEXG1RateSetting() {
        return getExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTINGS.REG1_DATA_RATE);
    }

    public int getEXGReferenceElectrode() {
        return this.mExGConfigBytesDetails.getEXGReferenceElectrode();
    }

    public int getEXGLeadOffDetectionCurrent() {
        return getExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTINGS.REG3_LEAD_OFF_CURRENT);
    }

    public int getEXGLeadOffComparatorTreshold() {
        return getExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTINGS.REG3_COMPARATOR_THRESHOLD);
    }

    public int getEXG2RespirationDetectFreq() {
        return getExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTINGS.REG10_RESPIRATION_CONTROL_FREQUENCY);
    }

    public int getEXG2RespirationDetectPhase() {
        return getExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTINGS.REG9_RESPIRATION_PHASE);
    }

    public int getExGGainSetting() {
        return getExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTINGS.REG4_CHANNEL_1_PGA_GAIN);
    }

    public int getExg1CH1GainValue() {
        return SensorEXG.convertEXGGainSettingToValue(getExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTINGS.REG4_CHANNEL_1_PGA_GAIN));
    }

    public int getExg1CH2GainValue() {
        return SensorEXG.convertEXGGainSettingToValue(getExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTINGS.REG5_CHANNEL_2_PGA_GAIN));
    }

    public int getExg2CH1GainValue() {
        return SensorEXG.convertEXGGainSettingToValue(getExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTINGS.REG4_CHANNEL_1_PGA_GAIN));
    }

    public int getExg2CH2GainValue() {
        return SensorEXG.convertEXGGainSettingToValue(getExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTINGS.REG5_CHANNEL_2_PGA_GAIN));
    }

    public boolean areExgChannelGainsEqual(List<ExGConfigOptionDetails.EXG_CHIP_INDEX> list) {
        boolean z = !list.contains(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1) || getExg1CH1GainValue() == getExg1CH2GainValue();
        if (list.contains(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2) && getExg2CH1GainValue() != getExg2CH2GainValue()) {
            z = false;
        }
        if (list.contains(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1) && list.contains(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2) && getExg1CH1GainValue() != getExg2CH1GainValue()) {
            return false;
        }
        return z;
    }

    protected void setExGGainSetting(ExGConfigOptionDetails.EXG_CHIP_INDEX exg_chip_index, int i, int i2) {
        if (exg_chip_index == ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1) {
            if (i == 1) {
                setExgPropertySingleChipValue(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTINGS.REG4_CHANNEL_1_PGA_GAIN, i2);
                this.exg1Ch1CalFactor24Bit = (2420.0d / getExg1CH1GainValue()) / (Math.pow(2.0d, 23.0d) - 1.0d);
                this.exg1Ch1CalFactor16Bit = ((2420.0d / getExg1CH1GainValue()) * 2.0d) / (Math.pow(2.0d, 15.0d) - 1.0d);
                return;
            } else {
                if (i == 2) {
                    setExgPropertySingleChipValue(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTINGS.REG5_CHANNEL_2_PGA_GAIN, i2);
                    this.exg1Ch2CalFactor24Bit = (2420.0d / getExg1CH2GainValue()) / (Math.pow(2.0d, 23.0d) - 1.0d);
                    this.exg1Ch2CalFactor16Bit = ((2420.0d / getExg1CH2GainValue()) * 2.0d) / (Math.pow(2.0d, 15.0d) - 1.0d);
                    return;
                }
                return;
            }
        }
        if (exg_chip_index == ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2) {
            if (i == 1) {
                setExgPropertySingleChipValue(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTINGS.REG4_CHANNEL_1_PGA_GAIN, i2);
                this.exg2Ch1CalFactor24Bit = (2420.0d / getExg2CH1GainValue()) / (Math.pow(2.0d, 23.0d) - 1.0d);
                this.exg2Ch1CalFactor16Bit = ((2420.0d / getExg2CH1GainValue()) * 2.0d) / (Math.pow(2.0d, 15.0d) - 1.0d);
            } else if (i == 2) {
                setExgPropertySingleChipValue(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTINGS.REG5_CHANNEL_2_PGA_GAIN, i2);
                this.exg2Ch2CalFactor24Bit = (2420.0d / getExg2CH2GainValue()) / (Math.pow(2.0d, 23.0d) - 1.0d);
                this.exg2Ch2CalFactor16Bit = ((2420.0d / getExg2CH2GainValue()) * 2.0d) / (Math.pow(2.0d, 15.0d) - 1.0d);
            }
        }
    }

    protected void setExGGainSetting(int i) {
        setExGGainSetting(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, 1, i);
        setExGGainSetting(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, 2, i);
        setExGGainSetting(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, 1, i);
        setExGGainSetting(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, 2, i);
    }

    protected void setExGResolution(int i) {
        this.mExGResolution = i;
        if (i == 0) {
            if (this.mIsExg1_24bitEnabled) {
                this.mIsExg1_24bitEnabled = false;
                this.mIsExg1_16bitEnabled = true;
            }
            if (this.mIsExg2_24bitEnabled) {
                this.mIsExg2_24bitEnabled = false;
                this.mIsExg2_16bitEnabled = true;
            }
        } else if (i == 1) {
            if (this.mIsExg1_16bitEnabled) {
                this.mIsExg1_24bitEnabled = true;
                this.mIsExg1_16bitEnabled = false;
            }
            if (this.mIsExg2_16bitEnabled) {
                this.mIsExg2_24bitEnabled = true;
                this.mIsExg2_16bitEnabled = false;
            }
        }
        updateEnabledSensorsFromExgResolution();
    }

    protected void setEXG1RegisterArray(byte[] bArr) {
        setEXGRegisterArray(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, bArr);
    }

    protected void setEXG2RegisterArray(byte[] bArr) {
        setEXGRegisterArray(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, bArr);
    }

    protected void setEXGRegisterArray(ExGConfigOptionDetails.EXG_CHIP_INDEX exg_chip_index, byte[] bArr) {
        if (exg_chip_index == ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1) {
            this.mEXG1RegisterArray = bArr;
            exgBytesGetConfigFrom(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, this.mEXG1RegisterArray);
        } else if (exg_chip_index == ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2) {
            this.mEXG2RegisterArray = bArr;
            exgBytesGetConfigFrom(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, this.mEXG2RegisterArray);
        }
    }

    protected void enableDefaultECGConfiguration() {
        if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
            setDefaultECGConfiguration(getSamplingRateShimmer());
        }
    }

    protected void enableDefaultEMGConfiguration() {
        if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
            setDefaultEMGConfiguration(getSamplingRateShimmer());
        }
    }

    protected void enableEXGTestSignal() {
        if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
            setEXGTestSignal(getSamplingRateShimmer());
        }
    }

    protected void setEXGRateSetting(int i) {
        setExgPropertySingleChipValue(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTINGS.REG1_DATA_RATE, i);
        setExgPropertySingleChipValue(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTINGS.REG1_DATA_RATE, i);
    }

    protected void setEXGRateSetting(ExGConfigOptionDetails.EXG_CHIP_INDEX exg_chip_index, int i) {
        if (exg_chip_index == ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1) {
            setExgPropertySingleChipValue(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTINGS.REG1_DATA_RATE, i);
        } else if (exg_chip_index == ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2) {
            setExgPropertySingleChipValue(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTINGS.REG1_DATA_RATE, i);
        }
    }

    protected void setEXGReferenceElectrode(int i) {
        setExgPropertySingleChipValue(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTINGS.REG6_CH2_RLD_NEG_INPUTS, (i & 8) == 8 ? 1 : 0);
        setExgPropertySingleChipValue(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTINGS.REG6_CH2_RLD_POS_INPUTS, (i & 4) == 4 ? 1 : 0);
        setExgPropertySingleChipValue(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTINGS.REG6_CH1_RLD_NEG_INPUTS, (i & 2) == 2 ? 1 : 0);
        setExgPropertySingleChipValue(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTINGS.REG6_CH1_RLD_POS_INPUTS, (i & 1) == 1 ? 1 : 0);
    }

    protected void setEXGLeadOffCurrentMode(int i) {
        if (i == 0) {
            setExgPropertyBothChips(ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG3.LEAD_OFF_FREQUENCY.DC);
            setExgPropertyBothChips(ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG2.LEAD_OFF_COMPARATORS.OFF);
            setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG6.RLD_LEAD_OFF_SENSE_FUNCTION.OFF);
            setExgPropertyBothChips(ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG7.LEAD_OFF_DETECT_NEG_INPUTS_CH2.OFF);
            setExgPropertyBothChips(ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG7.LEAD_OFF_DETECT_POS_INPUTS_CH2.OFF);
            setExgPropertyBothChips(ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG7.LEAD_OFF_DETECT_NEG_INPUTS_CH1.OFF);
            setExgPropertyBothChips(ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG7.LEAD_OFF_DETECT_POS_INPUTS_CH1.OFF);
            if (isEXGUsingDefaultEMGConfiguration()) {
                setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG5.CH2_POWER_DOWN.POWER_DOWN);
                return;
            }
            return;
        }
        if (i == 1) {
            setExgPropertyBothChips(ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG3.LEAD_OFF_FREQUENCY.DC);
            setExgPropertyBothChips(ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG2.LEAD_OFF_COMPARATORS.ON);
            setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG6.RLD_LEAD_OFF_SENSE_FUNCTION.ON);
            if (isEXGUsingDefaultThreeUnipolarConfiguration()) {
                setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG7.LEAD_OFF_DETECT_NEG_INPUTS_CH2.OFF);
                setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG7.LEAD_OFF_DETECT_POS_INPUTS_CH2.ON);
                setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG7.LEAD_OFF_DETECT_NEG_INPUTS_CH1.OFF);
                setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG7.LEAD_OFF_DETECT_POS_INPUTS_CH1.ON);
            } else {
                setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG7.LEAD_OFF_DETECT_NEG_INPUTS_CH2.OFF);
                setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG7.LEAD_OFF_DETECT_POS_INPUTS_CH2.ON);
                setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG7.LEAD_OFF_DETECT_NEG_INPUTS_CH1.ON);
                setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG7.LEAD_OFF_DETECT_POS_INPUTS_CH1.ON);
            }
            setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG7.LEAD_OFF_DETECT_NEG_INPUTS_CH2.OFF);
            setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG7.LEAD_OFF_DETECT_POS_INPUTS_CH2.ON);
            setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG7.LEAD_OFF_DETECT_NEG_INPUTS_CH1.OFF);
            setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG7.LEAD_OFF_DETECT_POS_INPUTS_CH1.OFF);
            setExgPropertyBothChips(ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG3.LEAD_OFF_CURRENT.CURRENT_22NA);
            setExgPropertyBothChips(ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG3.COMPARATOR_THRESHOLD.POS90NEG10);
            if (isEXGUsingDefaultEMGConfiguration()) {
                setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG5.CH2_POWER_DOWN.NORMAL_OPERATION);
                return;
            }
            return;
        }
        if (i == 2) {
            setExgPropertyBothChips(ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG3.LEAD_OFF_FREQUENCY.AC);
            setExgPropertyBothChips(ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG2.LEAD_OFF_COMPARATORS.ON);
            setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG6.RLD_LEAD_OFF_SENSE_FUNCTION.ON);
            if (isEXGUsingDefaultThreeUnipolarConfiguration()) {
                setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG7.LEAD_OFF_DETECT_NEG_INPUTS_CH2.OFF);
                setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG7.LEAD_OFF_DETECT_POS_INPUTS_CH2.ON);
                setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG7.LEAD_OFF_DETECT_NEG_INPUTS_CH1.OFF);
                setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG7.LEAD_OFF_DETECT_POS_INPUTS_CH1.ON);
            } else {
                setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG7.LEAD_OFF_DETECT_NEG_INPUTS_CH2.OFF);
                setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG7.LEAD_OFF_DETECT_POS_INPUTS_CH2.ON);
                setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG7.LEAD_OFF_DETECT_NEG_INPUTS_CH1.ON);
                setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG7.LEAD_OFF_DETECT_POS_INPUTS_CH1.ON);
            }
            setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG7.LEAD_OFF_DETECT_NEG_INPUTS_CH2.OFF);
            setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG7.LEAD_OFF_DETECT_POS_INPUTS_CH2.ON);
            setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG7.LEAD_OFF_DETECT_NEG_INPUTS_CH1.OFF);
            setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG7.LEAD_OFF_DETECT_POS_INPUTS_CH1.OFF);
            if (isEXGUsingDefaultEMGConfiguration()) {
                setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG5.CH2_POWER_DOWN.NORMAL_OPERATION);
            }
        }
    }

    protected int getEXGLeadOffCurrentMode() {
        if (!isExgPropertyEnabled(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG6.RLD_LEAD_OFF_SENSE_FUNCTION.ON) && !isExgPropertyEnabled(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG7.LEAD_OFF_DETECT_NEG_INPUTS_CH2.ON) && !isExgPropertyEnabled(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG7.LEAD_OFF_DETECT_POS_INPUTS_CH2.ON) && !isExgPropertyEnabled(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG7.LEAD_OFF_DETECT_NEG_INPUTS_CH1.ON) && !isExgPropertyEnabled(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG7.LEAD_OFF_DETECT_POS_INPUTS_CH1.ON) && !isExgPropertyEnabled(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG7.LEAD_OFF_DETECT_NEG_INPUTS_CH2.ON) && !isExgPropertyEnabled(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG7.LEAD_OFF_DETECT_POS_INPUTS_CH2.ON) && !isExgPropertyEnabled(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG7.LEAD_OFF_DETECT_NEG_INPUTS_CH1.ON) && !isExgPropertyEnabled(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG7.LEAD_OFF_DETECT_POS_INPUTS_CH1.ON)) {
            return 0;
        }
        if (isExgPropertyEnabled(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG3.LEAD_OFF_FREQUENCY.DC)) {
            return 1;
        }
        return isExgPropertyEnabled(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG3.LEAD_OFF_FREQUENCY.AC) ? 2 : 0;
    }

    protected void setEXGLeadOffDetectionCurrent(int i) {
        setExgPropertySingleChipValue(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTINGS.REG3_LEAD_OFF_CURRENT, i);
        setExgPropertySingleChipValue(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTINGS.REG3_LEAD_OFF_CURRENT, i);
    }

    protected void setEXGLeadOffComparatorTreshold(int i) {
        setExgPropertySingleChipValue(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTINGS.REG3_COMPARATOR_THRESHOLD, i);
        setExgPropertySingleChipValue(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTINGS.REG3_COMPARATOR_THRESHOLD, i);
    }

    protected void setEXG2RespirationDetectFreq(int i) {
        setExgPropertySingleChipValue(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTINGS.REG10_RESPIRATION_CONTROL_FREQUENCY, i);
        checkWhichExgRespPhaseValuesToUse();
        if (isExgRespirationDetectFreq32kHz()) {
            setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG9.RESPIRATION_PHASE_AT_32KHZ.PHASE_112_5);
        } else {
            setExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG9.RESPIRATION_PHASE_AT_64KHZ.PHASE_157_5);
        }
    }

    protected void setEXG2RespirationDetectPhase(int i) {
        setExgPropertySingleChipValue(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTINGS.REG9_RESPIRATION_PHASE, i);
    }

    @Deprecated
    public boolean isEXGUsingDefaultECGConfigurationForSDFW() {
        if (getFirmwareIdentifier() == 9) {
            byte[] bArr = this.mEXG1RegisterArray;
            return (bArr[3] & 15) == 0 && (bArr[4] & 15) == 0;
        }
        byte[] bArr2 = this.mEXG1RegisterArray;
        if ((bArr2[3] & 15) != 0 || (bArr2[4] & 15) != 0) {
            return false;
        }
        byte[] bArr3 = this.mEXG2RegisterArray;
        return (bArr3[3] & 15) == 0 && (bArr3[4] & 15) == 7;
    }

    public boolean isEXGUsingDefaultECGConfiguration() {
        return getFirmwareIdentifier() == 9 ? getExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTINGS.REG4_CHANNEL_1_INPUT_SELECTION) == ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG4.CH1_INPUT_SELECTION.NORMAL.configValueInt && getExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTINGS.REG5_CHANNEL_2_INPUT_SELECTION) == ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG5.CH2_INPUT_SELECTION.NORMAL.configValueInt : ((this.mIsExg1_16bitEnabled && this.mIsExg2_16bitEnabled) || (this.mIsExg1_24bitEnabled && this.mIsExg2_24bitEnabled)) && getExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTINGS.REG4_CHANNEL_1_INPUT_SELECTION) == ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG4.CH1_INPUT_SELECTION.NORMAL.configValueInt && getExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTINGS.REG5_CHANNEL_2_INPUT_SELECTION) == ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG5.CH2_INPUT_SELECTION.NORMAL.configValueInt && getExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTINGS.REG4_CHANNEL_1_INPUT_SELECTION) == ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG4.CH1_INPUT_SELECTION.NORMAL.configValueInt && getExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTINGS.REG5_CHANNEL_2_INPUT_SELECTION) == ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG5.CH2_INPUT_SELECTION.RLDIN_CONNECTED_TO_NEG_INPUT.configValueInt;
    }

    public boolean isEXGUsingDefaultEMGConfiguration() {
        return ((this.mIsExg1_16bitEnabled && !this.mIsExg2_16bitEnabled) || (this.mIsExg1_24bitEnabled && !this.mIsExg2_24bitEnabled)) && getExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTINGS.REG4_CHANNEL_1_INPUT_SELECTION) == ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG4.CH1_INPUT_SELECTION.ROUTE_CH3_TO_CH1.configValueInt && getExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTINGS.REG5_CHANNEL_2_INPUT_SELECTION) == ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG5.CH2_INPUT_SELECTION.NORMAL.configValueInt && getExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTINGS.REG4_CHANNEL_1_INPUT_SELECTION) == ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG4.CH1_INPUT_SELECTION.SHORTED.configValueInt && getExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTINGS.REG5_CHANNEL_2_INPUT_SELECTION) == ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG5.CH2_INPUT_SELECTION.SHORTED.configValueInt;
    }

    public boolean isEXGUsingDefaultTestSignalConfiguration() {
        return ((this.mIsExg1_16bitEnabled && this.mIsExg2_16bitEnabled) || (this.mIsExg1_24bitEnabled && this.mIsExg2_24bitEnabled)) && getExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTINGS.REG4_CHANNEL_1_INPUT_SELECTION) == ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG4.CH1_INPUT_SELECTION.TEST_SIGNAL.configValueInt && getExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTINGS.REG5_CHANNEL_2_INPUT_SELECTION) == ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG5.CH2_INPUT_SELECTION.TEST_SIGNAL.configValueInt && getExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTINGS.REG4_CHANNEL_1_INPUT_SELECTION) == ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG4.CH1_INPUT_SELECTION.TEST_SIGNAL.configValueInt && getExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTINGS.REG5_CHANNEL_2_INPUT_SELECTION) == ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG5.CH2_INPUT_SELECTION.TEST_SIGNAL.configValueInt;
    }

    public boolean isEXGUsingDefaultRespirationConfiguration() {
        return ((this.mIsExg1_16bitEnabled && this.mIsExg2_16bitEnabled) || (this.mIsExg1_24bitEnabled && this.mIsExg2_24bitEnabled)) && getExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTINGS.REG9_RESPIRATION_MOD_CIRCUITRY) == ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG9.RESPIRATION_MOD_CIRCUITRY.ON.configValueInt && getExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTINGS.REG9_RESPIRATION_DEMOD_CIRCUITRY) == ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG9.RESPIRATION_DEMOD_CIRCUITRY.ON.configValueInt;
    }

    public boolean isEXGUsingDefaultThreeUnipolarConfiguration() {
        return ((this.mIsExg1_16bitEnabled && this.mIsExg2_16bitEnabled) || (this.mIsExg1_24bitEnabled && this.mIsExg2_24bitEnabled)) && getExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTINGS.REG4_CHANNEL_1_INPUT_SELECTION) == ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG4.CH1_INPUT_SELECTION.RLDIN_CONNECTED_TO_NEG_INPUT.configValueInt && getExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTINGS.REG5_CHANNEL_2_INPUT_SELECTION) == ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG5.CH2_INPUT_SELECTION.RLDIN_CONNECTED_TO_NEG_INPUT.configValueInt && getExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTINGS.REG4_CHANNEL_1_INPUT_SELECTION) == ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG4.CH1_INPUT_SELECTION.SHORTED.configValueInt && getExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, ExGConfigBytesDetails.EXG_SETTINGS.REG5_CHANNEL_2_INPUT_SELECTION) == ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG5.CH2_INPUT_SELECTION.RLDIN_CONNECTED_TO_NEG_INPUT.configValueInt;
    }

    public boolean isEXGUsingDefaultECGGqConfiguration() {
        return this.mShimmerVerObject.getFirmwareIdentifier() == 9 && getExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTINGS.REG4_CHANNEL_1_INPUT_SELECTION) == ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG4.CH1_INPUT_SELECTION.NORMAL.configValueInt && getExgPropertySingleChip(ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, ExGConfigBytesDetails.EXG_SETTINGS.REG5_CHANNEL_2_INPUT_SELECTION) == ExGConfigBytesDetails.EXG_SETTING_OPTIONS.REG5.CH2_INPUT_SELECTION.NORMAL.configValueInt;
    }

    public boolean isExgRespirationDetectFreq32kHz() {
        return getEXG2RespirationDetectFreq() == 0;
    }

    /* JADX WARN: Removed duplicated region for block: B:10:0x0020  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    public int setExGRateFromFreq(double r5) {
        /*
            r4 = this;
            r0 = 4638496509959077888(0x405f400000000000, double:125.0)
            int r2 = (r5 > r0 ? 1 : (r5 == r0 ? 0 : -1))
            if (r2 > 0) goto Lb
            r5 = 0
            goto L4d
        Lb:
            r0 = 4643000109586448384(0x406f400000000000, double:250.0)
            int r2 = (r5 > r0 ? 1 : (r5 == r0 ? 0 : -1))
            if (r2 > 0) goto L16
            r5 = 1
            goto L4d
        L16:
            r0 = 4647503709213818880(0x407f400000000000, double:500.0)
            r2 = 2
            int r3 = (r5 > r0 ? 1 : (r5 == r0 ? 0 : -1))
            if (r3 > 0) goto L22
        L20:
            r5 = 2
            goto L4d
        L22:
            r0 = 4652007308841189376(0x408f400000000000, double:1000.0)
            int r3 = (r5 > r0 ? 1 : (r5 == r0 ? 0 : -1))
            if (r3 > 0) goto L2d
            r5 = 3
            goto L4d
        L2d:
            r0 = 4656510908468559872(0x409f400000000000, double:2000.0)
            int r3 = (r5 > r0 ? 1 : (r5 == r0 ? 0 : -1))
            if (r3 > 0) goto L38
            r5 = 4
            goto L4d
        L38:
            r0 = 4661014508095930368(0x40af400000000000, double:4000.0)
            int r3 = (r5 > r0 ? 1 : (r5 == r0 ? 0 : -1))
            if (r3 > 0) goto L43
            r5 = 5
            goto L4d
        L43:
            r0 = 4665518107723300864(0x40bf400000000000, double:8000.0)
            int r3 = (r5 > r0 ? 1 : (r5 == r0 ? 0 : -1))
            if (r3 > 0) goto L20
            r5 = 6
        L4d:
            r4.setEXGRateSetting(r5)
            int r5 = r4.mEXG1RateSetting
            return r5
        */
        throw new UnsupportedOperationException("Method not decompiled: com.shimmerresearch.driver.ShimmerObject.setExGRateFromFreq(double):int");
    }

    private void internalCheckExgModeAndUpdateSensorMap() {
        if (this.mSensorMap != null) {
            if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
                if (isEXGUsingDefaultRespirationConfiguration()) {
                    setSensorEnabledStateBasic(100, false);
                    setSensorEnabledStateBasic(101, false);
                    setSensorEnabledStateBasic(102, false);
                    setSensorEnabledStateBasic(116, false);
                    setSensorEnabledStateBasic(103, true);
                    setSensorEnabledStateBasic(106, false);
                    return;
                }
                if (isEXGUsingDefaultECGConfiguration()) {
                    setSensorEnabledStateBasic(100, true);
                    setSensorEnabledStateBasic(101, false);
                    setSensorEnabledStateBasic(102, false);
                    setSensorEnabledStateBasic(116, false);
                    setSensorEnabledStateBasic(103, false);
                    setSensorEnabledStateBasic(106, false);
                    return;
                }
                if (isEXGUsingDefaultEMGConfiguration()) {
                    setSensorEnabledStateBasic(100, false);
                    setSensorEnabledStateBasic(101, true);
                    setSensorEnabledStateBasic(102, false);
                    setSensorEnabledStateBasic(116, false);
                    setSensorEnabledStateBasic(103, false);
                    setSensorEnabledStateBasic(106, false);
                    return;
                }
                if (isEXGUsingDefaultTestSignalConfiguration()) {
                    setSensorEnabledStateBasic(100, false);
                    setSensorEnabledStateBasic(101, false);
                    setSensorEnabledStateBasic(102, true);
                    setSensorEnabledStateBasic(116, false);
                    setSensorEnabledStateBasic(103, false);
                    setSensorEnabledStateBasic(106, false);
                    return;
                }
                if (isEXGUsingDefaultThreeUnipolarConfiguration()) {
                    setSensorEnabledStateBasic(100, false);
                    setSensorEnabledStateBasic(101, false);
                    setSensorEnabledStateBasic(102, false);
                    setSensorEnabledStateBasic(116, false);
                    setSensorEnabledStateBasic(103, false);
                    setSensorEnabledStateBasic(106, true);
                    return;
                }
                if (isEXGUsingCustomSignalConfiguration()) {
                    setSensorEnabledStateBasic(100, false);
                    setSensorEnabledStateBasic(101, false);
                    setSensorEnabledStateBasic(102, false);
                    setSensorEnabledStateBasic(116, true);
                    setSensorEnabledStateBasic(103, false);
                    setSensorEnabledStateBasic(106, false);
                    return;
                }
                if (this.mSensorMap.get(100) != null) {
                    setSensorEnabledStateBasic(100, false);
                    setSensorEnabledStateBasic(101, false);
                    setSensorEnabledStateBasic(102, false);
                    setSensorEnabledStateBasic(116, false);
                    setSensorEnabledStateBasic(103, false);
                    setSensorEnabledStateBasic(106, false);
                    return;
                }
                return;
            }
            if (isShimmerGenGq()) {
                setSensorEnabledStateBasic(100, isEXGUsingDefaultECGGqConfiguration());
            }
        }
    }

    private void checkWhichExgRespPhaseValuesToUse() {
        ConfigOptionDetailsSensor configOptionDetailsSensor;
        if (this.mConfigOptionsMapSensors == null || (configOptionDetailsSensor = this.mConfigOptionsMapSensors.get(SensorEXG.GuiLabelConfig.EXG_RESPIRATION_DETECT_PHASE)) == null) {
            return;
        }
        if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
            int i = !isExgRespirationDetectFreq32kHz() ? 1 : 0;
            if (i != -1 && (configOptionDetailsSensor instanceof ConfigOptionDetailsSensor)) {
                configOptionDetailsSensor.setIndexOfValuesToUse(i);
            }
            Integer[] configValues = configOptionDetailsSensor.getConfigValues();
            if (Arrays.asList(configValues).contains(Integer.valueOf(getEXG2RespirationDetectPhase()))) {
                return;
            }
            setEXG2RespirationDetectPhase(configValues[0].intValue());
        }
    }

    private void checkWhichExgRefElectrodeValuesToUse() {
        ConfigOptionDetailsSensor configOptionDetailsSensor;
        if (this.mConfigOptionsMapSensors == null || (configOptionDetailsSensor = this.mConfigOptionsMapSensors.get(SensorEXG.GuiLabelConfig.EXG_REFERENCE_ELECTRODE)) == null) {
            return;
        }
        int i = 3;
        if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
            if (isEXGUsingDefaultRespirationConfiguration()) {
                i = 2;
            } else if (isEXGUsingDefaultECGConfiguration() || isEXGUsingDefaultECGGqConfiguration()) {
                i = 0;
            } else if (isEXGUsingDefaultEMGConfiguration()) {
                i = 1;
            } else if (!isEXGUsingDefaultTestSignalConfiguration()) {
                i = isEXGUsingDefaultThreeUnipolarConfiguration() ? 5 : 4;
            }
            if (i != -1 && (configOptionDetailsSensor instanceof ConfigOptionDetailsSensor)) {
                configOptionDetailsSensor.setIndexOfValuesToUse(i);
            }
            Integer[] configValues = configOptionDetailsSensor.getConfigValues();
            if (Arrays.asList(configValues).contains(Integer.valueOf(getEXGReferenceElectrode()))) {
                return;
            }
            consolePrintErrLn("EXG Ref not supported: " + getEXGReferenceElectrode() + "\tChanging to: " + configValues[0]);
            setEXGReferenceElectrode(configValues[0].intValue());
        }
    }

    @Deprecated
    public boolean isEXGUsingECG16Configuration() {
        return (this.mEnabledSensors & 1048576) > 0 && (this.mEnabledSensors & 524288) > 0 && isEXGUsingDefaultECGConfiguration();
    }

    @Deprecated
    public boolean isEXGUsingECG24Configuration() {
        return (this.mEnabledSensors & 16) > 0 && (this.mEnabledSensors & 8) > 0 && isEXGUsingDefaultECGConfiguration();
    }

    @Deprecated
    public boolean isEXGUsingEMG16Configuration() {
        return (this.mEnabledSensors & 1048576) > 0 && (this.mEnabledSensors & 524288) > 0 && isEXGUsingDefaultEMGConfiguration();
    }

    @Deprecated
    public boolean isEXGUsingEMG24Configuration() {
        return (this.mEnabledSensors & 16) > 0 && (this.mEnabledSensors & 8) > 0 && isEXGUsingDefaultEMGConfiguration();
    }

    @Deprecated
    public boolean isEXGUsingTestSignal16Configuration() {
        return (this.mEnabledSensors & 1048576) > 0 && (this.mEnabledSensors & 524288) > 0 && isEXGUsingDefaultTestSignalConfiguration();
    }

    @Deprecated
    public boolean isEXGUsingTestSignal24Configuration() {
        return (this.mEnabledSensors & 16) > 0 && (this.mEnabledSensors & 8) > 0 && isEXGUsingDefaultTestSignalConfiguration();
    }

    @Deprecated
    public String parseReferenceElectrodeTotring(int i) {
        return (i == 0 && (isEXGUsingDefaultECGConfiguration() || isEXGUsingDefaultEMGConfiguration())) ? "Fixed Potential" : (i == 13 && isEXGUsingDefaultECGConfiguration()) ? "Inverse Wilson CT" : (i == 3 && isEXGUsingDefaultEMGConfiguration()) ? "Inverse of Ch1" : "Unknown";
    }

    public boolean isUsingValidLNAccelParam() {
        return (UtilShimmer.isAllZeros(getAlignmentMatrixAccel()) || UtilShimmer.isAllZeros(getSensitivityMatrixAccel())) ? false : true;
    }

    public double getCalibTimeAccel() {
        return getCurrentCalibDetailsAccelLn().getCalibTimeMs();
    }

    public boolean isUsingDefaultLNAccelParam() {
        return getCurrentCalibDetailsAccelLn().isUsingDefaultParameters();
    }

    public double[][] getAlignmentMatrixAccel() {
        return getCurrentCalibDetailsAccelLn().getValidAlignmentMatrix();
    }

    public double[][] getSensitivityMatrixAccel() {
        return getCurrentCalibDetailsAccelLn().getValidSensitivityMatrix();
    }

    public double[][] getOffsetVectorMatrixAccel() {
        return getCurrentCalibDetailsAccelLn().getValidOffsetVector();
    }

    public byte[] generateCalParamByteArrayAccelLn() {
        return getCurrentCalibDetailsAccelLn().generateCalParamByteArray();
    }

    public void parseCalibParamFromPacketAccelAnalog(byte[] bArr, CalibDetails.CALIB_READ_SOURCE calib_read_source) {
        getCurrentCalibDetailsAccelLn().parseCalParamByteArray(bArr, calib_read_source);
    }

    public void setHighResAccelWR(boolean z) {
        this.mSensorLSM303.setHighResAccelWR(z);
    }

    public void setHighPerModeAccelWR(boolean z) {
        this.mSensorLIS2DW12.setHighPerModeAccelWR(z);
    }

    public void setLowPowerAccelWR(boolean z) {
        if (isShimmerGen3()) {
            this.mSensorLSM303.setLowPowerAccelWR(z);
        } else if (isShimmerGen3R()) {
            this.mSensorLIS2DW12.setLowPowerAccelWR(z);
        }
    }

    protected void setLowPowerMag(boolean z) {
        if (isShimmerGen2()) {
            this.mSensorShimmer2Mag.setLowPowerMag(z);
        } else if (isShimmerGen3()) {
            this.mSensorLSM303.setLowPowerMag(z);
        } else if (isShimmerGen3R()) {
            this.mSensorLIS3MDL.setLowPowerMag(z);
        }
    }

    protected void setMedPowerMag(boolean z) {
        this.mSensorLIS3MDL.setLowPowerMag(z);
    }

    protected void setHighPowerMag(boolean z) {
        this.mSensorLIS3MDL.setLowPowerMag(z);
    }

    protected void setUltraHighPowerMag(boolean z) {
        this.mSensorLIS3MDL.setLowPowerMag(z);
    }

    private void setShimmer2rMagRateFromFreq(double d) {
        this.mSensorShimmer2Mag.setShimmer2rMagRateFromFreq(d);
    }

    private void setShimmer2rMagRate(int i) {
        if (isShimmerGen2()) {
            this.mSensorShimmer2Mag.setShimmer2rMagRate(i);
        }
    }

    public boolean isLowPowerMagEnabled() {
        if (isShimmerGen2()) {
            return this.mSensorShimmer2Mag.isLowPowerMagEnabled();
        }
        if (isShimmerGen3()) {
            return this.mSensorLSM303.isLowPowerMagEnabled();
        }
        if (isShimmerGen3R()) {
            return this.mSensorLIS3MDL.isLowPowerMagEnabled();
        }
        return false;
    }

    public boolean isMedPowerMagEnabled() {
        return this.mSensorLIS3MDL.isMedPowerMagEnabled();
    }

    public boolean isHighPowerMagEnabled() {
        return this.mSensorLIS3MDL.isMedPowerMagEnabled();
    }

    public boolean isUltraHighPowerMagEnabled() {
        return this.mSensorLIS3MDL.isMedPowerMagEnabled();
    }

    public void setAccelRange(int i) {
        setDigitalAccelRange(i);
    }

    public void setDigitalAccelRate(int i) {
        if (isShimmerGen3()) {
            this.mSensorLSM303.setLSM303DigitalAccelRate(i);
        } else if (isShimmerGen3R()) {
            this.mSensorLIS2DW12.setLIS2DW12DigitalAccelRate(i);
        }
    }

    public void setDigitalAccelRange(int i) {
        if (isShimmerGen2()) {
            this.mSensorMMA736x.setAccelRange(i);
        } else if (isShimmerGen3()) {
            this.mSensorLSM303.setLSM303AccelRange(i);
        } else if (isShimmerGen3R()) {
            this.mSensorLIS2DW12.setLIS2DW12AccelRange(i);
        }
    }

    public void setLSM303DigitalAccelRate(int i) {
        if (isShimmerGen3()) {
            this.mSensorLSM303.setLSM303DigitalAccelRate(i);
        }
    }

    public void setLIS2DW12DigitalAccelRate(int i) {
        if (isShimmerGen3R()) {
            this.mSensorLIS2DW12.setLIS2DW12DigitalAccelRate(i);
        }
    }

    public void setAltMagRange(int i) {
        this.mSensorLIS3MDL.setLIS3MDLAltMagRange(i);
    }

    public void setAltMagRate(int i) {
        this.mSensorLIS3MDL.setLIS3MDLAltMagRate(i);
    }

    public void setMagRange(int i) {
        if (isShimmerGen3()) {
            this.mSensorLSM303.setLSM303MagRange(i);
        } else if (isShimmerGen3R()) {
            this.mSensorLIS2MDL.setLISMagRange(i);
        }
    }

    @Deprecated
    public void setLSM303MagRange(int i) {
        if (isShimmerGen3()) {
            this.mSensorLSM303.setLSM303MagRange(i);
        } else if (isShimmerGen3R()) {
            this.mSensorLIS2MDL.setLISMagRange(i);
        }
    }

    private int setLSM303MagRateFromFreq(double d) {
        if (isShimmerGen3R()) {
            return this.mSensorLIS2MDL.setLIS2MDLAltMagRateFromFreq(d);
        }
        return this.mSensorLSM303.setLSM303MagRateFromFreq(d);
    }

    public void setMagRate(int i) {
        if (isShimmerGen2()) {
            this.mSensorShimmer2Mag.setShimmer2rMagRate(i);
        } else if (isShimmerGen3()) {
            this.mSensorLSM303.setLSM303MagRate(i);
        } else if (isShimmerGen3R()) {
            this.mSensorLIS2MDL.setLISMagRateInternal(i);
        }
    }

    public int getWRAccelRate() throws Exception {
        if (isShimmerGen2()) {
            throw new Exception("WR Accel not configurable for Shimmer2");
        }
        if (isShimmerGen3()) {
            return this.mSensorLSM303.getLSM303DigitalAccelRate();
        }
        if (isShimmerGen3R()) {
            return this.mSensorLIS2DW12.getLIS2DW12DigitalAccelRate();
        }
        Integer num = null;
        num.intValue();
        throw null;
    }

    public int getGyroRate() throws Exception {
        if (isShimmerGen2()) {
            throw new Exception("Gyro Rate is not configurable for Shimmer2");
        }
        if (isShimmerGen3()) {
            return this.mSensorMpu9x50.getMPU9X50GyroAccelRate();
        }
        if (isShimmerGen3R()) {
            return this.mSensorLSM6DSV.getLSM6DSVGyroAccelRate();
        }
        Integer num = null;
        num.intValue();
        throw null;
    }

    public int getMagRate() {
        if (isShimmerGen2()) {
            return this.mSensorShimmer2Mag.getMagRate();
        }
        if (isShimmerGen3()) {
            return this.mSensorLSM303.getLSM303MagRate();
        }
        if (isShimmerGen3R()) {
            return this.mSensorLIS2MDL.getLIS2MDLMagRate();
        }
        return 0;
    }

    private int setLSM303AccelRateFromFreq(double d) {
        return this.mSensorLSM303.setLSM303AccelRateFromFreq(d);
    }

    private int setLIS2DW12AccelRateFromFreq(double d) {
        return this.mSensorLIS2DW12.setLIS2DW12AccelRateFromFreq(d);
    }

    private void setDefaultLsm303AccelSensorConfig(boolean z) {
        this.mSensorLSM303.setDefaultLsm303AccelSensorConfig(z);
    }

    private void setDefaultLIS2DW12AccelSensorConfig(boolean z) {
        this.mSensorLIS2DW12.setDefaultLIS2DW12AccelSensorConfig(z);
    }

    private void setDefaultLsm303MagSensorConfig(boolean z) {
        this.mSensorLSM303.setDefaultLsm303MagSensorConfig(z);
    }

    public boolean isHighResAccelWR() {
        return this.mSensorLSM303.isHighResAccelWR();
    }

    public boolean isHighPerModeAccelWR() {
        return this.mSensorLIS2DW12.isHighPerModeAccelWR();
    }

    public void setHighResAccelWR(int i) {
        this.mSensorLSM303.setHighResAccelWR(i);
    }

    public void setHighPerModeAccelWR(int i) {
        this.mSensorLIS2DW12.setHighPerModeAccelWR(i);
    }

    public boolean isLSM303DigitalAccelHRM() {
        return this.mSensorLSM303.isLSM303DigitalAccelHRM();
    }

    public boolean isLIS2DW12DigitalAccelHPM() {
        return this.mSensorLIS2DW12.isLIS2DW12DigitalAccelHPM();
    }

    public int getHighResAccelWREnabled() {
        return this.mSensorLSM303.getHighResAccelWREnabled();
    }

    public int getHighPerModeAccelWREnabled() {
        return this.mSensorLIS2DW12.getHighPerModeAccelWREnabled();
    }

    public double getCalibTimeWRAccel() {
        if (isShimmerGen3()) {
            return this.mSensorLSM303.getCalibTimeWRAccel();
        }
        if (isShimmerGen3R()) {
            return this.mSensorLIS2DW12.getCalibTimeWRAccel();
        }
        Double d = null;
        d.doubleValue();
        throw null;
    }

    public boolean isUsingDefaultWRAccelParam() {
        if (isShimmerGen3()) {
            return this.mSensorLSM303.isUsingDefaultWRAccelParam();
        }
        if (isShimmerGen3R()) {
            return this.mSensorLIS2DW12.isUsingDefaultWRAccelParam();
        }
        Boolean bool = null;
        bool.booleanValue();
        throw null;
    }

    public boolean isUsingValidWRAccelParam() {
        if (isShimmerGen3()) {
            return this.mSensorLSM303.isUsingValidWRAccelParam();
        }
        if (isShimmerGen3R()) {
            return this.mSensorLIS2DW12.isUsingValidWRAccelParam();
        }
        Boolean bool = null;
        bool.booleanValue();
        throw null;
    }

    public double getCalibTimeMag() {
        if (isShimmerGen3R()) {
            return this.mSensorLIS2MDL.getCalibTimeMag();
        }
        return this.mSensorLSM303.getCalibTimeMag();
    }

    public boolean isUsingDefaultMagParam() {
        if (isShimmerGen3R()) {
            return this.mSensorLIS2MDL.isUsingDefaultMagParam();
        }
        return this.mSensorLSM303.isUsingDefaultMagParam();
    }

    public boolean isUsingValidMagParam() {
        if (isShimmerGen3R()) {
            return this.mSensorLIS2MDL.isUsingValidMagParam();
        }
        return this.mSensorLSM303.isUsingValidMagParam();
    }

    public boolean isUsingDefaultMagAltParam() {
        return this.mSensorLIS3MDL.isUsingDefaultMagAltParam();
    }

    public boolean isUsingValidMagAltParam() {
        return this.mSensorLIS3MDL.isUsingValidMagAltParam();
    }

    public boolean isLowPowerAccelWR() {
        if (isShimmerGen3()) {
            return this.mSensorLSM303.isLowPowerAccelWR();
        }
        if (isShimmerGen3R()) {
            return this.mSensorLIS2DW12.isLowPowerAccelWR();
        }
        Boolean bool = null;
        bool.booleanValue();
        throw null;
    }

    public boolean isLSM303DigitalAccelLPM() {
        return this.mSensorLSM303.isLSM303DigitalAccelLPM();
    }

    public boolean isLIS2DW12DigitalAccelLPM() {
        return this.mSensorLIS2DW12.isLIS2DW12DigitalAccelLPM();
    }

    public boolean isLowPowerAccelEnabled() {
        if (isShimmerGen3()) {
            return this.mSensorLSM303.isLowPowerAccelEnabled();
        }
        if (isShimmerGen3R()) {
            return this.mSensorLIS2DW12.isLowPowerAccelEnabled();
        }
        Boolean bool = null;
        bool.booleanValue();
        throw null;
    }

    public void setLowPowerAccelEnabled(int i) {
        if (isShimmerGen3()) {
            this.mSensorLSM303.setLowPowerAccelEnabled(i);
        } else if (isShimmerGen3R()) {
            this.mSensorLIS2DW12.setLowPowerAccelEnabled(i);
        }
    }

    public int getLowPowerAccelEnabled() {
        if (isShimmerGen3()) {
            return this.mSensorLSM303.getLowPowerAccelEnabled();
        }
        if (isShimmerGen3R()) {
            return this.mSensorLIS2DW12.getLowPowerAccelEnabled();
        }
        Integer num = null;
        num.intValue();
        throw null;
    }

    public int getLowPowerMagEnabled() {
        if (isShimmerGen3R()) {
            return this.mSensorLIS2MDL.getLowPowerMagEnabled();
        }
        return this.mSensorLSM303.getLowPowerMagEnabled();
    }

    public int getMedPowerMagEnabled() {
        return this.mSensorLIS3MDL.getMedPowerMagEnabled();
    }

    public int getHighPowerMagEnabled() {
        return this.mSensorLIS3MDL.getHighPowerMagEnabled();
    }

    public int getUltraHighPowerMagEnabled() {
        return this.mSensorLIS3MDL.getUltraHighPowerMagEnabled();
    }

    public int getAccelRange() {
        if (isShimmerGen2()) {
            return this.mSensorMMA736x.getAccelRange();
        }
        if (isShimmerGen3()) {
            return this.mSensorLSM303.getAccelRange();
        }
        if (isShimmerGen3R()) {
            return this.mSensorLIS2DW12.getAccelRange();
        }
        Integer num = null;
        num.intValue();
        throw null;
    }

    public int getMagRange() {
        if (isShimmerGen2()) {
            return this.mSensorShimmer2Mag.getMagRange();
        }
        if (isShimmerGen3()) {
            return this.mSensorLSM303.getMagRange();
        }
        if (isShimmerGen3R()) {
            return this.mSensorLIS2MDL.getMagRange();
        }
        return 0;
    }

    public int getLSM303DigitalAccelRate() {
        return this.mSensorLSM303.getLSM303DigitalAccelRate();
    }

    public int getLIS2DW12DigitalAccelRate() {
        return this.mSensorLIS2DW12.getLIS2DW12DigitalAccelRate();
    }

    public double[][] getAlignmentMatrixWRAccel() {
        if (isShimmerGen3()) {
            return this.mSensorLSM303.getAlignmentMatrixWRAccel();
        }
        if (isShimmerGen3R()) {
            return this.mSensorLIS2DW12.getAlignmentMatrixWRAccel();
        }
        return null;
    }

    public double[][] getSensitivityMatrixWRAccel() {
        if (isShimmerGen3()) {
            return this.mSensorLSM303.getSensitivityMatrixWRAccel();
        }
        if (isShimmerGen3R()) {
            return this.mSensorLIS2DW12.getSensitivityMatrixWRAccel();
        }
        return null;
    }

    public double[][] getOffsetVectorMatrixWRAccel() {
        if (isShimmerGen3()) {
            return this.mSensorLSM303.getOffsetVectorMatrixWRAccel();
        }
        if (isShimmerGen3R()) {
            return this.mSensorLIS2DW12.getOffsetVectorMatrixWRAccel();
        }
        return null;
    }

    public double[][] getAlignmentMatrixMag() {
        if (isShimmerGen3R()) {
            return this.mSensorLIS2MDL.getAlignmentMatrixMag();
        }
        return this.mSensorLSM303.getAlignmentMatrixMag();
    }

    public double[][] getSensitivityMatrixMag() {
        if (isShimmerGen3R()) {
            return this.mSensorLIS2MDL.getSensitivityMatrixMag();
        }
        return this.mSensorLSM303.getSensitivityMatrixMag();
    }

    public double[][] getOffsetVectorMatrixMag() {
        if (isShimmerGen3R()) {
            return this.mSensorLIS2MDL.getOffsetVectorMatrixMag();
        }
        return this.mSensorLSM303.getOffsetVectorMatrixMag();
    }

    public double[][] getOffsetVectorMatrixHighGAccel() {
        if (isShimmerGen3R()) {
            return this.mSensorADXL371.getOffsetVectorMatrixHighGAccel();
        }
        return null;
    }

    public double[][] getAlignmentMatrixHighGAccel() {
        if (isShimmerGen3R()) {
            return this.mSensorADXL371.getAlignmentMatrixHighGAccel();
        }
        return null;
    }

    public double[][] getSensitivityMatrixHighGAccel() {
        if (isShimmerGen3R()) {
            return this.mSensorADXL371.getSensitivityMatrixHighGAccel();
        }
        return null;
    }

    public double[][] getOffsetVectorMatrixAltMag() {
        if (isShimmerGen3R()) {
            return this.mSensorLIS3MDL.getOffsetVectorMatrixMagAlt();
        }
        return null;
    }

    public double[][] getAlignmentMatrixAltMag() {
        if (isShimmerGen3R()) {
            return this.mSensorLIS3MDL.getAlignmentMatrixMagAlt();
        }
        return null;
    }

    public double[][] getSensitivityMatrixAltMag() {
        if (isShimmerGen3R()) {
            return this.mSensorLIS3MDL.getSensitivityMatrixMagAlt();
        }
        return null;
    }

    public byte[] getGyroCalRawParams() {
        if (isShimmerGen2()) {
            return this.mSensorShimmer2Gyro.mCurrentCalibDetailsGyro.generateCalParamByteArray();
        }
        if (isShimmerGen3()) {
            return this.mSensorMpu9x50.mCurrentCalibDetailsGyro.generateCalParamByteArray();
        }
        if (isShimmerGen3R()) {
            return this.mSensorLSM6DSV.mCurrentCalibDetailsGyro.generateCalParamByteArray();
        }
        return null;
    }

    public void updateCurrentGyroCalibInUse() {
        if (isShimmerGen2()) {
            this.mSensorShimmer2Gyro.updateCurrentCalibInUse();
        } else if (isShimmerGen3()) {
            this.mSensorMpu9x50.updateCurrentGyroCalibInUse();
        } else if (isShimmerGen3R()) {
            this.mSensorLSM6DSV.updateCurrentGyroCalibInUse();
        }
    }

    public void enableOnTheFlyGyroCal(boolean z, int i, double d) {
        if (isShimmerGen2()) {
            this.mSensorShimmer2Gyro.enableOnTheFlyGyroCal(z, i, d);
            return;
        }
        AbstractAlgorithm algorithmModule = getAlgorithmModule(GyroOnTheFlyCalModule.GENERAL_ALGORITHM_NAME);
        if (algorithmModule != null) {
            setIsAlgorithmEnabled(GyroOnTheFlyCalModule.GENERAL_ALGORITHM_NAME, z);
            ((GyroOnTheFlyCalModule) algorithmModule).enableOnTheFlyGyroCal(z, i, d);
        }
    }

    public void setOnTheFlyGyroCal(boolean z) {
        if (isShimmerGen2()) {
            this.mSensorShimmer2Gyro.setOnTheFlyGyroCal(z);
        } else {
            setIsAlgorithmEnabled(GyroOnTheFlyCalModule.GENERAL_ALGORITHM_NAME, z);
        }
    }

    public boolean isGyroOnTheFlyCalEnabled() {
        if (isShimmerGen2()) {
            return this.mSensorShimmer2Gyro.isGyroOnTheFlyCalEnabled();
        }
        return isAlgorithmEnabled(GyroOnTheFlyCalModule.GENERAL_ALGORITHM_NAME);
    }

    private OnTheFlyGyroOffsetCal getOnTheFlyCalGyro() {
        if (isShimmerGen2()) {
            return this.mSensorShimmer2Gyro.getOnTheFlyCalGyro();
        }
        return null;
    }

    public CalibDetailsKinematic getCurrentCalibDetailsGyro() {
        if (isShimmerGen2()) {
            return this.mSensorShimmer2Gyro.getCurrentCalibDetailsGyro();
        }
        if (isShimmerGen3() || isShimmerGenGq()) {
            return this.mSensorMpu9x50.getCurrentCalibDetailsGyro();
        }
        if (isShimmerGen3R()) {
            return this.mSensorLSM6DSV.getCurrentCalibDetailsGyro();
        }
        return null;
    }

    public byte[] generateCalParamGyroscope() {
        return getCurrentCalibDetailsGyro().generateCalParamByteArray();
    }

    public void parseCalibParamFromPacketGyro(byte[] bArr, CalibDetails.CALIB_READ_SOURCE calib_read_source) {
        getCurrentCalibDetailsGyro().parseCalParamByteArray(bArr, calib_read_source);
    }

    private void setDefaultCalibrationShimmer3Gyro() {
        getCurrentCalibDetailsGyro().resetToDefaultParameters();
    }

    public int setMPU9150GyroAccelRateFromFreq(double d) {
        return this.mSensorMpu9x50.setMPU9150GyroAccelRateFromFreq(d);
    }

    private int setMPU9150MagRateFromFreq(double d) {
        return this.mSensorMpu9x50.setMPU9150MagRateFromFreq(d);
    }

    private int setMPU9150MplRateFromFreq(double d) {
        return this.mSensorMpu9x50.setMPU9150MplRateFromFreq(d);
    }

    private void setDefaultMpu9150GyroSensorConfig(boolean z) {
        this.mSensorMpu9x50.setDefaultMpu9150GyroSensorConfig(z);
    }

    private void setDefaultMpu9150AccelSensorConfig(boolean z) {
        this.mSensorMpu9x50.setDefaultMpu9150AccelSensorConfig(z);
    }

    private void setDefaultMpu9150MplSensorConfig(boolean z) {
        SensorMPU9X50 sensorMPU9X50 = this.mSensorMpu9x50;
        if (sensorMPU9X50 != null) {
            sensorMPU9X50.setDefaultMpu9150MplSensorConfig(z);
        }
    }

    private boolean checkIfAMpuGyroOrAccelEnabled() {
        SensorMPU9X50 sensorMPU9X50 = this.mSensorMpu9x50;
        if (sensorMPU9X50 != null) {
            return sensorMPU9X50.checkIfAMpuGyroOrAccelEnabled();
        }
        return false;
    }

    private boolean checkIfAnyOtherMplChannelEnabled(int i) {
        SensorMPU9X50 sensorMPU9X50 = this.mSensorMpu9x50;
        if (sensorMPU9X50 != null) {
            return sensorMPU9X50.checkIfAnyOtherMplChannelEnabled(i);
        }
        return false;
    }

    public boolean checkIfAnyMplChannelEnabled() {
        SensorMPU9X50 sensorMPU9X50 = this.mSensorMpu9x50;
        if (sensorMPU9X50 != null) {
            return sensorMPU9X50.checkIfAnyMplChannelEnabled();
        }
        return false;
    }

    public int getMPU9X50GyroAccelRate() {
        return this.mSensorMpu9x50.getMPU9X50GyroAccelRate();
    }

    public void setMPU9150GyroAccelRate(int i) {
        this.mSensorMpu9x50.setMPU9X50GyroAccelRate(i);
    }

    public int getLSM6DSVGyroAccelRate() {
        return this.mSensorLSM6DSV.getLSM6DSVGyroAccelRate();
    }

    public void setLSM6DSVGyroAccelRate(int i) {
        this.mSensorLSM6DSV.setLSM6DSVGyroAccelRate(i);
    }

    public int getMPU9X50MotCalCfg() {
        return this.mSensorMpu9x50.getMPU9X50MotCalCfg();
    }

    public int getMPU9X50LPF() {
        return this.mSensorMpu9x50.getMPU9X50LPF();
    }

    public int getMPU9X50DMP() {
        return this.mSensorMpu9x50.getMPU9X50DMP();
    }

    public int getMPU9X50MPLSamplingRate() {
        return this.mSensorMpu9x50.getMPU9X50MPLSamplingRate();
    }

    public int getMPU9X50MagSamplingRate() {
        return this.mSensorMpu9x50.getMPU9X50MagSamplingRate();
    }

    public double getMPU9X50GyroAccelRateInHz() {
        return this.mSensorMpu9x50.getMPU9X50GyroAccelRateInHz();
    }

    public void setMPU9150AccelRange(int i) {
        this.mSensorMpu9x50.setMPU9X50AccelRange(i);
    }

    public int getMPU9X50AccelRange() {
        return this.mSensorMpu9x50.getMPU9X50AccelRange();
    }

    public int getGyroRange() {
        if (isShimmerGen2()) {
            return this.mSensorShimmer2Gyro.getGyroRange();
        }
        if (isShimmerGen3()) {
            return this.mSensorMpu9x50.getGyroRange();
        }
        if (isShimmerGen3R()) {
            return this.mSensorLSM6DSV.getGyroRange();
        }
        Integer num = null;
        num.intValue();
        throw null;
    }

    public void setGyroRange(int i) {
        if (isShimmerGen2()) {
            this.mSensorShimmer2Gyro.setGyroRange(i);
        } else if (isShimmerGen3()) {
            this.mSensorMpu9x50.setGyroRange(i);
        } else if (isShimmerGen3R()) {
            this.mSensorLSM6DSV.setGyroRange(i);
        }
    }

    protected void setMPU9150GyroRange(int i) {
        SensorMPU9X50 sensorMPU9X50 = this.mSensorMpu9x50;
        if (sensorMPU9X50 != null) {
            sensorMPU9X50.setMPU9150GyroRange(i);
        }
    }

    protected void setLSM6DSVGyroRange(int i) {
        SensorLSM6DSV sensorLSM6DSV = this.mSensorLSM6DSV;
        if (sensorLSM6DSV != null) {
            sensorLSM6DSV.setLSM6DSVGyroRange(i);
        }
    }

    public void setMPU9150MPLSamplingRate(int i) {
        SensorMPU9X50 sensorMPU9X50 = this.mSensorMpu9x50;
        if (sensorMPU9X50 != null) {
            sensorMPU9X50.setMPU9150MPLSamplingRate(i);
        }
    }

    public void setMPU9150MagSamplingRate(int i) {
        SensorMPU9X50 sensorMPU9X50 = this.mSensorMpu9x50;
        if (sensorMPU9X50 != null) {
            sensorMPU9X50.setMPU9X50MagSamplingRate(i);
        }
    }

    public boolean isMPU9150DMP() {
        return this.mSensorMpu9x50.isMPU9150DMP();
    }

    public void setMPU9150DMP(boolean z) {
        SensorMPU9X50 sensorMPU9X50 = this.mSensorMpu9x50;
        if (sensorMPU9X50 != null) {
            sensorMPU9X50.setMPU9150DMP(z);
        }
    }

    public void setMPU9150DMP(int i) {
        SensorMPU9X50 sensorMPU9X50 = this.mSensorMpu9x50;
        if (sensorMPU9X50 != null) {
            sensorMPU9X50.setMPU9150DMP(i);
        }
    }

    public int getMPLEnable() {
        return this.mSensorMpu9x50.getMPLEnable();
    }

    public boolean isMPLEnabled() {
        return this.mSensorMpu9x50.isMPLEnable();
    }

    public void setMPLEnabled(boolean z) {
        SensorMPU9X50 sensorMPU9X50 = this.mSensorMpu9x50;
        if (sensorMPU9X50 != null) {
            sensorMPU9X50.setMPLEnabled(z);
        }
    }

    public void setMPLEnabled(int i) {
        SensorMPU9X50 sensorMPU9X50 = this.mSensorMpu9x50;
        if (sensorMPU9X50 != null) {
            sensorMPU9X50.setMPLEnabled(i);
        }
    }

    public void setMPLSensorFusion(boolean z) {
        SensorMPU9X50 sensorMPU9X50 = this.mSensorMpu9x50;
        if (sensorMPU9X50 != null) {
            sensorMPU9X50.setMPLSensorFusion(z);
        }
    }

    public void setMPLSensorFusion(int i) {
        SensorMPU9X50 sensorMPU9X50 = this.mSensorMpu9x50;
        if (sensorMPU9X50 != null) {
            sensorMPU9X50.setMPLSensorFusion(i);
        }
    }

    public int getMPLGyroCalTC() {
        return this.mSensorMpu9x50.getMPLGyroCalTC();
    }

    public boolean isMPLGyroCalTC() {
        return this.mSensorMpu9x50.isMPLGyroCalTC();
    }

    public void setMPLGyroCalTC(boolean z) {
        SensorMPU9X50 sensorMPU9X50 = this.mSensorMpu9x50;
        if (sensorMPU9X50 != null) {
            sensorMPU9X50.setMPLGyroCalTC(z);
        }
    }

    public void setMPLGyroCalTC(int i) {
        SensorMPU9X50 sensorMPU9X50 = this.mSensorMpu9x50;
        if (sensorMPU9X50 != null) {
            sensorMPU9X50.setMPLGyroCalTC(i);
        }
    }

    public int getMPLVectCompCal() {
        return this.mSensorMpu9x50.getMPLVectCompCal();
    }

    public boolean isMPLVectCompCal() {
        return this.mSensorMpu9x50.isMPLVectCompCal();
    }

    public void setMPLVectCompCal(boolean z) {
        this.mSensorMpu9x50.setMPLVectCompCal(z);
    }

    public void setMPLVectCompCal(int i) {
        this.mSensorMpu9x50.setMPLVectCompCal(i);
    }

    public int getMPLMagDistCal() {
        return this.mSensorMpu9x50.getMPLMagDistCal();
    }

    public boolean isMPLMagDistCal() {
        return this.mSensorMpu9x50.isMPLMagDistCal();
    }

    public void setMPLMagDistCal(boolean z) {
        SensorMPU9X50 sensorMPU9X50 = this.mSensorMpu9x50;
        if (sensorMPU9X50 != null) {
            sensorMPU9X50.setMPLMagDistCal(z);
        }
    }

    public void setMPLMagDistCal(int i) {
        SensorMPU9X50 sensorMPU9X50 = this.mSensorMpu9x50;
        if (sensorMPU9X50 != null) {
            sensorMPU9X50.setMPLMagDistCal(i);
        }
    }

    public int getMPLSensorFusion() {
        return this.mSensorMpu9x50.getMPLSensorFusion();
    }

    public boolean isMPLSensorFusion() {
        return this.mSensorMpu9x50.isMPLSensorFusion();
    }

    public void setMPU9150MotCalCfg(boolean z) {
        SensorMPU9X50 sensorMPU9X50 = this.mSensorMpu9x50;
        if (sensorMPU9X50 != null) {
            sensorMPU9X50.setMPU9150MotCalCfg(z);
        }
    }

    public void setMPU9150MotCalCfg(int i) {
        SensorMPU9X50 sensorMPU9X50 = this.mSensorMpu9x50;
        if (sensorMPU9X50 != null) {
            sensorMPU9X50.setMPU9X150MotCalCfg(i);
        }
    }

    public void setMPU9150LPF(int i) {
        SensorMPU9X50 sensorMPU9X50 = this.mSensorMpu9x50;
        if (sensorMPU9X50 != null) {
            sensorMPU9X50.setMPU9X50LPF(i);
        }
    }

    public double getCalibTimeGyro() {
        return getCurrentCalibDetailsGyro().getCalibTimeMs();
    }

    public double[][] getAlignmentMatrixGyro() {
        return getCurrentCalibDetailsGyro().getValidAlignmentMatrix();
    }

    public double[][] getSensitivityMatrixGyro() {
        return getCurrentCalibDetailsGyro().getValidSensitivityMatrix();
    }

    public double[][] getOffsetVectorMatrixGyro() {
        return getCurrentCalibDetailsGyro().getValidOffsetVector();
    }

    public double[][] getOffsetVectorMPLAccel() {
        return this.mSensorMpu9x50.getOffsetVectorMPLAccel();
    }

    public double[][] getSensitivityMatrixMPLAccel() {
        return this.mSensorMpu9x50.getSensitivityMatrixMPLAccel();
    }

    public double[][] getAlignmentMatrixMPLAccel() {
        return this.mSensorMpu9x50.getAlignmentMatrixMPLAccel();
    }

    public double[][] getOffsetVectorMPLMag() {
        return this.mSensorMpu9x50.getOffsetVectorMPLMag();
    }

    public double[][] getSensitivityMatrixMPLMag() {
        return this.mSensorMpu9x50.getSensitivityMatrixMPLMag();
    }

    public double[][] getAlignmentMatrixMPLMag() {
        return this.mSensorMpu9x50.getAlignmentMatrixMPLMag();
    }

    public double[][] getOffsetVectorMPLGyro() {
        return this.mSensorMpu9x50.getOffsetVectorMPLGyro();
    }

    public double[][] getSensitivityMatrixMPLGyro() {
        return this.mSensorMpu9x50.getSensitivityMatrixMPLGyro();
    }

    public double[][] getAlignmentMatrixMPLGyro() {
        return this.mSensorMpu9x50.getAlignmentMatrixMPLGyro();
    }

    public boolean isLowPowerGyroEnabled() {
        if (isShimmerGen3()) {
            return this.mSensorMpu9x50.isLowPowerGyroEnabled();
        }
        if (isShimmerGen3R()) {
            return this.mSensorLSM6DSV.isLowPowerGyroEnabled();
        }
        Boolean bool = null;
        bool.booleanValue();
        throw null;
    }

    public boolean isUsingDefaultGyroParam() {
        return getCurrentCalibDetailsGyro().isUsingDefaultParameters();
    }

    public boolean isUsingValidGyroParam() {
        return (UtilShimmer.isAllZeros(getAlignmentMatrixGyro()) || UtilShimmer.isAllZeros(getSensitivityMatrixGyro())) ? false : true;
    }

    protected void setLowPowerGyro(boolean z) {
        if (this.mShimmerVerObject.isShimmerGen2()) {
            this.mSensorShimmer2Gyro.setLowPowerGyro(z);
        } else if (this.mShimmerVerObject.isShimmerGen3()) {
            this.mSensorMpu9x50.setLowPowerGyro(z);
        } else if (this.mShimmerVerObject.isShimmerGen3R()) {
            this.mSensorLSM6DSV.setLowPowerGyro(z);
        }
    }

    public boolean checkLowPowerGyro() {
        if (this.mShimmerVerObject.isShimmerGen2()) {
            return this.mSensorShimmer2Gyro.checkLowPowerGyro();
        }
        if (this.mShimmerVerObject.isShimmerGen3()) {
            return this.mSensorMpu9x50.checkLowPowerGyro();
        }
        if (this.mShimmerVerObject.isShimmerGen3R()) {
            return this.mSensorLSM6DSV.checkLowPowerGyro();
        }
        return false;
    }

    public int getLowPowerGyroEnabled() {
        if (this.mShimmerVerObject.isShimmerGen2()) {
            return this.mSensorShimmer2Gyro.getLowPowerGyroEnabled();
        }
        if (this.mShimmerVerObject.isShimmerGen3()) {
            return this.mSensorMpu9x50.getLowPowerGyroEnabled();
        }
        if (this.mShimmerVerObject.isShimmerGen3R()) {
            return this.mSensorLSM6DSV.getLowPowerGyroEnabled();
        }
        return 0;
    }

    @Override // com.shimmerresearch.driver.ShimmerDevice
    public Object getConfigValueUsingConfigLabel(String str, String str2) {
        Object configValueUsingConfigLabel = super.getConfigValueUsingConfigLabel(str, str2);
        if (configValueUsingConfigLabel != null) {
            return configValueUsingConfigLabel;
        }
        if (str2.equals(SensorEXG.GuiLabelConfig.EXG_RESPIRATION_DETECT_PHASE) || str2.equals(SensorEXG.GuiLabelConfig.EXG_REFERENCE_ELECTRODE)) {
            checkConfigOptionValues(str2);
        }
        Integer.valueOf(-1);
        try {
            Integer.valueOf(Integer.parseInt(str));
        } catch (NumberFormatException unused) {
        }
        str2.hashCode();
        switch (str2) {
            case "Lead-Off Current":
                return Integer.valueOf(getEXGLeadOffDetectionCurrent());
            case "PPG Channel":
                return Integer.valueOf(getPpgAdcSelectionGsrBoard());
            case "Estimated Duration":
                return Integer.toString(getTrialDurationEstimatedInSecs());
            case "LSM303DLHC Divider":
                return Integer.valueOf(getSamplingDividerLsm303dlhcAccel());
            case "Lead-Off Comparator Threshold":
                return Integer.valueOf(getEXGLeadOffComparatorTreshold());
            case "Single Touch Start":
                return Boolean.valueOf(isSingleTouch());
            case "GSR Divider":
                return Integer.valueOf(getSamplingDividerGsr());
            case "PPG Divider":
                return Integer.valueOf(getSamplingDividerPpg());
            case "Reference Electrode":
                return Integer.valueOf(getEXGReferenceElectrode());
            case "SD Error LEDs":
                return Boolean.valueOf(isShowErrorLedsSd());
            case "Bluetooth Baud Rate":
                return Integer.valueOf(getBluetoothBaudRate());
            case "GSR Range":
                return Integer.valueOf(getGSRRange());
            case "Gain":
                return Integer.valueOf(getExGGainSetting());
            case "TCX0":
                return Boolean.valueOf(isTCXO());
            case "User Button":
                return Boolean.valueOf(isButtonStart());
            case "Lead-Off Detection":
                return Integer.valueOf(getEXGLeadOffCurrentMode());
            case "Maximum Duration":
                return Integer.toString(getTrialDurationMaximumInSecs());
            case "RTC Error LEDs":
                return Boolean.valueOf(isShowErrorLedsRtc());
            case "Resolution":
                return Integer.valueOf(getExGResolution());
            case "Broadcast Interval":
                return Integer.toString(getSyncBroadcastInterval());
            case "Kinematic Sensors Low-Power Mode":
                if (isLSM303DigitalAccelLPM() && checkLowPowerGyro() && checkLowPowerMag()) {
                    return true;
                }
                return false;
            case "Buffer Size":
                return Integer.toString(getBufferSize());
            case "InfoMem MAC":
                return getMacIdFromInfoMem();
            case "<html>SD Log Recording<br>Only</html>":
                return Boolean.valueOf(isDisableBluetooth());
            case "Respiration Detection Freq":
                return Integer.valueOf(getEXG2RespirationDetectFreq());
            case "Sync When Logging":
                return Boolean.valueOf(isSyncWhenLogging());
            case "Number Of Shimmers":
                return Integer.toString(getTrialNumberOfShimmers());
            case "Low-power Autostop":
                return Boolean.valueOf(isLowBattAutoStop());
            case "Experiment ID":
                return Integer.toString(getExperimentId());
            case "ExG Rate":
                return Integer.valueOf(getEXG1RateSetting());
            case "Channel1":
                return Integer.valueOf(getPpg1AdcSelectionProto3DeluxeBoard());
            case "Channel2":
                return Integer.valueOf(getPpg2AdcSelectionProto3DeluxeBoard());
            case "Respiration Detection Phase":
                return Integer.valueOf(getEXG2RespirationDetectPhase());
            case "VBATT Divider":
                return Integer.valueOf(getSamplingDividerVBatt());
            case "Master Shimmer":
                return Boolean.valueOf(isMasterShimmer());
            default:
                return configValueUsingConfigLabel;
        }
    }

    /* JADX WARN: Failed to restore switch over string. Please report as a decompilation issue */
    @Override // com.shimmerresearch.driver.ShimmerDevice
    public Object setConfigValueUsingConfigLabel(String str, String str2, Object obj) {
        Object string;
        str2.hashCode();
        char c = 65535;
        switch (str2.hashCode()) {
            case -2097859913:
                if (str2.equals(SensorEXG.GuiLabelConfig.EXG_LEAD_OFF_CURRENT)) {
                    c = 0;
                    break;
                }
                break;
            case -1999654902:
                if (str2.equals(SensorPPG.GuiLabelConfig.PPG_ADC_SELECTION)) {
                    c = 1;
                    break;
                }
                break;
            case -1864216264:
                if (str2.equals(Configuration.Shimmer3.GuiLabelConfig.EXPERIMENT_DURATION_ESTIMATED)) {
                    c = 2;
                    break;
                }
                break;
            case -1535623316:
                if (str2.equals(Configuration.ShimmerGqBle.GuiLabelConfig.SAMPLING_RATE_DIVIDER_LSM303DLHC_ACCEL)) {
                    c = 3;
                    break;
                }
                break;
            case -1453629181:
                if (str2.equals(SensorEXG.GuiLabelConfig.EXG_LEAD_OFF_COMPARATOR)) {
                    c = 4;
                    break;
                }
                break;
            case -1383234487:
                if (str2.equals(Configuration.Shimmer3.GuiLabelConfig.SINGLE_TOUCH_START)) {
                    c = 5;
                    break;
                }
                break;
            case -1246562167:
                if (str2.equals(Configuration.Shimmer3.GuiLabelConfig.ENABLED_SENSORS)) {
                    c = 6;
                    break;
                }
                break;
            case -1068296769:
                if (str2.equals("GSR Divider")) {
                    c = 7;
                    break;
                }
                break;
            case -1064286688:
                if (str2.equals("PPG Divider")) {
                    c = '\b';
                    break;
                }
                break;
            case -976687432:
                if (str2.equals(SensorEXG.GuiLabelConfig.EXG_REFERENCE_ELECTRODE)) {
                    c = '\t';
                    break;
                }
                break;
            case -787548081:
                if (str2.equals(Configuration.Shimmer3.GuiLabelConfig.ENABLE_ERROR_LEDS_SD)) {
                    c = '\n';
                    break;
                }
                break;
            case -748572768:
                if (str2.equals(Configuration.Shimmer3.GuiLabelConfig.BLUETOOTH_BAUD_RATE)) {
                    c = 11;
                    break;
                }
                break;
            case -100160157:
                if (str2.equals("GSR Range")) {
                    c = '\f';
                    break;
                }
                break;
            case 2211743:
                if (str2.equals(SensorEXG.GuiLabelConfig.EXG_GAIN)) {
                    c = '\r';
                    break;
                }
                break;
            case 2569607:
                if (str2.equals(Configuration.Shimmer3.GuiLabelConfig.TCXO)) {
                    c = 14;
                    break;
                }
                break;
            case 37842215:
                if (str2.equals(Configuration.Shimmer3.GuiLabelConfig.USER_BUTTON_START)) {
                    c = 15;
                    break;
                }
                break;
            case 69789763:
                if (str2.equals(SensorEXG.GuiLabelConfig.EXG_LEAD_OFF_DETECTION)) {
                    c = 16;
                    break;
                }
                break;
            case 80872404:
                if (str2.equals(Configuration.Shimmer3.GuiLabelConfig.EXPERIMENT_DURATION_MAXIMUM)) {
                    c = 17;
                    break;
                }
                break;
            case 198506287:
                if (str2.equals(Configuration.Shimmer3.GuiLabelConfig.SD_BT_STREAM_WHEN_RECORDING)) {
                    c = 18;
                    break;
                }
                break;
            case 283831903:
                if (str2.equals(Configuration.Shimmer3.GuiLabelConfig.ENABLE_ERROR_LEDS_RTC)) {
                    c = 19;
                    break;
                }
                break;
            case 393434316:
                if (str2.equals(SensorEXG.GuiLabelConfig.EXG_RESOLUTION)) {
                    c = 20;
                    break;
                }
                break;
            case 397231492:
                if (str2.equals(Configuration.Shimmer3.GuiLabelConfig.BROADCAST_INTERVAL)) {
                    c = 21;
                    break;
                }
                break;
            case 398714393:
                if (str2.equals(Configuration.Shimmer3.GuiLabelConfig.KINEMATIC_LPM)) {
                    c = 22;
                    break;
                }
                break;
            case 421587321:
                if (str2.equals("Sampling Rate")) {
                    c = 23;
                    break;
                }
                break;
            case 737120901:
                if (str2.equals(Configuration.Shimmer3.GuiLabelConfig.SD_STREAM_WHEN_RECORDING)) {
                    c = 24;
                    break;
                }
                break;
            case 749504151:
                if (str2.equals(SensorEXG.GuiLabelConfig.EXG_RESPIRATION_DETECT_FREQ)) {
                    c = 25;
                    break;
                }
                break;
            case 786460094:
                if (str2.equals(Configuration.Shimmer3.GuiLabelConfig.EXPERIMENT_SYNC_WHEN_LOGGING)) {
                    c = 26;
                    break;
                }
                break;
            case 831211908:
                if (str2.equals(Configuration.Shimmer3.GuiLabelConfig.EXPERIMENT_NUMBER_OF_SHIMMERS)) {
                    c = 27;
                    break;
                }
                break;
            case 870890181:
                if (str2.equals(Configuration.Shimmer3.GuiLabelConfig.LOW_POWER_AUTOSTOP)) {
                    c = 28;
                    break;
                }
                break;
            case 876997639:
                if (str2.equals("Internal Expansion Board Power")) {
                    c = 29;
                    break;
                }
                break;
            case 1142355966:
                if (str2.equals(Configuration.Shimmer3.GuiLabelConfig.EXPERIMENT_ID)) {
                    c = 30;
                    break;
                }
                break;
            case 1185850316:
                if (str2.equals(SensorEXG.GuiLabelConfig.EXG_RATE)) {
                    c = 31;
                    break;
                }
                break;
            case 1497270190:
                if (str2.equals(SensorPPG.GuiLabelConfig.PPG1_ADC_SELECTION)) {
                    c = ' ';
                    break;
                }
                break;
            case 1497270191:
                if (str2.equals(SensorPPG.GuiLabelConfig.PPG2_ADC_SELECTION)) {
                    c = '!';
                    break;
                }
                break;
            case 1517328881:
                if (str2.equals("Int Exp Power")) {
                    c = '\"';
                    break;
                }
                break;
            case 1622396542:
                if (str2.equals(Configuration.Shimmer3.GuiLabelConfig.ENABLED_SENSORS_IDS)) {
                    c = '#';
                    break;
                }
                break;
            case 1768725820:
                if (str2.equals(SensorEXG.GuiLabelConfig.EXG_RESPIRATION_DETECT_PHASE)) {
                    c = '$';
                    break;
                }
                break;
            case 2073691694:
                if (str2.equals("VBATT Divider")) {
                    c = '%';
                    break;
                }
                break;
            case 2105154883:
                if (str2.equals(Configuration.Shimmer3.GuiLabelConfig.EXPERIMENT_MASTER_SHIMMER)) {
                    c = Typography.amp;
                    break;
                }
                break;
        }
        switch (c) {
            case 0:
                setEXGLeadOffDetectionCurrent(((Integer) obj).intValue());
                string = null;
                break;
            case 1:
                setPpgAdcSelectionGsrBoard(((Integer) obj).intValue());
                string = null;
                break;
            case 2:
                String str3 = (String) obj;
                setExperimentDurationEstimatedInSecs(str3.isEmpty() ? 1 : Integer.parseInt(str3));
                string = Integer.toString(getTrialDurationEstimatedInSecs());
                break;
            case 3:
                setSamplingDividerLsm303dlhcAccel(((Integer) obj).intValue());
                string = null;
                break;
            case 4:
                setEXGLeadOffComparatorTreshold(((Integer) obj).intValue());
                string = null;
                break;
            case 5:
                setSingleTouch(((Boolean) obj).booleanValue());
                string = null;
                break;
            case 6:
                setEnabledAndDerivedSensorsAndUpdateMaps(((Integer) obj).intValue(), this.mDerivedSensors);
                string = null;
                break;
            case 7:
                setSamplingDividerGsr(((Integer) obj).intValue());
                string = null;
                break;
            case '\b':
                setSamplingDividerPpg(((Integer) obj).intValue());
                string = null;
                break;
            case '\t':
                setEXGReferenceElectrode(((Integer) obj).intValue());
                string = null;
                break;
            case '\n':
                setShowErrorLedsSd(((Boolean) obj).booleanValue());
                string = null;
                break;
            case 11:
                setBluetoothBaudRate(((Integer) obj).intValue());
                string = null;
                break;
            case '\f':
                setGSRRange(((Integer) obj).intValue());
                string = null;
                break;
            case '\r':
                setExGGainSetting(((Integer) obj).intValue());
                string = null;
                break;
            case 14:
                setTCXO(((Boolean) obj).booleanValue());
                string = null;
                break;
            case 15:
                setButtonStart(((Boolean) obj).booleanValue());
                string = null;
                break;
            case 16:
                setEXGLeadOffCurrentMode(((Integer) obj).intValue());
                string = null;
                break;
            case 17:
                String str4 = (String) obj;
                setExperimentDurationMaximumInSecs(str4.isEmpty() ? 1 : Integer.parseInt(str4));
                string = Integer.toString(getTrialDurationMaximumInSecs());
                break;
            case 18:
                Boolean bool = (Boolean) obj;
                setDisableBluetooth(!bool.booleanValue());
                setSyncWhenLogging(!bool.booleanValue());
                string = null;
                break;
            case 19:
                setShowErrorLedsRtc(((Boolean) obj).booleanValue());
                string = null;
                break;
            case 20:
                setExGResolution(((Integer) obj).intValue());
                string = null;
                break;
            case 21:
                String str5 = (String) obj;
                setSyncBroadcastInterval(str5.isEmpty() ? 1 : Integer.parseInt(str5));
                string = Integer.toString(getSyncBroadcastInterval());
                break;
            case 22:
                Boolean bool2 = (Boolean) obj;
                setLowPowerAccelWR(bool2.booleanValue());
                setLowPowerGyro(bool2.booleanValue());
                setLowPowerMag(bool2.booleanValue());
                string = null;
                break;
            case 23:
                setLowPowerGyro(false);
                setLowPowerAccelWR(false);
                setLowPowerMag(false);
                string = super.setConfigValueUsingConfigLabel(str, str2, obj);
                checkLowPowerGyro();
                checkLowPowerMag();
                break;
            case 24:
                setDisableBluetooth(((Boolean) obj).booleanValue());
                setSyncWhenLogging(!r10.booleanValue());
                string = null;
                break;
            case 25:
                setEXG2RespirationDetectFreq(((Integer) obj).intValue());
                string = null;
                break;
            case 26:
                setDisableBluetooth(!r10.booleanValue());
                setSyncWhenLogging(((Boolean) obj).booleanValue());
                string = null;
                break;
            case 27:
                String str6 = (String) obj;
                setExperimentNumberOfShimmers(str6.isEmpty() ? 1 : Integer.parseInt(str6));
                string = Integer.toString(getTrialNumberOfShimmers());
                break;
            case 28:
                setLowBattAutoStop(((Boolean) obj).booleanValue());
                string = null;
                break;
            case 29:
                setInternalExpPower(((Boolean) obj).booleanValue());
                string = null;
                break;
            case 30:
                String str7 = (String) obj;
                setExperimentId(str7.isEmpty() ? 0 : Integer.parseInt(str7));
                string = Integer.toString(getExperimentId());
                break;
            case 31:
                setEXGRateSetting(((Integer) obj).intValue());
                string = null;
                break;
            case ' ':
                setPpg1AdcSelectionProto3DeluxeBoard(((Integer) obj).intValue());
                string = null;
                break;
            case '!':
                setPpg2AdcSelectionProto3DeluxeBoard(((Integer) obj).intValue());
                string = null;
                break;
            case '\"':
                setInternalExpPower(((Integer) obj).intValue());
                string = null;
                break;
            case '#':
                setSensorIdsEnabled((Integer[]) obj);
                string = null;
                break;
            case '$':
                setEXG2RespirationDetectPhase(((Integer) obj).intValue());
                string = null;
                break;
            case '%':
                setSamplingDividerVBatt(((Integer) obj).intValue());
                string = null;
                break;
            case '&':
                setMasterShimmer(((Boolean) obj).booleanValue());
                string = null;
                break;
            default:
                string = super.setConfigValueUsingConfigLabel(str, str2, obj);
                break;
        }
        if (str2.equals(SensorEXG.GuiLabelConfig.EXG_RESPIRATION_DETECT_PHASE) || str2.equals(SensorEXG.GuiLabelConfig.EXG_REFERENCE_ELECTRODE)) {
            checkConfigOptionValues(str2);
        }
        return string;
    }

    @Override // com.shimmerresearch.driver.ShimmerDevice
    public void setShimmerVersionObject(ShimmerVerObject shimmerVerObject) {
        super.setShimmerVersionObject(shimmerVerObject);
        updateTimestampByteLength();
        updateCurrentCalibInUse();
    }

    @Override // com.shimmerresearch.driver.ShimmerDevice
    public LinkedHashMap<String, Object> generateConfigMap(Configuration.COMMUNICATION_TYPE communication_type) {
        LinkedHashMap<String, Object> linkedHashMapGenerateConfigMap = super.generateConfigMap(communication_type);
        linkedHashMapGenerateConfigMap.put(SensorGSR.DatabaseConfigHandle.GSR_RANGE, Double.valueOf(getGSRRange()));
        linkedHashMapGenerateConfigMap.put(ShimmerDevice.DatabaseConfigHandle.USER_BUTTON, Double.valueOf(getButtonStart()));
        linkedHashMapGenerateConfigMap.put(ShimmerDevice.DatabaseConfigHandle.RTC_SOURCE, Double.valueOf(getRTCSetByBT()));
        linkedHashMapGenerateConfigMap.put(ShimmerDevice.DatabaseConfigHandle.MASTER_CONFIG, Double.valueOf(getMasterShimmer()));
        linkedHashMapGenerateConfigMap.put(ShimmerDevice.DatabaseConfigHandle.SINGLE_TOUCH_START, Double.valueOf(getSingleTouch()));
        linkedHashMapGenerateConfigMap.put(ShimmerDevice.DatabaseConfigHandle.TXCO, Double.valueOf(getTCXO()));
        linkedHashMapGenerateConfigMap.put(ShimmerDevice.DatabaseConfigHandle.REAL_TIME_CLOCK_DIFFERENCE, Double.valueOf(getRTCDifferenceInTicks()));
        SensorEXG.addExgConfigToDbConfigMap(linkedHashMapGenerateConfigMap, getEXG1RegisterArray(), getEXG2RegisterArray());
        linkedHashMapGenerateConfigMap.put(ShimmerDevice.DatabaseConfigHandle.INITIAL_TIMESTAMP, Double.valueOf(getInitialTimeStampTicksSd()));
        linkedHashMapGenerateConfigMap.put(DatabaseConfigHandleShimmerObject.SYNC_WHEN_LOGGING, Double.valueOf(getSyncWhenLogging()));
        linkedHashMapGenerateConfigMap.put(DatabaseConfigHandleShimmerObject.TRIAL_DURATION_ESTIMATED, Double.valueOf(getTrialDurationEstimatedInSecs()));
        linkedHashMapGenerateConfigMap.put(DatabaseConfigHandleShimmerObject.TRIAL_DURATION_MAXIMUM, Double.valueOf(getTrialDurationMaximumInSecs()));
        linkedHashMapGenerateConfigMap.put(ShimmerDevice.DatabaseConfigHandle.LOW_POWER_AUTOSTOP, Double.valueOf(isLowBattAutoStop() ? 1.0d : 0.0d));
        return linkedHashMapGenerateConfigMap;
    }

    @Override // com.shimmerresearch.driver.ShimmerDevice
    public void parseConfigMap(ShimmerVerObject shimmerVerObject, LinkedHashMap<String, Object> linkedHashMap, Configuration.COMMUNICATION_TYPE communication_type) {
        super.parseConfigMap(shimmerVerObject, linkedHashMap, communication_type);
        if (linkedHashMap.containsKey(SensorGSR.DatabaseConfigHandle.GSR_RANGE)) {
            setGSRRange(((Double) linkedHashMap.get(SensorGSR.DatabaseConfigHandle.GSR_RANGE)).intValue());
        }
        if (linkedHashMap.containsKey(ShimmerDevice.DatabaseConfigHandle.MASTER_CONFIG)) {
            setMasterShimmer(((Double) linkedHashMap.get(ShimmerDevice.DatabaseConfigHandle.MASTER_CONFIG)).doubleValue() > 0.0d);
        }
        if (linkedHashMap.containsKey(ShimmerDevice.DatabaseConfigHandle.SINGLE_TOUCH_START)) {
            setSingleTouch(((Double) linkedHashMap.get(ShimmerDevice.DatabaseConfigHandle.SINGLE_TOUCH_START)).doubleValue() > 0.0d);
        }
        if (linkedHashMap.containsKey(ShimmerDevice.DatabaseConfigHandle.TXCO)) {
            setTCXO(((Double) linkedHashMap.get(ShimmerDevice.DatabaseConfigHandle.TXCO)).doubleValue() > 0.0d);
        }
        if (linkedHashMap.containsKey(ShimmerDevice.DatabaseConfigHandle.REAL_TIME_CLOCK_DIFFERENCE)) {
            setRTCDifferenceInTicks(((Double) linkedHashMap.get(ShimmerDevice.DatabaseConfigHandle.REAL_TIME_CLOCK_DIFFERENCE)).longValue());
        }
        if (linkedHashMap.containsKey(ShimmerDevice.DatabaseConfigHandle.USER_BUTTON)) {
            setButtonStart(((Double) linkedHashMap.get(ShimmerDevice.DatabaseConfigHandle.USER_BUTTON)).doubleValue() > 0.0d);
        }
        if (linkedHashMap.containsKey(ShimmerDevice.DatabaseConfigHandle.LOW_POWER_AUTOSTOP)) {
            setLowBattAutoStop(((Double) linkedHashMap.get(ShimmerDevice.DatabaseConfigHandle.LOW_POWER_AUTOSTOP)).doubleValue() > 0.0d);
        }
        exgBytesGetConfigFrom(SensorEXG.parseExgConfigFromDb(linkedHashMap, ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP1, SensorEXG.DatabaseConfigHandle.EXG1_CONFIG_1, SensorEXG.DatabaseConfigHandle.EXG1_CONFIG_2, SensorEXG.DatabaseConfigHandle.EXG1_LEAD_OFF, SensorEXG.DatabaseConfigHandle.EXG1_CH1_SET, SensorEXG.DatabaseConfigHandle.EXG1_CH2_SET, SensorEXG.DatabaseConfigHandle.EXG1_RLD_SENSE, SensorEXG.DatabaseConfigHandle.EXG1_LEAD_OFF_SENSE, SensorEXG.DatabaseConfigHandle.EXG1_LEAD_OFF_STATUS, SensorEXG.DatabaseConfigHandle.EXG1_RESPIRATION_1, SensorEXG.DatabaseConfigHandle.EXG1_RESPIRATION_2), SensorEXG.parseExgConfigFromDb(linkedHashMap, ExGConfigOptionDetails.EXG_CHIP_INDEX.CHIP2, SensorEXG.DatabaseConfigHandle.EXG2_CONFIG_1, SensorEXG.DatabaseConfigHandle.EXG2_CONFIG_2, SensorEXG.DatabaseConfigHandle.EXG2_LEAD_OFF, SensorEXG.DatabaseConfigHandle.EXG2_CH1_SET, SensorEXG.DatabaseConfigHandle.EXG2_CH2_SET, SensorEXG.DatabaseConfigHandle.EXG2_RLD_SENSE, SensorEXG.DatabaseConfigHandle.EXG2_LEAD_OFF_SENSE, SensorEXG.DatabaseConfigHandle.EXG2_LEAD_OFF_STATUS, SensorEXG.DatabaseConfigHandle.EXG2_RESPIRATION_1, SensorEXG.DatabaseConfigHandle.EXG2_RESPIRATION_2));
        checkExgResolutionFromEnabledSensorsVar();
        if (linkedHashMap.containsKey(SensorShimmerClock.DatabaseConfigHandle.INITIAL_TIMESTAMP)) {
            setInitialTimeStampTicksSd(((Double) linkedHashMap.get(SensorShimmerClock.DatabaseConfigHandle.INITIAL_TIMESTAMP)).longValue());
        }
        if (linkedHashMap.containsKey(DatabaseConfigHandleShimmerObject.SYNC_WHEN_LOGGING)) {
            setSyncWhenLogging(((Double) linkedHashMap.get(DatabaseConfigHandleShimmerObject.SYNC_WHEN_LOGGING)).intValue());
        }
        if (linkedHashMap.containsKey(DatabaseConfigHandleShimmerObject.TRIAL_DURATION_ESTIMATED)) {
            setExperimentDurationEstimatedInSecs(((Double) linkedHashMap.get(DatabaseConfigHandleShimmerObject.TRIAL_DURATION_ESTIMATED)).intValue());
        }
        if (linkedHashMap.containsKey(DatabaseConfigHandleShimmerObject.TRIAL_DURATION_MAXIMUM)) {
            setExperimentDurationMaximumInSecs(((Double) linkedHashMap.get(DatabaseConfigHandleShimmerObject.TRIAL_DURATION_MAXIMUM)).intValue());
        }
    }

    @Deprecated
    public List<String> getConfigColumnsToInsertInDBLegacy() {
        return getConfigColumnsShimmer3Legacy(getShimmerVerObject(), getExpansionBoardDetails());
    }

    @Deprecated
    public static List<String> getConfigColumnsShimmer3Legacy(ShimmerVerObject shimmerVerObject, ExpansionBoardDetails expansionBoardDetails) {
        ArrayList arrayList = new ArrayList();
        arrayList.add(ShimmerDevice.DatabaseConfigHandle.SAMPLE_RATE);
        arrayList.add(ShimmerDevice.DatabaseConfigHandle.ENABLE_SENSORS);
        arrayList.add(ShimmerDevice.DatabaseConfigHandle.DERIVED_SENSORS);
        if (shimmerVerObject != null && expansionBoardDetails != null && isSupportedNewImuSensors(shimmerVerObject, expansionBoardDetails)) {
            arrayList.add(SensorLSM303AH.DatabaseConfigHandle.WR_ACC_RATE);
            arrayList.add(SensorLSM303AH.DatabaseConfigHandle.WR_ACC_RANGE);
            arrayList.add(SensorLSM303AH.DatabaseConfigHandle.WR_ACC_LPM);
            arrayList.add(SensorLSM303AH.DatabaseConfigHandle.WR_ACC_HRM);
        } else {
            arrayList.add(SensorLSM303DLHC.DatabaseConfigHandle.WR_ACC_RATE);
            arrayList.add(SensorLSM303DLHC.DatabaseConfigHandle.WR_ACC_RANGE);
            arrayList.add(SensorLSM303DLHC.DatabaseConfigHandle.WR_ACC_LPM);
            arrayList.add(SensorLSM303DLHC.DatabaseConfigHandle.WR_ACC_HRM);
        }
        if (shimmerVerObject != null && expansionBoardDetails != null && isSupportedNewImuSensors(shimmerVerObject, expansionBoardDetails)) {
            arrayList.add(SensorMPU9250.DatabaseConfigHandle.GYRO_RATE);
        } else {
            arrayList.add(SensorMPU9150.DatabaseConfigHandle.GYRO_RATE);
        }
        if (shimmerVerObject != null && expansionBoardDetails != null && isSupportedNewImuSensors(shimmerVerObject, expansionBoardDetails)) {
            arrayList.add(SensorLSM303AH.DatabaseConfigHandle.MAG_RANGE);
            arrayList.add(SensorLSM303AH.DatabaseConfigHandle.MAG_RATE);
        } else {
            arrayList.add(SensorLSM303DLHC.DatabaseConfigHandle.MAG_RANGE);
            arrayList.add(SensorLSM303DLHC.DatabaseConfigHandle.MAG_RATE);
        }
        if (shimmerVerObject != null && expansionBoardDetails != null && isSupportedNewImuSensors(shimmerVerObject, expansionBoardDetails)) {
            arrayList.add(SensorMPU9250.DatabaseConfigHandle.GYRO_RANGE);
            arrayList.add(SensorMPU9250.DatabaseConfigHandle.ALTERNATIVE_ACC_RANGE);
        } else {
            arrayList.add(SensorMPU9150.DatabaseConfigHandle.GYRO_RANGE);
            arrayList.add(SensorMPU9150.DatabaseConfigHandle.ALTERNATIVE_ACC_RANGE);
        }
        if (shimmerVerObject != null && expansionBoardDetails != null && isSupportedBmp280(shimmerVerObject, expansionBoardDetails)) {
            arrayList.add(SensorBMP280.DatabaseConfigHandle.PRESSURE_PRECISION_BMP280);
        } else {
            arrayList.add(SensorBMP180.DatabaseConfigHandle.PRESSURE_PRECISION_BMP180);
        }
        arrayList.add(SensorGSR.DatabaseConfigHandle.GSR_RANGE);
        arrayList.add(ShimmerDevice.DatabaseConfigHandle.EXP_PWR);
        if (shimmerVerObject != null && expansionBoardDetails != null && isSupportedNewImuSensors(shimmerVerObject, expansionBoardDetails)) {
            arrayList.add(SensorMPU9250.DatabaseConfigHandle.MPU_MAG_SAMPLING_RATE);
        } else {
            arrayList.add(SensorMPU9150.DatabaseConfigHandle.MPU_DMP);
            arrayList.add(SensorMPU9150.DatabaseConfigHandle.MPU_LPF);
            arrayList.add(SensorMPU9150.DatabaseConfigHandle.MPU_MOT_CAL_CFG);
            arrayList.add(SensorMPU9150.DatabaseConfigHandle.MPU_MPL_SAMPLING_RATE);
            arrayList.add(SensorMPU9150.DatabaseConfigHandle.MPU_MPL_SENSOR_FUSION);
            arrayList.add(SensorMPU9150.DatabaseConfigHandle.MPU_MPL_GYRO_TC);
            arrayList.add(SensorMPU9150.DatabaseConfigHandle.MPU_MPL_VECT_COMP);
            arrayList.add(SensorMPU9150.DatabaseConfigHandle.MPU_MAG_DIST);
            arrayList.add(SensorMPU9150.DatabaseConfigHandle.MPU_MPL_ENABLE);
            arrayList.add(SensorMPU9150.DatabaseConfigHandle.MPU_MAG_SAMPLING_RATE);
        }
        arrayList.add(ShimmerDevice.DatabaseConfigHandle.USER_BUTTON);
        arrayList.add(ShimmerDevice.DatabaseConfigHandle.RTC_SOURCE);
        arrayList.add(ShimmerDevice.DatabaseConfigHandle.MASTER_CONFIG);
        arrayList.add(ShimmerDevice.DatabaseConfigHandle.SINGLE_TOUCH_START);
        arrayList.add(ShimmerDevice.DatabaseConfigHandle.TXCO);
        arrayList.add(ShimmerDevice.DatabaseConfigHandle.SHIMMER_VERSION);
        arrayList.add(ShimmerDevice.DatabaseConfigHandle.FW_VERSION);
        arrayList.add(ShimmerDevice.DatabaseConfigHandle.FW_VERSION_MAJOR);
        arrayList.add(ShimmerDevice.DatabaseConfigHandle.FW_VERSION_MINOR);
        arrayList.add(ShimmerDevice.DatabaseConfigHandle.FW_VERSION_INTERNAL);
        arrayList.add(ShimmerDevice.DatabaseConfigHandle.CONFIG_TIME);
        arrayList.add(ShimmerDevice.DatabaseConfigHandle.REAL_TIME_CLOCK_DIFFERENCE);
        arrayList.add(SensorEXG.DatabaseConfigHandle.EXG1_CONFIG_1);
        arrayList.add(SensorEXG.DatabaseConfigHandle.EXG1_CONFIG_2);
        arrayList.add(SensorEXG.DatabaseConfigHandle.EXG1_LEAD_OFF);
        arrayList.add(SensorEXG.DatabaseConfigHandle.EXG1_CH1_SET);
        arrayList.add(SensorEXG.DatabaseConfigHandle.EXG1_CH2_SET);
        arrayList.add(SensorEXG.DatabaseConfigHandle.EXG1_RLD_SENSE);
        arrayList.add(SensorEXG.DatabaseConfigHandle.EXG1_LEAD_OFF_SENSE);
        arrayList.add(SensorEXG.DatabaseConfigHandle.EXG1_LEAD_OFF_STATUS);
        arrayList.add(SensorEXG.DatabaseConfigHandle.EXG1_RESPIRATION_1);
        arrayList.add(SensorEXG.DatabaseConfigHandle.EXG1_RESPIRATION_2);
        arrayList.add(SensorEXG.DatabaseConfigHandle.EXG2_CONFIG_1);
        arrayList.add(SensorEXG.DatabaseConfigHandle.EXG2_CONFIG_2);
        arrayList.add(SensorEXG.DatabaseConfigHandle.EXG2_LEAD_OFF);
        arrayList.add(SensorEXG.DatabaseConfigHandle.EXG2_CH1_SET);
        arrayList.add(SensorEXG.DatabaseConfigHandle.EXG2_CH2_SET);
        arrayList.add(SensorEXG.DatabaseConfigHandle.EXG2_RLD_SENSE);
        arrayList.add(SensorEXG.DatabaseConfigHandle.EXG2_LEAD_OFF_SENSE);
        arrayList.add(SensorEXG.DatabaseConfigHandle.EXG2_LEAD_OFF_STATUS);
        arrayList.add(SensorEXG.DatabaseConfigHandle.EXG2_RESPIRATION_1);
        arrayList.add(SensorEXG.DatabaseConfigHandle.EXG2_RESPIRATION_2);
        if (shimmerVerObject != null && expansionBoardDetails != null && isSupportedNewImuSensors(shimmerVerObject, expansionBoardDetails)) {
            arrayList.addAll(SensorLSM303AH.DatabaseConfigHandle.LIST_OF_CALIB_HANDLES_WR_ACCEL);
        } else {
            arrayList.addAll(SensorLSM303DLHC.DatabaseConfigHandle.LIST_OF_CALIB_HANDLES_WR_ACCEL);
        }
        if (shimmerVerObject != null && expansionBoardDetails != null && isSupportedNewImuSensors(shimmerVerObject, expansionBoardDetails)) {
            arrayList.addAll(SensorMPU9250.DatabaseConfigHandle.LIST_OF_CALIB_HANDLES_GYRO);
        } else {
            arrayList.addAll(SensorMPU9150.DatabaseConfigHandle.LIST_OF_CALIB_HANDLES_GYRO);
        }
        if (shimmerVerObject != null && expansionBoardDetails != null && isSupportedNewImuSensors(shimmerVerObject, expansionBoardDetails)) {
            arrayList.addAll(SensorLSM303AH.DatabaseConfigHandle.LIST_OF_CALIB_HANDLES_MAG);
        } else {
            arrayList.addAll(SensorLSM303DLHC.DatabaseConfigHandle.LIST_OF_CALIB_HANDLES_MAG);
        }
        if (shimmerVerObject != null && expansionBoardDetails != null && isSupportedNewImuSensors(shimmerVerObject, expansionBoardDetails)) {
            arrayList.addAll(SensorKionixKXTC92050.DatabaseConfigHandle.LIST_OF_CALIB_HANDLES_LN_ACC);
        } else {
            arrayList.addAll(SensorKionixKXRB52042.DatabaseConfigHandle.LIST_OF_CALIB_HANDLES_LN_ACC);
        }
        if (shimmerVerObject != null && expansionBoardDetails != null && isSupportedNewImuSensors(shimmerVerObject, expansionBoardDetails)) {
            arrayList.addAll(SensorBMP280.DatabaseConfigHandle.LIST_OF_CALIB_HANDLES);
        } else {
            arrayList.addAll(SensorBMP180.DatabaseConfigHandle.LIST_OF_CALIB_HANDLES);
        }
        if (shimmerVerObject != null && expansionBoardDetails != null && isSupportedNewImuSensors(shimmerVerObject, expansionBoardDetails)) {
            arrayList.addAll(SensorMPU9250.DatabaseConfigHandle.LIST_OF_CALIB_HANDLES_MPU_ACC);
            arrayList.addAll(SensorMPU9250.DatabaseConfigHandle.LIST_OF_CALIB_HANDLES_MPU_MAG);
        } else {
            arrayList.addAll(SensorMPU9150.DatabaseConfigHandle.LIST_OF_CALIB_HANDLES_MPU_MPL_ACC);
            arrayList.addAll(SensorMPU9150.DatabaseConfigHandle.LIST_OF_CALIB_HANDLES_MPU_MPL_MAG);
            arrayList.addAll(SensorMPU9150.DatabaseConfigHandle.LIST_OF_CALIB_HANDLES_MPU_MPL_GYRO);
        }
        arrayList.add(ShimmerDevice.DatabaseConfigHandle.INITIAL_TIMESTAMP);
        arrayList.add(ShimmerDevice.DatabaseConfigHandle.EXP_BOARD_ID);
        arrayList.add(ShimmerDevice.DatabaseConfigHandle.EXP_BOARD_REV);
        arrayList.add(ShimmerDevice.DatabaseConfigHandle.EXP_BOARD_REV_SPEC);
        if (shimmerVerObject != null && expansionBoardDetails != null && isSupportedNewImuSensors(shimmerVerObject, expansionBoardDetails)) {
            arrayList.add(SensorLSM303AH.DatabaseConfigHandle.WR_ACC_CALIB_TIME);
            arrayList.add(SensorLSM303AH.DatabaseConfigHandle.MAG_CALIB_TIME);
        } else {
            arrayList.add(SensorLSM303DLHC.DatabaseConfigHandle.WR_ACC_CALIB_TIME);
            arrayList.add(SensorLSM303DLHC.DatabaseConfigHandle.MAG_CALIB_TIME);
        }
        if (shimmerVerObject != null && expansionBoardDetails != null && isSupportedNewImuSensors(shimmerVerObject, expansionBoardDetails)) {
            arrayList.add(SensorMPU9250.DatabaseConfigHandle.GYRO_CALIB_TIME);
        } else {
            arrayList.add(SensorMPU9150.DatabaseConfigHandle.GYRO_CALIB_TIME);
        }
        if (shimmerVerObject != null && expansionBoardDetails != null && isSupportedNewImuSensors(shimmerVerObject, expansionBoardDetails)) {
            arrayList.add(SensorKionixKXTC92050.DatabaseConfigHandle.LN_ACC_CALIB_TIME);
        } else {
            arrayList.add(SensorKionixKXRB52042.DatabaseConfigHandle.LN_ACC_CALIB_TIME);
        }
        arrayList.add(DatabaseConfigHandleShimmerObject.SYNC_WHEN_LOGGING);
        arrayList.add(DatabaseConfigHandleShimmerObject.TRIAL_DURATION_ESTIMATED);
        arrayList.add(DatabaseConfigHandleShimmerObject.TRIAL_DURATION_MAXIMUM);
        return arrayList;
    }

    @Deprecated
    public List<Double> getShimmerConfigValuesToInsertInDBLegacy() {
        return getDbConfigValuesFromShimmerLegacy(this);
    }

    @Deprecated
    public static List<Double> getDbConfigValuesFromShimmerLegacy(ShimmerDevice shimmerDevice) {
        if (!(shimmerDevice instanceof ShimmerObject)) {
            return null;
        }
        ShimmerObject shimmerObject = (ShimmerObject) shimmerDevice;
        ArrayList arrayList = new ArrayList();
        arrayList.add(Double.valueOf(shimmerObject.getSamplingRateShimmer()));
        arrayList.add(Double.valueOf(shimmerObject.getEnabledSensors()));
        arrayList.add(Double.valueOf(shimmerObject.getDerivedSensors()));
        arrayList.add(Double.valueOf(shimmerObject.getLSM303DigitalAccelRate()));
        arrayList.add(Double.valueOf(shimmerObject.getAccelRange()));
        arrayList.add(Double.valueOf(shimmerObject.getLowPowerAccelEnabled()));
        arrayList.add(Double.valueOf(shimmerObject.getHighResAccelWREnabled()));
        arrayList.add(Double.valueOf(shimmerObject.getMPU9X50GyroAccelRate()));
        arrayList.add(Double.valueOf(shimmerObject.getMagRange()));
        arrayList.add(Double.valueOf(shimmerObject.getMagRate()));
        arrayList.add(Double.valueOf(shimmerObject.getGyroRange()));
        arrayList.add(Double.valueOf(shimmerObject.getMPU9X50AccelRange()));
        arrayList.add(Double.valueOf(shimmerObject.getPressureResolution()));
        arrayList.add(Double.valueOf(shimmerObject.getGSRRange()));
        arrayList.add(Double.valueOf(shimmerObject.getInternalExpPower()));
        if (!shimmerObject.isSupportedNewImuSensors()) {
            arrayList.add(Double.valueOf(shimmerObject.getMPU9X50DMP()));
            arrayList.add(Double.valueOf(shimmerObject.getMPU9X50LPF()));
            arrayList.add(Double.valueOf(shimmerObject.getMPU9X50MotCalCfg()));
            arrayList.add(Double.valueOf(shimmerObject.getMPU9X50MPLSamplingRate()));
            arrayList.add(Double.valueOf(shimmerObject.getMPLSensorFusion()));
            arrayList.add(Double.valueOf(shimmerObject.getMPLGyroCalTC()));
            arrayList.add(Double.valueOf(shimmerObject.getMPLVectCompCal()));
            arrayList.add(Double.valueOf(shimmerObject.getMPLMagDistCal()));
            arrayList.add(Double.valueOf(shimmerObject.getMPLEnable()));
        }
        arrayList.add(Double.valueOf(shimmerObject.getMPU9X50MagSamplingRate()));
        arrayList.add(Double.valueOf(shimmerObject.getButtonStart()));
        arrayList.add(Double.valueOf(shimmerObject.getRTCSetByBT()));
        arrayList.add(Double.valueOf(shimmerObject.getMasterShimmer()));
        arrayList.add(Double.valueOf(shimmerObject.getSingleTouch()));
        arrayList.add(Double.valueOf(shimmerObject.getTCXO()));
        arrayList.add(Double.valueOf(shimmerObject.getHardwareVersion()));
        arrayList.add(Double.valueOf(shimmerObject.getFirmwareIdentifier()));
        arrayList.add(Double.valueOf(shimmerObject.getFirmwareVersionMajor()));
        arrayList.add(Double.valueOf(shimmerObject.getFirmwareVersionMinor()));
        arrayList.add(Double.valueOf(shimmerObject.getFirmwareVersionInternal()));
        arrayList.add(Double.valueOf(shimmerObject.getConfigTime()));
        arrayList.add(Double.valueOf(shimmerObject.getRTCDifferenceInTicks()));
        for (byte b : shimmerObject.getEXG1RegisterArray()) {
            arrayList.add(Double.valueOf(b & 255));
        }
        for (byte b2 : shimmerObject.getEXG2RegisterArray()) {
            arrayList.add(Double.valueOf(b2 & 255));
        }
        addCalibKinematicToDbConfigValues(arrayList, shimmerObject.getOffsetVectorMatrixWRAccel(), shimmerObject.getSensitivityMatrixWRAccel(), shimmerObject.getAlignmentMatrixWRAccel());
        addCalibKinematicToDbConfigValues(arrayList, shimmerObject.getOffsetVectorMatrixGyro(), shimmerObject.getSensitivityMatrixGyro(), shimmerObject.getAlignmentMatrixGyro());
        addCalibKinematicToDbConfigValues(arrayList, shimmerObject.getOffsetVectorMatrixMag(), shimmerObject.getSensitivityMatrixMag(), shimmerObject.getAlignmentMatrixMag());
        addCalibKinematicToDbConfigValues(arrayList, shimmerObject.getOffsetVectorMatrixAccel(), shimmerObject.getSensitivityMatrixAccel(), shimmerObject.getAlignmentMatrixAccel());
        arrayList.addAll(shimmerObject.mSensorBMPX80.getPressTempConfigValuesLegacy());
        addCalibKinematicToDbConfigValues(arrayList, shimmerObject.getOffsetVectorMPLAccel(), shimmerObject.getSensitivityMatrixMPLAccel(), shimmerObject.getAlignmentMatrixMPLAccel());
        addCalibKinematicToDbConfigValues(arrayList, shimmerObject.getOffsetVectorMPLMag(), shimmerObject.getSensitivityMatrixMPLMag(), shimmerObject.getAlignmentMatrixMPLMag());
        if (!shimmerObject.isSupportedNewImuSensors()) {
            addCalibKinematicToDbConfigValues(arrayList, shimmerObject.getOffsetVectorMPLGyro(), shimmerObject.getSensitivityMatrixMPLGyro(), shimmerObject.getAlignmentMatrixMPLGyro());
        }
        arrayList.add(Double.valueOf(shimmerObject.getInitialTimeStampTicksSd()));
        arrayList.add(Double.valueOf(shimmerObject.getExpansionBoardId()));
        arrayList.add(Double.valueOf(shimmerObject.getExpansionBoardRev()));
        arrayList.add(Double.valueOf(shimmerObject.getExpansionBoardRevSpecial()));
        arrayList.add(Double.valueOf(shimmerObject.getCalibTimeWRAccel()));
        arrayList.add(Double.valueOf(shimmerObject.getCalibTimeMag()));
        arrayList.add(Double.valueOf(shimmerObject.getCalibTimeGyro()));
        arrayList.add(Double.valueOf(shimmerObject.getCalibTimeAccel()));
        arrayList.add(Double.valueOf(shimmerObject.getSyncWhenLogging()));
        arrayList.add(Double.valueOf(shimmerObject.getTrialDurationEstimatedInSecs()));
        arrayList.add(Double.valueOf(shimmerObject.getTrialDurationMaximumInSecs()));
        if (shimmerObject.isShimmerGenGq()) {
            arrayList.add(Double.valueOf(0.0d));
        }
        return arrayList;
    }

    @Deprecated
    public static void addCalibKinematicToDbConfigValues(List<Double> list, double[][] dArr, double[][] dArr2, double[][] dArr3) {
        list.add(Double.valueOf(dArr[0][0]));
        list.add(Double.valueOf(dArr[1][0]));
        list.add(Double.valueOf(dArr[2][0]));
        list.add(Double.valueOf(dArr2[0][0]));
        list.add(Double.valueOf(dArr2[1][1]));
        list.add(Double.valueOf(dArr2[2][2]));
        list.add(Double.valueOf(dArr3[0][0]));
        list.add(Double.valueOf(dArr3[0][1]));
        list.add(Double.valueOf(dArr3[0][2]));
        list.add(Double.valueOf(dArr3[1][0]));
        list.add(Double.valueOf(dArr3[1][1]));
        list.add(Double.valueOf(dArr3[1][2]));
        list.add(Double.valueOf(dArr3[2][0]));
        list.add(Double.valueOf(dArr3[2][1]));
        list.add(Double.valueOf(dArr3[2][2]));
    }

    public void setUniqueID(String str) {
        this.mUniqueID = str;
        String[] strArrSplit = this.mUniqueID.split(".");
        if (strArrSplit.length >= 3) {
            this.mDockID = strArrSplit[0] + "." + strArrSplit[1];
            try {
                this.mSlotNumber = Integer.parseInt(strArrSplit[2]);
            } catch (NumberFormatException unused) {
            }
        }
    }

    @Deprecated
    public void initialise(int i) {
        setHardwareVersionAndCreateSensorMaps(i);
    }

    public void updateShimmerDriveInfo(ShimmerSDCardDetails shimmerSDCardDetails) {
        this.mShimmerSDCardDetails = shimmerSDCardDetails;
    }

    public void setFirmwareIdentifier(int i) {
        setShimmerVersionObject(new ShimmerVerObject(getHardwareVersion(), i, getFirmwareVersionMajor(), getFirmwareVersionMinor(), getFirmwareVersionInternal()));
    }

    public void setFirmwareVersion(int i, int i2, int i3) {
        setShimmerVersionObject(new ShimmerVerObject(getHardwareVersion(), getFirmwareIdentifier(), i, i2, i3));
    }

    public void setExpansionBoardId(int i) {
        this.mExpansionBoardDetails.mExpansionBoardId = i;
    }

    @Override // com.shimmerresearch.driver.ShimmerDevice
    public void parseUartConfigResponse(UartComponentPropertyDetails uartComponentPropertyDetails, byte[] bArr) {
        if (uartComponentPropertyDetails == UartPacketDetails.UART_COMPONENT_AND_PROPERTY.BAT.ENABLE) {
            if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
                getSensorMap().get(3).setIsEnabled(bArr[0] != 0);
                return;
            } else {
                if (getHardwareVersion() == 5) {
                    getSensorMap().get(10).setIsEnabled(bArr[0] != 0);
                    return;
                }
                return;
            }
        }
        if (uartComponentPropertyDetails == UartPacketDetails.UART_COMPONENT_AND_PROPERTY.BAT.FREQ_DIVIDER) {
            setSamplingDividerVBatt(bArr[0]);
            return;
        }
        if (uartComponentPropertyDetails == UartPacketDetails.UART_COMPONENT_AND_PROPERTY.LSM303DLHC_ACCEL.ENABLE) {
            if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
                getSensorMap().get(31).setIsEnabled(bArr[0] != 0);
                return;
            } else {
                if (getHardwareVersion() == 5) {
                    getSensorMap().get(11).setIsEnabled(bArr[0] != 0);
                    return;
                }
                return;
            }
        }
        if (uartComponentPropertyDetails == UartPacketDetails.UART_COMPONENT_AND_PROPERTY.LSM303DLHC_ACCEL.DATA_RATE) {
            setLSM303DigitalAccelRate(bArr[0]);
            return;
        }
        if (uartComponentPropertyDetails == UartPacketDetails.UART_COMPONENT_AND_PROPERTY.LSM303DLHC_ACCEL.RANGE) {
            setDigitalAccelRange(bArr[0]);
            return;
        }
        if (uartComponentPropertyDetails == UartPacketDetails.UART_COMPONENT_AND_PROPERTY.LSM303DLHC_ACCEL.LP_MODE) {
            setLowPowerAccelWR(bArr[0] != 0);
            return;
        }
        if (uartComponentPropertyDetails == UartPacketDetails.UART_COMPONENT_AND_PROPERTY.LSM303DLHC_ACCEL.HR_MODE) {
            setHighResAccelWR(bArr[0] != 0);
            return;
        }
        if (uartComponentPropertyDetails == UartPacketDetails.UART_COMPONENT_AND_PROPERTY.LSM303DLHC_ACCEL.FREQ_DIVIDER) {
            setSamplingDividerLsm303dlhcAccel(bArr[0]);
            return;
        }
        if (uartComponentPropertyDetails == UartPacketDetails.UART_COMPONENT_AND_PROPERTY.LSM303DLHC_ACCEL.CALIBRATION) {
            parseCalibParamFromPacketAccelLsm(bArr, CalibDetails.CALIB_READ_SOURCE.LEGACY_BT_COMMAND);
            return;
        }
        if (uartComponentPropertyDetails == UartPacketDetails.UART_COMPONENT_AND_PROPERTY.GSR.ENABLE) {
            if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
                getSensorMap().get(19).setIsEnabled(bArr[0] != 0);
                return;
            } else {
                if (getHardwareVersion() == 5) {
                    getSensorMap().get(5).setIsEnabled(bArr[0] != 0);
                    return;
                }
                return;
            }
        }
        if (uartComponentPropertyDetails == UartPacketDetails.UART_COMPONENT_AND_PROPERTY.GSR.RANGE) {
            setGSRRange(bArr[0]);
            return;
        }
        if (uartComponentPropertyDetails == UartPacketDetails.UART_COMPONENT_AND_PROPERTY.GSR.FREQ_DIVIDER) {
            setSamplingDividerGsr(bArr[0]);
            return;
        }
        if (uartComponentPropertyDetails == UartPacketDetails.UART_COMPONENT_AND_PROPERTY.BEACON.ENABLE) {
            if (getHardwareVersion() == 3 || getHardwareVersion() == 10) {
                getSensorMap().get(108).setIsEnabled(bArr[0] != 0);
                return;
            } else {
                if (getHardwareVersion() == 5) {
                    getSensorMap().get(108).setIsEnabled(bArr[0] != 0);
                    return;
                }
                return;
            }
        }
        if (uartComponentPropertyDetails == UartPacketDetails.UART_COMPONENT_AND_PROPERTY.BEACON.FREQ_DIVIDER) {
            setSamplingDividerBeacon(bArr[0]);
        } else {
            super.parseUartConfigResponse(uartComponentPropertyDetails, bArr);
        }
    }

    @Override // com.shimmerresearch.driver.ShimmerDevice
    public byte[] generateUartConfigMessage(UartComponentPropertyDetails uartComponentPropertyDetails) {
        if (uartComponentPropertyDetails == UartPacketDetails.UART_COMPONENT_AND_PROPERTY.LSM303DLHC_ACCEL.ENABLE) {
            return new byte[]{getSensorMap().get(11).isEnabled() ? (byte) 1 : (byte) 0};
        }
        if (uartComponentPropertyDetails == UartPacketDetails.UART_COMPONENT_AND_PROPERTY.LSM303DLHC_ACCEL.DATA_RATE) {
            return new byte[]{(byte) getLSM303DigitalAccelRate()};
        }
        if (uartComponentPropertyDetails == UartPacketDetails.UART_COMPONENT_AND_PROPERTY.LSM303DLHC_ACCEL.RANGE) {
            return new byte[]{(byte) getAccelRange()};
        }
        if (uartComponentPropertyDetails == UartPacketDetails.UART_COMPONENT_AND_PROPERTY.LSM303DLHC_ACCEL.LP_MODE) {
            return new byte[]{isLowPowerAccelWR() ? (byte) 1 : (byte) 0};
        }
        if (uartComponentPropertyDetails == UartPacketDetails.UART_COMPONENT_AND_PROPERTY.LSM303DLHC_ACCEL.HR_MODE) {
            return new byte[]{isHighResAccelWR() ? (byte) 1 : (byte) 0};
        }
        if (uartComponentPropertyDetails == UartPacketDetails.UART_COMPONENT_AND_PROPERTY.LSM303DLHC_ACCEL.FREQ_DIVIDER) {
            return new byte[]{(byte) getSamplingDividerLsm303dlhcAccel()};
        }
        if (uartComponentPropertyDetails == UartPacketDetails.UART_COMPONENT_AND_PROPERTY.LSM303DLHC_ACCEL.CALIBRATION) {
            return generateCalParamLSM303DLHCAccel();
        }
        return super.generateUartConfigMessage(uartComponentPropertyDetails);
    }

    @Override // com.shimmerresearch.driver.ShimmerDevice
    public double getMinAllowedSamplingRate() {
        double minAllowedSamplingRate = super.getMinAllowedSamplingRate();
        return (isMPLEnabled() || isMPU9150DMP()) ? Math.max(51.2d, minAllowedSamplingRate) : minAllowedSamplingRate;
    }

    public boolean isSupportedErrorLedControl() {
        return this.mShimmerVerObject.compareVersions(3, 0, 7, 12) || this.mShimmerVerObject.compareVersions(15, -1, -1, -1);
    }

    public boolean isSupportedBmp280() {
        return isSupportedNewImuSensors();
    }

    public static boolean isSupportedBmp280(ShimmerVerObject shimmerVerObject, ExpansionBoardDetails expansionBoardDetails) {
        return isSupportedNewImuSensors(shimmerVerObject, expansionBoardDetails);
    }

    public boolean isSupportedNewImuSensors() {
        return isSupportedNewImuSensors(getShimmerVerObject(), getExpansionBoardDetails());
    }

    public boolean isShimmer3RwithHighGAccelSupport() {
        return isShimmer3RwithHighGAccelSupport(getShimmerVerObject(), getExpansionBoardDetails());
    }

    public static boolean isShimmer3RwithHighGAccelSupport(ShimmerVerObject shimmerVerObject, ExpansionBoardDetails expansionBoardDetails) {
        if (shimmerVerObject != null && expansionBoardDetails != null) {
            int expansionBoardId = expansionBoardDetails.getExpansionBoardId();
            int expansionBoardRev = expansionBoardDetails.getExpansionBoardRev();
            int expansionBoardRevSpecial = expansionBoardDetails.getExpansionBoardRevSpecial();
            if (shimmerVerObject.getHardwareVersion() == 10 && (expansionBoardId == 31 || ((expansionBoardId == 38 && expansionBoardRev == 4 && expansionBoardRevSpecial == 0) || ((expansionBoardId == 49 && expansionBoardRev == 4 && expansionBoardRevSpecial == 0) || ((expansionBoardId == 48 && expansionBoardRev == 6 && expansionBoardRevSpecial == 0) || ((expansionBoardId == 48 && expansionBoardRev == 7 && expansionBoardRevSpecial == 0) || ((expansionBoardId == 48 && expansionBoardRev == 7 && expansionBoardRevSpecial == 1) || ((expansionBoardId == 48 && expansionBoardRev == 8 && expansionBoardRevSpecial == 0) || ((expansionBoardId == 47 && expansionBoardRev == 7 && expansionBoardRevSpecial == 0) || ((expansionBoardId == 47 && expansionBoardRev == 7 && expansionBoardRevSpecial == 1) || (expansionBoardId == 47 && expansionBoardRev == 8 && expansionBoardRevSpecial == 0))))))))))) {
                return true;
            }
        }
        return false;
    }

    public boolean isShimmer3RwithAltMagSupport() {
        return isShimmer3RwithAltMagSupport(getShimmerVerObject(), getExpansionBoardDetails());
    }

    public static boolean isShimmer3RwithAltMagSupport(ShimmerVerObject shimmerVerObject, ExpansionBoardDetails expansionBoardDetails) {
        if (shimmerVerObject != null && expansionBoardDetails != null) {
            int expansionBoardId = expansionBoardDetails.getExpansionBoardId();
            int expansionBoardRev = expansionBoardDetails.getExpansionBoardRev();
            int expansionBoardRevSpecial = expansionBoardDetails.getExpansionBoardRevSpecial();
            if (shimmerVerObject.getHardwareVersion() == 10 && ((expansionBoardId == 31 && expansionBoardRev == 11 && expansionBoardRevSpecial == 0) || ((expansionBoardId == 38 && expansionBoardRev == 4 && expansionBoardRevSpecial == 0) || ((expansionBoardId == 49 && expansionBoardRev == 4 && expansionBoardRevSpecial == 0) || ((expansionBoardId == 48 && expansionBoardRev == 6 && expansionBoardRevSpecial == 0) || ((expansionBoardId == 48 && expansionBoardRev == 7 && expansionBoardRevSpecial == 0) || ((expansionBoardId == 48 && expansionBoardRev == 7 && expansionBoardRevSpecial == 1) || ((expansionBoardId == 48 && expansionBoardRev == 8 && expansionBoardRevSpecial == 0) || ((expansionBoardId == 47 && expansionBoardRev == 7 && expansionBoardRevSpecial == 0) || ((expansionBoardId == 47 && expansionBoardRev == 7 && expansionBoardRevSpecial == 1) || (expansionBoardId == 47 && expansionBoardRev == 8 && expansionBoardRevSpecial == 0))))))))))) {
                return true;
            }
        }
        return false;
    }

    public static boolean isSupportedNewImuSensors(ShimmerVerObject shimmerVerObject, ExpansionBoardDetails expansionBoardDetails) {
        if (shimmerVerObject == null || expansionBoardDetails == null) {
            return false;
        }
        int expansionBoardId = expansionBoardDetails.getExpansionBoardId();
        int expansionBoardRev = expansionBoardDetails.getExpansionBoardRev();
        int expansionBoardRevSpecial = expansionBoardDetails.getExpansionBoardRevSpecial();
        if (shimmerVerObject.getHardwareVersion() == 10) {
            return true;
        }
        if (shimmerVerObject.getHardwareVersion() == 3) {
            if (expansionBoardId == 47 && expansionBoardRev >= 3) {
                return true;
            }
            if (expansionBoardId == 48 && expansionBoardRev >= 3) {
                return true;
            }
            if (expansionBoardId == 49 && expansionBoardRev >= 3) {
                return true;
            }
            if ((expansionBoardId == 31 && expansionBoardRev >= 6) || expansionBoardRevSpecial == 171) {
                return true;
            }
            if (expansionBoardId == 38 && expansionBoardRev >= 3) {
                return true;
            }
            if (expansionBoardId == 36 && expansionBoardRev >= 3) {
                return true;
            }
        }
        return false;
    }

    public boolean isSupportedBtBleControl() {
        BluetoothModuleVersionDetails btFwVerDetails = getBtFwVerDetails();
        return (!btFwVerDetails.isBtModuleVersionKnown() || btFwVerDetails.isBtModuleVersionRn41() || btFwVerDetails.isBtModuleVersionRn42()) ? false : true;
    }

    @Override // com.shimmerresearch.driver.ShimmerDevice
    public LinkedHashMap<String, ChannelDetails> getMapOfAllChannelsForStoringToDB(Configuration.COMMUNICATION_TYPE communication_type, ChannelDetails.CHANNEL_TYPE channel_type, boolean z, boolean z2) {
        LinkedHashMap<String, ChannelDetails> mapOfAllChannelsForStoringToDB = super.getMapOfAllChannelsForStoringToDB(communication_type, channel_type, z, z2);
        if (communication_type != Configuration.COMMUNICATION_TYPE.SD || (communication_type == Configuration.COMMUNICATION_TYPE.SD && !isSyncWhenLogging())) {
            mapOfAllChannelsForStoringToDB.remove(SensorShimmerClock.ObjectClusterSensorName.TIMESTAMP_OFFSET);
        }
        if (!isRtcDifferenceSet()) {
            mapOfAllChannelsForStoringToDB.remove(SensorShimmerClock.ObjectClusterSensorName.REAL_TIME_CLOCK);
        }
        return mapOfAllChannelsForStoringToDB;
    }

    @Override // com.shimmerresearch.driver.ShimmerDevice
    public double getSamplingClockFreq() {
        if (isTCXO()) {
            return isTcxoClock20MHz() ? 312500.0d : 255765.625d;
        }
        return super.getSamplingClockFreq();
    }

    private boolean isTcxoClock20MHz() {
        ShimmerVerObject shimmerVerObject = getShimmerVerObject();
        ExpansionBoardDetails expansionBoardDetails = getExpansionBoardDetails();
        return (shimmerVerObject.getHardwareVersion() == 3 || shimmerVerObject.getHardwareVersion() == 10) && expansionBoardDetails.getExpansionBoardId() == 47 && expansionBoardDetails.getExpansionBoardRev() == 1 && expansionBoardDetails.getExpansionBoardRevSpecial() == 1;
    }

    protected void determineCalibrationParamsForIMU() {
        if (isShimmerGen2()) {
            this.mSensorMMA736x.updateIsUsingDefaultLNAccelParam();
            this.mSensorShimmer2Mag.updateIsUsingDefaultMagParam();
            this.mSensorShimmer2Gyro.updateIsUsingDefaultGyroParam();
        } else {
            if (isShimmerGen3()) {
                this.mSensorKionixAccel.updateIsUsingDefaultLNAccelParam();
                this.mSensorLSM303.updateIsUsingDefaultWRAccelParam();
                this.mSensorLSM303.updateIsUsingDefaultMagParam();
                this.mSensorMpu9x50.updateIsUsingDefaultGyroParam();
                return;
            }
            if (isShimmerGen3R()) {
                this.mSensorLSM6DSV.updateIsUsingDefaultLNAccelParam();
                this.mSensorLIS2DW12.updateIsUsingDefaultWRAccelParam();
                this.mSensorLIS2MDL.updateIsUsingDefaultMagParam();
                this.mSensorLSM6DSV.updateIsUsingDefaultGyroParam();
            }
        }
    }

    @Override // com.shimmerresearch.driver.ShimmerDevice
    public String getRadioModel() {
        return getBtFwVerDetails().getUserFriendlyName();
    }
}
