// Summary for: /mnt/c/dev/buccancs/external/ShimmerCapturePure/sources/com/shimmerresearch/sensors/SensorSTC3100.java
// Size: 18598 bytes
// Modified: 2025-10-21 16:32:12.880095800 +0100

package com.shimmerresearch.sensors;

import com.shimmerresearch.driver.Configuration;
import com.shimmerresearch.driver.ObjectCluster;
import com.shimmerresearch.driver.ShimmerDevice;
import com.shimmerresearch.driverUtilities.ChannelDetails;
import com.shimmerresearch.driverUtilities.SensorDetails;
import com.shimmerresearch.driverUtilities.SensorDetailsRef;
import com.shimmerresearch.driverUtilities.SensorGroupingDetails;
import com.shimmerresearch.driverUtilities.ShimmerVerObject;
import com.shimmerresearch.sensors.AbstractSensor;
import java.util.Arrays;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;

/* loaded from: classes2.dex */
public class SensorSTC3100 extends AbstractSensor {
    public static final double BATT_CHARGE_CAPACITY = 0.45d;
    public static final double BATT_MAX_VOLTAGE = 4.167d;
    public static final ChannelDetails channelDeriveSTMBatteryPercentage;
    public static final ChannelDetails channelDerivedSTMCharge;
    public static final ChannelDetails channelDerivedSTMTimeRemaining;
    public static final ChannelDetails channelSTMBatteryPercentage;
    public static final ChannelDetails channelSTMCharge;
    public static final ChannelDetails channelSTMCurrent;
    public static final ChannelDetails channelSTMTemp;
    public static final ChannelDetails channelSTMTimeRemaining;
    public static final ChannelDetails channelSTMVoltage;
    public static final Map<String, ChannelDetails> mChannelMapRef;
    public static final Map<Integer, SensorDetailsRef> mSensorMapRef;
    public static final SensorGroupingDetails sensorSTC3100;
    public static final SensorDetailsRef sensorSTC3100Ref;
    private static final long serialVersionUID = 9001303055918168581L;

    @Deprecated
    public double mBattCurrent;

    @Deprecated
    public double mBattCurrentCharge;

    @Deprecated
    public double mBattCurrentVoltage;
    public double mBattInitialCharge;
    public double mBattPercentage;
    public String mBattPercentageParsed;

    @Deprecated
    public double mBattTemperature;
    public double mBattTimeRemaining;
    private SensorSTC3100Details mStc3100Details;

    public static class DatabaseChannelHandles {
    }

    public static class ObjectClusterSensorName {
        public static String DERIVED_STC_BATTERY_PERCENTAGE = "Derived STC3100_Battery_Percentage";
        public static String DERIVED_STC_CHARGE = "Derived STC3100_Charge";
        public static String DERIVED_STC_TIME_REMAINING = "Derived STC3100_Time_Remaining";
        public static String STC_BATERY_PERCENTAGE = "STC3100_Battery_Percentage";
        public static String STC_CHARGE = "STC3100_Charge";
        public static String STC_CURRENT = "STC3100_Current";
        public static String STC_TEMP = "STC3100_Temperature";
        public static String STC_TIME_REMAINING = "STC3100_Time_Remaining";
        public static String STC_VOLTAGE = "STC3100_Voltage";
    }

    private void calculateBattInitialCharge() {
        this.mBattInitialCharge = (this.mBattCurrentVoltage / 4.167d) * 0.45d;
    }

    private void calculateBattTimeRemaining() {
        this.mBattTimeRemaining = ((this.mBattInitialCharge + this.mBattCurrentCharge) / this.mBattCurrent) * 60.0d;
    }

    private double getBattPercentage() {
        return this.mBattPercentage;
    }

    private void setBattCurrent(double d) {
        this.mBattCurrent = d;
    }

    private void setBattCurrentCharge(double d) {
        this.mBattCurrentCharge = d;
    }

    private void setBattCurrentVoltage(double d) {
        this.mBattCurrentVoltage = d;
    }

    private void setBattTemp(double d) {
        this.mBattTemperature = d;
    }

    @Override // com.shimmerresearch.sensors.AbstractSensor
    public boolean checkConfigOptionValues(String str) {
        return false;
    }

    @Override // com.shimmerresearch.sensors.AbstractSensor
    public void checkShimmerConfigBeforeConfiguring() {
    }

    @Override // com.shimmerresearch.sensors.AbstractSensor
    public void configBytesGenerate(ShimmerDevice shimmerDevice, byte[] bArr, Configuration.COMMUNICATION_TYPE communication_type) {
    }

    @Override // com.shimmerresearch.sensors.AbstractSensor
    public void configBytesParse(ShimmerDevice shimmerDevice, byte[] bArr, Configuration.COMMUNICATION_TYPE communication_type) {
    }

    @Override // com.shimmerresearch.sensors.AbstractSensor
    public LinkedHashMap<String, Object> generateConfigMap() {
        return null;
    }

    @Override // com.shimmerresearch.sensors.AbstractSensor
    public void generateConfigOptionsMap() {
    }

    public String getBattPercentageParsed() {
        return this.mBattPercentageParsed;
    }

    @Override // com.shimmerresearch.sensors.AbstractSensor
    public Object getConfigValueUsingConfigLabel(Integer num, String str) {
        return null;
    }

    @Override // com.shimmerresearch.sensors.AbstractSensor
    public Object getSettings(String str, Configuration.COMMUNICATION_TYPE communication_type) {
        return null;
    }

    @Override // com.shimmerresearch.sensors.AbstractSensor
    public void parseConfigMap(LinkedHashMap<String, Object> linkedHashMap) {
    }

    @Override // com.shimmerresearch.sensors.AbstractSensor
    public boolean processResponse(int i, Object obj, Configuration.COMMUNICATION_TYPE communication_type) {
        return false;
    }

    @Override // com.shimmerresearch.sensors.AbstractSensor
    public Object setConfigValueUsingConfigLabel(Integer num, String str, Object obj) {
        return null;
    }

    @Override // com.shimmerresearch.sensors.AbstractSensor
    public boolean setDefaultConfigForSensor(int i, boolean z) {
        return false;
    }

    @Override // com.shimmerresearch.sensors.AbstractSensor
    public void setSensorSamplingRate(double d) {
    }

    @Override // com.shimmerresearch.sensors.AbstractSensor
    public ActionSetting setSettings(String str, Object obj, Configuration.COMMUNICATION_TYPE communication_type) {
        return null;
    }

    public SensorSTC3100Details setStc3100Details() {
        return this.mStc3100Details;
    }

    public void setStc3100Details(SensorSTC3100Details sensorSTC3100Details) {
        this.mStc3100Details = sensorSTC3100Details;
    }

    public class GuiLabelConfig {
        public static final String STC3100_SENSOR = "STC3100 Sensor";

        public GuiLabelConfig() {
        }
    }

    public class GuiLabelSensors {
        public static final String STC3100 = "Battery Monitor (STC3100)";

        public GuiLabelSensors() {
        }
    }

    public class LABEL_SENSOR_TILE {
        public static final String STC3100_MONITORING = "Battery Monitor (STC3100)";

        public LABEL_SENSOR_TILE() {
        }
    }

    static {
        SensorDetailsRef sensorDetailsRef = new SensorDetailsRef(65536L, 65536L, "Battery Monitor (STC3100)", null, null, Arrays.asList(ObjectClusterSensorName.STC_VOLTAGE, ObjectClusterSensorName.STC_CURRENT, ObjectClusterSensorName.STC_TEMP, ObjectClusterSensorName.STC_CHARGE, ObjectClusterSensorName.STC_BATERY_PERCENTAGE, ObjectClusterSensorName.STC_TIME_REMAINING, ObjectClusterSensorName.DERIVED_STC_CHARGE, ObjectClusterSensorName.DERIVED_STC_BATTERY_PERCENTAGE, ObjectClusterSensorName.DERIVED_STC_TIME_REMAINING));
        sensorSTC3100Ref = sensorDetailsRef;
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        linkedHashMap.put(62, sensorDetailsRef);
        mSensorMapRef = Collections.unmodifiableMap(linkedHashMap);
        sensorSTC3100 = new SensorGroupingDetails("Battery Monitor (STC3100)", Arrays.asList(62), Configuration.Shimmer3.CompatibilityInfoForMaps.listOfCompatibleVersionInfoAnyExpBoardStandardFW);
        ChannelDetails channelDetails = new ChannelDetails(ObjectClusterSensorName.STC_VOLTAGE, ObjectClusterSensorName.STC_VOLTAGE, ObjectClusterSensorName.STC_VOLTAGE, ChannelDetails.CHANNEL_DATA_TYPE.INT32, 4, ChannelDetails.CHANNEL_DATA_ENDIAN.MSB, Configuration.CHANNEL_UNITS.MILLIVOLTS, Arrays.asList(ChannelDetails.CHANNEL_TYPE.CAL, ChannelDetails.CHANNEL_TYPE.UNCAL), true, false);
        channelSTMVoltage = channelDetails;
        ChannelDetails channelDetails2 = new ChannelDetails(ObjectClusterSensorName.STC_CURRENT, ObjectClusterSensorName.STC_CURRENT, ObjectClusterSensorName.STC_CURRENT, ChannelDetails.CHANNEL_DATA_TYPE.INT32, 4, ChannelDetails.CHANNEL_DATA_ENDIAN.MSB, Configuration.CHANNEL_UNITS.MILLIAMPS, Arrays.asList(ChannelDetails.CHANNEL_TYPE.CAL, ChannelDetails.CHANNEL_TYPE.UNCAL), true, false);
        channelSTMCurrent = channelDetails2;
        ChannelDetails channelDetails3 = new ChannelDetails(ObjectClusterSensorName.STC_TEMP, ObjectClusterSensorName.STC_TEMP, ObjectClusterSensorName.STC_TEMP, ChannelDetails.CHANNEL_DATA_TYPE.INT32, 4, ChannelDetails.CHANNEL_DATA_ENDIAN.MSB, Configuration.CHANNEL_UNITS.DEGREES_CELSIUS, Arrays.asList(ChannelDetails.CHANNEL_TYPE.CAL, ChannelDetails.CHANNEL_TYPE.UNCAL), true, false);
        channelSTMTemp = channelDetails3;
        ChannelDetails channelDetails4 = new ChannelDetails(ObjectClusterSensorName.STC_CHARGE, ObjectClusterSensorName.STC_CHARGE, ObjectClusterSensorName.STC_CHARGE, ChannelDetails.CHANNEL_DATA_TYPE.INT32, 4, ChannelDetails.CHANNEL_DATA_ENDIAN.MSB, Configuration.CHANNEL_UNITS.MILLIAMP_HOUR, Arrays.asList(ChannelDetails.CHANNEL_TYPE.CAL, ChannelDetails.CHANNEL_TYPE.UNCAL), true, false);
        channelSTMCharge = channelDetails4;
        ChannelDetails channelDetails5 = new ChannelDetails(ObjectClusterSensorName.STC_BATERY_PERCENTAGE, ObjectClusterSensorName.STC_BATERY_PERCENTAGE, ObjectClusterSensorName.STC_BATERY_PERCENTAGE, ChannelDetails.CHANNEL_DATA_TYPE.INT32, 4, ChannelDetails.CHANNEL_DATA_ENDIAN.MSB, Configuration.CHANNEL_UNITS.PERCENT, Arrays.asList(ChannelDetails.CHANNEL_TYPE.CAL, ChannelDetails.CHANNEL_TYPE.UNCAL), true, false);
        channelSTMBatteryPercentage = channelDetails5;
        ChannelDetails channelDetails6 = new ChannelDetails(ObjectClusterSensorName.STC_TIME_REMAINING, ObjectClusterSensorName.STC_TIME_REMAINING, ObjectClusterSensorName.STC_TIME_REMAINING, ChannelDetails.CHANNEL_DATA_TYPE.INT32, 4, ChannelDetails.CHANNEL_DATA_ENDIAN.MSB, Configuration.CHANNEL_UNITS.MINUTES, Arrays.asList(ChannelDetails.CHANNEL_TYPE.CAL, ChannelDetails.CHANNEL_TYPE.UNCAL), true, false);
        channelSTMTimeRemaining = channelDetails6;
        ChannelDetails channelDetails7 = new ChannelDetails(ObjectClusterSensorName.DERIVED_STC_CHARGE, ObjectClusterSensorName.DERIVED_STC_CHARGE, ObjectClusterSensorName.DERIVED_STC_CHARGE, Configuration.CHANNEL_UNITS.MILLIAMP_HOUR, Arrays.asList(ChannelDetails.CHANNEL_TYPE.CAL), true, false);
        channelDerivedSTMCharge = channelDetails7;
        ChannelDetails channelDetails8 = new ChannelDetails(ObjectClusterSensorName.DERIVED_STC_BATTERY_PERCENTAGE, ObjectClusterSensorName.DERIVED_STC_BATTERY_PERCENTAGE, ObjectClusterSensorName.DERIVED_STC_BATTERY_PERCENTAGE, Configuration.CHANNEL_UNITS.PERCENT, Arrays.asList(ChannelDetails.CHANNEL_TYPE.CAL), true, false);
        channelDeriveSTMBatteryPercentage = channelDetails8;
        ChannelDetails channelDetails9 = new ChannelDetails(ObjectClusterSensorName.DERIVED_STC_TIME_REMAINING, ObjectClusterSensorName.DERIVED_STC_TIME_REMAINING, ObjectClusterSensorName.DERIVED_STC_TIME_REMAINING, Configuration.CHANNEL_UNITS.MINUTES, Arrays.asList(ChannelDetails.CHANNEL_TYPE.CAL), true, false);
        channelDerivedSTMTimeRemaining = channelDetails9;
        LinkedHashMap linkedHashMap2 = new LinkedHashMap();
        linkedHashMap2.put(ObjectClusterSensorName.STC_VOLTAGE, channelDetails);
        linkedHashMap2.put(ObjectClusterSensorName.STC_CURRENT, channelDetails2);
        linkedHashMap2.put(ObjectClusterSensorName.STC_TEMP, channelDetails3);
        linkedHashMap2.put(ObjectClusterSensorName.STC_CHARGE, channelDetails4);
        linkedHashMap2.put(ObjectClusterSensorName.STC_BATERY_PERCENTAGE, channelDetails5);
        linkedHashMap2.put(ObjectClusterSensorName.STC_TIME_REMAINING, channelDetails6);
        linkedHashMap2.put(ObjectClusterSensorName.DERIVED_STC_CHARGE, channelDetails7);
        linkedHashMap2.put(ObjectClusterSensorName.DERIVED_STC_BATTERY_PERCENTAGE, channelDetails8);
        linkedHashMap2.put(ObjectClusterSensorName.DERIVED_STC_TIME_REMAINING, channelDetails9);
        mChannelMapRef = Collections.unmodifiableMap(linkedHashMap2);
    }

    public SensorSTC3100(ShimmerVerObject shimmerVerObject) {
        super(AbstractSensor.SENSORS.STC3100, shimmerVerObject);
        this.mStc3100Details = new SensorSTC3100Details();
        this.mBattInitialCharge = 0.0d;
        this.mBattCurrentVoltage = 0.0d;
        this.mBattCurrent = 0.0d;
        this.mBattTemperature = 0.0d;
        this.mBattCurrentCharge = 0.0d;
        this.mBattPercentage = 0.0d;
        this.mBattTimeRemaining = 0.0d;
        this.mBattPercentageParsed = "";
        channelDerivedSTMCharge.mChannelSource = ChannelDetails.CHANNEL_SOURCE.API;
        channelDeriveSTMBatteryPercentage.mChannelSource = ChannelDetails.CHANNEL_SOURCE.API;
        channelDerivedSTMTimeRemaining.mChannelSource = ChannelDetails.CHANNEL_SOURCE.API;
        initialise();
    }

    @Override // com.shimmerresearch.sensors.AbstractSensor
    public void generateSensorMap() {
        super.createLocalSensorMapWithCustomParser(mSensorMapRef, mChannelMapRef);
    }

    @Override // com.shimmerresearch.sensors.AbstractSensor
    public void generateSensorGroupMapping() {
        this.mSensorGroupingMap = new LinkedHashMap<>();
        if (this.mShimmerVerObject.isShimmerGen4()) {
            this.mSensorGroupingMap.put(Integer.valueOf(Configuration.Shimmer3.LABEL_SENSOR_TILE.STC3100_MONITORING.ordinal()), sensorSTC3100);
        }
        super.updateSensorGroupingMap();
    }

    @Override // com.shimmerresearch.sensors.AbstractSensor
    public ObjectCluster processDataCustom(SensorDetails sensorDetails, byte[] bArr, Configuration.COMMUNICATION_TYPE communication_type, ObjectCluster objectCluster, boolean z, double d) {
        ObjectCluster objectClusterProcessDataCommon = sensorDetails.processDataCommon(bArr, communication_type, objectCluster, z, d);
        for (ChannelDetails channelDetails : sensorDetails.mListOfChannels) {
            if (channelDetails.mObjectClusterName.equals(ObjectClusterSensorName.STC_VOLTAGE) || channelDetails.mObjectClusterName.equals(ObjectClusterSensorName.STC_CURRENT) || channelDetails.mObjectClusterName.equals(ObjectClusterSensorName.STC_TEMP) || channelDetails.mObjectClusterName.equals(ObjectClusterSensorName.STC_CHARGE) || channelDetails.mObjectClusterName.equals(ObjectClusterSensorName.STC_BATERY_PERCENTAGE) || channelDetails.mObjectClusterName.equals(ObjectClusterSensorName.STC_TIME_REMAINING)) {
                double d2 = ObjectCluster.returnFormatCluster(objectClusterProcessDataCommon.getCollectionOfFormatClusters(channelDetails.mObjectClusterName), channelDetails.mChannelFormatDerivedFromShimmerDataPacket.toString()).mData / 100.0d;
                if (channelDetails.mObjectClusterName.equals(ObjectClusterSensorName.STC_VOLTAGE)) {
                    setBattCurrentVoltage(d2);
                    objectClusterProcessDataCommon.addCalData(channelDetails, d2, objectClusterProcessDataCommon.getIndexKeeper() - 6);
                } else if (channelDetails.mObjectClusterName.equals(ObjectClusterSensorName.STC_CURRENT)) {
                    setBattCurrent(d2);
                    objectClusterProcessDataCommon.addCalData(channelDetails, d2, objectClusterProcessDataCommon.getIndexKeeper() - 5);
                } else if (channelDetails.mObjectClusterName.equals(ObjectClusterSensorName.STC_TEMP)) {
                    setBattTemp(d2);
                    objectClusterProcessDataCommon.addCalData(channelDetails, d2, objectClusterProcessDataCommon.getIndexKeeper() - 4);
                } else if (channelDetails.mObjectClusterName.equals(ObjectClusterSensorName.STC_CHARGE)) {
                    setBattCurrentCharge(d2);
                    objectClusterProcessDataCommon.addCalData(channelDetails, d2, objectClusterProcessDataCommon.getIndexKeeper() - 3);
                } else if (channelDetails.mObjectClusterName.equals(ObjectClusterSensorName.STC_BATERY_PERCENTAGE)) {
                    objectClusterProcessDataCommon.addCalData(channelDetails, d2, objectClusterProcessDataCommon.getIndexKeeper() - 2);
                } else if (channelDetails.mObjectClusterName.equals(ObjectClusterSensorName.STC_TIME_REMAINING)) {
                    objectClusterProcessDataCommon.addCalData(channelDetails, d2, objectClusterProcessDataCommon.getIndexKeeper() - 1);
                }
            } else if (channelDetails.mObjectClusterName.equals(ObjectClusterSensorName.DERIVED_STC_CHARGE)) {
                calculateBattInitialCharge();
                objectClusterProcessDataCommon.addCalData(channelDetails, this.mBattInitialCharge);
                objectClusterProcessDataCommon.incrementIndexKeeper();
            } else if (channelDetails.mObjectClusterName.equals(ObjectClusterSensorName.DERIVED_STC_BATTERY_PERCENTAGE)) {
                calculateBattPercentage();
                objectClusterProcessDataCommon.addCalData(channelDetails, this.mBattPercentage);
                objectClusterProcessDataCommon.incrementIndexKeeper();
            } else if (channelDetails.mObjectClusterName.equals(ObjectClusterSensorName.DERIVED_STC_TIME_REMAINING)) {
                calculateBattTimeRemaining();
                objectClusterProcessDataCommon.addCalData(channelDetails, this.mBattTimeRemaining);
                objectClusterProcessDataCommon.incrementIndexKeeper();
            }
        }
        return objectClusterProcessDataCommon;
    }

    private void calculateBattPercentage() {
        double d = ((this.mBattInitialCharge + this.mBattCurrentCharge) / 0.45d) * 100.0d;
        this.mBattPercentage = d;
        if (d > 100.0d) {
            this.mBattPercentage = 100.0d;
        } else if (d < 0.0d) {
            this.mBattPercentage = 0.0d;
        }
        this.mBattPercentageParsed = String.format("%,.1f", Double.valueOf(this.mBattPercentage)) + Configuration.CHANNEL_UNITS.PERCENT;
    }
}
