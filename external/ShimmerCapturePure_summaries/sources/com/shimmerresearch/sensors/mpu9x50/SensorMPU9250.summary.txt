// Summary for: /mnt/c/dev/buccancs/external/ShimmerCapturePure/sources/com/shimmerresearch/sensors/mpu9x50/SensorMPU9250.java
// Size: 21226 bytes
// Modified: 2025-10-21 16:32:13.108258600 +0100

package com.shimmerresearch.sensors.mpu9x50;

import com.shimmerresearch.driver.Configuration;
import com.shimmerresearch.driver.ShimmerDevice;
import com.shimmerresearch.driver.calibration.CalibDetailsKinematic;
import com.shimmerresearch.driverUtilities.ChannelDetails;
import com.shimmerresearch.driverUtilities.ConfigOptionDetails;
import com.shimmerresearch.driverUtilities.ConfigOptionDetailsSensor;
import com.shimmerresearch.driverUtilities.SensorDetailsRef;
import com.shimmerresearch.driverUtilities.SensorGroupingDetails;
import com.shimmerresearch.sensors.AbstractSensor;
import com.shimmerresearch.sensors.mpu9x50.SensorMPU9X50;
import java.util.Arrays;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/* loaded from: classes2.dex */
public class SensorMPU9250 extends SensorMPU9X50 {
    public static final ChannelDetails channelAccelX;
    public static final ChannelDetails channelAccelY;
    public static final ChannelDetails channelAccelZ;
    public static final ChannelDetails channelGyroX;
    public static final ChannelDetails channelGyroY;
    public static final ChannelDetails channelGyroZ;
    public static final ChannelDetails channelMagX;
    public static final ChannelDetails channelMagY;
    public static final ChannelDetails channelMagZ;
    public static final ConfigOptionDetailsSensor configOptionMpu9250AccelRange;
    public static final ConfigOptionDetailsSensor configOptionMpu9250GyroLpm;
    public static final ConfigOptionDetailsSensor configOptionMpu9250GyroRange;
    public static final ConfigOptionDetailsSensor configOptionMpu9250GyroRate;
    public static final ConfigOptionDetailsSensor configOptionMpu9250MagRate;
    public static final Map<String, ChannelDetails> mChannelMapRef;
    public static final Map<Integer, SensorDetailsRef> mSensorMapRef;
    public static final SensorDetailsRef sensorMpu9250AccelRef;
    public static final SensorDetailsRef sensorMpu9250GyroRef;
    public static final SensorDetailsRef sensorMpu9250MagRef;
    private static final long serialVersionUID = 6559532137082204767L;

    public static class DatabaseChannelHandles {
        public static final String ALTERNATIVE_ACC_X = "MPU9250_ACC_X";
        public static final String ALTERNATIVE_ACC_Y = "MPU9250_ACC_Y";
        public static final String ALTERNATIVE_ACC_Z = "MPU9250_ACC_Z";
        public static final String ALTERNATIVE_MAG_X = "MPU9250_MAG_X";
        public static final String ALTERNATIVE_MAG_Y = "MPU9250_MAG_Y";
        public static final String ALTERNATIVE_MAG_Z = "MPU9250_MAG_Z";
        public static final String GYRO_X = "MPU9250_GYRO_X";
        public static final String GYRO_Y = "MPU9250_GYRO_Y";
        public static final String GYRO_Z = "MPU9250_GYRO_Z";
    }

    public static final class DatabaseConfigHandle {
        public static final String ALTERNATIVE_ACC_RANGE = "MPU9250_Acc_Range";
        public static final String GYRO_CALIB_TIME = "MPU9250_Gyro_Calib_Time";
        public static final String GYRO_RANGE = "MPU9250_Gyro_Range";
        public static final String GYRO_RATE = "MPU9250_Gyro_Rate";
        public static final String MPU_EULER_6DOF = "MPU9250_MPL_Euler_6DOF";
        public static final String MPU_HEADING_ENABLE = "MPU9250_MPL_Heading";
        public static final String MPU_MAG_SAMPLING_RATE = "MPU9250_MAG_Sampling_rate";
        public static final String MPU_QUAT_6DOF = "MPU9250_MPL_Quat_6DOF";
        public static final String GYRO_OFFSET_X = "MPU9250_Gyro_Offset_X";
        public static final String GYRO_OFFSET_Y = "MPU9250_Gyro_Offset_Y";
        public static final String GYRO_OFFSET_Z = "MPU9250_Gyro_Offset_Z";
        public static final String GYRO_GAIN_X = "MPU9250_Gyro_Gain_X";
        public static final String GYRO_GAIN_Y = "MPU9250_Gyro_Gain_Y";
        public static final String GYRO_GAIN_Z = "MPU9250_Gyro_Gain_Z";
        public static final String GYRO_ALIGN_XX = "MPU9250_Gyro_Align_XX";
        public static final String GYRO_ALIGN_XY = "MPU9250_Gyro_Align_XY";
        public static final String GYRO_ALIGN_XZ = "MPU9250_Gyro_Align_XZ";
        public static final String GYRO_ALIGN_YX = "MPU9250_Gyro_Align_YX";
        public static final String GYRO_ALIGN_YY = "MPU9250_Gyro_Align_YY";
        public static final String GYRO_ALIGN_YZ = "MPU9250_Gyro_Align_YZ";
        public static final String GYRO_ALIGN_ZX = "MPU9250_Gyro_Align_ZX";
        public static final String GYRO_ALIGN_ZY = "MPU9250_Gyro_Align_ZY";
        public static final String GYRO_ALIGN_ZZ = "MPU9250_Gyro_Align_ZZ";
        public static final List<String> LIST_OF_CALIB_HANDLES_GYRO = Arrays.asList(GYRO_OFFSET_X, GYRO_OFFSET_Y, GYRO_OFFSET_Z, GYRO_GAIN_X, GYRO_GAIN_Y, GYRO_GAIN_Z, GYRO_ALIGN_XX, GYRO_ALIGN_XY, GYRO_ALIGN_XZ, GYRO_ALIGN_YX, GYRO_ALIGN_YY, GYRO_ALIGN_YZ, GYRO_ALIGN_ZX, GYRO_ALIGN_ZY, GYRO_ALIGN_ZZ);
        public static final String MPU_ACC_OFFSET_X = "MPU9250_Acc_Offset_X";
        public static final String MPU_ACC_OFFSET_Y = "MPU9250_Acc_Offset_Y";
        public static final String MPU_ACC_OFFSET_Z = "MPU9250_Acc_Offset_Z";
        public static final String MPU_ACC_GAIN_X = "MPU9250_Acc_Gain_X";
        public static final String MPU_ACC_GAIN_Y = "MPU9250_Acc_Gain_Y";
        public static final String MPU_ACC_GAIN_Z = "MPU9250_Acc_Gain_Z";
        public static final String MPU_ACC_ALIGN_XX = "MPU9250_Acc_Align_XX";
        public static final String MPU_ACC_ALIGN_XY = "MPU9250_Acc_Align_XY";
        public static final String MPU_ACC_ALIGN_XZ = "MPU9250_Acc_Align_XZ";
        public static final String MPU_ACC_ALIGN_YX = "MPU9250_Acc_Align_YX";
        public static final String MPU_ACC_ALIGN_YY = "MPU9250_Acc_Align_YY";
        public static final String MPU_ACC_ALIGN_YZ = "MPU9250_Acc_Align_YZ";
        public static final String MPU_ACC_ALIGN_ZX = "MPU9250_Acc_Align_ZX";
        public static final String MPU_ACC_ALIGN_ZY = "MPU9250_Acc_Align_ZY";
        public static final String MPU_ACC_ALIGN_ZZ = "MPU9250_Acc_Align_ZZ";
        public static final List<String> LIST_OF_CALIB_HANDLES_MPU_ACC = Arrays.asList(MPU_ACC_OFFSET_X, MPU_ACC_OFFSET_Y, MPU_ACC_OFFSET_Z, MPU_ACC_GAIN_X, MPU_ACC_GAIN_Y, MPU_ACC_GAIN_Z, MPU_ACC_ALIGN_XX, MPU_ACC_ALIGN_XY, MPU_ACC_ALIGN_XZ, MPU_ACC_ALIGN_YX, MPU_ACC_ALIGN_YY, MPU_ACC_ALIGN_YZ, MPU_ACC_ALIGN_ZX, MPU_ACC_ALIGN_ZY, MPU_ACC_ALIGN_ZZ);
        public static final String MPU_MAG_OFFSET_X = "MPU9250_Mag_Offset_X";
        public static final String MPU_MAG_OFFSET_Y = "MPU9250_Mag_Offset_Y";
        public static final String MPU_MAG_OFFSET_Z = "MPU9250_Mag_Offset_Z";
        public static final String MPU_MAG_GAIN_X = "MPU9250_Mag_Gain_X";
        public static final String MPU_MAG_GAIN_Y = "MPU9250_Mag_Gain_Y";
        public static final String MPU_MAG_GAIN_Z = "MPU9250_Mag_Gain_Z";
        public static final String MPU_MAG_ALIGN_XX = "MPU9250_Mag_Align_XX";
        public static final String MPU_MAG_ALIGN_XY = "MPU9250_Mag_Align_XY";
        public static final String MPU_MAG_ALIGN_XZ = "MPU9250_Mag_Align_XZ";
        public static final String MPU_MAG_ALIGN_YX = "MPU9250_Mag_Align_YX";
        public static final String MPU_MAG_ALIGN_YY = "MPU9250_Mag_Align_YY";
        public static final String MPU_MAG_ALIGN_YZ = "MPU9250_Mag_Align_YZ";
        public static final String MPU_MAG_ALIGN_ZX = "MPU9250_Mag_Align_ZX";
        public static final String MPU_MAG_ALIGN_ZY = "MPU9250_Mag_Align_ZY";
        public static final String MPU_MAG_ALIGN_ZZ = "MPU9250_Mag_Align_ZZ";
        public static final List<String> LIST_OF_CALIB_HANDLES_MPU_MAG = Arrays.asList(MPU_MAG_OFFSET_X, MPU_MAG_OFFSET_Y, MPU_MAG_OFFSET_Z, MPU_MAG_GAIN_X, MPU_MAG_GAIN_Y, MPU_MAG_GAIN_Z, MPU_MAG_ALIGN_XX, MPU_MAG_ALIGN_XY, MPU_MAG_ALIGN_XZ, MPU_MAG_ALIGN_YX, MPU_MAG_ALIGN_YY, MPU_MAG_ALIGN_YZ, MPU_MAG_ALIGN_ZX, MPU_MAG_ALIGN_ZY, MPU_MAG_ALIGN_ZZ);
    }

    static {
        ChannelDetails channelDetails = new ChannelDetails(SensorMPU9X50.ObjectClusterSensorName.GYRO_X, SensorMPU9X50.ObjectClusterSensorName.GYRO_X, DatabaseChannelHandles.GYRO_X, ChannelDetails.CHANNEL_DATA_TYPE.INT16, 2, ChannelDetails.CHANNEL_DATA_ENDIAN.MSB, "deg/s", (List<ChannelDetails.CHANNEL_TYPE>) Arrays.asList(ChannelDetails.CHANNEL_TYPE.CAL, ChannelDetails.CHANNEL_TYPE.UNCAL), 10);
        channelGyroX = channelDetails;
        ChannelDetails channelDetails2 = new ChannelDetails(SensorMPU9X50.ObjectClusterSensorName.GYRO_Y, SensorMPU9X50.ObjectClusterSensorName.GYRO_Y, DatabaseChannelHandles.GYRO_Y, ChannelDetails.CHANNEL_DATA_TYPE.INT16, 2, ChannelDetails.CHANNEL_DATA_ENDIAN.MSB, "deg/s", (List<ChannelDetails.CHANNEL_TYPE>) Arrays.asList(ChannelDetails.CHANNEL_TYPE.CAL, ChannelDetails.CHANNEL_TYPE.UNCAL), 11);
        channelGyroY = channelDetails2;
        ChannelDetails channelDetails3 = new ChannelDetails(SensorMPU9X50.ObjectClusterSensorName.GYRO_Z, SensorMPU9X50.ObjectClusterSensorName.GYRO_Z, DatabaseChannelHandles.GYRO_Z, ChannelDetails.CHANNEL_DATA_TYPE.INT16, 2, ChannelDetails.CHANNEL_DATA_ENDIAN.MSB, "deg/s", (List<ChannelDetails.CHANNEL_TYPE>) Arrays.asList(ChannelDetails.CHANNEL_TYPE.CAL, ChannelDetails.CHANNEL_TYPE.UNCAL), 12);
        channelGyroZ = channelDetails3;
        ChannelDetails channelDetails4 = new ChannelDetails(SensorMPU9X50.ObjectClusterSensorName.ACCEL_MPU_X, SensorMPU9X50.ObjectClusterSensorName.ACCEL_MPU_X, DatabaseChannelHandles.ALTERNATIVE_ACC_X, ChannelDetails.CHANNEL_DATA_TYPE.INT16, 2, ChannelDetails.CHANNEL_DATA_ENDIAN.MSB, "m/(s^2)", Arrays.asList(ChannelDetails.CHANNEL_TYPE.UNCAL));
        channelAccelX = channelDetails4;
        ChannelDetails channelDetails5 = new ChannelDetails(SensorMPU9X50.ObjectClusterSensorName.ACCEL_MPU_Y, SensorMPU9X50.ObjectClusterSensorName.ACCEL_MPU_Y, DatabaseChannelHandles.ALTERNATIVE_ACC_Y, ChannelDetails.CHANNEL_DATA_TYPE.INT16, 2, ChannelDetails.CHANNEL_DATA_ENDIAN.MSB, "m/(s^2)", Arrays.asList(ChannelDetails.CHANNEL_TYPE.UNCAL));
        channelAccelY = channelDetails5;
        ChannelDetails channelDetails6 = new ChannelDetails(SensorMPU9X50.ObjectClusterSensorName.ACCEL_MPU_Z, SensorMPU9X50.ObjectClusterSensorName.ACCEL_MPU_Z, DatabaseChannelHandles.ALTERNATIVE_ACC_Z, ChannelDetails.CHANNEL_DATA_TYPE.INT16, 2, ChannelDetails.CHANNEL_DATA_ENDIAN.MSB, "m/(s^2)", Arrays.asList(ChannelDetails.CHANNEL_TYPE.UNCAL));
        channelAccelZ = channelDetails6;
        ChannelDetails channelDetails7 = new ChannelDetails(SensorMPU9X50.ObjectClusterSensorName.MAG_MPU_X, SensorMPU9X50.ObjectClusterSensorName.MAG_MPU_X, DatabaseChannelHandles.ALTERNATIVE_MAG_X, ChannelDetails.CHANNEL_DATA_TYPE.INT16, 2, ChannelDetails.CHANNEL_DATA_ENDIAN.LSB, Configuration.CHANNEL_UNITS.U_TESLA, Arrays.asList(ChannelDetails.CHANNEL_TYPE.CAL, ChannelDetails.CHANNEL_TYPE.UNCAL));
        channelMagX = channelDetails7;
        ChannelDetails channelDetails8 = new ChannelDetails(SensorMPU9X50.ObjectClusterSensorName.MAG_MPU_Y, SensorMPU9X50.ObjectClusterSensorName.MAG_MPU_Y, DatabaseChannelHandles.ALTERNATIVE_MAG_Y, ChannelDetails.CHANNEL_DATA_TYPE.INT16, 2, ChannelDetails.CHANNEL_DATA_ENDIAN.LSB, Configuration.CHANNEL_UNITS.U_TESLA, Arrays.asList(ChannelDetails.CHANNEL_TYPE.CAL, ChannelDetails.CHANNEL_TYPE.UNCAL));
        channelMagY = channelDetails8;
        ChannelDetails channelDetails9 = new ChannelDetails(SensorMPU9X50.ObjectClusterSensorName.MAG_MPU_Z, SensorMPU9X50.ObjectClusterSensorName.MAG_MPU_Z, DatabaseChannelHandles.ALTERNATIVE_MAG_Z, ChannelDetails.CHANNEL_DATA_TYPE.INT16, 2, ChannelDetails.CHANNEL_DATA_ENDIAN.LSB, Configuration.CHANNEL_UNITS.U_TESLA, Arrays.asList(ChannelDetails.CHANNEL_TYPE.CAL, ChannelDetails.CHANNEL_TYPE.UNCAL));
        channelMagZ = channelDetails9;
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        linkedHashMap.put(SensorMPU9X50.ObjectClusterSensorName.GYRO_X, channelDetails);
        linkedHashMap.put(SensorMPU9X50.ObjectClusterSensorName.GYRO_Y, channelDetails2);
        linkedHashMap.put(SensorMPU9X50.ObjectClusterSensorName.GYRO_Z, channelDetails3);
        linkedHashMap.put(SensorMPU9X50.ObjectClusterSensorName.ACCEL_MPU_X, channelDetails4);
        linkedHashMap.put(SensorMPU9X50.ObjectClusterSensorName.ACCEL_MPU_Y, channelDetails5);
        linkedHashMap.put(SensorMPU9X50.ObjectClusterSensorName.ACCEL_MPU_Z, channelDetails6);
        linkedHashMap.put(SensorMPU9X50.ObjectClusterSensorName.MAG_MPU_X, channelDetails7);
        linkedHashMap.put(SensorMPU9X50.ObjectClusterSensorName.MAG_MPU_Y, channelDetails8);
        linkedHashMap.put(SensorMPU9X50.ObjectClusterSensorName.MAG_MPU_Z, channelDetails9);
        mChannelMapRef = Collections.unmodifiableMap(linkedHashMap);
        SensorDetailsRef sensorDetailsRef = new SensorDetailsRef(64L, 64L, "Gyroscope", Configuration.Shimmer3.CompatibilityInfoForMaps.listOfCompatibleVersionInfoMPU9250, Arrays.asList(58), Arrays.asList("Gyro Range", "Gyro Sampling Rate"), Arrays.asList(SensorMPU9X50.ObjectClusterSensorName.GYRO_X, SensorMPU9X50.ObjectClusterSensorName.GYRO_Y, SensorMPU9X50.ObjectClusterSensorName.GYRO_Z), false);
        sensorMpu9250GyroRef = sensorDetailsRef;
        SensorDetailsRef sensorDetailsRef2 = new SensorDetailsRef(4194304L, 4194304L, "Alternative Accel", Configuration.Shimmer3.CompatibilityInfoForMaps.listOfCompatibleVersionInfoShimmer4, Arrays.asList(59), Arrays.asList(SensorMPU9X50.GuiLabelConfig.MPU9X50_ACCEL_RANGE), Arrays.asList(SensorMPU9X50.ObjectClusterSensorName.ACCEL_MPU_X, SensorMPU9X50.ObjectClusterSensorName.ACCEL_MPU_Y, SensorMPU9X50.ObjectClusterSensorName.ACCEL_MPU_Z), false);
        sensorMpu9250AccelRef = sensorDetailsRef2;
        SensorDetailsRef sensorDetailsRef3 = new SensorDetailsRef(2097152L, 2097152L, "Alternative Mag", Configuration.Shimmer3.CompatibilityInfoForMaps.listOfCompatibleVersionInfoShimmer4, Arrays.asList(60), Arrays.asList(SensorMPU9X50.GuiLabelConfig.MPU9X50_MAG_RATE), Arrays.asList(SensorMPU9X50.ObjectClusterSensorName.MAG_MPU_X, SensorMPU9X50.ObjectClusterSensorName.MAG_MPU_Y, SensorMPU9X50.ObjectClusterSensorName.MAG_MPU_Z), false);
        sensorMpu9250MagRef = sensorDetailsRef3;
        LinkedHashMap linkedHashMap2 = new LinkedHashMap();
        linkedHashMap2.put(30, sensorDetailsRef);
        linkedHashMap2.put(33, sensorDetailsRef2);
        linkedHashMap2.put(34, sensorDetailsRef3);
        mSensorMapRef = Collections.unmodifiableMap(linkedHashMap2);
        configOptionMpu9250GyroRange = new ConfigOptionDetailsSensor("Gyro Range", DatabaseConfigHandle.GYRO_RANGE, ListofGyroRange, ListofMPU9X50GyroRangeConfigValues, ConfigOptionDetails.GUI_COMPONENT_TYPE.COMBOBOX, Configuration.Shimmer3.CompatibilityInfoForMaps.listOfCompatibleVersionInfoAnyExpBoardStandardFW);
        configOptionMpu9250AccelRange = new ConfigOptionDetailsSensor(SensorMPU9X50.GuiLabelConfig.MPU9X50_ACCEL_RANGE, DatabaseConfigHandle.ALTERNATIVE_ACC_RANGE, ListofMPU9X50AccelRange, ListofMPU9X50AccelRangeConfigValues, ConfigOptionDetails.GUI_COMPONENT_TYPE.COMBOBOX, Configuration.Shimmer3.CompatibilityInfoForMaps.listOfCompatibleVersionInfoMPLSensors);
        configOptionMpu9250MagRate = new ConfigOptionDetailsSensor(SensorMPU9X50.GuiLabelConfig.MPU9X50_MAG_RATE, DatabaseConfigHandle.MPU_MAG_SAMPLING_RATE, ListofMPU9X50MagRate, ListofMPU9X50MagRateConfigValues, ConfigOptionDetails.GUI_COMPONENT_TYPE.COMBOBOX, Configuration.Shimmer3.CompatibilityInfoForMaps.listOfCompatibleVersionInfoMPLSensors);
        configOptionMpu9250GyroRate = new ConfigOptionDetailsSensor("Gyro Sampling Rate", DatabaseConfigHandle.GYRO_RATE, ConfigOptionDetails.GUI_COMPONENT_TYPE.TEXTFIELD, Configuration.Shimmer3.CompatibilityInfoForMaps.listOfCompatibleVersionInfoAnyExpBoardStandardFW);
        configOptionMpu9250GyroLpm = new ConfigOptionDetailsSensor("Gyro Low-Power Mode", null, ConfigOptionDetails.GUI_COMPONENT_TYPE.CHECKBOX, Configuration.Shimmer3.CompatibilityInfoForMaps.listOfCompatibleVersionInfoAnyExpBoardStandardFW);
    }

    public SensorMPU9250() {
        super(AbstractSensor.SENSORS.MPU9X50);
        initialise();
    }

    public SensorMPU9250(ShimmerDevice shimmerDevice) {
        super(AbstractSensor.SENSORS.MPU9X50, shimmerDevice);
        initialise();
    }

    @Override // com.shimmerresearch.sensors.AbstractSensor
    public void initialise() {
        this.mSensorIdGyro = 30;
        this.mSensorIdAccel = 33;
        this.mSensorIdMag = 34;
        super.initialise();
        setCalibSensitivityScaleFactor(this.mSensorIdGyro, CalibDetailsKinematic.CALIBRATION_SCALE_FACTOR.ONE_HUNDRED);
        updateCurrentGyroCalibInUse();
    }

    @Override // com.shimmerresearch.sensors.AbstractSensor
    public void generateConfigOptionsMap() {
        this.mConfigOptionsMap.clear();
        addConfigOption(configOptionMpu9250GyroRange);
        addConfigOption(configOptionMpu9250AccelRange);
        addConfigOption(configOptionMpu9250MagRate);
        addConfigOption(configOptionMpu9250GyroRate);
        addConfigOption(configOptionMpu9250GyroLpm);
    }

    @Override // com.shimmerresearch.sensors.AbstractSensor
    public void generateSensorMap() {
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        linkedHashMap.putAll(mSensorMapRefCommon);
        linkedHashMap.putAll(mSensorMapRef);
        super.createLocalSensorMapWithCustomParser(linkedHashMap, mChannelMapRef);
    }

    @Override // com.shimmerresearch.sensors.AbstractSensor
    public void generateSensorGroupMapping() {
        this.mSensorGroupingMap = new LinkedHashMap<>();
        this.mSensorGroupingMap.put(Integer.valueOf(Configuration.Shimmer3.LABEL_SENSOR_TILE.MPU.ordinal()), new SensorGroupingDetails(SensorMPU9X50.LABEL_SENSOR_TILE.MPU, Arrays.asList(Integer.valueOf(this.mSensorIdAccel), Integer.valueOf(this.mSensorIdGyro), Integer.valueOf(this.mSensorIdMag)), Configuration.Shimmer3.CompatibilityInfoForMaps.listOfCompatibleVersionInfoShimmer4));
        this.mSensorGroupingMap.put(Integer.valueOf(Configuration.Shimmer3.LABEL_SENSOR_TILE.GYRO.ordinal()), new SensorGroupingDetails("Gyroscope", Arrays.asList(Integer.valueOf(this.mSensorIdGyro)), Configuration.Shimmer3.CompatibilityInfoForMaps.listOfCompatibleVersionInfoMPU9250));
        super.updateSensorGroupingMap();
    }

    @Override // com.shimmerresearch.sensors.AbstractSensor
    public LinkedHashMap<String, Object> generateConfigMap() {
        LinkedHashMap<String, Object> linkedHashMap = new LinkedHashMap<>();
        linkedHashMap.put(DatabaseConfigHandle.GYRO_RANGE, Integer.valueOf(getGyroRange()));
        linkedHashMap.put(DatabaseConfigHandle.GYRO_RATE, Integer.valueOf(getMPU9X50GyroAccelRate()));
        linkedHashMap.put(DatabaseConfigHandle.ALTERNATIVE_ACC_RANGE, Integer.valueOf(getMPU9X50AccelRange()));
        linkedHashMap.put(DatabaseConfigHandle.MPU_MAG_SAMPLING_RATE, Integer.valueOf(getMPU9X50MagSamplingRate()));
        SensorMPU9X50.addCalibDetailsToDbMap(linkedHashMap, getCurrentCalibDetailsGyro(), DatabaseConfigHandle.LIST_OF_CALIB_HANDLES_GYRO, DatabaseConfigHandle.GYRO_CALIB_TIME);
        AbstractSensor.addCalibDetailsToDbMap(linkedHashMap, DatabaseConfigHandle.LIST_OF_CALIB_HANDLES_MPU_ACC, getOffsetVectorMPLAccel(), getSensitivityMatrixMPLAccel(), getAlignmentMatrixMPLAccel());
        AbstractSensor.addCalibDetailsToDbMap(linkedHashMap, DatabaseConfigHandle.LIST_OF_CALIB_HANDLES_MPU_MAG, getOffsetVectorMPLMag(), getSensitivityMatrixMPLMag(), getAlignmentMatrixMPLMag());
        return linkedHashMap;
    }

    @Override // com.shimmerresearch.sensors.AbstractSensor
    public void parseConfigMap(LinkedHashMap<String, Object> linkedHashMap) {
        if (linkedHashMap.containsKey(DatabaseConfigHandle.GYRO_RATE)) {
            setMPU9X50GyroAccelRate(((Double) linkedHashMap.get(DatabaseConfigHandle.GYRO_RATE)).intValue());
        }
        if (linkedHashMap.containsKey(DatabaseConfigHandle.GYRO_RANGE)) {
            setGyroRange(((Double) linkedHashMap.get(DatabaseConfigHandle.GYRO_RANGE)).intValue());
        }
        if (linkedHashMap.containsKey(DatabaseConfigHandle.ALTERNATIVE_ACC_RANGE)) {
            setMPU9X50AccelRange(((Double) linkedHashMap.get(DatabaseConfigHandle.ALTERNATIVE_ACC_RANGE)).intValue());
        }
        if (linkedHashMap.containsKey(DatabaseConfigHandle.MPU_MAG_SAMPLING_RATE)) {
            setMPU9X50MagSamplingRate(((Double) linkedHashMap.get(DatabaseConfigHandle.MPU_MAG_SAMPLING_RATE)).intValue());
        }
        parseCalibDetailsKinematicFromDb(linkedHashMap, this.mSensorIdGyro, getGyroRange(), DatabaseConfigHandle.LIST_OF_CALIB_HANDLES_GYRO, DatabaseConfigHandle.GYRO_CALIB_TIME);
    }

    public static String parseFromDBColumnToGUIChannel(String str) {
        return AbstractSensor.parseFromDBColumnToGUIChannel(mChannelMapRef, str);
    }

    public static String parseFromGUIChannelsToDBColumn(String str) {
        return AbstractSensor.parseFromGUIChannelsToDBColumn(mChannelMapRef, str);
    }
}
