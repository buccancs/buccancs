// Summary for: /mnt/c/dev/buccancs/external/ShimmerCapturePure/sources/com/shimmerresearch/verisense/sensors/SensorBattVoltageVerisense.java
// Size: 17833 bytes
// Modified: 2025-10-21 16:32:14.233999600 +0100

package com.shimmerresearch.verisense.sensors;

import com.google.logging.type.LogSeverity;
import com.shimmerresearch.driver.Configuration;
import com.shimmerresearch.driver.ObjectCluster;
import com.shimmerresearch.driver.ShimmerDevice;
import com.shimmerresearch.driverUtilities.ChannelDetails;
import com.shimmerresearch.driverUtilities.SensorDetails;
import com.shimmerresearch.driverUtilities.SensorDetailsRef;
import com.shimmerresearch.driverUtilities.SensorGroupingDetails;
import com.shimmerresearch.driverUtilities.UtilShimmer;
import com.shimmerresearch.sensors.AbstractSensor;
import com.shimmerresearch.sensors.SensorADC;
import com.shimmerresearch.sensors.SensorBattVoltage;
import com.shimmerresearch.verisense.VerisenseDevice;
import it.gerdavax.android.bluetooth.BluetoothDevice;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import kotlin.UByte$$ExternalSyntheticBackport0;

/* loaded from: classes2.dex */
public class SensorBattVoltageVerisense extends SensorBattVoltage {
    public static int ADC_BYTE_BUFFER_SIZE = 192;
    public static final ChannelDetails CHANNEL_CHARGER_STATE;
    public static final ChannelDetails CHANNEL_USB_CONNECTION_STATE;
    public static final SensorDetailsRef SENSOR_BATTERY_VOLTAGE_VERISENSE;
    public static final Map<Integer, SensorDetailsRef> SENSOR_MAP_REF_VERISENSE;
    private static final long serialVersionUID = -3662637648902741983L;
    private ADC_OVERSAMPLING_RATES adcOversamplingRate;
    private SensorADC.MICROCONTROLLER_ADC_PROPERTIES microcontrollerAdcProperties;
    private ADC_SAMPLING_RATES sensorSamplingRate;

    public static class ObjectClusterSensorNameVerisense {
        public static final String CHARGER_STATE = "Charger_State";
        public static final String USB_CONNECTION_STATE = "USB_Connection_State";
    }

    public ADC_OVERSAMPLING_RATES getAdcOversamplingRate() {
        return this.adcOversamplingRate;
    }

    public ADC_SAMPLING_RATES getSensorSamplingRate() {
        return this.sensorSamplingRate;
    }

    public void setAdcOversamplingRate(ADC_OVERSAMPLING_RATES adc_oversampling_rates) {
        this.adcOversamplingRate = adc_oversampling_rates;
    }

    public void setSensorSamplingRate(ADC_SAMPLING_RATES adc_sampling_rates) {
        this.sensorSamplingRate = adc_sampling_rates;
    }

    public enum ADC_SAMPLING_RATES implements ISensorConfig {
        OFF("Off", 0, Double.NaN, Integer.MIN_VALUE),
        FREQ_32768_0_HZ("32768.0 Hz", 1, 32768.0d, 1),
        FREQ_16384_0_HZ("16384.0 Hz", 2, 16384.0d, 2),
        FREQ_8192_0_HZ("8192.0 Hz", 3, 8192.0d, 4),
        FREQ_6553_6_HZ("6553.6 Hz", 4, 6553.6d, 5),
        FREQ_4096_0_HZ("4096.0 Hz", 5, 4096.0d, 8),
        FREQ_3276_8_HZ("3276.8 Hz", 6, 3276.8d, 10),
        FREQ_2048_0_HZ("2048.0 Hz", 7, 2048.0d, 16),
        FREQ_1638_4_HZ("1638.4 Hz", 8, 1638.4d, 20),
        FREQ_1310_72_HZ("1310.72 Hz", 9, 1310.72d, 25),
        FREQ_1024_0_HZ("1024.0 Hz", 10, 1024.0d, 32),
        FREQ_819_2_HZ("819.2 Hz", 11, 819.2d, 40),
        FREQ_655_36_HZ("655.36 Hz", 12, 655.36d, 50),
        FREQ_512_0_HZ("512.0 Hz", 13, 512.0d, 64),
        FREQ_409_6_HZ("409.6 Hz", 14, 409.6d, 80),
        FREQ_327_68_HZ("327.68 Hz", 15, 327.68d, 100),
        FREQ_256_0_HZ("256.0 Hz", 16, 256.0d, 128),
        FREQ_204_8_HZ("204.8 Hz", 17, 204.8d, 160),
        FREQ_163_84_HZ("163.84 Hz", 18, 163.84d, 200),
        FREQ_128_0_HZ("128.0 Hz", 19, 128.0d, 256),
        FREQ_102_4_HZ("102.4 Hz", 20, 102.4d, SensorMAX86XXX.MAX_FIFOS_IN_PAYLOAD_2_CHANNELS),
        FREQ_81_92_HZ("81.92 Hz", 21, 81.92d, 400),
        FREQ_64_0_HZ("64.0 Hz", 22, 64.0d, 512),
        FREQ_51_2_HZ("51.2 Hz", 23, 51.2d, 640),
        FREQ_40_96_HZ("40.96 Hz", 24, 40.96d, LogSeverity.EMERGENCY_VALUE),
        FREQ_32_0_HZ("32.0 Hz", 25, 32.0d, 1024),
        FREQ_25_6_HZ("25.6 Hz", 26, 25.6d, BluetoothDevice.BluetoothClasses.DEVICE_MAJOR_PERIPHERAL),
        FREQ_20_48_HZ("20.48 Hz", 27, 20.48d, 1600),
        FREQ_16_0_HZ("16.0 Hz", 28, 16.0d, 2048),
        FREQ_12_8_HZ("12.8 Hz", 29, 12.8d, 2560),
        FREQ_10_24_HZ("10.24 Hz", 30, 10.24d, 3200),
        FREQ_8_0_HZ("8.0 Hz", 31, 8.0d, 4096),
        FREQ_6_4_HZ("6.4 Hz", 32, 6.4d, 5120),
        FREQ_5_12_HZ("5.12 Hz", 33, 5.12d, 6400),
        FREQ_4_0_HZ("4.0 Hz", 34, 4.0d, 8192),
        FREQ_3_2_HZ("3.2 Hz", 35, 3.2d, 10240),
        FREQ_2_56_HZ("2.56 Hz", 36, 2.56d, 12800),
        FREQ_2_0_HZ("2.0 Hz", 37, 2.0d, 16384),
        FREQ_1_6_HZ("1.6 Hz", 38, 1.6d, 20480),
        FREQ_1_28_HZ("1.28 Hz", 39, 1.28d, 25600),
        FREQ_1_0_HZ("1.0 Hz", 40, 1.0d, 32768),
        FREQ_0_8_HZ("0.8 Hz", 41, 0.8d, 40960),
        FREQ_0_64_HZ("0.64 Hz", 42, 0.64d, 51200);

        static Map<Integer, ADC_SAMPLING_RATES> BY_CONFIG_VALUE = new HashMap();
        public int clockTicks;
        public int configValue;
        public double freqHz;
        private String label;

        public String getLabel() {
            return this.label;
        }

        static {
            for (ADC_SAMPLING_RATES adc_sampling_rates : values()) {
                BY_CONFIG_VALUE.put(Integer.valueOf(adc_sampling_rates.configValue), adc_sampling_rates);
            }
        }

        ADC_SAMPLING_RATES(String str, int i, double d, int i2) {
            this.label = str;
            this.configValue = i;
            this.freqHz = d;
            this.clockTicks = i2;
        }

        public static ADC_SAMPLING_RATES getConfigValueForFreq(double d) {
            List<ADC_SAMPLING_RATES> listAsList = Arrays.asList(values());
            Collections.reverse(listAsList);
            for (ADC_SAMPLING_RATES adc_sampling_rates : listAsList) {
                if (d <= adc_sampling_rates.freqHz) {
                    return adc_sampling_rates;
                }
            }
            return null;
        }

        public static ADC_SAMPLING_RATES getForConfigValue(int i) {
            return BY_CONFIG_VALUE.get(Integer.valueOf(UtilShimmer.nudgeInteger(i, OFF.configValue, FREQ_0_64_HZ.configValue)));
        }
    }

    public enum ADC_OVERSAMPLING_RATES implements ISensorConfig {
        DISABLED("Disabled", 0),
        X2("2x", 1),
        X4("4x", 2),
        X8("8x", 3),
        X16("16x", 4),
        X32("32x", 5),
        X64("64x", 6),
        X128("128x", 7),
        X256("256x", 8);

        static Map<Integer, ADC_OVERSAMPLING_RATES> BY_CONFIG_VALUE = new HashMap();
        public int clockTicks;
        public int configValue;
        public double freqHz;
        private String label;

        public String getLabel() {
            return this.label;
        }

        static {
            for (ADC_OVERSAMPLING_RATES adc_oversampling_rates : values()) {
                BY_CONFIG_VALUE.put(Integer.valueOf(adc_oversampling_rates.configValue), adc_oversampling_rates);
            }
        }

        ADC_OVERSAMPLING_RATES(String str, int i) {
            this.label = str;
            this.configValue = i;
        }

        public static ADC_OVERSAMPLING_RATES getForConfigValue(int i) {
            return BY_CONFIG_VALUE.get(Integer.valueOf(UtilShimmer.nudgeInteger(i, DISABLED.configValue, X256.configValue)));
        }
    }

    static {
        SensorDetailsRef sensorDetailsRef = new SensorDetailsRef(512L, 512L, "Battery Voltage", null, null, Arrays.asList(SensorBattVoltage.ObjectClusterSensorName.BATTERY, "Batt_Percentage", ObjectClusterSensorNameVerisense.USB_CONNECTION_STATE));
        SENSOR_BATTERY_VOLTAGE_VERISENSE = sensorDetailsRef;
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        linkedHashMap.put(Integer.valueOf(Configuration.Verisense.SENSOR_ID.VBATT), sensorDetailsRef);
        SENSOR_MAP_REF_VERISENSE = Collections.unmodifiableMap(linkedHashMap);
        CHANNEL_USB_CONNECTION_STATE = new ChannelDetails(ObjectClusterSensorNameVerisense.USB_CONNECTION_STATE, ObjectClusterSensorNameVerisense.USB_CONNECTION_STATE, ObjectClusterSensorNameVerisense.USB_CONNECTION_STATE, Configuration.CHANNEL_UNITS.NO_UNITS, Arrays.asList(ChannelDetails.CHANNEL_TYPE.CAL), true, false);
        CHANNEL_CHARGER_STATE = new ChannelDetails(ObjectClusterSensorNameVerisense.CHARGER_STATE, ObjectClusterSensorNameVerisense.CHARGER_STATE, ObjectClusterSensorNameVerisense.CHARGER_STATE, Configuration.CHANNEL_UNITS.NO_UNITS, Arrays.asList(ChannelDetails.CHANNEL_TYPE.CAL), true, false);
    }

    public SensorBattVoltageVerisense(ShimmerDevice shimmerDevice) {
        super(shimmerDevice);
        this.microcontrollerAdcProperties = null;
        this.sensorSamplingRate = ADC_SAMPLING_RATES.OFF;
        this.adcOversamplingRate = ADC_OVERSAMPLING_RATES.DISABLED;
        this.microcontrollerAdcProperties = SensorADC.MICROCONTROLLER_ADC_PROPERTIES.getMicrocontrollerAdcPropertiesForShimmerVersionObject(shimmerDevice.getShimmerVerObject());
    }

    @Override // com.shimmerresearch.sensors.SensorBattVoltage, com.shimmerresearch.sensors.AbstractSensor
    public void generateSensorMap() {
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        linkedHashMap.putAll(mChannelMapRef);
        if (this.mShimmerVerObject.getHardwareVersion() != 62) {
            linkedHashMap.remove("Batt_Percentage");
        }
        if (this.mShimmerDevice.getHardwareVersion() == 62) {
            linkedHashMap.put(ObjectClusterSensorNameVerisense.CHARGER_STATE, CHANNEL_CHARGER_STATE);
        } else {
            linkedHashMap.put(ObjectClusterSensorNameVerisense.USB_CONNECTION_STATE, CHANNEL_USB_CONNECTION_STATE);
        }
        super.createLocalSensorMapWithCustomParser(SENSOR_MAP_REF_VERISENSE, linkedHashMap);
    }

    @Override // com.shimmerresearch.sensors.SensorBattVoltage, com.shimmerresearch.sensors.AbstractSensor
    public ObjectCluster processDataCustom(SensorDetails sensorDetails, byte[] bArr, Configuration.COMMUNICATION_TYPE communication_type, ObjectCluster objectCluster, boolean z, double d) {
        sensorDetails.processDataCommon(bArr, communication_type, objectCluster, z, d);
        for (ChannelDetails channelDetails : sensorDetails.mListOfChannels) {
            if (channelDetails.mObjectClusterName.equals(SensorBattVoltage.ObjectClusterSensorName.BATTERY)) {
                int i = ((int) ObjectCluster.returnFormatCluster(objectCluster.getCollectionOfFormatClusters(channelDetails.mObjectClusterName), channelDetails.mChannelFormatDerivedFromShimmerDataPacket.toString()).mData) & 4095;
                double dCalibrateAdcChannelToMillivolts = SensorADC.calibrateAdcChannelToMillivolts(i, this.microcontrollerAdcProperties);
                if (this.mShimmerDevice.getShimmerVerObject().getHardwareVersion() == 62) {
                    getShimmerBattStatusDetails().setBattAdcValue(i);
                    dCalibrateAdcChannelToMillivolts *= 1.988d;
                }
                objectCluster.addCalData(channelDetails, dCalibrateAdcChannelToMillivolts, objectCluster.getIndexKeeper() - 1);
            } else if (channelDetails.mObjectClusterName.equals("Batt_Percentage")) {
                double estimatedChargePercentage = getShimmerBattStatusDetails().getEstimatedChargePercentage();
                if (!Double.isNaN(estimatedChargePercentage) && !Double.isInfinite(estimatedChargePercentage)) {
                    objectCluster.addCalData(channelDetails, estimatedChargePercentage);
                    objectCluster.incrementIndexKeeper();
                }
            } else if (channelDetails.mObjectClusterName.equals(ObjectClusterSensorNameVerisense.USB_CONNECTION_STATE) || channelDetails.mObjectClusterName.equals(ObjectClusterSensorNameVerisense.CHARGER_STATE)) {
                double d2 = ObjectCluster.returnFormatCluster(objectCluster.getCollectionOfFormatClusters(channelBattVolt.mObjectClusterName), channelBattVolt.mChannelFormatDerivedFromShimmerDataPacket.toString()).mData;
                if (channelDetails.mObjectClusterName.equals(ObjectClusterSensorNameVerisense.USB_CONNECTION_STATE)) {
                    objectCluster.addCalData(channelDetails, (((int) d2) >> 15) & 1);
                    objectCluster.incrementIndexKeeper();
                } else if (channelDetails.mObjectClusterName.equals(ObjectClusterSensorNameVerisense.CHARGER_STATE)) {
                    int i2 = (((int) d2) >> 13) & 3;
                    objectCluster.addCalData(channelDetails, i2);
                    objectCluster.incrementIndexKeeper();
                    getShimmerBattStatusDetails().setChargingStatus(i2);
                }
            }
        }
        return objectCluster;
    }

    @Override // com.shimmerresearch.sensors.SensorBattVoltage, com.shimmerresearch.sensors.AbstractSensor
    public void configBytesParse(ShimmerDevice shimmerDevice, byte[] bArr, Configuration.COMMUNICATION_TYPE communication_type) {
        ConfigByteLayoutVerisenseAdc configByteLayoutVerisenseAdc = new ConfigByteLayoutVerisenseAdc(shimmerDevice, communication_type);
        if (configByteLayoutVerisenseAdc.idxAdcRate >= 0) {
            setSensorSamplingRate(ADC_SAMPLING_RATES.getForConfigValue(bArr[configByteLayoutVerisenseAdc.idxAdcRate] & configByteLayoutVerisenseAdc.maskAdcRate));
        }
    }

    @Override // com.shimmerresearch.sensors.SensorBattVoltage, com.shimmerresearch.sensors.AbstractSensor
    public void configBytesGenerate(ShimmerDevice shimmerDevice, byte[] bArr, Configuration.COMMUNICATION_TYPE communication_type) {
        ConfigByteLayoutVerisenseAdc configByteLayoutVerisenseAdc = new ConfigByteLayoutVerisenseAdc(shimmerDevice, communication_type);
        if (configByteLayoutVerisenseAdc.idxAdcRate >= 0) {
            int i = configByteLayoutVerisenseAdc.idxAdcRate;
            bArr[i] = (byte) (bArr[i] & (~configByteLayoutVerisenseAdc.maskAdcRate));
            int i2 = configByteLayoutVerisenseAdc.idxAdcRate;
            bArr[i2] = (byte) (bArr[i2] | (configByteLayoutVerisenseAdc.maskAdcRate & ((byte) getSensorSamplingRate().configValue)));
        }
    }

    @Override // com.shimmerresearch.sensors.SensorBattVoltage, com.shimmerresearch.sensors.AbstractSensor
    public Object setConfigValueUsingConfigLabel(Integer num, String str, Object obj) {
        str.hashCode();
        if (str.equals(AbstractSensor.GuiLabelConfigCommon.RATE)) {
            setSensorSamplingRate(((Double) obj).doubleValue());
            return obj;
        }
        super.setConfigValueUsingConfigLabel(num, str, obj);
        return null;
    }

    @Override // com.shimmerresearch.sensors.SensorBattVoltage, com.shimmerresearch.sensors.AbstractSensor
    public Object getConfigValueUsingConfigLabel(Integer num, String str) {
        str.hashCode();
        if (str.equals(AbstractSensor.GuiLabelConfigCommon.RATE)) {
            return Double.valueOf(getSensorSamplingRateHz());
        }
        return super.getConfigValueUsingConfigLabel(num, str);
    }

    @Override // com.shimmerresearch.sensors.SensorBattVoltage, com.shimmerresearch.sensors.AbstractSensor
    public void setSensorSamplingRate(double d) {
        setSensorSamplingRate(ADC_SAMPLING_RATES.getConfigValueForFreq(d));
        super.setSensorSamplingRate(this.sensorSamplingRate.freqHz);
    }

    @Override // com.shimmerresearch.sensors.AbstractSensor
    public void setSamplingRateFromShimmer(double d) {
        if (UByte$$ExternalSyntheticBackport0.m38878m(d)) {
            setSensorSamplingRate(ADC_SAMPLING_RATES.getConfigValueForFreq(d));
            super.setSamplingRateFromShimmer(this.sensorSamplingRate.freqHz);
        }
    }

    public double getSensorSamplingRateHz() {
        return this.sensorSamplingRate.freqHz;
    }

    @Override // com.shimmerresearch.sensors.SensorBattVoltage, com.shimmerresearch.sensors.AbstractSensor
    public boolean setDefaultConfigForSensor(int i, boolean z) {
        if (!this.mSensorMap.containsKey(Integer.valueOf(i))) {
            return false;
        }
        if (z) {
            setSensorSamplingRate(ADC_SAMPLING_RATES.FREQ_51_2_HZ);
            return true;
        }
        setSensorSamplingRate(ADC_SAMPLING_RATES.OFF);
        return true;
    }

    @Override // com.shimmerresearch.sensors.SensorBattVoltage, com.shimmerresearch.sensors.AbstractSensor
    public void generateSensorGroupMapping() {
        int iOrdinal = Configuration.Verisense.LABEL_SENSOR_TILE.VBATT.ordinal();
        if (this.mShimmerVerObject.isShimmerGenVerisense()) {
            this.mSensorGroupingMap.put(Integer.valueOf(iOrdinal), new SensorGroupingDetails("Battery Voltage", Arrays.asList(Integer.valueOf(Configuration.Verisense.SENSOR_ID.VBATT)), Configuration.Verisense.CompatibilityInfoForMaps.listOfCompatibleVersionInfoVbatt));
        }
        super.updateSensorGroupingMap();
    }

    private class ConfigByteLayoutVerisenseAdc {
        public int idxAdcRate;
        public int maskAdcRate = 63;

        public ConfigByteLayoutVerisenseAdc(ShimmerDevice shimmerDevice, Configuration.COMMUNICATION_TYPE communication_type) {
            this.idxAdcRate = -1;
            if ((shimmerDevice instanceof VerisenseDevice) && ((VerisenseDevice) shimmerDevice).isPayloadDesignV12orAbove()) {
                if (communication_type == Configuration.COMMUNICATION_TYPE.SD) {
                    this.idxAdcRate = 24;
                } else {
                    this.idxAdcRate = 50;
                }
            }
        }
    }
}
