<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: src/ShimmerGrpcAndOJC.proto
//   Date: 2016-07-16 10:38:38

namespace shimmerGRPC {

  class HelloRequest extends \DrSlump\Protobuf\Message {

        public $name = null;
    

        protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'shimmerGRPC.HelloRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

        public function hasName(){
      return $this->_has(1);
    }
    
        public function clearName(){
      return $this->_clear(1);
    }
    
        public function getName(){
      return $this->_get(1);
    }
    
        public function setName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace shimmerGRPC {

  class HelloReply extends \DrSlump\Protobuf\Message {

        public $message = null;
    

        protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'shimmerGRPC.HelloReply');

      // OPTIONAL STRING message = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "message";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

        public function hasMessage(){
      return $this->_has(1);
    }
    
        public function clearMessage(){
      return $this->_clear(1);
    }
    
        public function getMessage(){
      return $this->_get(1);
    }
    
        public function setMessage( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace shimmerGRPC {

  class StreamRequest extends \DrSlump\Protobuf\Message {

        public $message = null;
    

        protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'shimmerGRPC.StreamRequest');

      // OPTIONAL STRING message = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "message";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

        public function hasMessage(){
      return $this->_has(1);
    }
    
        public function clearMessage(){
      return $this->_clear(1);
    }
    
        public function getMessage(){
      return $this->_get(1);
    }
    
        public function setMessage( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace shimmerGRPC\ObjectCluster2 {

  class CommunicationType extends \DrSlump\Protobuf\Enum {
    const BT = 0;
    const SD = 1;
    const Radio_802_15_4 = 2;
  }
}
namespace shimmerGRPC\ObjectCluster2\FormatCluster2 {

  class DataCluster2 extends \DrSlump\Protobuf\Message {

        public $unit = null;
    
        public $data = null;
    
        public $dataArray = array();
    

        protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'shimmerGRPC.ObjectCluster2.FormatCluster2.DataCluster2');

      // OPTIONAL STRING unit = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "unit";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE data = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "data";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED DOUBLE dataArray = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "dataArray";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

        public function hasUnit(){
      return $this->_has(1);
    }
    
        public function clearUnit(){
      return $this->_clear(1);
    }
    
        public function getUnit(){
      return $this->_get(1);
    }
    
        public function setUnit( $value){
      return $this->_set(1, $value);
    }
    
        public function hasData(){
      return $this->_has(2);
    }
    
        public function clearData(){
      return $this->_clear(2);
    }
    
        public function getData(){
      return $this->_get(2);
    }
    
        public function setData( $value){
      return $this->_set(2, $value);
    }
    
        public function hasDataArray(){
      return $this->_has(3);
    }
    
        public function clearDataArray(){
      return $this->_clear(3);
    }
    
        public function getDataArray($idx = NULL){
      return $this->_get(3, $idx);
    }
    
        public function setDataArray( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
        public function getDataArrayList(){
     return $this->_get(3);
    }
    
        public function addDataArray( $value){
     return $this->_add(3, $value);
    }
  }
}

namespace shimmerGRPC\ObjectCluster2\FormatCluster2 {

  class FormatMapEntry extends \DrSlump\Protobuf\Message {

        public $key = null;
    
        public $value = null;
    

        protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'shimmerGRPC.ObjectCluster2.FormatCluster2.FormatMapEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\shimmerGRPC\ObjectCluster2\FormatCluster2\DataCluster2';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

        public function hasKey(){
      return $this->_has(1);
    }
    
        public function clearKey(){
      return $this->_clear(1);
    }
    
        public function getKey(){
      return $this->_get(1);
    }
    
        public function setKey( $value){
      return $this->_set(1, $value);
    }
    
        public function hasValue(){
      return $this->_has(2);
    }
    
        public function clearValue(){
      return $this->_clear(2);
    }
    
        public function getValue(){
      return $this->_get(2);
    }
    
        public function setValue(\shimmerGRPC\ObjectCluster2\FormatCluster2\DataCluster2 $value){
      return $this->_set(2, $value);
    }
  }
}

namespace shimmerGRPC\ObjectCluster2 {

  class FormatCluster2 extends \DrSlump\Protobuf\Message {

        public $formatMap = array();
    

        protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'shimmerGRPC.ObjectCluster2.FormatCluster2');

      // REPEATED MESSAGE formatMap = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "formatMap";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\shimmerGRPC\ObjectCluster2\FormatCluster2\FormatMapEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

        public function hasFormatMap(){
      return $this->_has(1);
    }
    
        public function clearFormatMap(){
      return $this->_clear(1);
    }
    
        public function getFormatMap($idx = NULL){
      return $this->_get(1, $idx);
    }
    
        public function setFormatMap(\shimmerGRPC\ObjectCluster2\FormatCluster2\FormatMapEntry $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
        public function getFormatMapList(){
     return $this->_get(1);
    }
    
        public function addFormatMap(\shimmerGRPC\ObjectCluster2\FormatCluster2\FormatMapEntry $value){
     return $this->_add(1, $value);
    }
  }
}

namespace shimmerGRPC\ObjectCluster2 {

  class DataMapEntry extends \DrSlump\Protobuf\Message {

        public $key = null;
    
        public $value = null;
    

        protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'shimmerGRPC.ObjectCluster2.DataMapEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\shimmerGRPC\ObjectCluster2\FormatCluster2';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

        public function hasKey(){
      return $this->_has(1);
    }
    
        public function clearKey(){
      return $this->_clear(1);
    }
    
        public function getKey(){
      return $this->_get(1);
    }
    
        public function setKey( $value){
      return $this->_set(1, $value);
    }
    
        public function hasValue(){
      return $this->_has(2);
    }
    
        public function clearValue(){
      return $this->_clear(2);
    }
    
        public function getValue(){
      return $this->_get(2);
    }
    
        public function setValue(\shimmerGRPC\ObjectCluster2\FormatCluster2 $value){
      return $this->_set(2, $value);
    }
  }
}

namespace shimmerGRPC {

  class ObjectCluster2 extends \DrSlump\Protobuf\Message {

        public $name = null;
    
        public $bluetoothAddress = null;
    
        public $communicationType = null;
    
        public $dataMap = array();
    
        public $systemTime = null;
    
        public $calibratedTimeStamp = null;
    

        protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'shimmerGRPC.ObjectCluster2');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING bluetoothAddress = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "bluetoothAddress";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM communicationType = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "communicationType";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\shimmerGRPC\ObjectCluster2\CommunicationType';
      $descriptor->addField($f);

      // REPEATED MESSAGE dataMap = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "dataMap";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\shimmerGRPC\ObjectCluster2\DataMapEntry';
      $descriptor->addField($f);

      // OPTIONAL INT64 systemTime = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "systemTime";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE calibratedTimeStamp = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "calibratedTimeStamp";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

        public function hasName(){
      return $this->_has(1);
    }
    
        public function clearName(){
      return $this->_clear(1);
    }
    
        public function getName(){
      return $this->_get(1);
    }
    
        public function setName( $value){
      return $this->_set(1, $value);
    }
    
        public function hasBluetoothAddress(){
      return $this->_has(2);
    }
    
        public function clearBluetoothAddress(){
      return $this->_clear(2);
    }
    
        public function getBluetoothAddress(){
      return $this->_get(2);
    }
    
        public function setBluetoothAddress( $value){
      return $this->_set(2, $value);
    }
    
        public function hasCommunicationType(){
      return $this->_has(3);
    }
    
        public function clearCommunicationType(){
      return $this->_clear(3);
    }
    
        public function getCommunicationType(){
      return $this->_get(3);
    }
    
        public function setCommunicationType( $value){
      return $this->_set(3, $value);
    }
    
        public function hasDataMap(){
      return $this->_has(4);
    }
    
        public function clearDataMap(){
      return $this->_clear(4);
    }
    
        public function getDataMap($idx = NULL){
      return $this->_get(4, $idx);
    }
    
        public function setDataMap(\shimmerGRPC\ObjectCluster2\DataMapEntry $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
        public function getDataMapList(){
     return $this->_get(4);
    }
    
        public function addDataMap(\shimmerGRPC\ObjectCluster2\DataMapEntry $value){
     return $this->_add(4, $value);
    }
    
        public function hasSystemTime(){
      return $this->_has(5);
    }
    
        public function clearSystemTime(){
      return $this->_clear(5);
    }
    
        public function getSystemTime(){
      return $this->_get(5);
    }
    
        public function setSystemTime( $value){
      return $this->_set(5, $value);
    }
    
        public function hasCalibratedTimeStamp(){
      return $this->_has(6);
    }
    
        public function clearCalibratedTimeStamp(){
      return $this->_clear(6);
    }
    
        public function getCalibratedTimeStamp(){
      return $this->_get(6);
    }
    
        public function setCalibratedTimeStamp( $value){
      return $this->_set(6, $value);
    }
  }
}

