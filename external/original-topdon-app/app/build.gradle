plugins {
    id 'com.android.application'
    id 'kotlin-android'
    //id 'com.google.gms.google-services' // Firebase removed
    //id 'com.google.firebase.crashlytics' // Firebase removed
    id 'kotlin-kapt'
}

kapt {
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
    }
}

android {
    namespace 'com.csl.irCamera'
    compileSdk rootProject.ext.android.compileSdk
    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdk rootProject.ext.android.minSdk
        targetSdk rootProject.ext.android.targetSdk
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        ndkVersion rootProject.ext.android.ndkVersion
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        ndk {
            abiFilters "arm64-v8a"
        }

        buildConfigField "String", "VERSION_DATE", "\"$dayStr\""
        manifestPlaceholders = [
                JPUSH_PKGNAME: applicationId,
                JPUSH_APPKEY : "cbd4eafc9049d751fc5a8c58",
                JPUSH_CHANNEL: "developer-default",
        ]

        setProperty("archivesBaseName", "TC001-v${versionName}.google")
    }

    bundle {
        language {
            enableSplit = false
        }
    }

    buildFeatures {
        buildConfig = true
        viewBinding = false
    }

    /*
    signingConfigs {
        debug {
            storeFile file('artibox_key/ArtiBox.jks')
            keyAlias 'Artibox'
            storePassword 'artibox2017'
            keyPassword 'artibox2017'
        }
        release {
            storeFile file('artibox_key/ArtiBox.jks')
            keyAlias 'Artibox'
            storePassword 'artibox2017'
            keyPassword 'artibox2017'
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }
    */


    buildTypes {
        debug {
            //signingConfig signingConfigs.debug // Disabled - no keystore
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            //signingConfig signingConfigs.release // Disabled - no keystore
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    applicationVariants.all { variant ->
        versionApk(variant, defaultConfig)
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_21
        targetCompatibility JavaVersion.VERSION_21
    }
    kotlinOptions {
        jvmTarget = '21'
    }
    packagingOptions {
        merge 'META-INF/LICENSE-notice.md'
        merge 'META-INF/LICENSE.md'
        merge 'META-INF/proguard/androidx-annotations.pro'
        merge 'META-INF/proguard/coroutines.pro'
        pickFirst 'lib/x86/libc++_shared.so'
        pickFirst 'lib/x86_64/libc++_shared.so'
        pickFirst 'lib/arm64-v8a/libc++_shared.so'
        pickFirst 'lib/armeabi-v7a/libc++_shared.so'
        pickFirst 'META-INF/LICENSE.md'
        pickFirst 'META-INF/LICENSE-notice.md'
        pickFirst 'lib/arm64-v8a/libnative-window.so'
        pickFirst 'lib/armeabi-v7a/libnative-window.so'
        pickFirst 'lib/armeabi-v7a/libyuv.so'
        pickFirst 'lib/arm64-v8a/libyuv.so'
        pickFirst 'lib/armeabi-v7a/libopencv_java4.so'
        pickFirst 'lib/arm64-v8a/libopencv_java4.so'
        pickFirst 'lib/armeabi-v7a/libomp.so'
        pickFirst 'lib/arm64-v8a/libomp.so'
        pickFirst 'lib/arm64-v8a/liblog.so'
        pickFirst 'lib/armeabi-v7a/liblog.so'
        doNotStrip "**/*.so"
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        dataBinding = true
    }
    flavorDimensions 'app'

    productFlavors {
        dev {
            dimension 'app'
            buildConfigField "int", "ENV_TYPE", "0"
            buildConfigField("String", "SOFT_CODE", "\"${rootProject.ext.softCode.topInfrared}\"")
            buildConfigField("String", "APP_KEY", "\"${rootProject.ext.appKey.topInfrared}\"")
            buildConfigField("String", "APP_SECRET", "\"${rootProject.ext.appSecret.topInfrared}\"")
            manifestPlaceholders = [
                    app_name: "TopInfrared",
            ]
        }
        beta {
            dimension 'app'
            buildConfigField "int", "ENV_TYPE", "0"
            buildConfigField("String", "SOFT_CODE", "\"${rootProject.ext.softCode.topInfrared}\"")
            buildConfigField("String", "APP_KEY", "\"${rootProject.ext.appKey.topInfrared}\"")
            buildConfigField("String", "APP_SECRET", "\"${rootProject.ext.appSecret.topInfrared}\"")
            manifestPlaceholders = [
                    app_name: "IRCamera",
            ]
        }
        prod {
            dimension 'app'
            buildConfigField "int", "ENV_TYPE", "0"
            buildConfigField("String", "SOFT_CODE", "\"${rootProject.ext.softCode.topInfrared}\"")
            buildConfigField("String", "APP_KEY", "\"${rootProject.ext.appKey.topInfrared}\"")
            buildConfigField("String", "APP_SECRET", "\"${rootProject.ext.appSecret.topInfrared}\"")
            manifestPlaceholders = [
                    app_name: "IRCamera",
            ]
        }
        prodTopdon {
            dimension 'app'
            targetSdk 27
            buildConfigField "int", "ENV_TYPE", "0"
            buildConfigField("String", "SOFT_CODE", "\"${rootProject.ext.softCode.topInfrared10}\"")
            buildConfigField("String", "APP_KEY", "\"${rootProject.ext.appKey.topInfrared10}\"")
            buildConfigField("String", "APP_SECRET", "\"${rootProject.ext.appSecret.topInfrared10}\"")
            manifestPlaceholders = [
                    app_name: "IRCamera",
            ]
        }
        insideChina {
            dimension 'app'
            buildConfigField "int", "ENV_TYPE", "1"
            buildConfigField("String", "SOFT_CODE", "\"${rootProject.ext.softCode.topInfraredCN}\"")
            buildConfigField("String", "APP_KEY", "\"${rootProject.ext.appKey.topInfraredCN}\"")
            buildConfigField("String", "APP_SECRET", "\"${rootProject.ext.appSecret.topInfraredCN}\"")
            manifestPlaceholders = [
                    app_name: "热视界",
            ]
        }
        prodTopdonInsideChina {
            dimension 'app'
            targetSdk 27
            buildConfigField "int", "ENV_TYPE", "1"
            buildConfigField("String", "SOFT_CODE", "\"${rootProject.ext.softCode.topInfraredCN10}\"")
            buildConfigField("String", "APP_KEY", "\"${rootProject.ext.appKey.topInfraredCN10}\"")
            buildConfigField("String", "APP_SECRET", "\"${rootProject.ext.appSecret.topInfraredCN10}\"")
            versionCode rootProject.ext.android.versionCode + getYearStr().toInteger() * 10000
            manifestPlaceholders = [
                    app_name: "热视界",
            ]
        }
    }
}

static def getYearStr() {
    return new Date().format('yy')
}

static def getDayStr() {
    return new Date().format('yyMMdd')
}

static def getTimeStr() {
    return new Date().format('HHmm')
}

def versionApk(variant, defaultConfig) {
    variant.outputs.all {
        def appName = "TopInfrared.apk"
        def nameStr = "TopInfrared_" + defaultConfig.versionName + "." + dayStr
        if (variant.name == "devDebug") {
            appName = "TopInfrared-v" + defaultConfig.versionName + "-debug.apk"
        } else if (variant.name == "devRelease") {
            appName = nameStr + "-release.apk"
        } else if (variant.name == "betaDebug") {
            appName = nameStr + "_beta_debug.apk"
        } else if (variant.name == "betaRelease") {
            appName = nameStr + "_beta.apk"
        } else if (variant.name == "prodDebug") {
            appName = nameStr + "_debug.apk"
        } else if (variant.name == "prodRelease") {
            appName = nameStr + ".apk"
        } else if (variant.name == "prodTopdonDebug") {
            appName = "TopInfrared_Android10_" + defaultConfig.versionName + "." + dayStr + "_debug.apk"
        } else if (variant.name == "prodTopdonRelease") {
            appName = "TopInfrared_Android10_" + defaultConfig.versionName + "." + dayStr + ".apk"
        } else if (variant.name == "insideChinaDebug") {
            appName = nameStr + "_debug.apk"
        } else if (variant.name == "insideChinaRelease") {
            appName = nameStr + ".apk"
        } else if (variant.name == "prodTopdonInsideChinaDebug") {
            appName = nameStr + "_debug.apk"
        } else if (variant.name == "prodTopdonInsideChinaRelease") {
            appName = nameStr + ".apk"
        }
        outputFileName = appName
    }
}

def copyApk(type, flavor) {
    copy {
        from "build/outputs/apk/${flavor}/${type}"
        into "../outputs/${type}/"
        include '**/*.apk'
        rename { String fileName ->
            if (flavor.contains("Topdon")) {
                fileName.substring(0, fileName.lastIndexOf(".apk")) + '_build' + timeStr + '(Topdon).apk'
            } else {
                fileName.substring(0, fileName.lastIndexOf(".apk")) + '_build' + timeStr + '.apk'
            }
        }
    }
}

def copyAab(type) {
    copy {
        from "build/outputs/bundle/${type}"
        into "../outputs/bundle/${type}/"
        include '**/*.aab'
        rename { String fileName ->
            fileName.substring(0, fileName.lastIndexOf(".google")) + "." + dayStr + "_" + type + '_build' + timeStr + '.aab'
        }
    }
}

// project.afterEvaluate {
//     assembleProdDebug.doLast {
//         println "===================== build prod Debug.apk copy ========================="
//         copyApk("debug", "prod")
//     }
//     assembleProdRelease.doLast {
//         println "===================== build prod Release.apk copy ======================="
//         copyApk("release", "prod")
//     }
//     assembleProdTopdonDebug.doLast {
//         println "===================== build prod Debug.apk copy ========================="
//         copyApk("debug", "prodTopdon")
//     }
//     assembleProdTopdonRelease.doLast {
//         println "===================== build prod Release.apk copy ======================="
//         copyApk("release", "prodTopdon")
//     }
//     assembleBetaDebug.doLast {
//         println "===================== build beta Debug.apk copy ========================="
//         copyApk("debug", "beta")
//     }
//     assembleBetaRelease.doLast {
//         println "===================== build beta Release.apk copy ======================="
//         copyApk("release", "beta")
//     }
// 
//     assembleInsideChinaDebug.doLast {
//         println "===================== build beta Debug.apk copy ========================="
//         copyApk("debug", "insideChina")
//     }
//     assembleInsideChinaRelease.doLast {
//         println "===================== build beta Release.apk copy ======================="
//         copyApk("release", "insideChina")
//     }
//     assembleProdTopdonInsideChinaDebug.doLast {
//         println "===================== build beta Debug.apk copy ========================="
//         copyApk("debug", "prodTopdonInsideChina")
//     }
//     assembleProdTopdonInsideChinaRelease.doLast {
//         println "===================== build beta Release.apk copy ======================="
//         copyApk("release", "prodTopdonInsideChina")
//     }
//     bundleProdDebug.doLast {
//         println "===================== build prod Debug.aab copy ======================="
//         copyAab("prodDebug")
//     }
//     bundleProdRelease.doLast {
//         println "===================== build prod Release.aab copy ======================="
//         copyAab("prodRelease")
//     }
// 
// }

dependencies {
    implementation project(':component:pseudo')
    implementation project(':component:thermal-ir')
    implementation project(':component:thermal-lite')
    //implementation project(':component:thermal04') // Removed - different device (not TC001)
    //implementation project(':component:thermal07') // Removed - different device (not TC001)
    implementation project(':component:transfer')
    implementation project(':component:user')
    implementation project(':libapp')
    implementation project(':libcom')
    implementation project(':libir')
    implementation project(':libmenu')
    implementation project(':libui')

    kapt libs.arouter.compiler

    //     implementation libs.jsbridge // Web bridge not used
    implementation libs.fastjson
    implementation libs.ucrop
    //     implementation libs.app.update // Update feature removed
    implementation libs.immersionbar
    implementation libs.xpopup
    implementation libs.smartrefresh.kernel
    implementation libs.smartrefresh.header.classics
    implementation libs.wechat.sdk
    //     implementation libs.umeng // Analytics removed.apm
    //     implementation libs.mobilisten // Analytics removed
    //implementation platform(libs.firebase.bom) // Firebase removed
    //implementation libs.firebase.crashlytics.ktx // Firebase removed
    //implementation libs.firebase.analytics.ktx // Firebase removed
    //implementation libs.firebase.messaging // Firebase removed
    // implementation libs.firebase.iid // Deprecated, functionality moved to firebase-messaging

    //     implementation libs.umeng // Analytics removed.common.china
    //     implementation libs.umeng // Analytics removed.asms
}