TOPDON TC001 INTEGRATION OVERVIEW
---------------------------------
- Primary entry point lives in `app/src/main/java/com/topdon/tc001/app/App.kt`; `App` extends `BaseApplication` and calls `InitUtil.delayInit()` once the privacy gate is satisfied to bring up logging, LMS cloud, push, and USB receivers.
- The runtime feature modules that handle wired TC001 are `component/thermal-ir` (TC001 Plus/standard) and `component/thermal-lite` (TC001 Lite); both depend on shared core services from `libapp`, UI from `libui`, menus from `libmenu`, and infrared processing from `libir`.
- Navigation across feature screens uses Alibaba ARouter (see `app/src/main/java/com/topdon/tc001/MainActivity.kt` and `component/thermal-ir` routes), while process-wide state such as connection flags and calibration persists in `libapp`'s `SharedManager`.

USB DETECTION AND PERMISSION FLOW
---------------------------------
- `InitUtil.initReceiver()` (`app/src/main/java/com/topdon/tc001/InitUtil.kt`) registers `BaseApplication.usbObserver`, an instance of `DeviceBroadcastReceiver`.
- `DeviceBroadcastReceiver` (`libapp/src/main/java/com/topdon/lib/core/broadcast/DeviceBroadcastReceiver.kt`) listens to `UsbManager` attach/detach and the custom permission intent `ACTION_USB_PERMISSION`. When a TC001-class device is detected it calls `DeviceTools.isConnect()`; when permission is missing it posts `DevicePermissionEvent` via EventBus, and when connected it emits `DeviceConnectEvent`.
- `DeviceTools` (`libapp/src/main/java/com/topdon/lib/core/tools/DeviceTools.kt`) enumerates `UsbManager.deviceList`, classifies hardware using `DeviceConfig` vendor/product ids (TC001 IR core 0x0BDA/0x5830, dual module 0x0BDA/0x5840, Lite 13428/17185), and raises `DeviceConnectEvent` or `DevicePermissionEvent` over EventBus. It also differentiates Plus models by counting enumerated "USB Camera" devices to confirm the visible-light module.
- UI layers such as `MainFragment` (`app/src/main/java/com/topdon/tc001/fragment/MainFragment.kt`) and `IRThermalFragment` (`component/thermal-ir/src/main/java/com/topdon/module/thermal/ir/fragment/IRThermalFragment.kt`) subscribe to the events, update connection state, and trigger camera permission requests. `MainActivity` requests USB permission upon `DevicePermissionEvent` and auto-launches thermal capture when `DeviceConnectEvent` arrives.

THERMAL CAPTURE PIPELINE (TC001 PLUS/STD)
-----------------------------------------
- Core runtime class is `IRThermalPlusActivity` (`component/thermal-ir/.../IRThermalPlusActivity.kt`), which extends `BaseIRPlushActivity`; both ultimately inherit from `IRThermalNightActivity`.
- `BaseIRPlushActivity` (`component/thermal-ir/.../BaseIRPlushActivity.kt`) sets up dual-stream acquisition. It initializes `USBMonitorManager` from the vendor AAR (`com.infisense.usbdual.camera`) with IR product id 0x5830, registers as `OnUSBConnectListener`, and associates a `DualViewWithExternalCameraCommonApi` for synchronized IR/visible rendering.
- Vendor SDK APIs in use:
  - `com.energy.iruvc.ircmd.IRCMD` for low-level camera commands (shutter control, zoom, emissivity, calibration read/write).
  - `com.energy.iruvc.sdkisp.LibIRProcess` to convert YUYV frames to pseudo-color ARGB buffers (`onIrFrame` implementations).
  - `com.infisense.usbdual.camera.IRUVCDual` and `DualViewWithExternalCameraCommonApi` to bind preview surfaces, manage gain, fusion, and sensor alignment.
  - `com.infisense.usbir.utils.IRImageHelp` to apply pseudo colors, perform contour detection, and enforce custom palettes.
  - `com.example.suplib.wrapper.SupHelp` to toggle the vendor-provided "TISR" super-resolution (OpenCL accelerated) pipeline.
- Calibration and alignment:
  - `IRCmdTool` (`component/thermal-ir/.../IRCmdTool.kt`) reads OEM blocks via `IRCMD.oemRead`, extracts fusion offsets, persists manual adjustments (`SharedManager.getManualData`), and pushes updates back through `IRCMD.oemWrite` or `dualUVCCamera.setAlignTranslateParameter`.
  - Assets such as `dual_calibration_parameters2.bin` complement device-provided calibration data.
- Frame handling:
  - `BaseIRPlushActivity.onIrFrame` and overrides (e.g., `IRThermalPlusActivity.onIrFrame`) split incoming buffers into IR intensity and temperature maps, run vendor pseudo-color transforms, apply alarm overlays via `IRImageHelp`, and return ARGB frames for rendering on `TemperatureView`.
  - `VideoRecordFFmpeg` (component local) captures synchronized video by compositing the IR, visible, and overlay widgets.

THERMAL CAPTURE PIPELINE (TC001 LITE)
-------------------------------------
- `IRThermalLiteActivity` (`component/thermal-lite/.../IRThermalLiteActivity.kt`) targets the single-sensor Lite hardware identified in `DeviceTools.isTC001LiteConnect()`.
- Uses Lite-specific vendor SDKs from `com.energy.iruvccamera.usb` and `com.example.thermal_lite.camera` while keeping shared logic via inheritance from `BaseIRActivity` (in `component/thermal-ir`).
- Processes frames with `LibIRProcess`, handles temperature compensation through `LibIRTempAC020`, and maintains auto-shutter, emissivity, and pseudo-color settings compatible with the Plus workflow to simplify shared UI and preference handling.

EVENT AND STATE MANAGEMENT
--------------------------
- Greenrobot EventBus drives asynchronous communication: USB events (`DeviceConnectEvent`, `DevicePermissionEvent`), socket heartbeats, gallery updates, and calibration actions (`TS004ResetEvent`, `GalleryAddEvent`).
- Shared preferences wrappers in `libapp` (`SharedManager`, `SaveSettingUtil`) store device booleans (e.g., `hasTcLine`), fusion types, pseudocolor selections, and manual alignment offsets. This enables cross-module coordination without tight coupling.
- `BaseApplication` (`libapp/src/main/java/com/topdon/lib/core/BaseApplication.kt`) centralizes WebSocket handling for other devices (TS004, TC007) but also hosts the USB broadcast receiver, OTG tips, and global activity tracking used by TC001 screens.

SDK AND LIBRARY INVENTORY
-------------------------
- `libir` module bundles vendor AARs and native binaries critical to TC001:
  - `libusbdualsdk_1.3.4_2406271906_standard.aar` (dual UVC control, IRCMD bridge).
  - `opengl_1.3.2_standard.aar`, `suplib-release.aar`, `ai-upscale-release.aar`, `library_1.0.aar`, `jetified-tas_api-1.0.4.0.aar`, `texturegesture-release.aar`.
  - Native libs (`libopen3d.so`, `libopencv_java4.so`, `libSRImage.so`, `libc++_shared.so`, `liblog.so`) for image processing, OpenCV pipelines, and super-resolution.
- Additional runtime libraries referenced in `component/thermal-ir/build.gradle` and `app/build.gradle` include:
  - `com.infisense.usbdual` and `com.infisense.usbir` packages via bundled AARs.
  - `com.energy.iruvc` families for ISP, USB monitor, temperature math, and command control.
  - UI and navigation: ARouter, Lottie, EasySwipeMenuLayout, GSYVideoPlayer.
  - Logging via XLog, utilities via Blankj utilcode, permissions via `com.hjq.permissions`.
- BLE is defined in `BleModule`, but TC001 wired capture relies almost exclusively on USB and does not touch the BLE stack.

CLOUD AND SERVICE TOUCHPOINTS
-----------------------------
- LMS SDK (`com.topdon.lms.sdk`) initialized in `InitUtil.initLms()` manages authentication, privacy URLs, and remote configuration keyed by software code and environment.
- `HttpConfig` in `libapp` provides API hosts and secrets; TC001 uploads, report generation, and firmware checks route through repository classes (e.g., `ConfigRepository`, `GalleryRepository`) relying on `libapp` networking.
- Analytics/push (Firebase, UMeng, JPush) are wired in `InitUtil`, but optional in non-domestic builds. Zoho SalesIQ is bootstrapped by `App.initZoho()`.

KEY CLASSES AND RESPONSIBILITIES
--------------------------------
- `App` (`app/src/main/java/com/topdon/tc001/app/App.kt`) extends `BaseApplication`, bootstraps global services, and owns delayed initialization (`delayInit()`) invoked post-privacy acceptance.
- `MainActivity` (`app/src/main/java/com/topdon/tc001/MainActivity.kt`) hosts `ViewPager2` tabs, observes `DevicePermissionEvent`/`DeviceConnectEvent`, requests runtime permissions, and dispatches navigation to the thermal activities (`IRThermalNightActivity`, `IRThermalPlusActivity`, `IRThermalLiteActivity`).
- `MainFragment` (`app/src/main/java/com/topdon/tc001/fragment/MainFragment.kt`) is the landing dashboard listing wired and Wi-Fi devices; uses `DeviceTools.isConnect` plus `SharedManager` flags to update device cards and launch the appropriate ARouter route.
- `IRThermalNightActivity` (`component/thermal-ir/...`) is the base implementation for TC001 capture: handles toolbar actions, pseudo-color menus, measurement overlays, storage permissions, gallery integration, and delegates USB/ISP control to subclasses.
- `BaseIRPlushActivity` + `IRThermalPlusActivity` target the dual-sensor (Plus) hardware; they coordinate `USBMonitorManager`, `DualViewWithExternalCameraCommonApi`, and `IRCMD` to stream and render aligned IR/VL data while exposing hooks for UI toggles (fusion, zoom, gain, isothermal).
- `IRMonitorThermalFragment`, `IRMonitorCaptureFragment`, and related fragments under `component/thermal-ir/.../fragment` provide modular reusable widgets for capture, monitoring, and report workflows (region selection, history lists) while sharing core logic via `BaseFragment` and EventBus subscriptions.
- `IRThermalLiteActivity` (`component/thermal-lite/...`) mirrors the TC001 experience for the Lite SKU using Lite-specific camera controllers (`com.example.thermal_lite.camera`) while reusing shared UI components and settings.
- `DeviceTools`/`DeviceBroadcastReceiver` (in `libapp`) abstract USB enumeration, permission issuance, and device-specific heuristics (Plus vs Lite) so UI layers do not deal with raw `UsbManager` APIs.
- `SaveSettingUtil` (`libapp`) and `SaveSettingBean` (`libcom`) encapsulate persisted thermal preferences (fusion mode, DDE, pseudo palette, compass, alarms, target overlays) enabling both wired and Wi-Fi modules to reuse the same storage keys.
- `SharedManager` centralizes cross-feature flags (device presence, language selection, permissions granted, manual calibration offsets) and provides helper getters/setters for JSON blobs (custom pseudo palettes, car detection templates, report watermarks).

END-TO-END PIPELINES
--------------------
Connection and permission:
1. Android broadcasts (attach/detach) reach `DeviceBroadcastReceiver`, which classifies hardware via `DeviceConfig` and posts `DevicePermissionEvent` or `DeviceConnectEvent`.
2. `MainActivity` (and other subscribers) request permission with `DeviceTools.requestUsb`, then toggle UI state and auto-open thermal capture when a connection event arrives.
3. `IRThermalFragment` re-validates connection via `DeviceTools.isConnect` on resume, showing an OTG guidance dialog if the device is detected but lacks permission (USB 3.x on Android 10 flow).

Preview startup (Plus):
1. `IRThermalPlusActivity.onResume` calls `startUSB(false, false)` from `BaseIRPlushActivity`.
2. `BaseIRPlushActivity.initDevice` initializes `USBMonitorManager` with IR PID 0x5830, registers the activity as `OnUSBConnectListener`, and waits for callbacks.
3. On `OnUSBConnectListener.onConnect`, the handler spin-up triggers `USBMonitorManager.registerUSB()` to open the device and create `DualViewWithExternalCameraCommonApi`.
4. `USBMonitorManager` provides `IRCMD` via `onIRCMDInit`; the activity stores it and calls `setUVCCameraICMD`.
5. `startPreview` binds the IR stream to `TemperatureView` and the visible stream to `dualTextureViewNativeCamera`, starting `DualUVCCamera.startPreview`.
6. An internal handler triggers `startISP()`, which uses `LibIRProcess` and `IRImageHelp` to transform YUYV frames into ARGB pseudo color bitmaps, apply alarms, contours, and fusion overlays, then dispatch to the UI thread for rendering.

Preview startup (Lite):
1. `IRThermalLiteActivity` instantiates `IRUVCTC` (Lite vendor wrapper) with `USBMonitorCallback`.
2. In `ConnectCallback.onIRCMDCreate`, Lite-specific SDK classes (`LibIRTempAC020`, `DeviceIrcmdControlManager`) initialize gain, calibration, and temperature mapping.
3. `ImageThreadTC` handles frame conversion similarly to the Plus flow but with Lite texture sizes (256x384) and temperature separation.

Frame processing:
- Both Plus and Lite override `onIrFrame` to split raw buffers, run `LibIRProcess.convertYuyvMapToARGBPseudocolor`, apply `IRImageHelp` custom palettes, temperature alarms, and contour detection, then update `TemperatureView` overlays (spot, line, box). Frame-level telemetry (max/min, averages) feed measurement HUDs and event logs.
- Dual-mode updates toggle `dualUVCCamera.setDisp` (alignment slider) and `DualCameraParams.setImageRotate` when users manipulate orientation or alignment via touch controls (`thermal_steering_view`).
- Super-resolution toggles (`SupHelp.initA4KCPP`) rely on vendor OpenCL libs; they are gated via `SaveSettingUtil.isOpenAmplify`.

Capture and gallery:
1. Still capture uses `TemperatureView.drawToBitmap` plus overlay composition to build output bitmaps. Video capture uses `VideoRecordFFmpeg`, which composites IR, VL, temperature bars, and compass over time.
2. Saved artifacts go through `GalleryRepository` (in `libapp`) to persist metadata, update local media via `MediaScannerConnection`, and in some cases queue upload tasks.
3. `GalleryAddEvent` notifies fragments to refresh lists; `IRGalleryFragment` and `IRGalleryDetail01Activity` display snapshots and support editing.

Calibration and alignment:
- `IRCmdTool.getDualBytes` pulls `IRCMD.oemRead` data to recover calibration matrices and display offsets, merges with stored manual offsets retrieved from `SharedManager.getManualData`, and writes back if needed (`IRCMD.oemWrite`).
- Manual alignment UI (`thermal_steering_view`) triggers `IRCmdTool.setDisp` and `IRCmdTool.setAlignTranslate`, persisting adjustments through `SharedManager` so subsequent sessions apply the same translation.
- Shutter control (`IRCmdTool.shutter`, `IRCmdTool.autoShutter`) wraps vendor APIs for manual/automatic calibration, while DDE, emissivity, zoom, and isothermal functions expose numeric adjustments via `IRCMD.setPropTPDParams` and `DualUVCCamera` helpers.

SETTINGS AND STATE PERSISTENCE
------------------------------
- `SaveSettingUtil` (global singleton) targets wired workflows and uses `SPUtils` under the name `SaveSettingUtil` to persist booleans/ints/floats controlling measurement modes, pseudo color selections (`pseudoColorMode`), DDE levels, compass visibility, fusion types, alignment defaults (`rotateAngle`, `twoLightAlpha`), and textual metadata (report author/watermark).
- `SaveSettingBean` mirrors the same keys but can be instantiated per context (e.g., Wi-Fi module), allowing the same UI panels to operate on different preference namespaces (wired vs Wi-Fi). Activities/fragments read `saveSetBean` to drive toggle states and write back on user interactions.
- `SharedManager` spans cross-module and cross-device concerns: device presence flags (`hasTcLine`, `hasTS004`, `hasTC007`), language, privacy acceptance, permission states, manual alignment JSON, custom pseudo color JSON, and report templates. It also stores connection heuristics (e.g., `hotMode`, `changeDevice`) and measurement presets.
- UI widgets such as `thermal_recycler_night`, `temperature_seekbar`, `TipDialog` toggles, and measurement popups read/write through these managers to keep continuity between sessions and across different entry points (e.g., when entering from device dashboard vs gallery).
- Settings flows typically call `SaveSettingUtil` setters in response to UI events, then refresh immediate state (e.g., `thermal_recycler_night.setTwoLightSelected`, `TemperatureView.setPseudoColor`). For asynchronous writes (e.g., manual alignment), confirm persistence via `SharedManager` before invoking vendor SDK methods.

UI AND NAVIGATION FLOW
----------------------
- Launch path: `MainActivity` defaults to the center tab (`MainFragment`). Connecting TC001 flips `SharedManager.hasTcLine` and shows the wired device card. Tapping launches `RouterConfig.IR_MAIN`, which is mapped to `IRThermalFragment`.
- `IRThermalFragment` decides whether to start Plus or Lite activities based on `DeviceTools.isTC001PlusConnect()/isTC001LiteConnect()`; `tv_main_enter` opens `IRThermalPlusActivity`, while info dialogs (OTG, permissions) reference strings under `component/thermal-ir`.
- In-app menus expose report generation, pseudo color adjustments, measurement options, and device management. EventBus events synchronize toggles between fragments and activities (e.g., `ThermalActionEvent` updates region selection overlays).
- Secondary flows include `IRCorrectionActivity`/`IRCorrectionTwoActivity` for calibration routines, `ReportCreate` activities for PDF generation, and `IRMonitorThermalFragment` for live monitoring of TS004/TC001 streams in different contexts.

APPLICABILITY TO BUCCANCS
-------------------------
- USB detection, permission orchestration, and EventBus propagation (`DeviceTools`, `DeviceBroadcastReceiver`, `DeviceConnectEvent`) can be ported directly; Buccancs should mirror vendor/product ID checks and EventBus publishing to remain compatible with the vendor SDK requirement for `UsbManager` permissions.
- The thermal runtime stack (`component/thermal-ir`, `component/thermal-lite`, `libir` AARs) encapsulates all vendor APIs for TC001 capture. Reusing these modules or translating their logic into Compose/MVVM layers will require including the same AARs and native libs under Buccancs' Gradle modules.
- Calibration helpers (`IRCmdTool`, `SharedManager` alignment storage, `dual_calibration_parameters2.bin`) are necessary for proper fusion alignment on Plus hardware and should be migrated as-is or wrapped.
- UI logic references many legacy XML widgets; for Buccancs (Jetpack Compose target) we can treat these activities/fragments as reference implementations while re-implementing UI, but the underlying controllers (`BaseIRPlushActivity`, `IRThermalNightActivity`, `IRThermalLiteActivity`) remain the authoritative integration points with the SDK.
- Cloud dependencies (LMS, report upload) may or may not be needed; Buccancs must decide whether to integrate `com.topdon.lms.sdk` and associated services or replace them with internal equivalents.
- Features specific to other devices (TS004 Wi-Fi, TC007) can be ignored unless Buccancs intends to support them; ensure any reused managers disable unnecessary WebSocket flows if only TC001 is targeted.

PORTING NOTES AND RISKS
-----------------------
- The vendor SDKs are packaged as opaque AAR/so files; Buccancs must respect their initialization order (USB monitor init before preview, `IRCMD` available before calling `IRCmdTool`) and include ABI matching libs (`armeabi-v7a`, `arm64-v8a`).
- Large portions of `component/thermal-ir` rely on synthetic view bindings (`kotlinx.android.synthetic`) and deprecated tooling; when porting, watch for lifecycle nuances (manual handler threads, delayed jobs) and migrate to modern APIs.
- Super-resolution (`SupHelp`) depends on OpenCL availability. When moving to Buccancs ensure the OpenCL binaries in `libir/libs` are packaged and the app requests the right permissions.
- EventBus is pervasive; Buccancs may choose to replace it with flows, but all vendor callbacks expect these broadcasts to update state. Plan a compatibility layer if refactoring.
- The existing app assumes legacy storage permissions (`WRITE_EXTERNAL_STORAGE`); Buccancs should modernize to scoped storage but ensure vendor SDKs can write gallery assets.
