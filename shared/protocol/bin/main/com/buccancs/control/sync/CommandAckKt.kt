// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: sync/control.proto

// Generated files should ignore deprecation warnings
@file:Suppress(
    "DEPRECATION"
)

package com.buccancs.control.sync

@kotlin.jvm.JvmName(
    "-initializecommandAck"
)
public inline fun commandAck(
    block: com.buccancs.control.sync.CommandAckKt.Dsl.() -> kotlin.Unit
): com.buccancs.control.sync.CommandAck =
    com.buccancs.control.sync.CommandAckKt.Dsl._create(
        com.buccancs.control.sync.CommandAck.newBuilder()
    )
        .apply { block() }
        ._build()

/**
 * Protobuf type `com.buccancs.control.sync.CommandAck`
 */
public object CommandAckKt {
    @kotlin.OptIn(
        com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class
    )
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
        private val _builder: com.buccancs.control.sync.CommandAck.Builder
    ) {
        public companion object {
            @kotlin.jvm.JvmSynthetic
            @kotlin.PublishedApi
            internal fun _create(
                builder: com.buccancs.control.sync.CommandAck.Builder
            ): Dsl =
                Dsl(builder)
        }

        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _build(): com.buccancs.control.sync.CommandAck =
            _builder.build()

        /**
         * `string command_id = 1;`
         */
        public var commandId: kotlin.String
            get() = _builder.getCommandId()
            set(value) {
                _builder.setCommandId(
                    value
                )
            }

        /**
         * `string command_id = 1;`
         */
        public fun clearCommandId() {
            _builder.clearCommandId()
        }

        /**
         * `bool accepted = 2;`
         */
        public var accepted: kotlin.Boolean
            get() = _builder.getAccepted()
            set(value) {
                _builder.setAccepted(
                    value
                )
            }

        /**
         * `bool accepted = 2;`
         */
        public fun clearAccepted() {
            _builder.clearAccepted()
        }

        /**
         * `string reason = 3;`
         */
        public var reason: kotlin.String
            get() = _builder.getReason()
            set(value) {
                _builder.setReason(
                    value
                )
            }

        /**
         * `string reason = 3;`
         */
        public fun clearReason() {
            _builder.clearReason()
        }
    }
}

@kotlin.jvm.JvmSynthetic
public inline fun com.buccancs.control.sync.CommandAck.copy(
    block: `com.buccancs.control.sync`.CommandAckKt.Dsl.() -> kotlin.Unit
): com.buccancs.control.sync.CommandAck =
    `com.buccancs.control.sync`.CommandAckKt.Dsl._create(
        this.toBuilder()
    )
        .apply { block() }
        ._build()

